[
    {
        "id": "e0124708805f5d32",
        "type": "tab",
        "label": "BUFFER",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "9f9f048f5359ff58",
        "type": "tab",
        "label": "ArameBras",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "3781966928a5301c",
        "type": "tab",
        "label": "BRF",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "770249581d809dbd",
        "type": "tab",
        "label": "Complaser",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "62737f754ac7d56d",
        "type": "tab",
        "label": "Kondustec",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "dae82ca7554ded9f",
        "type": "tab",
        "label": "Martia√ßo",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "d67cea8fca67c9ff",
        "type": "tab",
        "label": "MedFio",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "dea5fa223d05d26c",
        "type": "tab",
        "label": "MethalCompany",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "e5f4d5044aacbfd5",
        "type": "tab",
        "label": "MHC",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "1aa85fb228e5b40e",
        "type": "tab",
        "label": "Motherson",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "17483b32655ddc5d",
        "type": "tab",
        "label": "SHIFTS",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "f6f2187d.f17ca8",
        "type": "tab",
        "label": "Webhook API v3",
        "disabled": false,
        "info": ""
    },
    {
        "id": "771cf37830c66e56",
        "type": "tab",
        "label": "Webhook API v3",
        "disabled": false,
        "info": ""
    },
    {
        "id": "a5842f27a7cf81f9",
        "type": "tab",
        "label": "PHD",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "9e63d76909e751c0",
        "type": "tab",
        "label": "TEST ANDON",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "4762ff7b32c2f9fc",
        "type": "tab",
        "label": "Webhook API v3",
        "disabled": false,
        "info": ""
    },
    {
        "id": "cd837e6a23717c9a",
        "type": "tab",
        "label": "Command connect",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "73bb6fdef0db8780",
        "type": "subflow",
        "name": "JWT Authentication",
        "info": "",
        "category": "",
        "in": [],
        "out": [],
        "env": [
            {
                "name": "NODE_RED_NODE_JWT_SECRET",
                "type": "str",
                "value": "verySECRETstring"
            }
        ],
        "meta": {},
        "color": "#DDAA99",
        "icon": "font-awesome/fa-key"
    },
    {
        "id": "ae46eb5e838c057e",
        "type": "subflow",
        "name": "Call persistence API",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 80,
                "y": 120,
                "wires": [
                    {
                        "id": "d9c3b85f2735864b"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1720,
                "y": 120,
                "wires": [
                    {
                        "id": "b598323adafb27c9",
                        "port": 0
                    }
                ]
            },
            {
                "x": 1720,
                "y": 420,
                "wires": [
                    {
                        "id": "49db4f6f746671e3",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "b12925e3996954d8",
        "type": "subflow",
        "name": "JWT Authentication (2)",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 80,
                "wires": [
                    {
                        "id": "0acb1b52d8eef14b"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 400,
                "y": 80,
                "wires": [
                    {
                        "id": "0acb1b52d8eef14b",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "NODE_RED_NODE_JWT_SECRET",
                "type": "str",
                "value": "verySECRETstring"
            }
        ],
        "meta": {},
        "color": "#DDAA99",
        "icon": "font-awesome/fa-key"
    },
    {
        "id": "c76f167c66e3dca1",
        "type": "subflow",
        "name": "Call persistence API (2)",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 80,
                "y": 120,
                "wires": [
                    {
                        "id": "4bcd4cf1b112c129"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1720,
                "y": 120,
                "wires": [
                    {
                        "id": "5ff1107256a27c28",
                        "port": 0
                    }
                ]
            },
            {
                "x": 1720,
                "y": 420,
                "wires": [
                    {
                        "id": "4becce651c1819b5",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "3bea64048e815156",
        "type": "group",
        "z": "f6f2187d.f17ca8",
        "name": "/webhook/v1",
        "style": {
            "label": true,
            "fill-opacity": "0.5"
        },
        "nodes": [
            "d3941e127837eabd"
        ],
        "x": 28,
        "y": 453
    },
    {
        "id": "c2ec46e94fc72b30",
        "type": "group",
        "z": "f6f2187d.f17ca8",
        "name": "HTTP Responses",
        "style": {
            "label": true,
            "fill-opacity": "0.5"
        },
        "nodes": [
            "bcc7e641a87a1184",
            "f69d58fc0135846a",
            "4f590ef245febf9c",
            "90e505fbf0725ca0",
            "1a6259e91b4b9f7d"
        ],
        "x": 3554,
        "y": 579
    },
    {
        "id": "07d88271bd018e00",
        "type": "group",
        "z": "f6f2187d.f17ca8",
        "name": "Generic JSON Payloads",
        "style": {
            "fill-opacity": "0.5",
            "label": true
        },
        "nodes": [
            "dd727701459b9650",
            "4d9de2aab81b5202",
            "a5b12826a02d3424",
            "fdc517c4b65f7063",
            "b4b4aee9e4db9b20"
        ],
        "x": 3234,
        "y": 899
    },
    {
        "id": "658c19db6e6cc354",
        "type": "group",
        "z": "f6f2187d.f17ca8",
        "name": "Validation pipeline",
        "style": {
            "fill-opacity": "0.5",
            "label": true
        },
        "nodes": [
            "5306d4147b56399e",
            "97aa4b76ed175951"
        ],
        "x": 788,
        "y": 513
    },
    {
        "id": "438b31b8da5a94c1",
        "type": "group",
        "z": "f6f2187d.f17ca8",
        "name": "Authentication",
        "style": {
            "label": true
        },
        "nodes": [
            "b153c4d4c0d00386",
            "afd459afd745ff04"
        ],
        "x": 494,
        "y": 539
    },
    {
        "id": "cb338ab959082eb2",
        "type": "group",
        "z": "f6f2187d.f17ca8",
        "name": "Actions",
        "style": {
            "label": true
        },
        "nodes": [
            "35e1756a1fb158ff",
            "24928d29a2a86f3e",
            "297b0b64352cda08",
            "d852751c5ca4cd3e",
            "ae6c2a2db7cdf441"
        ],
        "x": 1674,
        "y": 393
    },
    {
        "id": "88067639c6ab6312",
        "type": "group",
        "z": "f6f2187d.f17ca8",
        "name": "Mandatory Environment Variables",
        "style": {
            "label": true
        },
        "nodes": [
            "d1ee6ae2907281d1",
            "fd7051215660be3f"
        ],
        "x": 34,
        "y": 319
    },
    {
        "id": "2e0892c4b28f1ec4",
        "type": "group",
        "z": "ae46eb5e838c057e",
        "name": "",
        "style": {
            "label": true
        },
        "nodes": [
            "d78c0f2f75d97eb7",
            "b598323adafb27c9",
            "e7feab74691f03c7"
        ],
        "x": 934,
        "y": 79
    },
    {
        "id": "0c2f1acc102569b7",
        "type": "group",
        "z": "ae46eb5e838c057e",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "c12163c6a63c6b50",
            "8ec6c85e6d84b769",
            "49db4f6f746671e3",
            "7fb726549c0ded45"
        ],
        "x": 254,
        "y": 339
    },
    {
        "id": "e1f8e7d0736ad03e",
        "type": "group",
        "z": "771cf37830c66e56",
        "name": "/webhook/v1",
        "style": {
            "label": true,
            "fill-opacity": "0.5"
        },
        "nodes": [
            "86b4d748eeb9b927"
        ],
        "x": 28,
        "y": 453
    },
    {
        "id": "46788ed54d2a1669",
        "type": "group",
        "z": "771cf37830c66e56",
        "name": "HTTP Responses",
        "style": {
            "label": true,
            "fill-opacity": "0.5"
        },
        "nodes": [
            "100551c3597bd8fd",
            "1bb6f83de904cdad",
            "4e111dee0c2f5db5",
            "d5320dc7763d8037",
            "a12990ed076b7f97"
        ],
        "x": 3554,
        "y": 579
    },
    {
        "id": "dff91a4c02dc3763",
        "type": "group",
        "z": "771cf37830c66e56",
        "name": "Generic JSON Payloads",
        "style": {
            "fill-opacity": "0.5",
            "label": true
        },
        "nodes": [
            "2ab671b44026891e",
            "0fdfe0a60b9489fc",
            "f26110473f629fb7",
            "b73f773e04a035b8",
            "6042e1270e34f016"
        ],
        "x": 3234,
        "y": 899
    },
    {
        "id": "b742de3119fced39",
        "type": "group",
        "z": "771cf37830c66e56",
        "name": "Validation pipeline",
        "style": {
            "fill-opacity": "0.5",
            "label": true
        },
        "nodes": [
            "634fe665dcefe5b5",
            "2d52830535b42bd9"
        ],
        "x": 788,
        "y": 513
    },
    {
        "id": "f19920b58a1906a1",
        "type": "group",
        "z": "771cf37830c66e56",
        "name": "Authentication",
        "style": {
            "label": true
        },
        "nodes": [
            "7567d9a62dfd5b45"
        ],
        "x": 494,
        "y": 579
    },
    {
        "id": "9fb2174aa5c036be",
        "type": "group",
        "z": "771cf37830c66e56",
        "name": "Actions",
        "style": {
            "label": true
        },
        "nodes": [
            "2e91c481be4b2987",
            "6fe02ea50ce402cc",
            "6905b9a20a2c21fc",
            "94ffb2d3c186e3d5",
            "1e528dde1c4b1c21"
        ],
        "x": 1674,
        "y": 393
    },
    {
        "id": "1c3ce4717ad9b10b",
        "type": "group",
        "z": "771cf37830c66e56",
        "name": "Mandatory Environment Variables",
        "style": {
            "label": true
        },
        "nodes": [
            "cb6e1a425ba98144",
            "3b08bc45b5f541dd"
        ],
        "x": 34,
        "y": 319
    },
    {
        "id": "6db49b1e054914d1",
        "type": "group",
        "z": "4762ff7b32c2f9fc",
        "name": "/webhook/v1",
        "style": {
            "label": true,
            "fill-opacity": "0.5"
        },
        "nodes": [
            "d4136210be7f26e7"
        ],
        "x": 28,
        "y": 453
    },
    {
        "id": "f6dccf1123184f31",
        "type": "group",
        "z": "4762ff7b32c2f9fc",
        "name": "HTTP Responses",
        "style": {
            "label": true,
            "fill-opacity": "0.5"
        },
        "nodes": [
            "1513fdaa3e3df5c2",
            "f8e31e8f0a26a710",
            "15290bc95a34fb96",
            "0b590b00638415b2",
            "3fa77088706b548d"
        ],
        "x": 3554,
        "y": 579
    },
    {
        "id": "6ef5ef6339223e26",
        "type": "group",
        "z": "4762ff7b32c2f9fc",
        "name": "Generic JSON Payloads",
        "style": {
            "fill-opacity": "0.5",
            "label": true
        },
        "nodes": [
            "81ce6cb85cad8ea9",
            "f5a2b1298379ac57",
            "2e0558429cc01a8c",
            "268217b6ef11ef56",
            "1026eb58da379e22"
        ],
        "x": 3234,
        "y": 899
    },
    {
        "id": "b336ca8fa892d8ed",
        "type": "group",
        "z": "4762ff7b32c2f9fc",
        "name": "Validation pipeline",
        "style": {
            "fill-opacity": "0.5",
            "label": true
        },
        "nodes": [
            "289153cb79826932",
            "c05a683deb1ad894"
        ],
        "x": 788,
        "y": 513
    },
    {
        "id": "f9f2551875ea2f87",
        "type": "group",
        "z": "4762ff7b32c2f9fc",
        "name": "Authentication",
        "style": {
            "label": true
        },
        "nodes": [
            "4a1bbabeeff4b222",
            "2564fc1665ce6e41"
        ],
        "x": 484,
        "y": 539
    },
    {
        "id": "a7e9fe99c2162763",
        "type": "group",
        "z": "4762ff7b32c2f9fc",
        "name": "Actions",
        "style": {
            "label": true
        },
        "nodes": [
            "1e38f16104306020",
            "77828d33eb2b4cdb",
            "4bb8caa646b580a2",
            "03b1f19ad8fd8c95",
            "16d94731402c2d8d"
        ],
        "x": 1674,
        "y": 393
    },
    {
        "id": "d190b448fcffd4a2",
        "type": "group",
        "z": "4762ff7b32c2f9fc",
        "name": "Mandatory Environment Variables",
        "style": {
            "label": true
        },
        "nodes": [
            "d54a1c0bd0e61651",
            "a0eaaba646f8aca0"
        ],
        "x": 34,
        "y": 319
    },
    {
        "id": "87fc6f2e2e43b4f6",
        "type": "group",
        "z": "c76f167c66e3dca1",
        "name": "",
        "style": {
            "label": true
        },
        "nodes": [
            "5b77e8eae80d230b",
            "5ff1107256a27c28",
            "2c13ca493f06b9b7"
        ],
        "x": 934,
        "y": 79
    },
    {
        "id": "5fd1412cc7a5db6a",
        "type": "group",
        "z": "c76f167c66e3dca1",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "730408c5ef316003",
            "651afd6e129484ca",
            "4becce651c1819b5",
            "ac2880f5336611f0"
        ],
        "x": 254,
        "y": 339
    },
    {
        "id": "20661b39c28121f8",
        "type": "group",
        "z": "9e63d76909e751c0",
        "name": "Webhook",
        "style": {
            "stroke": "#3f3f3f",
            "label": true
        },
        "nodes": [
            "3cb2838f163d6b13"
        ],
        "x": 54,
        "y": 279
    },
    {
        "id": "60d5e3d6c074894c",
        "type": "group",
        "z": "9e63d76909e751c0",
        "name": "Authentication pipeline",
        "style": {
            "stroke": "#3f3f3f",
            "label": true
        },
        "nodes": [
            "07d7f489dc5e9189",
            "3de82b364a2a8a19",
            "5ad890a517dedadc"
        ],
        "x": 314,
        "y": 279
    },
    {
        "id": "1981219878135463",
        "type": "group",
        "z": "9e63d76909e751c0",
        "name": "Validation JSON",
        "style": {
            "label": true,
            "stroke": "#3f3f3f"
        },
        "nodes": [
            "0a24e8b45e3f25bf",
            "0caed1eb562ec9a7"
        ],
        "x": 654,
        "y": 319
    },
    {
        "id": "b335e9bce9cc6575",
        "type": "group",
        "z": "9e63d76909e751c0",
        "name": "Responses",
        "style": {
            "stroke": "#3f3f3f",
            "label": true
        },
        "nodes": [
            "1b10477f92541d68",
            "5af965f78b7908ad",
            "6d82899aa9e2cee1"
        ],
        "x": 1714,
        "y": 399
    },
    {
        "id": "3afa9948f24cc0e7",
        "type": "group",
        "z": "9e63d76909e751c0",
        "name": "Build Command",
        "style": {
            "stroke": "#3f3f3f",
            "label": true
        },
        "nodes": [
            "665fce6412a20ef8"
        ],
        "x": 1194,
        "y": 319
    },
    {
        "id": "efb385fc4bb2033f",
        "type": "group",
        "z": "9e63d76909e751c0",
        "name": "Startup routines",
        "style": {
            "label": true
        },
        "nodes": [
            "2a96187087c093cd",
            "5508f513728513ef"
        ],
        "x": 54,
        "y": 19
    },
    {
        "id": "b8027651ad23ffb5",
        "type": "group",
        "z": "9e63d76909e751c0",
        "name": "Cron jobs",
        "style": {
            "label": true
        },
        "nodes": [
            "8985da47525bb613",
            "d4ac334c64be2f2b",
            "f19f96805686e24a"
        ],
        "x": 614,
        "y": 19
    },
    {
        "id": "cd40f52dcce06be2",
        "type": "group",
        "z": "9e63d76909e751c0",
        "name": "setting global variables",
        "style": {
            "stroke": "#3f3f3f",
            "label": true
        },
        "nodes": [
            "9df8454d931fd727"
        ],
        "x": 874,
        "y": 319
    },
    {
        "id": "a6b74c7345723192",
        "type": "group",
        "z": "9e63d76909e751c0",
        "name": "Send message",
        "style": {
            "stroke": "#3f3f3f",
            "label": true
        },
        "nodes": [
            "15d29deb09278cfd"
        ],
        "x": 1494,
        "y": 319
    },
    {
        "id": "e60c541e47049c4c",
        "type": "group",
        "z": "9f9f048f5359ff58",
        "name": "TRELI√áAS",
        "style": {
            "stroke": "#3f3f3f",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "cf498a7a19d38843",
            "e2ac976ca1a12778",
            "53781a2224e33651",
            "b7e1dea426efe8d9",
            "6afa319f05acaf5e",
            "d74086fc6524a0ff",
            "e32f7057b867ab47",
            "c82ec0ee263231cd",
            "af4afa71f2c98cdb",
            "6256c69457d56dae",
            "e5e77768249e2a1f",
            "da1a90e9a9d40865",
            "67c1fe26d71bab12",
            "598b0d0225cda7b1",
            "d400af21f414722e"
        ],
        "x": 214,
        "y": 599
    },
    {
        "id": "edb435885b485c1b",
        "type": "group",
        "z": "dae82ca7554ded9f",
        "name": "TRUMPF",
        "style": {
            "label": true,
            "stroke": "#3f3f3f"
        },
        "nodes": [
            "acad990562a6c976",
            "7ecce1edb433222f",
            "a2389853d4a5a64f",
            "6e6aed97e9528f0a",
            "90eb652fbba5bc42",
            "1ee314371cb56c1c",
            "37c27966cf6e8024",
            "d7c876326fa322be",
            "ce48c90b08b472ba",
            "153ff338219f3494",
            "a998276a6798e165"
        ],
        "x": 2214,
        "y": 619
    },
    {
        "id": "ee168877431e79e5",
        "type": "group",
        "z": "d67cea8fca67c9ff",
        "name": "Try send",
        "style": {
            "stroke": "#000000",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "d5f5c68b812fb125",
            "5c2d70f9b738e8e4",
            "311d3a90f2ea45ab",
            "f533b7856155ca06"
        ],
        "x": 114,
        "y": 1139
    },
    {
        "id": "adf119f5a755d0fc",
        "type": "group",
        "z": "d67cea8fca67c9ff",
        "name": "Get count",
        "style": {
            "stroke": "#000000",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "887ac7113c9d6558"
        ],
        "x": 114,
        "y": 1039
    },
    {
        "id": "319b7172e1fdd35f",
        "type": "group",
        "z": "d67cea8fca67c9ff",
        "name": "Entufadora",
        "style": {
            "stroke": "#3f3f3f",
            "label": true
        },
        "nodes": [
            "67bbdde0d7fcdf38",
            "2e956ba13e82985b",
            "e581c91616246ca2",
            "b104fd013e73bedb",
            "94cf94b292b46154",
            "47672d3b5ef17365"
        ],
        "x": 354,
        "y": 399
    },
    {
        "id": "de687bd569ea88fb",
        "type": "group",
        "z": "d67cea8fca67c9ff",
        "name": "Embobinadora",
        "style": {
            "label": true,
            "stroke": "#3f3f3f"
        },
        "nodes": [
            "f48e5fc6e1606d11",
            "0f31585e3bd2a93b",
            "eca2a861bfb79177",
            "36801d507a869f72",
            "c81e793c6b16e15e",
            "0a4a8975c243afa4"
        ],
        "x": 354,
        "y": 539
    },
    {
        "id": "a294c877d7b97aa7",
        "type": "group",
        "z": "dae82ca7554ded9f",
        "name": "MOTORES - TEMPO",
        "style": {
            "stroke": "#3f3f3f",
            "label": true
        },
        "nodes": [
            "afbb7d7e0eeaec11",
            "8287664ce5f49fc0",
            "2b8795a58f6c76e6",
            "f73d3e2f4c95a063"
        ],
        "x": 2774,
        "y": 439
    },
    {
        "id": "a8c9be450c8ed0a2",
        "type": "group",
        "z": "dae82ca7554ded9f",
        "name": "DOBRADEIRA GASPARINI",
        "style": {
            "stroke": "#3f3f3f",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "95bbbc898fecc315",
            "2928747db6078971",
            "d3e528e94a71a65f",
            "1b367fa786dad70d",
            "01aa7482b11081d6",
            "1545eab98142b977",
            "61e70b31740bd500"
        ],
        "x": 2774,
        "y": 1299
    },
    {
        "id": "26bc699e753da8b8",
        "type": "group",
        "z": "dae82ca7554ded9f",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "27edc96b3f9037b1",
            "affb936954c5199a",
            "122d95c6460ea164",
            "30b18d0b8235bccc",
            "bca3fdcf3ab3b559",
            "a40f583b08908b42",
            "7c05f735d5fb1fe1"
        ],
        "x": 2814,
        "y": 2999
    },
    {
        "id": "1ec4d17b255d0492",
        "type": "group",
        "z": "dae82ca7554ded9f",
        "name": "USINAGEM",
        "style": {
            "stroke": "#000000",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "32648941924fb975",
            "bb3bad6416cee5ef",
            "023b8937453d1649",
            "785b5ea46503e637",
            "f35098cd611cebb4",
            "f4487c67175593b4",
            "ae362b8d0740b8a8",
            "dbf134252df13b56",
            "ef7bf7c449af8be3",
            "3ac09b457be35964"
        ],
        "x": 2714,
        "y": 4056.5
    },
    {
        "id": "2eb75b0a5b4d8a7d",
        "type": "group",
        "z": "e0124708805f5d32",
        "name": "Validation MSG Buffer",
        "style": {
            "stroke": "#000000",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "44fef607f4abec5d",
            "c05095c8f2c0a30d",
            "da990bac79dd84da",
            "e254a146c839e783"
        ],
        "x": 174,
        "y": 19,
        "w": 772,
        "h": 82
    },
    {
        "id": "cbd24abd8eb65b09",
        "type": "group",
        "z": "e0124708805f5d32",
        "name": "Get MSG's buffer",
        "style": {
            "stroke": "#000000",
            "label": true,
            "color": "#3f3f3f"
        },
        "nodes": [
            "12ba5d216d316a15",
            "bd9527d5ebf0baab",
            "a916850bc5cb309f"
        ],
        "x": 1154,
        "y": 19,
        "w": 442,
        "h": 82
    },
    {
        "id": "4eb84101d497e18a",
        "type": "group",
        "z": "e0124708805f5d32",
        "name": "Try send",
        "style": {
            "stroke": "#000000",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "075b8d731d8cce9a",
            "78c1664a40f49c79",
            "fa773e8d33484037",
            "f243b890429f95de"
        ],
        "x": 144,
        "y": 2119,
        "w": 982,
        "h": 82
    },
    {
        "id": "d3a77f11570b08a7",
        "type": "group",
        "z": "e0124708805f5d32",
        "name": "Get count",
        "style": {
            "stroke": "#000000",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "387b8485c8eea636"
        ],
        "x": 154,
        "y": 2239,
        "w": 212,
        "h": 82
    },
    {
        "id": "d3941e127837eabd",
        "type": "group",
        "z": "f6f2187d.f17ca8",
        "g": "3bea64048e815156",
        "name": "Webhook endpoints",
        "style": {
            "label": true
        },
        "nodes": [
            "5425e2fc9ac80fe2",
            "0e856f7803dcede8",
            "d6632f51a61d956f",
            "df8dda1b1af98ed4"
        ],
        "x": 54,
        "y": 479
    },
    {
        "id": "5306d4147b56399e",
        "type": "group",
        "z": "f6f2187d.f17ca8",
        "g": "658c19db6e6cc354",
        "name": "Request body",
        "style": {
            "label": true
        },
        "nodes": [
            "ad404357b34483e0",
            "faaf7701c69097e8",
            "2d317fe1d5f769d5",
            "40369c33cfa39f7e",
            "54fb3c028a42d5c8",
            "10c4d8da13b52538"
        ],
        "x": 1174,
        "y": 539
    },
    {
        "id": "97aa4b76ed175951",
        "type": "group",
        "z": "f6f2187d.f17ca8",
        "g": "658c19db6e6cc354",
        "name": "Device ID",
        "style": {
            "label": true
        },
        "nodes": [
            "1a143078b4d30a9f",
            "bd3747c8283806b1",
            "3224a9f1cfaae7ac",
            "7dd809f95f0822f3"
        ],
        "x": 814,
        "y": 539
    },
    {
        "id": "24928d29a2a86f3e",
        "type": "group",
        "z": "f6f2187d.f17ca8",
        "g": "cb338ab959082eb2",
        "name": "Increment count",
        "style": {
            "label": true
        },
        "nodes": [
            "5c53615e3fe49dcb",
            "afe6ae57ae3f6352",
            "3be5194972a48850"
        ],
        "x": 2094,
        "y": 419
    },
    {
        "id": "297b0b64352cda08",
        "type": "group",
        "z": "f6f2187d.f17ca8",
        "g": "cb338ab959082eb2",
        "name": "Status update",
        "style": {
            "label": true
        },
        "nodes": [
            "7034fc0e0bc8f8aa",
            "707f7d38ec941403",
            "61cf3d43ba12830a"
        ],
        "x": 2068,
        "y": 513
    },
    {
        "id": "86b4d748eeb9b927",
        "type": "group",
        "z": "771cf37830c66e56",
        "g": "e1f8e7d0736ad03e",
        "name": "Webhook endpoints",
        "style": {
            "label": true
        },
        "nodes": [
            "abf1e8de73c04d14",
            "68d19865b0bf2fb9",
            "5d46a635b1cabd88",
            "039f145c8966af9b"
        ],
        "x": 54,
        "y": 479
    },
    {
        "id": "634fe665dcefe5b5",
        "type": "group",
        "z": "771cf37830c66e56",
        "g": "b742de3119fced39",
        "name": "Request body",
        "style": {
            "label": true
        },
        "nodes": [
            "a8e9d66bd1b94d3e",
            "651b42792cca81f6",
            "ed2e551edce22a89",
            "deb864a72a3c47f0",
            "5b9c5ba91f07a5e0",
            "5fb6748436a70778"
        ],
        "x": 1174,
        "y": 539
    },
    {
        "id": "2d52830535b42bd9",
        "type": "group",
        "z": "771cf37830c66e56",
        "g": "b742de3119fced39",
        "name": "Device ID",
        "style": {
            "label": true
        },
        "nodes": [
            "1374916417af0ee0",
            "642038d6772a3a28",
            "f7f543a318803dca",
            "47f3cab5c1c72dfe"
        ],
        "x": 814,
        "y": 539
    },
    {
        "id": "6fe02ea50ce402cc",
        "type": "group",
        "z": "771cf37830c66e56",
        "g": "9fb2174aa5c036be",
        "name": "Increment count",
        "style": {
            "label": true
        },
        "nodes": [
            "267b80f15a370763",
            "7767e9608943a5e3"
        ],
        "x": 2094,
        "y": 419
    },
    {
        "id": "6905b9a20a2c21fc",
        "type": "group",
        "z": "771cf37830c66e56",
        "g": "9fb2174aa5c036be",
        "name": "Status update",
        "style": {
            "label": true
        },
        "nodes": [
            "a25102050b9ce0fc",
            "cd6329195dd77f66",
            "077ae6d33434b42f"
        ],
        "x": 2068,
        "y": 513
    },
    {
        "id": "d4136210be7f26e7",
        "type": "group",
        "z": "4762ff7b32c2f9fc",
        "g": "6db49b1e054914d1",
        "name": "Webhook endpoints",
        "style": {
            "label": true
        },
        "nodes": [
            "6c29d9c51d27c904",
            "b8ab4ef9dd5c8807",
            "5595b363c1f7060b",
            "3f09733528733122"
        ],
        "x": 54,
        "y": 479
    },
    {
        "id": "289153cb79826932",
        "type": "group",
        "z": "4762ff7b32c2f9fc",
        "g": "b336ca8fa892d8ed",
        "name": "Request body",
        "style": {
            "label": true
        },
        "nodes": [
            "68acd4644d422b0c",
            "1556ef70818b9863",
            "80620faaac847eaf",
            "b4d30256264beada",
            "aaf154e6cbf12903",
            "dbfdbf3abf005a53"
        ],
        "x": 1174,
        "y": 539
    },
    {
        "id": "c05a683deb1ad894",
        "type": "group",
        "z": "4762ff7b32c2f9fc",
        "g": "b336ca8fa892d8ed",
        "name": "Device ID",
        "style": {
            "label": true
        },
        "nodes": [
            "cc3dde2a0cf6bd47",
            "2795c0ea2f223f90",
            "319a96386914fc0a",
            "361f9f85be3f56b6"
        ],
        "x": 814,
        "y": 539
    },
    {
        "id": "77828d33eb2b4cdb",
        "type": "group",
        "z": "4762ff7b32c2f9fc",
        "g": "a7e9fe99c2162763",
        "name": "Increment count",
        "style": {
            "label": true
        },
        "nodes": [
            "de404bfbcd692c8b",
            "e3d5739e6bd8f6fe",
            "fad31237f8a5c312"
        ],
        "x": 2094,
        "y": 419
    },
    {
        "id": "4bb8caa646b580a2",
        "type": "group",
        "z": "4762ff7b32c2f9fc",
        "g": "a7e9fe99c2162763",
        "name": "Status update",
        "style": {
            "label": true
        },
        "nodes": [
            "ce354d8f251986a1",
            "575fdccf35e31e69",
            "77ee3bc662804598"
        ],
        "x": 2068,
        "y": 513
    },
    {
        "id": "7034fc0e0bc8f8aa",
        "type": "group",
        "z": "f6f2187d.f17ca8",
        "g": "297b0b64352cda08",
        "name": "Activity",
        "style": {
            "label": true
        },
        "nodes": [
            "45c3cfcde8a48b8f",
            "2d5c43ea3b0e6447",
            "2dc80c3fa796cfee"
        ],
        "x": 2094,
        "y": 539
    },
    {
        "id": "707f7d38ec941403",
        "type": "group",
        "z": "f6f2187d.f17ca8",
        "g": "297b0b64352cda08",
        "name": "Power",
        "style": {
            "label": true
        },
        "nodes": [
            "1c45e7fcb7af3836",
            "1db62fb941fa921c",
            "089f5d7c6adefbc6"
        ],
        "x": 2094,
        "y": 639
    },
    {
        "id": "61cf3d43ba12830a",
        "type": "group",
        "z": "f6f2187d.f17ca8",
        "g": "297b0b64352cda08",
        "name": "Connectivity",
        "style": {
            "label": true
        },
        "nodes": [
            "e3ed0fb3bd9a6f7b",
            "cc192a7324a5abe8",
            "30a73b0eb45dbc73"
        ],
        "x": 2094,
        "y": 739
    },
    {
        "id": "a25102050b9ce0fc",
        "type": "group",
        "z": "771cf37830c66e56",
        "g": "6905b9a20a2c21fc",
        "name": "Activity",
        "style": {
            "label": true
        },
        "nodes": [
            "726e05c6ecd9c717",
            "438d8ce56d1f0946"
        ],
        "x": 2094,
        "y": 539
    },
    {
        "id": "cd6329195dd77f66",
        "type": "group",
        "z": "771cf37830c66e56",
        "g": "6905b9a20a2c21fc",
        "name": "Power",
        "style": {
            "label": true
        },
        "nodes": [
            "3c2d3825b2420f5f",
            "b403434a03e60f1a"
        ],
        "x": 2094,
        "y": 639
    },
    {
        "id": "077ae6d33434b42f",
        "type": "group",
        "z": "771cf37830c66e56",
        "g": "6905b9a20a2c21fc",
        "name": "Connectivity",
        "style": {
            "label": true
        },
        "nodes": [
            "e1c754f31719f1f1",
            "a651a27cc866c709"
        ],
        "x": 2094,
        "y": 739
    },
    {
        "id": "ce354d8f251986a1",
        "type": "group",
        "z": "4762ff7b32c2f9fc",
        "g": "4bb8caa646b580a2",
        "name": "Activity",
        "style": {
            "label": true
        },
        "nodes": [
            "9848b30c6cc37c4e",
            "60a2cd5655bf4f9e",
            "63c248922b2c091b"
        ],
        "x": 2094,
        "y": 539
    },
    {
        "id": "575fdccf35e31e69",
        "type": "group",
        "z": "4762ff7b32c2f9fc",
        "g": "4bb8caa646b580a2",
        "name": "Power",
        "style": {
            "label": true
        },
        "nodes": [
            "75fb61e4eca59f33",
            "fbd43f75d30b6f39",
            "388cd89f4067e0f5"
        ],
        "x": 2094,
        "y": 639
    },
    {
        "id": "77ee3bc662804598",
        "type": "group",
        "z": "4762ff7b32c2f9fc",
        "g": "4bb8caa646b580a2",
        "name": "Connectivity",
        "style": {
            "label": true
        },
        "nodes": [
            "3b2dab8cee4f3213",
            "c562eb97ef83943f",
            "e0de9252f5f80175"
        ],
        "x": 2094,
        "y": 739
    },
    {
        "id": "e2fa71664ad6266c",
        "type": "junction",
        "z": "f6f2187d.f17ca8",
        "x": 1000,
        "y": 1020,
        "wires": [
            [
                "a5b12826a02d3424"
            ]
        ]
    },
    {
        "id": "edc270ab510e978b",
        "type": "junction",
        "z": "f6f2187d.f17ca8",
        "x": 3120,
        "y": 620,
        "wires": [
            [
                "bcc7e641a87a1184"
            ]
        ]
    },
    {
        "id": "5dbed2ecc24cf6cc",
        "type": "junction",
        "z": "f6f2187d.f17ca8",
        "x": 2180,
        "y": 1060,
        "wires": [
            [
                "fdc517c4b65f7063"
            ]
        ]
    },
    {
        "id": "fe13ce69c64e7dc5",
        "type": "junction",
        "z": "f6f2187d.f17ca8",
        "x": 1320,
        "y": 1060,
        "wires": [
            [
                "5dbed2ecc24cf6cc"
            ]
        ]
    },
    {
        "id": "1c21e327a94e498b",
        "type": "junction",
        "z": "f6f2187d.f17ca8",
        "x": 2440,
        "y": 980,
        "wires": [
            [
                "4d9de2aab81b5202"
            ]
        ]
    },
    {
        "id": "c72bad5bdb8fb13b",
        "type": "junction",
        "z": "f6f2187d.f17ca8",
        "x": 1580,
        "y": 980,
        "wires": [
            [
                "1c21e327a94e498b"
            ]
        ]
    },
    {
        "id": "6416b66687d8f195",
        "type": "junction",
        "z": "f6f2187d.f17ca8",
        "x": 3120,
        "y": 1100,
        "wires": [
            [
                "b4b4aee9e4db9b20"
            ]
        ]
    },
    {
        "id": "ceaf8d1b96e18297",
        "type": "junction",
        "z": "771cf37830c66e56",
        "x": 1000,
        "y": 1020,
        "wires": [
            [
                "f26110473f629fb7"
            ]
        ]
    },
    {
        "id": "f702b3795940d391",
        "type": "junction",
        "z": "771cf37830c66e56",
        "x": 3120,
        "y": 620,
        "wires": [
            [
                "100551c3597bd8fd"
            ]
        ]
    },
    {
        "id": "4b0737f4bf193311",
        "type": "junction",
        "z": "771cf37830c66e56",
        "x": 2180,
        "y": 1060,
        "wires": [
            [
                "b73f773e04a035b8"
            ]
        ]
    },
    {
        "id": "8dcfe6e0fed15678",
        "type": "junction",
        "z": "771cf37830c66e56",
        "x": 1320,
        "y": 1060,
        "wires": [
            [
                "4b0737f4bf193311"
            ]
        ]
    },
    {
        "id": "9701d3fbebdcfbcf",
        "type": "junction",
        "z": "771cf37830c66e56",
        "x": 2440,
        "y": 980,
        "wires": [
            [
                "0fdfe0a60b9489fc"
            ]
        ]
    },
    {
        "id": "99de7fa9e0b4b6e6",
        "type": "junction",
        "z": "771cf37830c66e56",
        "x": 1580,
        "y": 980,
        "wires": [
            [
                "9701d3fbebdcfbcf"
            ]
        ]
    },
    {
        "id": "6f0623e24c0936de",
        "type": "junction",
        "z": "771cf37830c66e56",
        "x": 3120,
        "y": 1100,
        "wires": [
            [
                "6042e1270e34f016"
            ]
        ]
    },
    {
        "id": "711eb5d353be7a6c",
        "type": "junction",
        "z": "4762ff7b32c2f9fc",
        "x": 1000,
        "y": 1020,
        "wires": [
            [
                "2e0558429cc01a8c"
            ]
        ]
    },
    {
        "id": "1860e7333d15bc73",
        "type": "junction",
        "z": "4762ff7b32c2f9fc",
        "x": 3120,
        "y": 620,
        "wires": [
            [
                "1513fdaa3e3df5c2"
            ]
        ]
    },
    {
        "id": "c459f306b1da4ed0",
        "type": "junction",
        "z": "4762ff7b32c2f9fc",
        "x": 2180,
        "y": 1060,
        "wires": [
            [
                "268217b6ef11ef56"
            ]
        ]
    },
    {
        "id": "7a249f17af41fa84",
        "type": "junction",
        "z": "4762ff7b32c2f9fc",
        "x": 1320,
        "y": 1060,
        "wires": [
            [
                "c459f306b1da4ed0"
            ]
        ]
    },
    {
        "id": "afc8b525b6a8f395",
        "type": "junction",
        "z": "4762ff7b32c2f9fc",
        "x": 2440,
        "y": 980,
        "wires": [
            [
                "f5a2b1298379ac57"
            ]
        ]
    },
    {
        "id": "11458e9c1256b4b1",
        "type": "junction",
        "z": "4762ff7b32c2f9fc",
        "x": 1580,
        "y": 980,
        "wires": [
            [
                "afc8b525b6a8f395"
            ]
        ]
    },
    {
        "id": "5ed7cc2f52949ddf",
        "type": "junction",
        "z": "4762ff7b32c2f9fc",
        "x": 3120,
        "y": 1100,
        "wires": [
            [
                "1026eb58da379e22"
            ]
        ]
    },
    {
        "id": "37117ff33adb025c",
        "type": "junction",
        "z": "9e63d76909e751c0",
        "x": 700,
        "y": 520,
        "wires": [
            [
                "2490a7e72ca2e96b"
            ]
        ]
    },
    {
        "id": "e1168ae39a7cdec0",
        "type": "junction",
        "z": "9e63d76909e751c0",
        "x": 940,
        "y": 480,
        "wires": [
            [
                "03e4db51ea4da6da"
            ]
        ]
    },
    {
        "id": "b5f9b78f0b82a530",
        "type": "junction",
        "z": "9e63d76909e751c0",
        "x": 1540,
        "y": 440,
        "wires": [
            [
                "5af965f78b7908ad"
            ]
        ]
    },
    {
        "id": "67c1fe26d71bab12",
        "type": "junction",
        "z": "9f9f048f5359ff58",
        "g": "e60c541e47049c4c",
        "x": 1500,
        "y": 740,
        "wires": [
            [
                "af4afa71f2c98cdb"
            ]
        ]
    },
    {
        "id": "9adfc785edd39ed1",
        "type": "junction",
        "z": "dea5fa223d05d26c",
        "x": 1480,
        "y": 3500,
        "wires": [
            [
                "8941b85d68efb2c5"
            ]
        ]
    },
    {
        "id": "2f71ec5dc3fbe2ed",
        "type": "junction",
        "z": "dea5fa223d05d26c",
        "x": 1440,
        "y": 3620,
        "wires": [
            [
                "cfb4c65d06da8f2d"
            ]
        ]
    },
    {
        "id": "f2ec544c1ccfa9d6",
        "type": "junction",
        "z": "dea5fa223d05d26c",
        "x": 780,
        "y": 3840,
        "wires": [
            [
                "abfaab5567f89349"
            ]
        ]
    },
    {
        "id": "ea351cd2fdb91711",
        "type": "junction",
        "z": "dae82ca7554ded9f",
        "x": 1380,
        "y": 7680,
        "wires": [
            [
                "03a30d7630fd6b98"
            ]
        ]
    },
    {
        "id": "d400af21f414722e",
        "type": "junction",
        "z": "9f9f048f5359ff58",
        "g": "e60c541e47049c4c",
        "x": 1460,
        "y": 640,
        "wires": [
            [
                "b7e1dea426efe8d9"
            ]
        ]
    },
    {
        "id": "450ddc22498ad845",
        "type": "junction",
        "z": "9f9f048f5359ff58",
        "x": 1240,
        "y": 1020,
        "wires": [
            [
                "c57db2ec75f3292c"
            ]
        ]
    },
    {
        "id": "11fb36f79b8874c8",
        "type": "junction",
        "z": "62737f754ac7d56d",
        "x": 1640,
        "y": 1020,
        "wires": [
            [
                "536fc91aedcf58b5"
            ]
        ]
    },
    {
        "id": "c925689c5fc246b4",
        "type": "junction",
        "z": "dae82ca7554ded9f",
        "x": 3680,
        "y": 160,
        "wires": [
            [
                "a0b1d40b69d1d8a8"
            ]
        ]
    },
    {
        "id": "4e436697fccb982b",
        "type": "junction",
        "z": "dae82ca7554ded9f",
        "x": 1300,
        "y": 3200,
        "wires": [
            [
                "2d84c65cccbce9db"
            ]
        ]
    },
    {
        "id": "47672d3b5ef17365",
        "type": "junction",
        "z": "d67cea8fca67c9ff",
        "g": "319b7172e1fdd35f",
        "x": 840,
        "y": 440,
        "wires": [
            [
                "b104fd013e73bedb"
            ]
        ]
    },
    {
        "id": "6554f1d8ac3e0c71",
        "type": "junction",
        "z": "dea5fa223d05d26c",
        "x": 3640,
        "y": 340,
        "wires": [
            [
                "4c5cda586cc89166"
            ]
        ]
    },
    {
        "id": "153ff338219f3494",
        "type": "junction",
        "z": "dae82ca7554ded9f",
        "g": "edb435885b485c1b",
        "x": 3340,
        "y": 700,
        "wires": [
            [
                "37c27966cf6e8024"
            ]
        ]
    },
    {
        "id": "0a4a8975c243afa4",
        "type": "junction",
        "z": "d67cea8fca67c9ff",
        "g": "de687bd569ea88fb",
        "x": 840,
        "y": 580,
        "wires": [
            [
                "36801d507a869f72"
            ]
        ]
    },
    {
        "id": "61e70b31740bd500",
        "type": "junction",
        "z": "dae82ca7554ded9f",
        "g": "a8c9be450c8ed0a2",
        "x": 3540,
        "y": 1340,
        "wires": [
            [
                "01aa7482b11081d6"
            ]
        ]
    },
    {
        "id": "3cb198afcc4c3da7",
        "type": "junction",
        "z": "dae82ca7554ded9f",
        "x": 3660,
        "y": 2160,
        "wires": [
            [
                "924ffa927be3291e"
            ]
        ]
    },
    {
        "id": "f7ab9b566748139c",
        "type": "junction",
        "z": "1aa85fb228e5b40e",
        "x": 1600,
        "y": 700,
        "wires": [
            [
                "e4fdbafb4e901240"
            ]
        ]
    },
    {
        "id": "113c2e821c4a54fc",
        "type": "junction",
        "z": "dea5fa223d05d26c",
        "x": 3760,
        "y": 840,
        "wires": [
            [
                "ad38790dd8b128c2"
            ]
        ]
    },
    {
        "id": "b1466c264ceef184",
        "type": "junction",
        "z": "dae82ca7554ded9f",
        "x": 3300,
        "y": 2440,
        "wires": [
            [
                "47846f0a28fc78df"
            ]
        ]
    },
    {
        "id": "0c6de030f2145a78",
        "type": "junction",
        "z": "dea5fa223d05d26c",
        "x": 3580,
        "y": 1200,
        "wires": [
            [
                "96f0ec3af8fbf1d6"
            ]
        ]
    },
    {
        "id": "7c05f735d5fb1fe1",
        "type": "junction",
        "z": "dae82ca7554ded9f",
        "g": "26bc699e753da8b8",
        "x": 3520,
        "y": 3040,
        "wires": [
            [
                "bca3fdcf3ab3b559"
            ]
        ]
    },
    {
        "id": "084d1c1990cd659c",
        "type": "junction",
        "z": "770249581d809dbd",
        "x": 1680,
        "y": 2360,
        "wires": [
            [
                "38a608471f1e0efb"
            ]
        ]
    },
    {
        "id": "35d9993d0c50a4e8",
        "type": "junction",
        "z": "dae82ca7554ded9f",
        "x": 3560,
        "y": 2640,
        "wires": [
            [
                "8e1dc091d734185d"
            ]
        ]
    },
    {
        "id": "2298dc7c5a25dd5e",
        "type": "junction",
        "z": "dae82ca7554ded9f",
        "x": 3780,
        "y": 3500,
        "wires": [
            [
                "df22aba88215e1e5"
            ]
        ]
    },
    {
        "id": "ecc495ba88642346",
        "type": "junction",
        "z": "dae82ca7554ded9f",
        "x": 5600,
        "y": 600,
        "wires": [
            [
                "3005b8b38870111d"
            ]
        ]
    },
    {
        "id": "9717abda31ef0250",
        "type": "junction",
        "z": "770249581d809dbd",
        "x": 1640,
        "y": 2940,
        "wires": [
            [
                "95390280b21b37bd"
            ]
        ]
    },
    {
        "id": "663c26f6dd3d98cb",
        "type": "junction",
        "z": "dae82ca7554ded9f",
        "x": 3460,
        "y": 1000,
        "wires": [
            [
                "713993532e2bb5fa"
            ]
        ]
    },
    {
        "id": "3ac09b457be35964",
        "type": "junction",
        "z": "dae82ca7554ded9f",
        "g": "1ec4d17b255d0492",
        "x": 3880,
        "y": 4100,
        "wires": [
            [
                "dbf134252df13b56"
            ]
        ]
    },
    {
        "id": "aa9f6df8a77fd4da",
        "type": "mqtt-broker",
        "name": "",
        "broker": "localhost",
        "port": "1880",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "ae3e15443c651292",
        "type": "ui_base",
        "theme": {
            "name": "theme-custom",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#038c6b",
                "baseFont": "Arial,Arial,Helvetica,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#268000",
                "baseFont": "Arial,Arial,Helvetica,sans-serif",
                "edited": true,
                "reset": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#ffffff",
                "baseFont": "Arial,Arial,Helvetica,sans-serif",
                "reset": false
            },
            "themeState": {
                "base-color": {
                    "default": "#038c6b",
                    "value": "#ffffff",
                    "edited": true
                },
                "page-titlebar-backgroundColor": {
                    "value": "#038c6b",
                    "edited": true
                },
                "page-backgroundColor": {
                    "value": "#1a1a1a",
                    "edited": true
                },
                "page-sidebar-backgroundColor": {
                    "value": "#fa0505",
                    "edited": true
                },
                "group-textColor": {
                    "value": "#0a9400",
                    "edited": true
                },
                "group-borderColor": {
                    "value": "#4f4f4f",
                    "edited": true
                },
                "group-backgroundColor": {
                    "value": "#212121",
                    "edited": true
                },
                "widget-textColor": {
                    "value": "#fffafa",
                    "edited": true
                },
                "widget-backgroundColor": {
                    "value": "#ca1616",
                    "edited": true
                },
                "widget-borderColor": {
                    "value": "#212121",
                    "edited": true
                },
                "base-font": {
                    "value": "Arial,Arial,Helvetica,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "TESTE",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 41,
                "sy": 49,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 28,
                "py": 80
            }
        }
    },
    {
        "id": "a7e2d5870aa3d2d2",
        "type": "mqtt-broker",
        "name": "",
        "broker": "connect.axontechnology.com.br",
        "port": "2884",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "134c119f18299397",
        "type": "mqtt-broker",
        "name": "Martia√ßo",
        "broker": "178.128.150.198",
        "port": "2884",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "3a6af4e4f1669aa9",
        "type": "mqtt-broker",
        "name": "Clientes",
        "broker": "connect.axontechnology.com.br",
        "port": "2884",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "f423e7ef3a8a1187",
        "type": "global-config",
        "name": "global-config",
        "env": [
            {
                "name": "WHK_PERSIST_BASEURL",
                "value": "http://localhost:1880",
                "type": "str"
            },
            {
                "name": "WHK_PERSIST_TOKEN",
                "value": "s3cr37",
                "type": "str"
            },
            {
                "name": "WHK_AUTENTICATION_TOKEN",
                "value": "eugostariadecomerumhabibsesfirrahoje",
                "type": "str"
            }
        ]
    },
    {
        "id": "9564997cc99e620e",
        "type": "ui_tab",
        "name": "TESTE",
        "icon": "fa-desktop",
        "order": 1,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "a86510b8e099c912",
        "type": "ui_group",
        "name": "CORTE DE CRIMPAGEM (NOVO)",
        "tab": "9564997cc99e620e",
        "order": 1,
        "disp": true,
        "width": "8",
        "collapse": false,
        "className": ""
    },
    {
        "id": "e8e1e0ecb06588bd",
        "type": "ui_group",
        "name": "CORTE DE CRIMPAGEM (ANTIGO)",
        "tab": "9564997cc99e620e",
        "order": 2,
        "disp": true,
        "width": "8",
        "collapse": false,
        "className": ""
    },
    {
        "id": "7197454579135ab3",
        "type": "ui_group",
        "name": "A√áO 08-01 NOVO",
        "tab": "9564997cc99e620e",
        "order": 3,
        "disp": true,
        "width": "8",
        "collapse": false,
        "className": ""
    },
    {
        "id": "cd8f48006ae15bda",
        "type": "ui_group",
        "name": "A√áO 08-01 ANTIGO",
        "tab": "9564997cc99e620e",
        "order": 4,
        "disp": true,
        "width": "8",
        "collapse": false,
        "className": ""
    },
    {
        "id": "df3dcd76a53f5e1c",
        "type": "ui_group",
        "name": "TRELI√áA AZUL NOVO",
        "tab": "9564997cc99e620e",
        "order": 5,
        "disp": true,
        "width": "8",
        "collapse": false,
        "className": ""
    },
    {
        "id": "67928f3b11a33e33",
        "type": "ui_group",
        "name": "TRELI√áA VERDE ANTIGO",
        "tab": "9564997cc99e620e",
        "order": 6,
        "disp": true,
        "width": "8",
        "collapse": false,
        "className": ""
    },
    {
        "id": "58ba0cb992798c1c",
        "type": "mqtt-broker",
        "name": "Staging",
        "broker": "staging.connect.axonlab.com.br",
        "port": "8883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "5787ae3146e63f75",
        "type": "mqtt-broker",
        "name": "Broker local (STAGING)",
        "broker": "localhost",
        "port": "8883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "1",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "6173ac25534228c0",
        "type": "mqtt-broker",
        "name": "teste",
        "broker": "192.168.97.227",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "58b3930efb1d97b0",
        "type": "ui_tab",
        "name": "BRF",
        "icon": "dashboard",
        "order": 2,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "0e3c221f37f8be40",
        "type": "ui_group",
        "name": "PERFORMANCE",
        "tab": "58b3930efb1d97b0",
        "order": 1,
        "disp": true,
        "width": "8",
        "collapse": false,
        "className": ""
    },
    {
        "id": "e9698eef84e5ff28",
        "type": "ui_group",
        "name": "CONTAGEM",
        "tab": "58b3930efb1d97b0",
        "order": 2,
        "disp": false,
        "width": "8",
        "collapse": false,
        "className": ""
    },
    {
        "id": "c682be0d8df1f9ef",
        "type": "ui_group",
        "name": "DISPONIBILIDADE",
        "tab": "58b3930efb1d97b0",
        "order": 3,
        "disp": true,
        "width": "8",
        "collapse": false,
        "className": ""
    },
    {
        "id": "e533aa27512c674f",
        "type": "ui_group",
        "name": "PERFORMANCE",
        "tab": "183a84b69d3b74b7",
        "order": 1,
        "disp": false,
        "width": "8",
        "collapse": false,
        "className": ""
    },
    {
        "id": "da937f62913568c2",
        "type": "ui_group",
        "name": "CONTAGEM",
        "tab": "183a84b69d3b74b7",
        "order": 2,
        "disp": false,
        "width": "8",
        "collapse": false,
        "className": ""
    },
    {
        "id": "ad640183aae6b4ca",
        "type": "ui_group",
        "name": "DISPONIBILIDADE",
        "tab": "183a84b69d3b74b7",
        "order": 3,
        "disp": true,
        "width": "8",
        "collapse": false,
        "className": ""
    },
    {
        "id": "183a84b69d3b74b7",
        "type": "ui_tab",
        "name": "BRF",
        "icon": "fa-desktop",
        "order": 1,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "d78c0f2f75d97eb7",
        "type": "http request",
        "z": "ae46eb5e838c057e",
        "g": "2e0892c4b28f1ec4",
        "name": "Call persistence API",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": true,
        "headers": [
            {
                "keyType": "Content-Type",
                "keyValue": "",
                "valueType": "application/json",
                "valueValue": ""
            }
        ],
        "x": 1060,
        "y": 120,
        "wires": [
            [
                "b598323adafb27c9"
            ]
        ]
    },
    {
        "id": "e7feab74691f03c7",
        "type": "catch",
        "z": "ae46eb5e838c057e",
        "g": "2e0892c4b28f1ec4",
        "name": "Request error",
        "scope": [
            "d78c0f2f75d97eb7",
            "b598323adafb27c9"
        ],
        "uncaught": false,
        "x": 1030,
        "y": 180,
        "wires": [
            [
                "f950be71fa6d7ca7",
                "c12163c6a63c6b50"
            ]
        ]
    },
    {
        "id": "f950be71fa6d7ca7",
        "type": "debug",
        "z": "ae46eb5e838c057e",
        "name": "Request error",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "error",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1480,
        "y": 240,
        "wires": []
    },
    {
        "id": "7fb726549c0ded45",
        "type": "delay",
        "z": "ae46eb5e838c057e",
        "g": "0c2f1acc102569b7",
        "name": "Retry after 5s",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 920,
        "y": 380,
        "wires": [
            [
                "d78c0f2f75d97eb7"
            ]
        ]
    },
    {
        "id": "73f49e0dacfdf2e8",
        "type": "comment",
        "z": "ae46eb5e838c057e",
        "name": "As APIs de persist√™ncia e/ou do dashboard precisam garantir que os sinais sejam inseridos na ordem correta, caso ocorra falha nessa requisi√ß√£o",
        "info": "",
        "x": 540,
        "y": 40,
        "wires": []
    },
    {
        "id": "8ec6c85e6d84b769",
        "type": "function",
        "z": "ae46eb5e838c057e",
        "g": "0c2f1acc102569b7",
        "name": "Check if there are still attempts",
        "func": "if (flow.get(\"count\") > 5) {\n    throw new Error(\"unable to reach persistence API server\");\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 380,
        "wires": [
            [
                "7fb726549c0ded45"
            ]
        ],
        "icon": "font-awesome/fa-warning"
    },
    {
        "id": "8355eb2d7f55476f",
        "type": "debug",
        "z": "ae46eb5e838c057e",
        "name": "Counter status",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "count",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 640,
        "y": 540,
        "wires": []
    },
    {
        "id": "49db4f6f746671e3",
        "type": "catch",
        "z": "ae46eb5e838c057e",
        "g": "0c2f1acc102569b7",
        "name": "Reached max # of attempts",
        "scope": [
            "8ec6c85e6d84b769"
        ],
        "uncaught": false,
        "x": 640,
        "y": 420,
        "wires": [
            [
                "83e88876dc964dd3"
            ]
        ]
    },
    {
        "id": "83e88876dc964dd3",
        "type": "debug",
        "z": "ae46eb5e838c057e",
        "name": "Reached max number of attempts",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 980,
        "y": 540,
        "wires": []
    },
    {
        "id": "b598323adafb27c9",
        "type": "function",
        "z": "ae46eb5e838c057e",
        "g": "2e0892c4b28f1ec4",
        "name": "Throw if status is not 2xx",
        "func": "if (\n    msg.statusCode &&\n    (msg.statusCode < 200 || msg.statusCode >= 300)\n) {\n    throw new Error(\"persistence API error\");\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1330,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "c12163c6a63c6b50",
        "type": "function",
        "z": "ae46eb5e838c057e",
        "g": "0c2f1acc102569b7",
        "name": "Increment try count",
        "func": "let counter = flow.get(\"count\");\ncounter++;\nflow.set(\"count\", counter);\nmsg.count = counter;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 380,
        "wires": [
            [
                "8ec6c85e6d84b769",
                "8355eb2d7f55476f"
            ]
        ],
        "icon": "font-awesome/fa-calculator"
    },
    {
        "id": "d9c3b85f2735864b",
        "type": "function",
        "z": "ae46eb5e838c057e",
        "name": "Reset counter",
        "func": "flow.set(\"count\", 1);\nmsg.count = flow.get(\"count\");\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 240,
        "y": 120,
        "wires": [
            [
                "d78c0f2f75d97eb7"
            ]
        ],
        "icon": "font-awesome/fa-calculator"
    },
    {
        "id": "0acb1b52d8eef14b",
        "type": "jwt verify",
        "z": "b12925e3996954d8",
        "name": "JWT Authentication",
        "alg": [
            "HS256"
        ],
        "jwkurl": "",
        "secret": "WhZfC3iZoH sokcI8831L xdjiwfnX6E yma17UXWsR e8YPP5ogJa d9tRHK35BI LQWZYRMOuG uIWBHsKdpN paYCXIYsck d1i5E1H77K",
        "key": "",
        "signvar": "bearer",
        "storetoken": "token",
        "x": 230,
        "y": 80,
        "wires": [
            []
        ],
        "outputLabels": [
            "JWT is valid"
        ],
        "icon": "font-awesome/fa-key"
    },
    {
        "id": "5b77e8eae80d230b",
        "type": "http request",
        "z": "c76f167c66e3dca1",
        "g": "87fc6f2e2e43b4f6",
        "name": "Call persistence API",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": true,
        "headers": [
            {
                "keyType": "Content-Type",
                "keyValue": "",
                "valueType": "application/json",
                "valueValue": ""
            }
        ],
        "x": 1060,
        "y": 120,
        "wires": [
            [
                "5ff1107256a27c28"
            ]
        ]
    },
    {
        "id": "2c13ca493f06b9b7",
        "type": "catch",
        "z": "c76f167c66e3dca1",
        "g": "87fc6f2e2e43b4f6",
        "name": "Request error",
        "scope": [
            "5b77e8eae80d230b",
            "5ff1107256a27c28"
        ],
        "uncaught": false,
        "x": 1030,
        "y": 180,
        "wires": [
            [
                "f49e0cdac960e6ac",
                "730408c5ef316003"
            ]
        ]
    },
    {
        "id": "f49e0cdac960e6ac",
        "type": "debug",
        "z": "c76f167c66e3dca1",
        "name": "Request error",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "error",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1480,
        "y": 240,
        "wires": []
    },
    {
        "id": "ac2880f5336611f0",
        "type": "delay",
        "z": "c76f167c66e3dca1",
        "g": "5fd1412cc7a5db6a",
        "name": "Retry after 5s",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 920,
        "y": 380,
        "wires": [
            [
                "5b77e8eae80d230b"
            ]
        ]
    },
    {
        "id": "2fe9d034bd245962",
        "type": "comment",
        "z": "c76f167c66e3dca1",
        "name": "As APIs de persist√™ncia e/ou do dashboard precisam garantir que os sinais sejam inseridos na ordem correta, caso ocorra falha nessa requisi√ß√£o",
        "info": "",
        "x": 540,
        "y": 40,
        "wires": []
    },
    {
        "id": "651afd6e129484ca",
        "type": "function",
        "z": "c76f167c66e3dca1",
        "g": "5fd1412cc7a5db6a",
        "name": "Check if there are still attempts",
        "func": "if (flow.get(\"count\") > 5) {\n    throw new Error(\"unable to reach persistence API server\");\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 380,
        "wires": [
            [
                "ac2880f5336611f0"
            ]
        ],
        "icon": "font-awesome/fa-warning"
    },
    {
        "id": "364f4f9f44a6a944",
        "type": "debug",
        "z": "c76f167c66e3dca1",
        "name": "Counter status",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "count",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 640,
        "y": 540,
        "wires": []
    },
    {
        "id": "4becce651c1819b5",
        "type": "catch",
        "z": "c76f167c66e3dca1",
        "g": "5fd1412cc7a5db6a",
        "name": "Reached max # of attempts",
        "scope": [
            "651afd6e129484ca"
        ],
        "uncaught": false,
        "x": 640,
        "y": 420,
        "wires": [
            [
                "a95c5f6f270e50cc"
            ]
        ]
    },
    {
        "id": "a95c5f6f270e50cc",
        "type": "debug",
        "z": "c76f167c66e3dca1",
        "name": "Reached max number of attempts",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 980,
        "y": 540,
        "wires": []
    },
    {
        "id": "5ff1107256a27c28",
        "type": "function",
        "z": "c76f167c66e3dca1",
        "g": "87fc6f2e2e43b4f6",
        "name": "Throw if status is not 2xx",
        "func": "if (\n    msg.statusCode &&\n    (msg.statusCode < 200 || msg.statusCode >= 300)\n) {\n    throw new Error(\"persistence API error\");\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1330,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "730408c5ef316003",
        "type": "function",
        "z": "c76f167c66e3dca1",
        "g": "5fd1412cc7a5db6a",
        "name": "Increment try count",
        "func": "let counter = flow.get(\"count\");\ncounter++;\nflow.set(\"count\", counter);\nmsg.count = counter;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 380,
        "wires": [
            [
                "651afd6e129484ca",
                "364f4f9f44a6a944"
            ]
        ],
        "icon": "font-awesome/fa-calculator"
    },
    {
        "id": "4bcd4cf1b112c129",
        "type": "function",
        "z": "c76f167c66e3dca1",
        "name": "Reset counter",
        "func": "flow.set(\"count\", 1);\nmsg.count = flow.get(\"count\");\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 240,
        "y": 120,
        "wires": [
            [
                "5b77e8eae80d230b"
            ]
        ],
        "icon": "font-awesome/fa-calculator"
    },
    {
        "id": "0a29708873a4ae8d",
        "type": "function",
        "z": "e0124708805f5d32",
        "name": "Handle switches",
        "func": "function handleSwitch(payload, context, switchName, startName, finishName, verifyName) {\n    let switchKey = Object.keys(payload).find(key => key.startsWith(switchName)); //extrai o switch que chegou no payload\n    let startState = context.get(startName) || false; \n    let finishState = context.get(finishName) || false;\n    let verifyState = context.get(verifyName) || false;\n    let actionValue = payload[switchKey] ? payload[switchKey].Action : null;\n    let switchState = context.get(switchName) || null;\n\n    switchState = actionValue || switchState; //adquire o estado do switch que chegou |ON| |OFF|\n\n    if (switchState === \"ON\") {\n        startState = true;\n    \n    } else if (switchState === \"OFF\" && startState) {\n        finishState = true;\n    }\n\n    if (startState && finishState) {\n        verifyState = true;\n        startState = false;\n        finishState = false;\n    }\n    context.set(switchName, switchState);\n    context.set(startName, startState);\n    context.set(finishName, finishState);\n    context.set(verifyName, verifyState);\n    return {\n        switchState: switchState,\n        startState: startState,\n        finishState: finishState,\n        verifyState: verifyState\n    }\n}\nlet payload = msg.payload;\nlet verifyFold = handleSwitch(payload, context, 'Switch1', 'startDescent', 'finishDescent', 'completeFold');\n\nmsg.switches = {\n    switch1: verifyFold.switchState,\n    startFold: verifyFold.startState,\n    completeFold: verifyFold.verifyState,\n}\nif (verifyFold.verifyState) {\n    verifyFold.verifyState = false;\n    context.set('completeFold', verifyFold.verifyState);\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 280,
        "wires": [
            [
                "bf3c2010324c3708"
            ]
        ],
        "icon": "node-red/swap.svg"
    },
    {
        "id": "59d148e41a54e614",
        "type": "inject",
        "z": "e0124708805f5d32",
        "name": "Try TXT",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 110,
        "y": 60,
        "wires": [
            [
                "44fef607f4abec5d"
            ]
        ]
    },
    {
        "id": "12ba5d216d316a15",
        "type": "function",
        "z": "e0124708805f5d32",
        "g": "cbd24abd8eb65b09",
        "name": "Get msg buffer",
        "func": "let bufferMSG = flow.get('bufferMSG');\n\nif (bufferMSG.length > 0) {\n    for (let i = 0; i < bufferMSG.length; i++) {\n        const msg = bufferMSG[i];\n        // node.warn(bufferMSG);\n        const msgToSend = {\n            payload: msg\n        };\n        node.send(msgToSend);\n    }\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1260,
        "y": 60,
        "wires": [
            [
                "bd9527d5ebf0baab"
            ]
        ],
        "icon": "node-red/comment.svg"
    },
    {
        "id": "bd9527d5ebf0baab",
        "type": "switch",
        "z": "e0124708805f5d32",
        "g": "cbd24abd8eb65b09",
        "name": "Type msg",
        "property": "payload.origin",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "Buffer",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1420,
        "y": 60,
        "wires": [
            [
                "a916850bc5cb309f"
            ]
        ],
        "icon": "font-awesome/fa-cloud"
    },
    {
        "id": "a8d61eabd4d41e76",
        "type": "switch",
        "z": "e0124708805f5d32",
        "name": "OPTION SW",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "hask",
                "v": "Switch1",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 190,
        "y": 280,
        "wires": [
            [
                "22c25074e74801a2"
            ]
        ]
    },
    {
        "id": "1757a366179f74a7",
        "type": "switch",
        "z": "e0124708805f5d32",
        "name": "Machines",
        "property": "payload.serialNumber",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "DF2A44",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 680,
        "y": 280,
        "wires": [
            [
                "0a29708873a4ae8d"
            ]
        ],
        "icon": "font-awesome/fa-desktop"
    },
    {
        "id": "22c25074e74801a2",
        "type": "function",
        "z": "e0124708805f5d32",
        "name": "Delete msg",
        "func": "let bufferMSG = flow.get('bufferMSG') || [];\n\nif (msg.payload.timestamp) {\n    let msgTimestamp = new Date(msg.payload.timestamp).getTime();\n\n    for (let i = 0; i < bufferMSG.length; i++) {\n        let bufferTimestamp = new Date(bufferMSG[i].timestamp).getTime();\n\n        if (msgTimestamp === bufferTimestamp) {\n            bufferMSG.splice(i, 1);\n            flow.set('bufferMSG', bufferMSG);\n            break; // Para sair do loop ap√≥s remover o item\n        }\n    }\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 280,
        "wires": [
            [
                "dc70ed437c3ad9c3"
            ]
        ],
        "icon": "font-awesome/fa-minus"
    },
    {
        "id": "0c2ee7826f1f0002",
        "type": "function",
        "z": "e0124708805f5d32",
        "name": "get buffer",
        "func": "let bufferMSG = flow.get('bufferMSG');\n\n// bufferMSG = [];\n// flow.set('bufferMSG', bufferMSG);\nnode.warn(bufferMSG);",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 1540,
        "wires": [
            []
        ],
        "icon": "node-red/comment.svg"
    },
    {
        "id": "2ec66739a1dde1d5",
        "type": "inject",
        "z": "e0124708805f5d32",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 170,
        "y": 1540,
        "wires": [
            [
                "0c2ee7826f1f0002"
            ]
        ]
    },
    {
        "id": "44fef607f4abec5d",
        "type": "file in",
        "z": "e0124708805f5d32",
        "g": "2eb75b0a5b4d8a7d",
        "name": "Loading buffer",
        "filename": "C:\\Users\\tsoares\\Documents\\dobras.txt",
        "filenameType": "str",
        "format": "lines",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 280,
        "y": 60,
        "wires": [
            [
                "c05095c8f2c0a30d",
                "479143b0543fb163"
            ]
        ]
    },
    {
        "id": "c05095c8f2c0a30d",
        "type": "function",
        "z": "e0124708805f5d32",
        "g": "2eb75b0a5b4d8a7d",
        "name": "Construct msg",
        "func": "if (msg.filename) {\n    let msgFormated = constructPayload(msg.payload);\n\n    msg.payload = msgFormated;\n\n    node.send(msg); // Enviar a mensagem formatada\n}\n\nfunction constructPayload(payload) { // constru√ß√£o do payload\n\n    let toBreakMessage = payload.split(',');\n    let getSWNumber = toBreakMessage[0].replace(\"|\", \"\");\n    let actionValue = toBreakMessage[1] === \"1\" ? \"ON\" : \"OFF\";\n    let serialNumber = toBreakMessage[2];\n    let timestamp = toBreakMessage[3].replace(\"|\", \"\"); \n\n    if (getSWNumber) {\n        getSWNumber = \"Switch\" + getSWNumber;\n    }\n    return {\n        [getSWNumber]: {\n            Action: actionValue\n        },\n        serialNumber: serialNumber,\n        timestamp: timestamp,\n        origin: \"Buffer\"\n    };\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 60,
        "wires": [
            [
                "da990bac79dd84da"
            ]
        ],
        "icon": "node-red/envelope.svg"
    },
    {
        "id": "da990bac79dd84da",
        "type": "function",
        "z": "e0124708805f5d32",
        "g": "2eb75b0a5b4d8a7d",
        "name": "Formated date",
        "func": "let convertNumber = parseInt(msg.payload.timestamp); \nlet epoch = (convertNumber + 1546300800) * 1000; \nlet date = new Date(epoch); \n\nmsg.payload.timestamp = date; \nreturn msg; ",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 60,
        "wires": [
            [
                "e254a146c839e783"
            ]
        ],
        "icon": "node-red-dashboard/ui_date_picker.png"
    },
    {
        "id": "e254a146c839e783",
        "type": "function",
        "z": "e0124708805f5d32",
        "g": "2eb75b0a5b4d8a7d",
        "name": "ADD msg in queue",
        "func": "let bufferMSG = flow.get('bufferMSG') || [];\n\nif (msg.payload) {\n    let newTimestamp = new Date(msg.payload.timestamp).getTime();\n    let exists = bufferMSG.some(record => new Date(record.timestamp).getTime() === newTimestamp);\n\n    if (!exists) {\n        bufferMSG.push(msg.payload);\n        \n    }\n}\nflow.set('bufferMSG', bufferMSG);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 60,
        "wires": [
            []
        ],
        "icon": "node-red/parser-json.svg"
    },
    {
        "id": "bf3c2010324c3708",
        "type": "function",
        "z": "e0124708805f5d32",
        "name": "Machine conditions",
        "func": "let {startFold, completeFold } = msg.switches;\n\nmsg.conditions = {\n    startFold: startFold,\n    completeFold: completeFold,\n    serialNumber: msg.payload.serialNumber\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1060,
        "y": 280,
        "wires": [
            [
                "e9883dca80353473"
            ]
        ],
        "icon": "font-awesome/fa-bars"
    },
    {
        "id": "a916850bc5cb309f",
        "type": "link out",
        "z": "e0124708805f5d32",
        "g": "cbd24abd8eb65b09",
        "name": "connection buffer OUT",
        "mode": "link",
        "links": [
            "bb55543d8f41367c",
            "b7264156c70452fa"
        ],
        "x": 1555,
        "y": 60,
        "wires": [],
        "icon": "font-awesome/fa-fast-forward"
    },
    {
        "id": "bb55543d8f41367c",
        "type": "link in",
        "z": "e0124708805f5d32",
        "name": "connection buffer IN",
        "links": [
            "a916850bc5cb309f"
        ],
        "x": 75,
        "y": 180,
        "wires": [
            [
                "a8d61eabd4d41e76"
            ]
        ],
        "icon": "font-awesome/fa-fast-backward"
    },
    {
        "id": "e9883dca80353473",
        "type": "function",
        "z": "e0124708805f5d32",
        "name": "Machine production",
        "func": "let {startFold, completeFold, serialNumber} = msg.conditions || {};\nlet { messageType } = msg.typeMSG || {};\nlet [dateStartProduction, dateLastProduction, machine, lastMSG] = ['dateStartProduction', 'dateLastProduction', 'machine','lastMSG'].map(key =>\ncontext.get(key) || null);\nlet foldCount = context.get('foldCount') || 0;\nlet resetShift = context.get('resetShift') || false;\nlet currentTimestamp = new Date();\n\nconst actions = {\n    resetShift: () => { foldCount = 0; resetShift = false},\n    payloadReset: () => { resetShift = true},\n    startBuffer: () => { dateStartProduction = new Date(msg.payload.timestamp)},\n    finishedBuffer: () => { dateLastProduction = new Date(msg.payload.timestamp); foldCount++ },\n    lastMSGBuffer: () => {lastMSG = \"Buffer\"},\n    startRealtime: () => {dateStartProduction = currentTimestamp},\n    finishedRealtime: () => {dateLastProduction = currentTimestamp; foldCount++},\n    lastMSGRealtime: () => {lastMSG = \"Realtime\"},\n    machineNull: () => {machine = serialNumber}\n}\nconst conditions = {\n    resetShift: resetShift === true,\n    payloadReset: msg.payload == 'reset',\n    startBuffer: startFold === true && messageType === \"Buffer\",\n    finishedBuffer: completeFold === true && messageType === \"Buffer\",\n    lastMSGBuffer: messageType === \"Buffer\",\n    startRealtime: startFold === true && messageType === \"Realtime\",\n    finishedRealtime: completeFold === true && messageType === \"Realtime\",\n    lastMSGRealtime: messageType === \"Realtime\",\n    machineNull: (serialNumber && machine === null) || (serialNumber && machine !== serialNumber && machine !== null),\n};\n\nObject.entries(conditions).forEach(([condition, isTrue]) => {\n    if (isTrue && actions[condition]) actions[condition]();\n});\ncontext.set('foldCount', foldCount);\ncontext.set('dateStartProduction', dateStartProduction);\ncontext.set('dateLastProduction', dateLastProduction);\ncontext.set('resetShift', resetShift);\ncontext.set('lastMSG', lastMSG);\ncontext.set('machine', machine);\n\nmsg.data = {\n    verifyFold: completeFold,\n    lastMSG: lastMSG,\n    fold: foldCount,\n    dateStartProduction: dateStartProduction,\n    dateLastProduction: dateLastProduction,\n    machine: machine,\n    reset: resetShift\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1290,
        "y": 280,
        "wires": [
            [
                "e448a447405e3523",
                "ccd45040263acaed"
            ]
        ],
        "icon": "font-awesome/fa-book"
    },
    {
        "id": "dc70ed437c3ad9c3",
        "type": "function",
        "z": "e0124708805f5d32",
        "name": "Get type MSG",
        "func": "let messageType = context.get('messageType') || null;\n\nif (msg.payload.origin === \"Buffer\") {\nmessageType = \"Buffer\";\n}\nelse {\n    messageType = \"Realtime\";\n}\ncontext.set('messageType', messageType);\n\nmsg.typeMSG = {\n    messageType: messageType,\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 280,
        "wires": [
            [
                "1757a366179f74a7"
            ]
        ],
        "icon": "font-awesome/fa-bars"
    },
    {
        "id": "35a5a27a4271719f",
        "type": "debug",
        "z": "e0124708805f5d32",
        "name": "debug 323",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1870,
        "y": 400,
        "wires": []
    },
    {
        "id": "3f45b590303cd222",
        "type": "inject",
        "z": "e0124708805f5d32",
        "name": "TIMESTAMP (STATUS)",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1060,
        "y": 180,
        "wires": [
            [
                "e9883dca80353473"
            ]
        ],
        "icon": "font-awesome/fa-hourglass-1"
    },
    {
        "id": "e448a447405e3523",
        "type": "function",
        "z": "e0124708805f5d32",
        "name": "Verify status",
        "func": "// SE BUFFER STATUS === EM PROCESSAMENTO DE DADOS\n// SE REALTIME STATUS √â CALCULADO, DEFINIDO E ENVIADO PARA O BANCO\nlet {dateStartProduction, dateLastProduction, machine, lastMSG } = msg.data;\nlet { messageType } = msg.typeMSG || {}\nlet currentTimestamp = new Date();\nlet [timeStartProduction, timeLastProduction] = ['timeStartProduction', 'timeLastProduction'].map(key => context.get(key) || 0);\nlet currentStatus = context.get('currentStatus') || null\n\ntimeStartProduction = dateStartProduction !== null ? (currentTimestamp.getTime() - dateStartProduction.getTime()) / 1000 : null;\ntimeLastProduction = dateLastProduction !== null ? (currentTimestamp.getTime() - dateLastProduction.getTime()) / 1000 : null;\ncontext.set('timeStartProduction', timeStartProduction);\ncontext.set('timeLastProduction',timeLastProduction);\n\nif (lastMSG === \"Buffer\") {\n    currentStatus = \"PROCESSANDO DADOS\";\n}\nelse if (lastMSG === \"Realtime\") {\n\n    if (dateStartProduction !== null) {\n\n        const machineWorking = timeStartProduction <= 299 || (timeLastProduction <= 299 && timeLastProduction !== null); // TRABALHANDO\n\n        const machineIdle = (timeStartProduction >= 300 && timeLastProduction >= 300 && timeLastProduction <= 1799) ||\n        (timeStartProduction >= 300 && timeStartProduction <= 1799 && timeLastProduction === null);\n\n        const machineOff = (timeStartProduction >= 300 && timeLastProduction >= 1800) || (timeStartProduction >= 1800 && dateLastProduction === null);\n\n        const newStatus = machineWorking ? \"TRABALHANDO\" : machineIdle ? \"PARADO\" : machineOff ? \"DESLIGADO\" : null;\n        if (newStatus) currentStatus = newStatus;\n    }\n}\nelse if (dateStartProduction === null) currentStatus = \"DESLIGADO\";\n\ncontext.set('currentStatus', currentStatus);\n\nmsg.status = {\n    timeCurrentProduction: timeStartProduction,\n    timeLastProduction: timeLastProduction,\n    machine: machine,\n    currentStatus: currentStatus\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1490,
        "y": 300,
        "wires": [
            [
                "352bcbcd5bb4e5ea"
            ]
        ],
        "icon": "node-red/status.svg"
    },
    {
        "id": "513a58a1c1e827f0",
        "type": "inject",
        "z": "e0124708805f5d32",
        "name": "SWITCH1 ON",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF2A44",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch1\": {\"Action\": \"ON\"} }",
        "payloadType": "json",
        "x": 110,
        "y": 360,
        "wires": [
            [
                "a8d61eabd4d41e76"
            ]
        ]
    },
    {
        "id": "b87917dcb94736f5",
        "type": "inject",
        "z": "e0124708805f5d32",
        "name": "SWITCH1 OFF",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF2A44",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch1\": {\"Action\": \"OFF\"} }",
        "payloadType": "json",
        "x": 120,
        "y": 400,
        "wires": [
            [
                "a8d61eabd4d41e76"
            ]
        ]
    },
    {
        "id": "352bcbcd5bb4e5ea",
        "type": "function",
        "z": "e0124708805f5d32",
        "name": "Formated message",
        "func": "let machine = msg.status.machine;\nlet timestamp = new Date().getTime();\nlet currentStatus = context.get('currentStatus') || null;\nlet oldStatus = msg.status.currentStatus;\n\nif (!currentStatus || currentStatus !== oldStatus) {\n    currentStatus = oldStatus;\n    context.set('currentStatus', currentStatus);\n\n    msg.payload = {\n        timestamp: timestamp,\n        deviceSerialNumber: machine,\n        status: currentStatus\n    }\n    return msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1670,
        "y": 300,
        "wires": [
            []
        ],
        "icon": "font-awesome/fa-envelope"
    },
    {
        "id": "ccd45040263acaed",
        "type": "function",
        "z": "e0124708805f5d32",
        "name": "DOBRA test",
        "func": "let { verifyFold, lastMSG, fold, machine, dateLastProduction } = msg.data;\n\nmsg.payload = {\n    verifyFold: verifyFold,\n    lastMSG: lastMSG,\n    dobras: fold,\n    deviceSerialNumber: machine,\n    dateLastProduction: dateLastProduction\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1490,
        "y": 260,
        "wires": [
            [
                "826b4c7ae8e2f681"
            ]
        ],
        "icon": "font-awesome/fa-cogs"
    },
    {
        "id": "826b4c7ae8e2f681",
        "type": "function",
        "z": "e0124708805f5d32",
        "name": "Increment Dobras",
        "func": "let {verifyFold, lastMSG, deviceSerialNumber, dateLastProduction} = msg.payload;\nlet unit = context.get('unit') || null;\nlet count = context.get('count') || 0;\nlet currentTimestamp = lastMSG === \"Buffer\" && dateLastProduction !== null ?  dateLastProduction.getTime() : new Date().getTime();\n\nif (verifyFold === true) {\n    unit = \"Dobras\";\n    count = 1;\n    context.set('unit', unit);\n    context.set('count', count);\n\n    msg.payload = {\n        timestamp: currentTimestamp,\n        deviceSerialNumber: deviceSerialNumber,\n        unit: unit,\n        count: count,\n    }\n    msg.count = msg.payload;\n    return msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1670,
        "y": 260,
        "wires": [
            [
                "35a5a27a4271719f"
            ]
        ],
        "icon": "node-red/arrow-in.svg"
    },
    {
        "id": "479143b0543fb163",
        "type": "debug",
        "z": "e0124708805f5d32",
        "name": "debug 324",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 550,
        "y": 140,
        "wires": []
    },
    {
        "id": "05af81e76533256a",
        "type": "file in",
        "z": "e0124708805f5d32",
        "name": "Loading buffer",
        "filename": "C:\\Users\\tsoares\\Documents\\logs.txt",
        "filenameType": "str",
        "format": "lines",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": true,
        "x": 720,
        "y": 1400,
        "wires": [
            [
                "4cf7fa2d342d2f92"
            ]
        ]
    },
    {
        "id": "4cf7fa2d342d2f92",
        "type": "debug",
        "z": "e0124708805f5d32",
        "name": "debug 325",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 910,
        "y": 1420,
        "wires": []
    },
    {
        "id": "ffe01fc367ba7ed7",
        "type": "inject",
        "z": "e0124708805f5d32",
        "name": "Try TXT",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 550,
        "y": 1400,
        "wires": [
            [
                "05af81e76533256a"
            ]
        ]
    },
    {
        "id": "aad728ebf9cd4f8b",
        "type": "inject",
        "z": "e0124708805f5d32",
        "name": "SWITCH1 ON",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF158B",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch1\": {\"Action\": \"ON\"} }",
        "payloadType": "json",
        "x": 130,
        "y": 580,
        "wires": [
            [
                "f8b895ae7b41d168"
            ]
        ]
    },
    {
        "id": "47236a49d07fe6bf",
        "type": "inject",
        "z": "e0124708805f5d32",
        "name": "SWITCH1 OFF",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF158B",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch1\": {\"Action\": \"OFF\"} }",
        "payloadType": "json",
        "x": 140,
        "y": 620,
        "wires": [
            [
                "f8b895ae7b41d168"
            ]
        ]
    },
    {
        "id": "0a671d2b83032d75",
        "type": "inject",
        "z": "e0124708805f5d32",
        "name": "SWITCH2 ON",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF158B",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch2\": {\"Action\": \"ON\"} }",
        "payloadType": "json",
        "x": 130,
        "y": 680,
        "wires": [
            [
                "f8b895ae7b41d168"
            ]
        ]
    },
    {
        "id": "33bae05e78af7add",
        "type": "inject",
        "z": "e0124708805f5d32",
        "name": "SWITCH2 OFF",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF158B",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch2\": {\"Action\": \"OFF\"} }",
        "payloadType": "json",
        "x": 140,
        "y": 720,
        "wires": [
            [
                "f8b895ae7b41d168"
            ]
        ]
    },
    {
        "id": "b47ad2139d1d5c25",
        "type": "inject",
        "z": "e0124708805f5d32",
        "name": "SWITCH3 ON ",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF158B",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch3\": {\"Action\": \"ON\"} }",
        "payloadType": "json",
        "x": 130,
        "y": 860,
        "wires": [
            [
                "f8b895ae7b41d168"
            ]
        ]
    },
    {
        "id": "3346a670ad6d3cb2",
        "type": "inject",
        "z": "e0124708805f5d32",
        "name": "SWITCH3 OFF",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF158B",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch3\": {\"Action\": \"OFF\"} }",
        "payloadType": "json",
        "x": 140,
        "y": 900,
        "wires": [
            [
                "f8b895ae7b41d168"
            ]
        ]
    },
    {
        "id": "fd70d8c2dfdd2334",
        "type": "inject",
        "z": "e0124708805f5d32",
        "name": "STATUS8",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF158B",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"StatusSNS\": {  \"Switch2\": \"ON\" } }",
        "payloadType": "json",
        "x": 140,
        "y": 760,
        "wires": [
            [
                "f8b895ae7b41d168"
            ]
        ]
    },
    {
        "id": "00c4adbf97d2de6f",
        "type": "inject",
        "z": "e0124708805f5d32",
        "name": "STATUS8",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF158B",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"StatusSNS\": {  \"Switch2\": \"OFF\" } }",
        "payloadType": "json",
        "x": 120,
        "y": 800,
        "wires": [
            [
                "f8b895ae7b41d168"
            ]
        ]
    },
    {
        "id": "f8b895ae7b41d168",
        "type": "switch",
        "z": "e0124708805f5d32",
        "name": "OPTION SW",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "hask",
                "v": "Switch1",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "Switch2",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "Switch3",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 350,
        "y": 720,
        "wires": [
            [
                "c7cb4de2d10438e7"
            ],
            [
                "c7cb4de2d10438e7"
            ],
            [
                "c7cb4de2d10438e7"
            ]
        ]
    },
    {
        "id": "b7264156c70452fa",
        "type": "link in",
        "z": "e0124708805f5d32",
        "name": "connection buffer IN",
        "links": [
            "a916850bc5cb309f"
        ],
        "x": 275,
        "y": 520,
        "wires": [
            [
                "f8b895ae7b41d168"
            ]
        ],
        "icon": "font-awesome/fa-fast-backward"
    },
    {
        "id": "961e58a7983e554e",
        "type": "switch",
        "z": "e0124708805f5d32",
        "name": "Machines",
        "property": "payload.serialNumber",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "DF158B",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 860,
        "y": 720,
        "wires": [
            [
                "ba06b3657df6cfad"
            ]
        ],
        "icon": "font-awesome/fa-desktop"
    },
    {
        "id": "c7cb4de2d10438e7",
        "type": "function",
        "z": "e0124708805f5d32",
        "name": "Delete msg",
        "func": "let bufferMSG = flow.get('bufferMSG') || [];\n\nif (msg.payload.timestamp) {\n    let msgTimestamp = new Date(msg.payload.timestamp).getTime();\n\n    for (let i = 0; i < bufferMSG.length; i++) {\n        let bufferTimestamp = new Date(bufferMSG[i].timestamp).getTime();\n\n        if (msgTimestamp === bufferTimestamp) {\n            bufferMSG.splice(i, 1);\n            flow.set('bufferMSG', bufferMSG);\n            break; // Para sair do loop ap√≥s remover o item\n        }\n    }\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 720,
        "wires": [
            [
                "f93344f6cfb0f5e1"
            ]
        ],
        "icon": "font-awesome/fa-minus"
    },
    {
        "id": "f93344f6cfb0f5e1",
        "type": "function",
        "z": "e0124708805f5d32",
        "name": "Get type MSG",
        "func": "let messageType = context.get('messageType') || null;\n\nif (msg.payload.origin === \"Buffer\") {\nmessageType = \"Buffer\";\n}\nelse {\n    messageType = \"Realtime\";\n}\ncontext.set('messageType', messageType);\n\nmsg.typeMSG = {\n    messageType: messageType,\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 720,
        "wires": [
            [
                "961e58a7983e554e"
            ]
        ],
        "icon": "font-awesome/fa-bars"
    },
    {
        "id": "ba06b3657df6cfad",
        "type": "function",
        "z": "e0124708805f5d32",
        "name": "Handle switch",
        "func": "function handleSwitch(payload, context, switchName, statusSNSName, startName, finishName) {\n    let switchKey = Object.keys(payload).find(key => key.startsWith(switchName)) // extrai o switch que chegou no payload\n    let switchState = context.get(switchName) || null;\n    let actionValue = payload[switchKey] ? payload[switchKey].Action : null; // extrai o estado do switch que chegou\n    let statusSNS = payload[statusSNSName] && payload[statusSNSName][switchName];\n    let startState = context.get(startName) || false;\n    let finishState = context.get(finishName) || false;\n\n    switchState = actionValue || statusSNS || switchState; // adquiri o estado do switch que chegou\n\n    if (switchState == \"ON\") { // Condi√ß√£o que caracteriza o in√≠cio da produ√ß√£o\n        startState = true;\n        finishState = false;\n    }\n    else if (switchState == \"OFF\" && startState == true) { // condi√ß√£o que caracteriza o final da produ√ß√£o \n        startState = false;\n        finishState = true;\n    }\n    context.set(switchName, switchState);\n    context.set(startName, startState);\n    context.set(finishName, finishState);\n\n    return {\n        switchState: switchState,\n        startState: startState,\n        finishState: finishState,\n    };\n}\nlet payload = msg.payload;\nlet verifyLaser = handleSwitch(payload, context, 'Switch1', 'StatusSNS', 'laserON', 'laserOFF'); // trata as propriedades do SW1\nlet verifyMachine = handleSwitch(payload, context, 'Switch2', 'StatusSNS', 'readyMachine', 'noReadyMachine'); // trata as propriedades do SW2\nlet tableDoor = handleSwitch(payload, context, 'Switch3', 'StatusSNS', 'openDoor', 'closeDoor'); // trata as propriedades do SW3\n\nmsg.switches = {\n    switch1: verifyLaser.switchState,\n    switch2: verifyMachine.switchState,\n    switch3: tableDoor.switchState,\n    laserON: verifyLaser.startState,\n    laserOFF: verifyLaser.finishState,\n    readyMachine: verifyMachine.startState,\n    noReadyMachine: verifyMachine.finishState,\n    openDoor: tableDoor.startState,\n    closeDoor: tableDoor.finishState\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1020,
        "y": 720,
        "wires": [
            [
                "430f64bd120a8f02"
            ]
        ],
        "icon": "node-red/swap.svg"
    },
    {
        "id": "430f64bd120a8f02",
        "type": "function",
        "z": "e0124708805f5d32",
        "name": "Machine conditions",
        "func": "let { laserON, laserOFF, readyMachine, noReadyMachine, openDoor } = msg.switches;\nlet startingCutPlan = context.get('startingCutPlan') || false;\nlet finishedCutPlan = context.get('finishedCutPlan') || false;\nlet existsCutPlan = context.get('existsCutPlan') || false;\n\nif (readyMachine && laserON && !openDoor && !existsCutPlan) { // in√≠cio do corte da chapa\n    startingCutPlan = true;\n    existsCutPlan = true;\n}\nelse if (noReadyMachine && laserOFF && openDoor && existsCutPlan) {\n    existsCutPlan = false;\n    finishedCutPlan = true;\n}\ncontext.set('startingCutPlan', startingCutPlan);\ncontext.set('finishedCutPlan', finishedCutPlan);\ncontext.set('existsCutPlan', existsCutPlan);\n\nmsg.conditions = {\n    startingCutPlan: startingCutPlan,\n    finishedCutPlan: finishedCutPlan,\n    existsCutPlan: existsCutPlan,\n    serialNumber: msg.payload.serialNumber\n}\nstartingCutPlan = false;\ncontext.set('startingCutPlan', startingCutPlan);\n\nfinishedCutPlan = false;\ncontext.set('finishedCutPlan', finishedCutPlan);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1210,
        "y": 720,
        "wires": [
            [
                "7be734a459a23e51"
            ]
        ],
        "icon": "font-awesome/fa-bars"
    },
    {
        "id": "7be734a459a23e51",
        "type": "function",
        "z": "e0124708805f5d32",
        "name": "Machine production",
        "func": "let {startingCutPlan, finishedCutPlan, serialNumber } = msg.conditions || {};\nlet { messageType } = msg.typeMSG || {};\nlet [dateStartProduction, dateLastProduction, machine, lastMSG] = ['dateStartProduction', 'dateLastProduction', 'machine', 'lastMSG'].map(key =>\ncontext.get(key) || null);\nlet [plateSteel, durationCutPlan] = ['plateSteel', 'durationCutPlan'].map(key => context.get(key) || 0);\nlet resetShift = context.get('resetShift') || false;\nlet currentTimestamp = new Date();\n\nconst actions = {\n    resetShift: () => { plateSteel = 0; resetShift = false; },\n    payloadReset: () => {resetShift = true},\n    startBuffer: () => {dateStartProduction = new Date(msg.payload.timestamp)},\n    finishedBuffer: () => {dateLastProduction = new Date(msg.payload.timestamp); plateSteel++; dateStartProduction = null },\n    lastMSGBuffer: () => {lastMSG = \"Buffer\"},\n    startRealtime: () => {dateStartProduction = currentTimestamp},\n    finishedRealtime: () => {dateLastProduction = currentTimestamp;\n        (currentTimestamp.getTime() - dateStartProduction.getTime()) / 1000; dateStartProduction = null},\n    lastMSGRealtime: () => {lastMSG = \"Realtime\"},\n    machineNull: () => {machine = serialNumber}\n}\nconst conditions = {\n    resetShift: resetShift === true,\n    payloadReset: msg.payload == 'reset',\n    startBuffer: startingCutPlan === true && messageType === \"Buffer\",\n    finishedBuffer: finishedCutPlan === true && messageType === \"Buffer\",\n    lastMSGBuffer: messageType === \"Buffer\",\n    startRealtime: startingCutPlan === true && messageType === \"Realtime\",\n    finishedRealtime: finishedCutPlan === true && messageType === \"Realtime\",\n    lastMSGRealtime: messageType === \"Realtime\",\n    machineNull: (serialNumber && machine === null) || (serialNumber && machine !== serialNumber && machine !== null),\n};\nObject.entries(conditions).forEach(([condition, isTrue]) =>{\n     if (isTrue && actions[condition]) actions[condition]();\n});\ncontext.set('dateStartProduction', dateStartProduction);\ncontext.set('dateLastProduction', dateLastProduction);\ncontext.set('plateSteel', plateSteel);\ncontext.set('resetShift', resetShift);\ncontext.set('durationCutPlan', durationCutPlan);\ncontext.set('lastMSG', lastMSG);\ncontext.set('machine', machine);\n\nmsg.data = {\n    finishedCutPlan: finishedCutPlan,\n    chapas: plateSteel,\n    lastMSG: lastMSG,\n    dateStartProduction: dateStartProduction,\n    dateLastProduction: dateLastProduction,\n    durationCutPlan: durationCutPlan,\n    machine: machine,\n    reset: resetShift\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1410,
        "y": 720,
        "wires": [
            [
                "c4b44055842578c5",
                "b1a698f6da3c644a"
            ]
        ],
        "icon": "font-awesome/fa-book"
    },
    {
        "id": "c4b44055842578c5",
        "type": "function",
        "z": "e0124708805f5d32",
        "name": "LASER test",
        "func": "let {finishedCutPlan, chapas, durationLastCutPlan, machine, lastMSG, dateLastProduction} = msg.data;\nlet workingMinutes = durationLastCutPlan !== 0 ? durationLastCutPlan / 60 : 0;\n\nfunction minutesToHours(totalMinutes) {\n    var hours = String(Math.floor(totalMinutes / 60)).padStart(2, \"0\");\n    var minutes = String(totalMinutes % 60).padStart(2, \"0\");\n\n    return `${hours}:${minutes}`;\n}\nmsg.payload = {\n    finishedCutPlan: finishedCutPlan,\n    chapas: chapas,\n    dateLastProduction: dateLastProduction,\n    durationLastCutPlan: minutesToHours(workingMinutes.toFixed(0)),\n    deviceSerialNumber: machine,\n    lastMSG: lastMSG\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1610,
        "y": 700,
        "wires": [
            [
                "7173fc9207ecdcc1"
            ]
        ],
        "icon": "font-awesome/fa-cogs"
    },
    {
        "id": "b1a698f6da3c644a",
        "type": "function",
        "z": "e0124708805f5d32",
        "name": "Verify status",
        "func": "let { dateStartProduction, dateLastProduction, lastMSG, machine } = msg.data || {};\nlet { messageType } = msg.typeMSG || {};\nlet currentTimestamp = new Date();\nlet currentStatus = context.get('currentStatus') || null;\nlet timeCurrentProduction = dateStartProduction !== null ? (currentTimestamp.getTime() - dateStartProduction.getTime()) / 1000 : null;\nlet timeLastProduction = dateLastProduction !== null ? (currentTimestamp.getTime() - dateLastProduction.getTime()) / 1000 : null;\n\ncontext.set('timeCurrentProduction', timeCurrentProduction);\ncontext.set('timeLastProduction', timeLastProduction);\n\nif (lastMSG === \"Buffer\") {\n    currentStatus = \"PROCESSANDO DADOS\"\n}\nelse if (lastMSG === \"Realtime\") {\n\n    if ((dateStartProduction !== null && dateLastProduction === null && timeCurrentProduction <= 10799)) currentStatus = \"TRABALHANDO\";\n\n    else if (dateLastProduction !== null) {\n        const machineWorking = (dateStartProduction !== null && timeCurrentProduction <= 10799);\n        const machineIdle = (dateStartProduction === null && timeLastProduction >= 300 && timeLastProduction <= 1799);\n        const machineOff = ((dateStartProduction === null && timeLastProduction >= 1800) || (timeCurrentProduction >= 10800));\n    \n        const newStatus = machineWorking ? \"TRABALHANDO\" : machineIdle ? \"PARADO\" : machineOff ? \"DESLIGADO\" : null;\n        if (newStatus) currentStatus = newStatus;\n    }\n\n    else if ((dateStartProduction === null && dateLastProduction === null) || (timeCurrentProduction >= 10800 && timeLastProduction >= 3600)) currentStatus = \"DESLIGADO\";\n}\ncontext.set('currentStatus', currentStatus);\n\nmsg.status = {\n    timeCurrentProduction: timeCurrentProduction,\n    timeLastProduction: timeLastProduction,\n    machine: machine,\n    currentStatus: currentStatus\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1610,
        "y": 740,
        "wires": [
            [
                "35f242dc65fdd3c3",
                "54be0c77cb6bd53b"
            ]
        ],
        "icon": "node-red/status.svg"
    },
    {
        "id": "7173fc9207ecdcc1",
        "type": "function",
        "z": "e0124708805f5d32",
        "name": "Increment Chapas",
        "func": "let { finishedCutPlan, lastMSG, deviceSerialNumber, dateLastProduction } = msg.payload;\nlet unit = context.get('unit') || null;\nlet count = context.get('count') || 0;\nlet currentTimestamp = lastMSG === \"Buffer\" && dateLastProduction !== null ? dateLastProduction.getTime() : new Date().getTime();\n\nif (finishedCutPlan === true) {\n    unit = \"Chapas\";\n    count = 1;\n    context.set('unit', unit);\n    context.set('count', count);\n\n    msg.payload = {\n        timestamp: currentTimestamp,\n        deviceSerialNumber: deviceSerialNumber,\n        unit: unit,\n        count: count,\n    }\n    msg.count = msg.payload;\n    return msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1810,
        "y": 700,
        "wires": [
            [
                "2fbafa2aa20f6145"
            ]
        ],
        "icon": "node-red/arrow-in.svg"
    },
    {
        "id": "35f242dc65fdd3c3",
        "type": "function",
        "z": "e0124708805f5d32",
        "name": "Formated message",
        "func": "let machine = msg.status.machine;\nlet timestamp = new Date().getTime();\nlet currentStatus = context.get('currentStatus') || null;\nlet oldStatus = msg.status.currentStatus;\n\nif (!currentStatus || currentStatus !== oldStatus) {\n    currentStatus = oldStatus;\n    context.set('currentStatus', currentStatus);\n\n    msg.payload = {\n        timestamp: timestamp,\n        deviceSerialNumber: machine,\n        status: currentStatus\n    }\n    return msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1810,
        "y": 740,
        "wires": [
            []
        ],
        "icon": "font-awesome/fa-envelope"
    },
    {
        "id": "2fbafa2aa20f6145",
        "type": "debug",
        "z": "e0124708805f5d32",
        "name": "debug 326",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2010,
        "y": 700,
        "wires": []
    },
    {
        "id": "a32fa799b519ab04",
        "type": "inject",
        "z": "e0124708805f5d32",
        "name": "TIMESTAMP (STATUS)",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1220,
        "y": 620,
        "wires": [
            [
                "7be734a459a23e51"
            ]
        ],
        "icon": "font-awesome/fa-hourglass-1"
    },
    {
        "id": "54be0c77cb6bd53b",
        "type": "debug",
        "z": "e0124708805f5d32",
        "name": "debug 327",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1750,
        "y": 800,
        "wires": []
    },
    {
        "id": "b8a8e4fe36aa8a88",
        "type": "inject",
        "z": "e0124708805f5d32",
        "name": "Send msgs",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1080,
        "y": 60,
        "wires": [
            [
                "12ba5d216d316a15"
            ]
        ]
    },
    {
        "id": "075b8d731d8cce9a",
        "type": "function",
        "z": "e0124708805f5d32",
        "g": "4eb84101d497e18a",
        "name": "Format payload object",
        "func": "let lostCount = flow.get('lostCount') || [];\n\nif (lostCount.length > 0) {\n    for (let i = 0; i < lostCount.length; i++) { // Percorre o objeto \n        const count = lostCount[i];\n\n        const msgToSend = {\n            payload: count,\n            index: count.timestamp\n        };\n        node.send(msgToSend);\n\n    }\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 2160,
        "wires": [
            [
                "78c1664a40f49c79"
            ]
        ],
        "icon": "node-red/envelope.svg"
    },
    {
        "id": "78c1664a40f49c79",
        "type": "http request",
        "z": "e0124708805f5d32",
        "g": "4eb84101d497e18a",
        "name": "POST/Count",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://201.48.250.181:5800/api/v2/event/count",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "bearer",
        "senderr": false,
        "headers": [],
        "x": 670,
        "y": 2160,
        "wires": [
            [
                "fa773e8d33484037"
            ]
        ]
    },
    {
        "id": "fa773e8d33484037",
        "type": "function",
        "z": "e0124708805f5d32",
        "g": "4eb84101d497e18a",
        "name": "Delete values sent",
        "func": "let lostCount = flow.get('lostCount') || [];\n\nif (msg.payload === \"true\" && msg.index) {\n    for (let i = 0; i < lostCount.length; i++) {\n        if (msg.index === lostCount[i].timestamp) {\n            lostCount.splice(i,1);\n            flow.set('lostCount', lostCount);\n        }\n    }\n}",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1010,
        "y": 2160,
        "wires": [],
        "icon": "font-awesome/fa-warning"
    },
    {
        "id": "f243b890429f95de",
        "type": "link in",
        "z": "e0124708805f5d32",
        "g": "4eb84101d497e18a",
        "name": "Try send",
        "links": [
            "bc75f309b3675db2"
        ],
        "x": 185,
        "y": 2160,
        "wires": [
            [
                "075b8d731d8cce9a"
            ]
        ],
        "icon": "node-red/inject.svg"
    },
    {
        "id": "387b8485c8eea636",
        "type": "function",
        "z": "e0124708805f5d32",
        "g": "d3a77f11570b08a7",
        "name": "Get count error",
        "func": "let lostCount = flow.get('lostCount') || []; \nif (msg.payload !== \"true\" && msg.count) {\n    lostCount.push(msg.count); // Aloca na lista o contador que n√£o foi enviado ao banco\n}\nflow.set('lostCount', lostCount); ",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 2280,
        "wires": [],
        "icon": "node-red/alert.svg"
    },
    {
        "id": "250532a81e3296f4",
        "type": "inject",
        "z": "e0124708805f5d32",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 110,
        "y": 2780,
        "wires": [
            []
        ]
    },
    {
        "id": "9160065ba1257f67",
        "type": "function",
        "z": "e0124708805f5d32",
        "name": "function 6",
        "func": "node.warn(\"integration test GITHUB1\");\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 420,
        "wires": [
            []
        ]
    },
    {
        "id": "92ba863ce78d32bc",
        "type": "inject",
        "z": "9f9f048f5359ff58",
        "name": "SWITCH1 ON",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF1599",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch1\": {\"Action\": \"ON\"} }",
        "payloadType": "json",
        "x": 150,
        "y": 160,
        "wires": [
            [
                "4151cc85b5a7654b"
            ]
        ]
    },
    {
        "id": "7c749f0d16aee580",
        "type": "inject",
        "z": "9f9f048f5359ff58",
        "name": "SWITCH1 OFF",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF1599",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch1\": {\"Action\": \"OFF\"} }",
        "payloadType": "json",
        "x": 160,
        "y": 200,
        "wires": [
            [
                "4151cc85b5a7654b"
            ]
        ]
    },
    {
        "id": "99b8aaee4f66d7ca",
        "type": "switch",
        "z": "9f9f048f5359ff58",
        "name": "Machine",
        "property": "payload.serialNumber",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "DF11FF",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 380,
        "y": 1780,
        "wires": [
            [
                "7b7b668df26f722d"
            ]
        ]
    },
    {
        "id": "94c413402a951628",
        "type": "function",
        "z": "9f9f048f5359ff58",
        "name": "Switch State",
        "func": "function handleSwitch(payload, context, switchName, statusSNSName, startName, finishName, verifyName) {\n    let switchKey = Object.keys(payload).find(key => key.startsWith(switchName)) // extrai o switch que chegou no payload\n    let switchState = context.get(switchName) || null;\n    let actionValue = payload[switchKey] ? payload[switchKey].Action : null; // extrai o estado do switch que chegou\n    let statusSNS = payload[statusSNSName] && payload[statusSNSName][switchName];\n    let startState = context.get(startName) || false;\n    let finishState = context.get(finishName) || false;\n    let verifyState = context.get(verifyName) || false;\n\n    switchState = actionValue || statusSNS || switchState; // adquiri o estado do switch que chegou\n\n    if (switchState == \"ON\" && finishState == false) { // Condi√ß√£o que caracteriza o in√≠cio da produ√ß√£o da pe√ßa\n        startState = true;\n    }\n    else if (switchState == \"OFF\" && startState == true) { // condi√ß√£o que caracteriza o final da produ√ß√£o da pe√ßa\n        finishState = true;\n    }\n    verifyState = startState == true && finishState == true ? true : false;\n\n    if (verifyState == true) { // reseta o in√≠cio o fim da produ√ß√£o quando a pe√ßa √© produzida\n        startState = false;\n        finishState = false;\n        \n    }\n    context.set(switchName, switchState);\n    context.set(startName, startState);\n    context.set(finishName, finishState);\n    context.set(verifyName, verifyState);\n\n    return {\n        switchState: switchState,\n        startState: startState,\n        finishState: finishState,\n        verifyState: verifyState\n    };\n}\nlet payload = msg.payload;\nlet switch1 = handleSwitch(payload, context, 'Switch1', 'StatusSNS', 'startPart', 'finishedPart', 'verifyPart');\nlet switch3 = handleSwitch(payload, context, 'Switch3', 'StatusSNS', 'automaticMode', 'noAutomaticMode', 'verifyAutomatic');\n\nmsg.switches = {\n    switch1: switch1.switchState,\n    switch3: switch3.switchState,\n    startPart: switch1.startState,\n    verifyPart: switch1.verifyState,\n    automaticMode: switch3.startState,\n}\nswitch1.verifyState = false; // reseta a condi√ß√£o de pe√ßa produzindo para false quando a pe√ßa √© finalizada\ncontext.set('verifyPart', switch1.verifyState);\n\nswitch3.verifyState = false;\ncontext.set('verifyAutomatic', switch3.verifyState);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 1780,
        "wires": [
            [
                "432db88e5b0b44ba"
            ]
        ],
        "icon": "node-red/swap.svg"
    },
    {
        "id": "7b7b668df26f722d",
        "type": "switch",
        "z": "9f9f048f5359ff58",
        "name": "OPTION SW",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "hask",
                "v": "Switch1",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "Switch3",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "StatusSNS",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 570,
        "y": 1780,
        "wires": [
            [
                "0f4feb85339d6d9b"
            ],
            [
                "0f4feb85339d6d9b"
            ],
            [
                "0f4feb85339d6d9b"
            ]
        ]
    },
    {
        "id": "0f4feb85339d6d9b",
        "type": "change",
        "z": "9f9f048f5359ff58",
        "name": "delete time",
        "rules": [
            {
                "t": "delete",
                "p": "payload.timestamp",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.StatusSNS.Time",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.StatusSNS.Switch1",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.StatusSNS.Switch2",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.StatusSNS.Switch4",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 750,
        "y": 1780,
        "wires": [
            [
                "a351a9f1175d5e83"
            ]
        ]
    },
    {
        "id": "a351a9f1175d5e83",
        "type": "rbe",
        "z": "9f9f048f5359ff58",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 910,
        "y": 1780,
        "wires": [
            [
                "94c413402a951628"
            ]
        ]
    },
    {
        "id": "432db88e5b0b44ba",
        "type": "function",
        "z": "9f9f048f5359ff58",
        "name": "Conditions Machine",
        "func": "let {startPart, automaticMode, verifyPart} = msg.switches;\nlet [startProduction, finishedPart] = ['startProduction','finishedPart'].map(key => context.get(key) || false);\nstartProduction = automaticMode && startPart ? true : false; // condi√ß√£o que define o in√≠cio da pe√ßa\nfinishedPart = automaticMode && verifyPart ? true : false; // condi√ß√£o que define a finaliza√ß√£o da pe√ßa\n\ncontext.set('startProduction', startProduction);\ncontext.set('finishedPart', finishedPart);\n\nmsg.conditions = {\n    startPart: startProduction,\n    finishPart: finishedPart,\n    serialNumber: msg.payload.serialNumber\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1270,
        "y": 1780,
        "wires": [
            [
                "30e21956a15f3a6a"
            ]
        ],
        "icon": "font-awesome/fa-bars"
    },
    {
        "id": "30e21956a15f3a6a",
        "type": "function",
        "z": "9f9f048f5359ff58",
        "name": "Production Machine",
        "func": "let {startPart, finishPart, serialNumber} = msg.conditions;\nlet payload = msg.payload;\nlet [machine, startingOfPart, dateLastProduction] = ['machine', 'startingOfPart', 'dateLastProduction'].map(key => context.get(key) || null);\nlet currentTimestamp = new Date();\nlet rebarCount = context.get('rebarCount') || 0;\nlet resetShift = context.get('resetShift') || false;\n\nconst actions = {\n    resetShift: () => {rebarCount = 0; resetShift = false; },\n    payloadReset: () => { resetShift = true;},\n    startPart: () => {startingOfPart = currentTimestamp; },\n    finishedPart: () => { rebarCount++; dateLastProduction = currentTimestamp; },\n    machineNull: () => { machine = serialNumber; }\n};\n\nconst conditions = {\n    resetShift: resetShift,\n    payloadReset: payload === 'reset',\n    startPart: startPart,\n    finishedPart: finishPart,\n    machineNull: serialNumber && machine == null,\n}\n\nObject.entries(conditions).forEach(([condition, isTrue]) => {  //Execu√ß√£o das fun√ß√µes baseada em suas condi√ß√µes\n    if(isTrue && actions[condition]) actions[condition]();\n});\ncontext.set('rebarCount', rebarCount);\ncontext.set('resetShift', resetShift);\ncontext.set('startingOfPart', startingOfPart);\ncontext.set('dateLastProduction', dateLastProduction);\ncontext.set('machine', machine);\n\nmsg.data = {\n    finishPart: finishPart,\n    rebar: rebarCount,\n    startProduction: startingOfPart,\n    dateLastProduction: dateLastProduction,\n    machine: machine\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1500,
        "y": 1780,
        "wires": [
            [
                "8df8a7f9ad94d13f",
                "83d63bc94aa2b93c"
            ]
        ],
        "icon": "font-awesome/fa-book"
    },
    {
        "id": "8df8a7f9ad94d13f",
        "type": "function",
        "z": "9f9f048f5359ff58",
        "name": "12HS",
        "func": "let { finishPart,rebar, machine} = msg.data;\n\nmsg.payload = {\n    finishPart: finishPart,\n    peca: rebar,\n    deviceSerialNumber: machine\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1750,
        "y": 1760,
        "wires": [
            [
                "cb8373aa04a2a389"
            ]
        ],
        "icon": "font-awesome/fa-cogs"
    },
    {
        "id": "83d63bc94aa2b93c",
        "type": "function",
        "z": "9f9f048f5359ff58",
        "name": "verifyStatus",
        "func": "let {startProduction, dateLastProduction, machine } = msg.data;\nlet [differenceTimeStartProduction, differenceTimelastProduction] = ['differenceTimeStartProduction', 'differenceTimelasProduction'].map(key => context.get(key) || 0);\nlet currentTimestamp = new Date();\nlet currentStatus = context.get('currentStatus') || null;\n\ndifferenceTimeStartProduction = startProduction !== null ? (currentTimestamp.getTime() - startProduction.getTime()) / 1000 : null;\ndifferenceTimelastProduction = dateLastProduction !== null ? (currentTimestamp.getTime() - dateLastProduction.getTime()) / 1000 : null;\n\ncontext.set('differenceTimeStartProduction', differenceTimeStartProduction);\ncontext.set('differenceTimelastProduction', differenceTimelastProduction);\n\nif (startProduction !== null) {\n\n    //Mapear status\n    const machineWorking = differenceTimeStartProduction <=299 || (differenceTimelastProduction !== null && differenceTimelastProduction <= 299);\n\n    const machineIdle = (differenceTimeStartProduction >= 300 && differenceTimelastProduction >= 300 && differenceTimelastProduction <= 1799) ||\n    (differenceTimeStartProduction >= 300 && differenceTimeStartProduction <= 1799 && dateLastProduction === null);\n\n    const machineOff = ((differenceTimeStartProduction >= 300 && differenceTimelastProduction >= 1800) || (differenceTimeStartProduction >= 1800 && dateLastProduction === null)) ;\n\n    const newStatus = machineWorking ? 'TRABALHANDO' : machineIdle ? 'PARADO' : machineOff ? 'DESLIGADO' : null;\n    if(newStatus) currentStatus = newStatus;\n}\n\nif (startProduction == null) currentStatus = \"DESLIGADO\";\n\ncontext.set('currentStatus', currentStatus);\n\nmsg.status = {\n    timeCurrentProduction: differenceTimeStartProduction,\n    timeLastProduction: differenceTimelastProduction,\n    machine: machine,\n    currentStatus: currentStatus\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1770,
        "y": 1800,
        "wires": [
            [
                "527db13ec3d107d7"
            ]
        ],
        "icon": "node-red/status.svg"
    },
    {
        "id": "527db13ec3d107d7",
        "type": "function",
        "z": "9f9f048f5359ff58",
        "name": "FormatedMessage",
        "func": "let machine = msg.status.machine;\nlet timestamp = new Date().getTime();\nlet currentStatus = context.get('currentStatus') || null; \nlet oldStatus = msg.status.currentStatus;\n\nif(!currentStatus || currentStatus !== oldStatus) {\n    currentStatus = oldStatus;\n    context.set('currentStatus', currentStatus);\n\n    msg.payload = {\n            timestamp: timestamp,\n            deviceSerialNumber: machine,\n            status: currentStatus\n    }\n    return msg;\n}\nreturn null;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1790,
        "y": 1840,
        "wires": [
            []
        ],
        "icon": "font-awesome/fa-envelope"
    },
    {
        "id": "07b33ad362a26905",
        "type": "inject",
        "z": "9f9f048f5359ff58",
        "name": "SWITCH1 ON",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF11FF",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch1\": {\"Action\": \"ON\"} }",
        "payloadType": "json",
        "x": 150,
        "y": 1680,
        "wires": [
            [
                "99b8aaee4f66d7ca"
            ]
        ]
    },
    {
        "id": "9c6fce6569a7be93",
        "type": "inject",
        "z": "9f9f048f5359ff58",
        "name": "SWITCH1 OFF",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF11FF",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch1\": {\"Action\": \"OFF\"} }",
        "payloadType": "json",
        "x": 160,
        "y": 1720,
        "wires": [
            [
                "99b8aaee4f66d7ca"
            ]
        ]
    },
    {
        "id": "4d7424b4eb33851b",
        "type": "inject",
        "z": "9f9f048f5359ff58",
        "name": "STATUS8",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF11FF",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"StatusSNS\": {  \"Switch3\": \"ON\" } }",
        "payloadType": "json",
        "x": 140,
        "y": 1860,
        "wires": [
            [
                "99b8aaee4f66d7ca"
            ]
        ]
    },
    {
        "id": "71baa2f482299773",
        "type": "inject",
        "z": "9f9f048f5359ff58",
        "name": "STATUS8",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF11FF",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"StatusSNS\": {  \"Switch3\": \"OFF\" } }",
        "payloadType": "json",
        "x": 140,
        "y": 1900,
        "wires": [
            [
                "99b8aaee4f66d7ca"
            ]
        ]
    },
    {
        "id": "57d3af408be1cf1a",
        "type": "inject",
        "z": "9f9f048f5359ff58",
        "name": "SWITCH3 ON",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF11FF",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch3\": {\"Action\": \"ON\"} }",
        "payloadType": "json",
        "x": 150,
        "y": 1780,
        "wires": [
            [
                "99b8aaee4f66d7ca"
            ]
        ]
    },
    {
        "id": "79d283b44bf7c1d5",
        "type": "inject",
        "z": "9f9f048f5359ff58",
        "name": "SWITCH3 OFF",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF11FF",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch3\": {\"Action\": \"OFF\"} }",
        "payloadType": "json",
        "x": 160,
        "y": 1820,
        "wires": [
            [
                "99b8aaee4f66d7ca"
            ]
        ]
    },
    {
        "id": "0d4e663602d14e58",
        "type": "inject",
        "z": "9f9f048f5359ff58",
        "name": "SWITCH1 ON",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF1599",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch1\": {\"Action\": \"ON\"} }",
        "payloadType": "json",
        "x": 110,
        "y": 2040,
        "wires": [
            [
                "896f474586a86b41"
            ]
        ]
    },
    {
        "id": "06d3aa47bc6109ee",
        "type": "inject",
        "z": "9f9f048f5359ff58",
        "name": "SWITCH2 ON",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF1599",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch2\": {\"Action\": \"ON\"} }",
        "payloadType": "json",
        "x": 110,
        "y": 2180,
        "wires": [
            [
                "896f474586a86b41"
            ]
        ]
    },
    {
        "id": "896f474586a86b41",
        "type": "switch",
        "z": "9f9f048f5359ff58",
        "name": "Machines",
        "property": "payload.serialNumber",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "DF1599",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 380,
        "y": 2140,
        "wires": [
            [
                "cb82cdb21e2c760a"
            ]
        ],
        "icon": "font-awesome/fa-desktop"
    },
    {
        "id": "cb82cdb21e2c760a",
        "type": "switch",
        "z": "9f9f048f5359ff58",
        "name": "OPTION SW",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "hask",
                "v": "Switch1",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "Switch2",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 570,
        "y": 2140,
        "wires": [
            [
                "1ea7a43a64902a07"
            ],
            [
                "1ea7a43a64902a07"
            ]
        ]
    },
    {
        "id": "1ea7a43a64902a07",
        "type": "function",
        "z": "9f9f048f5359ff58",
        "name": "Switch State",
        "func": "let payload = msg.payload;\nlet switch1 = context.get('switch1') || null;\nlet switch2 = context.get('switch2') || null;\nlet startAdvance = context.get('startAdvance') || false;\nlet finishedAdvance = context.get('finishedAdvance') || false;\nlet verifyAdvance =  context.get('verifyAdvance') || false;\nlet startCut =  context.get('startCut') || false;\nlet endCut = context.get('endCut') || false;\nlet verifyCut = context.get('verifyCut') || false;\n\nif (payload.Switch1 && payload.Switch1.Action == \"ON\") {\n    switch1 = \"ON\";\n    startAdvance = true;\n\n    context.set('switch1', switch1);\n    context.set('startAdvance', startAdvance);\n}\nelse if (payload.Switch1 && payload.Switch1.Action == \"OFF\" && switch1 == \"ON\" && startAdvance == true )  {\n    switch1 = \"OFF\";\n    finishedAdvance = true;\n\n    context.set('switch1', switch1);\n    context.set('finishedAdvance', finishedAdvance);\n\n}\n\nelse if (payload.Switch2 && payload.Switch2.Action == \"ON\") {\n    switch2 = \"ON\";\n    startCut = true;\n\n    context.set('switch2',switch2);\n    context.set('startCut', startCut);\n}\n\nelse if (payload.Switch2 && payload.Switch2.Action == \"OFF\" && switch2 == \"ON\") {\n    switch2 = \"OFF\";\n    endCut = true;\n\n    context.set('switch2', switch2);\n    context.set('endCut', endCut);\n}\n\nif(startAdvance == true && finishedAdvance == true) {\n    verifyAdvance = true;\n    context.set('verifyAdvance', verifyAdvance);\n\n    startAdvance = false;\n    context.set('startAdvance', startAdvance);\n\n    finishedAdvance = false;\n    context.set('finishedAdvance', finishedAdvance);\n}\n\nif (startCut == true && endCut == true) {\n    verifyCut = true;\n    context.set('verifyCut', verifyCut);\n\n    startCut = false;\n    context.set('startCut', startAdvance);\n\n    endCut = false;\n    context.set('endCut', endCut);\n}    \nmsg.switches = {\n    switch1: switch1,\n    switch2: switch2,\n    startAdvance: startAdvance,\n    finishedAdvance: finishedAdvance,\n    verifyAdvance: verifyAdvance,\n    startCut: startCut,\n    endCut: endCut,\n    verifyCut: verifyCut\n}\n\nif (verifyAdvance == true) {\n    verifyAdvance = false;\n    context.set('verifyAdvance', verifyAdvance);\n}\n\nif(verifyCut == true) {\n    verifyCut = false;\n    context.set('verifyCut', verifyCut);\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 2140,
        "wires": [
            [
                "891ba22d40f01d26"
            ]
        ],
        "icon": "node-red/swap.svg"
    },
    {
        "id": "ebf54a99086728aa",
        "type": "function",
        "z": "9f9f048f5359ff58",
        "name": "production machine",
        "func": "let payload = msg.payload;\nlet verifyAdvance = msg.switches.verifyAdvance || null;\nlet verifyTrelica6M = msg.conditions.trelica6M || null;\nlet verifyTrelica12M = msg.conditions.trelica12M || null;\nlet advanceCounter = msg.conditions.advanceCounter || null;\nlet serialNumber = msg.conditions.machine;\nlet currentTimestamp = new Date();\nlet countTrelica6M = context.get('countTrelica6M') || 0;\nlet countTrelica12M = context.get('countTrelica12M') || 0;\nlet sumWorkingTime = context.get('sumWorkingTime') || 0;\nlet sumIdleTime = context.get('sumIdleTime') || 0;\nlet machine = context.get('machine') || null;\nlet startWorking = context.get('startWorking') || null;\nlet lastTimestamp = context.get('lastTimestamp') || null;\nlet resetShift = context.get('resetShift') || false;\nlet currentStatus = advanceCounter > 0 ? \"TRABALHANDO\": \"PARADA\";\ncontext.set('currentStatus') || \"PARADA\";\n\nif(resetShift == true) {\n    countTrelica6M = 0;\n    countTrelica12M = 0;\n    sumWorkingTime = 0;\n    sumIdleTime = 0;\n\n    context.set('countTrelica6M', countTrelica6M);\n    context.set('countTrelica12M', countTrelica12M);\n    context.set('sumWorkingTime', sumWorkingTime);\n    context.set('sumIdleTime', sumIdleTime);\n\n    resetShift = false;\n    context.set('resetShift', resetShift);\n}\n\nif (verifyAdvance == true) {\n\n       if (lastTimestamp !== null) {\n        let differenceInSeconds = (currentTimestamp.getTime() - lastTimestamp.getTime()) / 1000;\n        context.set('lastTimestamp', currentTimestamp);\n\n        if (differenceInSeconds >= 300) {\n            sumIdleTime += differenceInSeconds;\n            context.set('sumIdleTime', sumIdleTime);\n        }\n        else {\n            sumWorkingTime += differenceInSeconds;\n            context.set('sumWorkingTime', sumWorkingTime);\n        }\n    }\n\n    lastTimestamp = currentTimestamp;\n    context.set('lastTimestamp', lastTimestamp);\n}\n\n\nelse if (advanceCounter == 0) {\n    currentStatus = \"PARADA\";\n    context.set('currentStatus', currentStatus);\n}\n\nif (verifyTrelica6M == true) {\n    countTrelica6M++;\n    context.set('countTrelica6M', countTrelica6M);\n\n    lastTimestamp = currentTimestamp;\n    context.set('lastTimestamp', lastTimestamp);\n\n}\n\nif (verifyTrelica12M == true) {\n    countTrelica12M++;\n    context.set('countTrelica12M', countTrelica12M);\n}\n\nif (machine == null) {\n    machine = serialNumber;\n    context.set('machine', machine);\n}\n\nif (payload == \"reset\") {\n    resetShift = true;\n    context.set('resetShift', resetShift);\n}\n\nmsg.data = {\n    trelica6M: countTrelica6M,\n    trelica12M: countTrelica12M,\n    advance: advanceCounter,\n    workingTime: sumWorkingTime.toFixed(3),\n    idleTime: sumIdleTime.toFixed(3),\n    lastTimestamp: lastTimestamp,\n    status: currentStatus,\n    machine: machine,\n    reset: resetShift\n\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1230,
        "y": 2140,
        "wires": [
            [
                "4084837de7b7cf8e",
                "c4fca817dfd9c5e9"
            ]
        ],
        "icon": "font-awesome/fa-book"
    },
    {
        "id": "891ba22d40f01d26",
        "type": "function",
        "z": "9f9f048f5359ff58",
        "name": "Conditions Machine",
        "func": "let verifyAdvance = msg.switches.verifyAdvance || null;\nlet verifyCut = msg.switches.verifyCut || null;\nlet advanceCounter = context.get('advanceCounter') || 0; \nlet cutCounter = context.get('cutCounter') || 0;\nlet trelica6M = context.get('trelica6M') || false;\nlet trelica12M = context.get('trelica12M') || false;\nlet machine = msg.payload.serialNumber;\n\nif( verifyAdvance == true) {\n    advanceCounter++;\n}\n\nif( verifyCut == true) {\n    cutCounter++\n}\ncontext.set('advanceCounter', advanceCounter);\n\nif (cutCounter > 0) {\n    if((advanceCounter >= 25 && advanceCounter <=49) && cutCounter > 0) { /* treli√ßa de 6 metros */\n        trelica6M = true;\n        context.set('trelica6M', trelica6M);\n\n        advanceCounter = 0;\n        context.set('advanceCounter', advanceCounter);\n\n        cutCounter = 0;\n        context.set('cutCounter', cutCounter);\n    }\n    else if ((advanceCounter >= 50 && advanceCounter <= 62) && cutCounter > 0) { /* treli√ßa de 12 metros */\n        trelica12M = true;\n        context.set('trelica12M', trelica12M);\n\n        advanceCounter = 0;\n        context.set('advanceCounter', advanceCounter);\n\n        cutCounter = 0;\n        context.set('cutCounter', cutCounter);\n    }\n    else {\n        advanceCounter = 0;\n        context.set('advanceCounter', advanceCounter);\n\n        cutCounter = 0;\n        context.set('cutCounter', cutCounter);\n    }\n}\n\n\nmsg.conditions = {\n    advanceCounter: advanceCounter,\n    cutCounter: cutCounter,\n    trelica6M: trelica6M,\n    trelica12M: trelica12M,\n    machine: machine\n}\n\nif (trelica6M == true || trelica12M == true) {\n    trelica6M = false;\n    trelica12M = false;\n\n    context.set('trelica6M', trelica6M);\n    context.set('trelica12M', trelica12M);\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 2140,
        "wires": [
            [
                "ebf54a99086728aa"
            ]
        ],
        "icon": "font-awesome/fa-bars"
    },
    {
        "id": "1a02a4d2ed93d918",
        "type": "inject",
        "z": "9f9f048f5359ff58",
        "name": "SWITCH1 OFF",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF1599",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch1\": {\"Action\": \"OFF\"} }",
        "payloadType": "json",
        "x": 120,
        "y": 2080,
        "wires": [
            [
                "896f474586a86b41"
            ]
        ]
    },
    {
        "id": "d7cb40a92b7e30d5",
        "type": "inject",
        "z": "9f9f048f5359ff58",
        "name": "SWITCH2 ON",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF1599",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch2\": {\"Action\": \"OFF\"} }",
        "payloadType": "json",
        "x": 110,
        "y": 2220,
        "wires": [
            [
                "896f474586a86b41"
            ]
        ]
    },
    {
        "id": "4084837de7b7cf8e",
        "type": "function",
        "z": "9f9f048f5359ff58",
        "name": "TRELI√áA AZUL",
        "func": "let workingTime = msg.data.workingTime;\nlet idleTime = msg.data.idleTime;\nlet status = msg.data.status;\nlet machine = msg.data.machine;\nlet trelica6M = msg.data.trelica6M;\nlet trelica12M = msg.data.trelica12M;\nlet reset = msg.data.reset;\nlet workingTimeMinutes = context.get('workingTimeMinutes') || 0;\nlet idleTimeMinutes = context.get('idleTimeMinutes') || 0;\n\nfunction minutesToHours(totalMinutes) {\n    var hours = String(Math.floor(totalMinutes / 60)).padStart(2, \"0\");\n    var minutes = String(totalMinutes % 60).padStart(2, \"0\");\n\n    return `${hours}:${minutes}`;\n}\n\nif (reset == true) {\n    workingTimeMinutes = 0;\n    idleTimeMinutes = 0;\n\n    context.set('workingTimeMinutes', workingTimeMinutes);\n    context.set('idleTimeMinutes', 0);\n}\n\nif (workingTime > 0 || idleTime > 0) {\n    workingTimeMinutes = workingTime / 60;\n    idleTimeMinutes = idleTime / 60;\n}\n\nmsg.payload = {\n    trelica6M: trelica6M,\n    trelica12M: trelica12M,\n    workingTimeMinutes: minutesToHours(workingTimeMinutes.toFixed(0)),\n    idleTimeMinutes: minutesToHours(idleTimeMinutes.toFixed(0)),\n    status: status,\n    deviceSerialNumber: machine\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1540,
        "y": 2140,
        "wires": [
            [
                "398d8246ec35b676"
            ]
        ],
        "icon": "font-awesome/fa-cogs"
    },
    {
        "id": "731b182757c42db1",
        "type": "inject",
        "z": "9f9f048f5359ff58",
        "name": "TIMESTAMP (STATUS)",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "switches",
                "v": "{}",
                "vt": "json"
            },
            {
                "p": "conditions",
                "v": "{}",
                "vt": "json"
            },
            {
                "p": "data",
                "v": "{}",
                "vt": "json"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1000,
        "y": 2000,
        "wires": [
            [
                "ebf54a99086728aa"
            ]
        ]
    },
    {
        "id": "c4fca817dfd9c5e9",
        "type": "function",
        "z": "9f9f048f5359ff58",
        "name": "verifyStatus",
        "func": "let lastTimestamp = msg.data.lastTimestamp;\nlet machine = msg.data.machine;\nlet status = msg.data.status;\nlet currentTimestamp = new Date();\nlet currentStatus = context.get('currentStatus') || null;\nlet differenceInSeconds = context.get('differenceInSeconds') || 0;\n\nif(lastTimestamp !== null) {\n\n    differenceInSeconds = (currentTimestamp.getTime() - lastTimestamp) / 1000;\n    context.set('differenceInSeconds', differenceInSeconds);\n\n    if(differenceInSeconds >= 300) {\n        currentStatus = \"PARADA\";\n        context.set('currentStatus', currentStatus);\n    }\n\n    if ((differenceInSeconds <= 299)) {\n        currentStatus = \"TRABALHANDO\";\n        context.set('currentStatus', currentStatus);\n    }\n\n    else if (differenceInSeconds >= 1800) {\n        currentStatus = \"DESLIGADO\";\n        context.set('currentStatus', currentStatus);\n    }\n}\nelse if( lastTimestamp == null && status == \"PARADA\") {\n    currentStatus = \"DESLIGADO\";\n    context.set('currentStatus', currentStatus);\n}\nmsg.status = {\n    time: differenceInSeconds,\n    machine: machine,\n    currentStatus: currentStatus\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1530,
        "y": 2180,
        "wires": [
            [
                "978495476beb4d96",
                "e2759ae6bc305de8"
            ]
        ],
        "icon": "node-red/status.svg"
    },
    {
        "id": "978495476beb4d96",
        "type": "function",
        "z": "9f9f048f5359ff58",
        "name": "FormatedMessage",
        "func": "let machine = msg.status.machine;\nlet timestamp = new Date().getTime();\nlet currentStatus = context.get('currentStatus') || null; \nlet oldStatus = msg.status.currentStatus;\n\nif(!currentStatus || currentStatus !== oldStatus) {\n    currentStatus = oldStatus;\n    context.set('currentStatus', currentStatus);\n\n    msg.payload = {\n            timestamp: timestamp,\n            deviceSerialNumber: machine,\n            status: currentStatus\n    }\n    return msg;\n}\nreturn null;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1550,
        "y": 2220,
        "wires": [
            []
        ],
        "icon": "font-awesome/fa-envelope"
    },
    {
        "id": "e2759ae6bc305de8",
        "type": "debug",
        "z": "9f9f048f5359ff58",
        "name": "debug 199",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1770,
        "y": 2260,
        "wires": []
    },
    {
        "id": "252858dff8584854",
        "type": "inject",
        "z": "9f9f048f5359ff58",
        "name": "SWITCH1 ON",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF4C74",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch1\": {\"Action\": \"ON\"} }",
        "payloadType": "json",
        "x": 130,
        "y": 2420,
        "wires": [
            [
                "bc8a49d3e572eb3f"
            ]
        ]
    },
    {
        "id": "35a30e301cbd6f32",
        "type": "inject",
        "z": "9f9f048f5359ff58",
        "name": "SWITCH1 OFF",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF4C74",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch1\": {\"Action\": \"OFF\"} }",
        "payloadType": "json",
        "x": 140,
        "y": 2460,
        "wires": [
            [
                "bc8a49d3e572eb3f"
            ]
        ]
    },
    {
        "id": "f61cac1e9744eb96",
        "type": "inject",
        "z": "9f9f048f5359ff58",
        "name": "SWITCH2 ON",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF4C74",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch2\": {\"Action\": \"ON\"} }",
        "payloadType": "json",
        "x": 130,
        "y": 2540,
        "wires": [
            [
                "bc8a49d3e572eb3f"
            ]
        ]
    },
    {
        "id": "fdef7dfb75a6fdfe",
        "type": "inject",
        "z": "9f9f048f5359ff58",
        "name": "SWITCH2 OFF",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF4C74",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch2\": {\"Action\": \"OFF\"} }",
        "payloadType": "json",
        "x": 140,
        "y": 2580,
        "wires": [
            [
                "bc8a49d3e572eb3f"
            ]
        ]
    },
    {
        "id": "992c319604868fdc",
        "type": "inject",
        "z": "9f9f048f5359ff58",
        "name": "STATUS8",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF4C74",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"StatusSNS\": {  \"Switch3\": \"ON\" } }",
        "payloadType": "json",
        "x": 120,
        "y": 2660,
        "wires": [
            [
                "bc8a49d3e572eb3f"
            ]
        ]
    },
    {
        "id": "fa6c2672e5f168f1",
        "type": "inject",
        "z": "9f9f048f5359ff58",
        "name": "STATUS8",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF4C74",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"StatusSNS\": {  \"Switch3\": \"OFF\" } }",
        "payloadType": "json",
        "x": 120,
        "y": 2700,
        "wires": [
            [
                "bc8a49d3e572eb3f"
            ]
        ]
    },
    {
        "id": "471b1afb3eaadb59",
        "type": "inject",
        "z": "9f9f048f5359ff58",
        "name": "SWITCH3 ON",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF4C74",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch3\": {\"Action\": \"ON\"} }",
        "payloadType": "json",
        "x": 130,
        "y": 2740,
        "wires": [
            [
                "bc8a49d3e572eb3f"
            ]
        ]
    },
    {
        "id": "9435c48dd8ca892f",
        "type": "inject",
        "z": "9f9f048f5359ff58",
        "name": "SWITCH3 OFF",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF4C74",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch3\": {\"Action\": \"OFF\"} }",
        "payloadType": "json",
        "x": 140,
        "y": 2780,
        "wires": [
            [
                "bc8a49d3e572eb3f"
            ]
        ]
    },
    {
        "id": "bc8a49d3e572eb3f",
        "type": "switch",
        "z": "9f9f048f5359ff58",
        "name": "Machines",
        "property": "payload.serialNumber",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "DF4C74",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "DF4B99",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 440,
        "y": 2760,
        "wires": [
            [
                "39bbd2792720e532",
                "45cb30e7f63d1cdc"
            ],
            [
                "05a71a6191a40ece"
            ]
        ],
        "icon": "font-awesome/fa-desktop"
    },
    {
        "id": "39bbd2792720e532",
        "type": "switch",
        "z": "9f9f048f5359ff58",
        "name": "OPTION SW",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "hask",
                "v": "Switch1",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "Switch2",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "Switch3",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "StatusSNS",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 4,
        "x": 630,
        "y": 2680,
        "wires": [
            [
                "89a9db068cd6700d"
            ],
            [
                "89a9db068cd6700d"
            ],
            [
                "89a9db068cd6700d"
            ],
            [
                "89a9db068cd6700d"
            ]
        ]
    },
    {
        "id": "89a9db068cd6700d",
        "type": "change",
        "z": "9f9f048f5359ff58",
        "name": "delete time",
        "rules": [
            {
                "t": "delete",
                "p": "payload.timestamp",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.StatusSNS.Time",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.StatusSNS.Switch1",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.StatusSNS.Switch2",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.StatusSNS.Switch4",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 810,
        "y": 2680,
        "wires": [
            [
                "344fbadde81e0cb5"
            ]
        ]
    },
    {
        "id": "ef2cf1875e013703",
        "type": "function",
        "z": "9f9f048f5359ff58",
        "name": "Switch State",
        "func": "function handleSwitch(payload, context, switchName, statusSNSName, startName, finishName, verifyName) {\n    let switchKey = Object.keys(payload).find(key => key.startsWith(switchName)) // extrai o switch que chegou no payload\n    let switchState = context.get(switchName) || null;\n    let actionValue = payload[switchKey] ? payload[switchKey].Action : null; // extrai o estado do switch que chegou\n    let statusSNS = payload[statusSNSName] && payload[statusSNSName][switchName];\n    let startState = context.get(startName) || false;\n    let finishState = context.get(finishName) || false;\n    let verifyState = context.get(verifyName) || false;\n\n    switchState = actionValue || statusSNS || switchState; // adquire o estado do switch que chegou\n\n    if (switchState == \"ON\" && finishState == false) { // Condi√ß√£o que caracteriza o in√≠cio da produ√ß√£o\n        startState = true;\n    }\n    else if (switchState == \"OFF\" && startState == true) { // Condi√ß√£o que caracteriza o final da produ√ß√£o \n        finishState = true;\n    }\n    verifyState = startState == true && finishState == true ? true : false;\n\n    if (verifyState == true) { // reseta o ao finalizar a a√ß√£o \n        startState = false;\n        finishState = false;\n\n    }\n    context.set(switchName, switchState);\n    context.set(startName, startState);\n    context.set(finishName, finishState);\n    context.set(verifyName, verifyState);\n\n    return {\n        switchState: switchState,\n        startState: startState,\n        finishState: finishState,\n        verifyState: verifyState\n    };\n}\nlet payload = msg.payload;\nlet switch1 = handleSwitch(payload, context, 'Switch1', 'StatusSNS', 'startSolder', 'finishedSolder', 'verifySolder');\nlet switch2 = handleSwitch(payload, context, 'Switch2', 'StatusSNS', 'startCut', 'finishedCut', 'verifyCut');\nlet switch3 = handleSwitch(payload, context, 'Switch3', 'StatusSNS', 'automaticMode', 'noAutomaticMode', 'verifyAutomaticMode');\n\nmsg.switches = {\n    switch1: switch1.switchState,\n    switch2: switch2.switchState,\n    switch3: switch3.switchState,\n    startSolder: switch1.startState,\n    verifySolder: switch1.verifyState,\n    verifyCut: switch2.verifyState,\n    automaticMode: switch3.startState,\n}\nswitch1.verifyState = false; // reseta a condi√ß√£o de pe√ßa produzindo para false quando a pe√ßa √© finalizada\ncontext.set('verifySolder', switch1.verifyState);\n\nswitch2.verifyState = false;\ncontext.set('verifyCut', switch2.verifyState);\n\nswitch3.verifyState = false;\ncontext.set('verifyAutomaticMode', switch3.verifyState);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1130,
        "y": 2680,
        "wires": [
            [
                "d5dfd8bf8cb1ed61"
            ]
        ],
        "icon": "node-red/swap.svg"
    },
    {
        "id": "d5dfd8bf8cb1ed61",
        "type": "function",
        "z": "9f9f048f5359ff58",
        "name": "Conditions Machine",
        "func": "let { automaticMode, verifySolder, verifyCut } = msg.switches;\nlet [solderCounter, cutCounter] = ['solderCounter', 'cutCounter'].map(key => context.get(key) || 0);\nlet verifyColumn = context.get('verifyColumn') || false;\n\nif (automaticMode && verifySolder) solderCounter++;\nif (automaticMode && verifyCut) cutCounter++;\nverifyColumn = solderCounter >= 10 && solderCounter <= 28 && cutCounter > 0 ? true : false;\n\nif (cutCounter > 0) {\n    solderCounter = 0;\n    cutCounter = 0;\n    ['solderCounter', 'cutCounter'].forEach(key => context.set(key, 0));\n}\ncontext.set('solderCounter', solderCounter);\n\nmsg.conditions = {\n    solderCounter,\n    cutCounter,\n    verifyColumn,\n    serialNumber: msg.payload.serialNumber\n}\nverifyColumn = false;\ncontext.set('verifyColumn', verifyColumn);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1330,
        "y": 2680,
        "wires": [
            [
                "47f83098c1b269b9"
            ]
        ],
        "icon": "font-awesome/fa-bars"
    },
    {
        "id": "b425a4e888911bf1",
        "type": "catch",
        "z": "9f9f048f5359ff58",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 160,
        "y": 2860,
        "wires": [
            [
                "dfdee25185748559"
            ]
        ]
    },
    {
        "id": "dfdee25185748559",
        "type": "debug",
        "z": "9f9f048f5359ff58",
        "name": "debug 203",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 430,
        "y": 2880,
        "wires": []
    },
    {
        "id": "344fbadde81e0cb5",
        "type": "rbe",
        "z": "9f9f048f5359ff58",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 970,
        "y": 2680,
        "wires": [
            [
                "ef2cf1875e013703"
            ]
        ]
    },
    {
        "id": "47f83098c1b269b9",
        "type": "function",
        "z": "9f9f048f5359ff58",
        "name": "production machine",
        "func": "let { payload, switches: { verifySolder = null }, conditions: { verifyColumn = null, solderCounter = 0, serialNumber } } = msg;\nlet [machine, timestampLastSolder, timestampLastColumn] = ['machine', 'timestampLastSolder', 'timestampLastColumn'].map(key => context.get(key) || null);\nlet countColumn = context.get('countColumn') || 0;\nlet resetShift = context.get('resetShift') || false;\nlet currentTimestamp = new Date();\n\nconst actions = {\n    resetShift: () => { countColumn = 0; resetShift = false; },\n    payloadReset: () => { resetShift = true; },\n    verifySolder: () => { timestampLastSolder = currentTimestamp; },\n    verifyColumn: () => { countColumn++; timestampLastColumn = currentTimestamp; },\n    machineNull: () => { machine = serialNumber; }\n}\nconst conditions = {\n    resetShift: resetShift === true,\n    payloadReset: payload === 'reset',\n    verifySolder: verifySolder === true,\n    verifyColumn: verifyColumn === true,\n    machineNull: serialNumber && machine === null,\n};\n\nObject.entries(conditions).forEach(([condition, isTrue]) => {\n    if (isTrue) {\n        actions[condition]();\n    }\n});\ncontext.set('countColumn', countColumn);\ncontext.set('resetShift', resetShift);\ncontext.set('timestampLastSolder', timestampLastSolder);\ncontext.set('timestampLastColumn', timestampLastColumn);\ncontext.set('machine', machine);\n\nmsg.data = {\n    verifyColumn: verifyColumn,\n    solderCounter: solderCounter,\n    colunas: countColumn,\n    timestampLastSolder: timestampLastSolder,\n    timestampLastProduction: timestampLastColumn,\n    machine: machine,\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1550,
        "y": 2680,
        "wires": [
            [
                "153843d0e151d569",
                "d25a642c2f9c2990",
                "14911612ad7f4be5"
            ]
        ],
        "icon": "font-awesome/fa-book"
    },
    {
        "id": "153843d0e151d569",
        "type": "function",
        "z": "9f9f048f5359ff58",
        "name": "SCHNELL",
        "func": "let { verifyColumn ,machine, colunas, solderCounter } = msg.data;\n\nmsg.payload = {\n    verifyColumn: verifyColumn,\n    colunas: colunas,\n    soldas: solderCounter,\n    deviceSerialNumber: machine\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1770,
        "y": 2640,
        "wires": [
            [
                "8b805f0f9b77a3d7"
            ]
        ],
        "icon": "font-awesome/fa-cogs"
    },
    {
        "id": "d25a642c2f9c2990",
        "type": "function",
        "z": "9f9f048f5359ff58",
        "name": "verifyStatus",
        "func": "const { timestampLastSolder, timestampLastProduction, colunas, machine } = msg.data;\nlet [differenceLastSolder, differenceProductionTime] = ['differenceLastSolder', 'differenceProductionTime'].map(key => context.get(key) || null);\nlet currentTimestamp = new Date();\nlet currentStatus = context.get('currentStatus') || null;\n\ndifferenceLastSolder = timestampLastSolder !== null ? (currentTimestamp.getTime() - timestampLastSolder.getTime()) / 1000 : null;\ndifferenceProductionTime = timestampLastProduction !== null ? (currentTimestamp.getTime() - timestampLastProduction.getTime()) / 1000 : null;\n\ncontext.set('differenceLastSolder', differenceLastSolder);\ncontext.set('differenceProductionTime', differenceProductionTime);\n\nif (timestampLastSolder !== null) {\n\n    // Mapear estados\n    const isWorking = differenceLastSolder <= 299 || (differenceProductionTime <= 299 && differenceProductionTime !== null);\n    const isStopped = (differenceLastSolder >= 300 && differenceProductionTime >= 300 && differenceProductionTime <= 1799) ||\n        (differenceLastSolder >= 300 && differenceLastSolder <= 1799 && colunas === 0 && timestampLastProduction == null);\n    const isTurnedOff = differenceLastSolder >= 1800 || differenceProductionTime >= 1800;\n\n    const newState = isWorking ? 'TRABALHANDO' : isStopped ? 'PARADO' : isTurnedOff ? 'DESLIGADO' : null;\n    if (newState) currentStatus = newState;\n}\nif (timestampLastSolder == null) currentStatus = \"DESLIGADO\";\n\ncontext.set('currentStatus', currentStatus);\n\nmsg.status = {\n    timeAdvance: differenceLastSolder,\n    timeLastTrelica: differenceProductionTime,\n    machine: machine,\n    currentStatus: currentStatus\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1770,
        "y": 2680,
        "wires": [
            [
                "304a4db5fc02c867"
            ]
        ],
        "icon": "node-red/status.svg"
    },
    {
        "id": "304a4db5fc02c867",
        "type": "function",
        "z": "9f9f048f5359ff58",
        "name": "FormatedMessage",
        "func": "let machine = msg.status.machine;\nlet timestamp = new Date().getTime();\nlet currentStatus = context.get('currentStatus') || null; \nlet oldStatus = msg.status.currentStatus;\n\nif(!currentStatus || currentStatus !== oldStatus) {\n    currentStatus = oldStatus;\n    context.set('currentStatus', currentStatus);\n\n    msg.payload = {\n            timestamp: timestamp,\n            deviceSerialNumber: machine,\n            status: currentStatus\n    }\n    return msg;\n}\nreturn null;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1990,
        "y": 2680,
        "wires": [
            []
        ],
        "icon": "font-awesome/fa-envelope"
    },
    {
        "id": "05a71a6191a40ece",
        "type": "switch",
        "z": "9f9f048f5359ff58",
        "name": "OPTION SW",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "hask",
                "v": "Switch1",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "Switch2",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "Switch3",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "StatusSNS",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 4,
        "x": 630,
        "y": 2840,
        "wires": [
            [
                "644f2470c1ee3717"
            ],
            [
                "644f2470c1ee3717"
            ],
            [
                "644f2470c1ee3717"
            ],
            [
                "644f2470c1ee3717"
            ]
        ]
    },
    {
        "id": "644f2470c1ee3717",
        "type": "change",
        "z": "9f9f048f5359ff58",
        "name": "delete time",
        "rules": [
            {
                "t": "delete",
                "p": "payload.timestamp",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.StatusSNS.Time",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.StatusSNS.Switch1",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.StatusSNS.Switch2",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.StatusSNS.Switch4",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 810,
        "y": 2840,
        "wires": [
            [
                "32c4f99cf4cb53d9"
            ]
        ]
    },
    {
        "id": "c5cbf05ec8ad277c",
        "type": "function",
        "z": "9f9f048f5359ff58",
        "name": "Switch State",
        "func": "function handleSwitch(payload, context, switchName, startName, finishName, verifyName) {\n    let switchState = context.get(switchName) || null;\n    let startState = context.get(startName) || false;\n    let finishState = context.get(finishName) || false;\n    let verifyState = context.get(verifyName) || false;\n\n    if (payload[switchName] && payload[switchName].Action == \"ON\") {\n        switchState = \"ON\";\n        startState = true;\n    } else if (payload[switchName] && payload[switchName].Action == \"OFF\" && switchState == \"ON\" && startState == true) {\n        switchState = \"OFF\";\n        finishState = true;\n    }\n\n    if (startState == true && finishState == true) {\n        verifyState = true;\n        startState = false;\n        finishState = false;\n    }\n\n    context.set(switchName, switchState);\n    context.set(startName, startState);\n    context.set(finishName, finishState);\n    context.set(verifyName, verifyState);\n\n    return {\n        switchState: switchState,\n        startState: startState,\n        finishState: finishState,\n        verifyState: verifyState\n    };\n}\n\nlet payload = msg.payload;\nlet switch3 = context.get('switch3') || null;\nlet automaticMode = context.get('automaticMode') || false;\n\nlet solder = handleSwitch(payload, context, 'Switch1', 'startSolder', 'finishedSolder', 'verifySolder');\nlet cut = handleSwitch(payload, context, 'Switch2', 'startCut', 'finishedCut', 'verifyCut');\n\nif ((payload && payload.Switch3 && payload.Switch3.Action == \"ON\") || (payload && payload.StatusSNS && payload.StatusSNS.Switch3 == \"ON\")) {\n    switch3 = \"ON\";\n    automaticMode = true;\n} else if ((payload && payload.Switch3 && payload.Switch3.Action == \"OFF\") || (payload && payload.StatusSNS && payload.StatusSNS.Switch3 == \"OFF\") && switch3 == \"ON\") {\n    switch3 = \"OFF\";\n    automaticMode = false;\n}\n\ncontext.set('switch3', switch3);\ncontext.set('automaticMode', automaticMode);\n\nmsg.switches = {\n    switch1: solder.switchState,\n    switch2: cut.switchState,\n    switch3: switch3,\n    startSolder: solder.startState,\n    finishedSolder: solder.finishState,\n    verifySolder: solder.verifyState,\n    startCut: cut.startState,\n    finishedCut: cut.finishState,\n    verifyCut: cut.verifyState,\n    automaticMode: automaticMode\n}\n\nif (solder.verifyState == true) {\n    solder.verifyState = false;\n    context.set('verifySolder', solder.verifyState);\n}\n\nif (cut.verifyState == true) {\n    cut.verifyState = false;\n    context.set('verifyCut', cut.verifyState);\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1150,
        "y": 2840,
        "wires": [
            [
                "ada67f57efb317f9"
            ]
        ],
        "icon": "node-red/swap.svg"
    },
    {
        "id": "ada67f57efb317f9",
        "type": "function",
        "z": "9f9f048f5359ff58",
        "name": "Conditions Machine",
        "func": "let verifySolder = msg.switches.verifySolder || null;\nlet automaticMode = msg.switches.automaticMode || null;\nlet verifyCut = msg.switches.verifyCut || null;\nlet machine = msg.payload.serialNumber;\nlet solderCounter = context.get('solderCounter') || 0;\nlet cutCounter = context.get('cutCounter') || 0;\nlet verifyColumn = context.get('verifyColumn') || false;\n\nfunction resetVariables () {\n        solderCounter = 0;\n        context.set('solderCounter', solderCounter);\n\n        cutCounter = 0.;\n        context.set('cutCounter', cutCounter);\n}\nif (verifySolder == true && automaticMode == true) {\n    solderCounter++;\n}\n\nif (verifyCut == true && automaticMode == true) {\n    cutCounter++;\n}\ncontext.set('solderCounter', solderCounter);\n\nif(cutCounter > 0) {\n    if ((solderCounter >= 10 && solderCounter <= 28) && cutCounter > 0) { /* Coluna realizada */\n        verifyColumn = true;\n        context.set('verifyColumn', verifyColumn);\n\n        resetVariables();\n    }\n    else{ /* n√£o √© uma coluna */\n        resetVariables();\n    }\n}\n\nmsg.conditions = {\n    solderCounter: solderCounter,\n    cutCounter: cutCounter,\n    verifyColumn: verifyColumn,\n    machine: machine\n}\n\nif(verifyColumn == true) {\n    verifyColumn = false;\n    context.set('verifyColumn', verifyColumn);\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1330,
        "y": 2840,
        "wires": [
            [
                "a82d6faf50f036cb"
            ]
        ],
        "icon": "font-awesome/fa-bars"
    },
    {
        "id": "32c4f99cf4cb53d9",
        "type": "rbe",
        "z": "9f9f048f5359ff58",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 970,
        "y": 2840,
        "wires": [
            [
                "c5cbf05ec8ad277c"
            ]
        ]
    },
    {
        "id": "a82d6faf50f036cb",
        "type": "function",
        "z": "9f9f048f5359ff58",
        "name": "production machine",
        "func": "let { payload, switches: { verifySolder = null }, conditions: { verifyColumn = null, solderCounter = null, machine: serialNumber } } = msg;\nlet currentTimestamp = new Date();\nlet [countColumn, sumWorkingTime, sumIdleTime, machine, resetShift] = ['countColumn', 'sumWorkingTime', 'sumIdleTime', 'machine', 'resetShift'].map(key => context.get(key) || 0);\nlet currentStatus = solderCounter > 0 ? \"TRABALHANDO\" : \"PARADA\";\nlet lastTimestamp = context.get('lastTimestamp') || null;\ncontext.set('currentStatus', currentStatus);\n\nif (resetShift == true) {\n    [countColumn, sumWorkingTime, sumIdleTime] = [0, 0, 0];\n    context.set('countColumn', countColumn);\n    context.set('sumWorkingTime', sumWorkingTime);\n    context.set('sumIdleTime', sumIdleTime);\n    resetShift = false;\n    context.set('resetShift', resetShift);\n}\n\nif (verifySolder == true) {\n    if (lastTimestamp !== null) {\n        let differenceInSeconds = (currentTimestamp.getTime() - lastTimestamp.getTime()) / 1000;\n        context.set('lastTimestamp', currentTimestamp);\n\n        if (differenceInSeconds >= 300) {\n            sumIdleTime += differenceInSeconds;\n            context.set('sumIdleTime', sumIdleTime);\n        }\n        else {\n            sumWorkingTime += differenceInSeconds;\n            context.set('sumWorkingTime', sumWorkingTime);\n        }\n    }\n    lastTimestamp = currentTimestamp;\n    context.set('lastTimestamp', lastTimestamp);\n\n} else if (verifyColumn == true) {\n    countColumn++;\n    context.set('countColumn', countColumn);\n}\n\nif (machine == null) {\n    machine = serialNumber;\n    context.set('machine', machine);\n}\n\nif (payload == \"reset\") {\n    resetShift = true;\n    context.set('resetShift', resetShift);\n}\n\nmsg.data = {\n    colunas: countColumn,\n    solderCounter: solderCounter,\n    workingTime: sumWorkingTime.toFixed(3),\n    idleTime: sumIdleTime.toFixed(3),\n    lastTimestamp: lastTimestamp,\n    status: currentStatus,\n    machine: machine,\n    reset: resetShift\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1550,
        "y": 2840,
        "wires": [
            [
                "4ec546c76b9cee77",
                "645166f567c7fd7f"
            ]
        ],
        "icon": "font-awesome/fa-book"
    },
    {
        "id": "4ec546c76b9cee77",
        "type": "function",
        "z": "9f9f048f5359ff58",
        "name": "DHALMAR",
        "func": "let workingTime = msg.data.workingTime;\nlet idleTime = msg.data.idleTime;\nlet status = msg.data.status;\nlet machine = msg.data.machine;\nlet colunas = msg.data.colunas;\nlet soldas = msg.data.solderCounter;\nlet reset = msg.data.reset;\nlet workingTimeMinutes = context.get('workingTimeMinutes') || 0;\nlet idleTimeMinutes = context.get('idleTimeMinutes') || 0;\n\nfunction minutesToHours(totalMinutes) {\n    var hours = String(Math.floor(totalMinutes / 60)).padStart(2, \"0\");\n    var minutes = String(totalMinutes % 60).padStart(2, \"0\");\n\n    return `${hours}:${minutes}`;\n}\n\nif (reset == true) {\n    workingTimeMinutes = 0;\n    idleTimeMinutes = 0;\n\n    context.set('workingTimeMinutes', workingTimeMinutes);\n    context.set('idleTimeMinutes', 0);\n}\n\nif (workingTime > 0 || idleTime > 0) {\n    workingTimeMinutes = workingTime / 60;\n    idleTimeMinutes = idleTime / 60;\n}\n\nmsg.payload = {\n    colunas: colunas,\n    soldas: soldas,\n    workingTimeMinutes: minutesToHours(workingTimeMinutes.toFixed(0)),\n    idleTimeMinutes: minutesToHours(idleTimeMinutes.toFixed(0)),\n    status: status,\n    deviceSerialNumber: machine\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1810,
        "y": 2800,
        "wires": [
            []
        ],
        "icon": "font-awesome/fa-cogs"
    },
    {
        "id": "645166f567c7fd7f",
        "type": "function",
        "z": "9f9f048f5359ff58",
        "name": "verifyStatus",
        "func": "let solderCounter = msg.conditions.solderCounter;\nlet lastTimestamp = msg.data.lastTimestamp;\nlet machine = msg.data.machine;\nlet status = msg.data.status;\nlet currentTimestamp = new Date();\nlet currentStatus = context.get('currentStatus') || \"TRABALHANDO\";\nlet differenceInSeconds = context.get('differenceInSeconds') || 0;\n\nif (lastTimestamp !== null) {\n\n    differenceInSeconds = (currentTimestamp.getTime() - lastTimestamp) / 1000;\n    context.set('differenceInSeconds', differenceInSeconds);\n\n    if (differenceInSeconds >= 300) {\n        currentStatus = \"PARADO\";\n        context.set('currentStatus', currentStatus);\n    }\n\n    if (differenceInSeconds <= 299) {\n        currentStatus = \"TRABALHANDO\";\n        context.set('currentStatus', currentStatus);\n    }\n\n    else if (differenceInSeconds >= 1800) {\n        currentStatus = \"DESLIGADO\";\n        context.set('currentStatus', currentStatus);\n    }\n}\nelse if (lastTimestamp == null && status == \"PARADA\") {\n    currentStatus = \"DESLIGADO\";\n    context.set('currentStatus', currentStatus);\n}\nmsg.status = {\n    time: differenceInSeconds,\n    machine: machine,\n    currentStatus: currentStatus\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1810,
        "y": 2840,
        "wires": [
            [
                "2a9dedc24ba94387"
            ]
        ],
        "icon": "node-red/status.svg"
    },
    {
        "id": "2a9dedc24ba94387",
        "type": "function",
        "z": "9f9f048f5359ff58",
        "name": "FormatedMessage",
        "func": "let machine = msg.status.machine;\nlet timestamp = new Date().getTime();\nlet currentStatus = context.get('currentStatus') || null; \nlet oldStatus = msg.status.currentStatus;\n\nif(!currentStatus || currentStatus !== oldStatus) {\n    currentStatus = oldStatus;\n    context.set('currentStatus', currentStatus);\n\n    msg.payload = {\n            timestamp: timestamp,\n            deviceSerialNumber: machine,\n            status: currentStatus\n    }\n    return msg;\n}\nreturn null;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1830,
        "y": 2880,
        "wires": [
            []
        ],
        "icon": "font-awesome/fa-envelope"
    },
    {
        "id": "7767c6b5a648a5cb",
        "type": "debug",
        "z": "9f9f048f5359ff58",
        "name": "debug 205",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2250,
        "y": 2680,
        "wires": []
    },
    {
        "id": "145cdb65b9ee3c89",
        "type": "inject",
        "z": "9f9f048f5359ff58",
        "name": "TIMESTAMP (STATUS)",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "switches",
                "v": "{}",
                "vt": "json"
            },
            {
                "p": "conditions",
                "v": "{}",
                "vt": "json"
            },
            {
                "p": "data",
                "v": "{}",
                "vt": "json"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1200,
        "y": 2340,
        "wires": [
            []
        ]
    },
    {
        "id": "3aae3cf6bb67b299",
        "type": "function",
        "z": "9f9f048f5359ff58",
        "name": "Increment count",
        "func": "let currentDate = new Date().getTime();\nlet serialNumber = msg.payload.deviceSerialNumber;\nlet payload = msg.payload;\nlet peca6 = context.get('peca6') || 0;\nlet peca12 = context.get('peca12') || 0;\nlet unit = context.get('unit') || 0;\nlet contador = context.get('contador') || 0;\n\nif ((payload.trelica6M && payload.trelica6M > 0) && peca6 < payload.trelica6M) {\n\n    peca6 = payload.Trelica6M;\n    context.set('peca6', peca6);\n\n    unit = \"Treli√ßa 6M\";\n    context.set('unit', unit);\n\n    contador = 1;\n    context.set('contador', contador);\n}\n\nif ((payload.trelica12M && payload.trelica12M > 0) && peca12 < payload.trelica12M) {\n\n    peca12 = payload.trelica12M;\n    context.set('peca12', peca12);\n\n    unit = \"Treli√ßa 12M\";\n    context.set('unit', unit);\n\n    contador = 1;\n    context.set('contador', contador);\n}\n\nmsg.payload = {\n    timestamp: currentDate,\n    deviceSerialNumber: serialNumber,\n    unit: unit,\n    count: contador\n};\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1980,
        "y": 2420,
        "wires": [
            [
                "bb0fde625c887827"
            ]
        ]
    },
    {
        "id": "bb0fde625c887827",
        "type": "debug",
        "z": "9f9f048f5359ff58",
        "name": "debug 206",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2190,
        "y": 2360,
        "wires": []
    },
    {
        "id": "398d8246ec35b676",
        "type": "function",
        "z": "9f9f048f5359ff58",
        "name": "INCREMENT COUNT application",
        "func": "let serialNumber = msg.payload.deviceSerialNumber;\nlet previousTrelica6M = context.get('previousTrelica6M') || 0;\nlet previousTrelica12M = context.get('previousTrelica12M') || 0;\nlet count = context.get('count') || 0;\nlet unit = context.get('unit') || null;\nlet currentTimestamp = new Date().getTime();\n\n// Verifique se houve um acr√©scimo\nlet increaseInTrelica6M = msg.payload.trelica6M > previousTrelica6M;\nlet increaseInTrelica12M = msg.payload.trelica12M > previousTrelica12M;\n\n// Atualize os valores anteriores\ncontext.set('previousTrelica6M', msg.payload.trelica6M);\ncontext.set('previousTrelica12M', msg.payload.trelica12M);\n\nif (increaseInTrelica6M == true && previousTrelica6M > 0) {\n\n    unit = \"Treli√ßa 6M\";\n    context.set('unit', unit);\n\n    count = 1;\n    context.set('count', count);\n\n    msg.payload = {\n        timeStamp: currentTimestamp,\n        deviceSerialNumber: serialNumber,\n        unit: unit,\n        count: count\n    }\n    return msg;\n}\n\nif (increaseInTrelica12M == true && previousTrelica12M > 0) {\n    unit = \"Treli√ßa 12M\";\n    context.set('unit', unit);\n\n    count = 1;\n    context.set('count', count);\n\n    msg.payload = {\n        timeStamp: currentTimestamp,\n        deviceSerialNumber: serialNumber,\n        unit: unit,\n        count: count\n    }\n    return msg;\n}\n\nreturn null;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1820,
        "y": 2140,
        "wires": [
            [
                "233804ff1b3bad8f"
            ]
        ]
    },
    {
        "id": "233804ff1b3bad8f",
        "type": "debug",
        "z": "9f9f048f5359ff58",
        "name": "debug 207",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2110,
        "y": 2140,
        "wires": []
    },
    {
        "id": "4151cc85b5a7654b",
        "type": "switch",
        "z": "9f9f048f5359ff58",
        "name": "Machines",
        "property": "payload.serialNumber",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "DF1599",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 440,
        "y": 240,
        "wires": [
            [
                "4d43d7f62301c00d"
            ]
        ],
        "icon": "font-awesome/fa-desktop"
    },
    {
        "id": "4d43d7f62301c00d",
        "type": "switch",
        "z": "9f9f048f5359ff58",
        "name": "OPTION SW",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "hask",
                "v": "Switch1",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "Switch2",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 630,
        "y": 240,
        "wires": [
            [
                "fa5f1f6a4b17a6b6"
            ],
            [
                "fa5f1f6a4b17a6b6"
            ]
        ]
    },
    {
        "id": "fa5f1f6a4b17a6b6",
        "type": "function",
        "z": "9f9f048f5359ff58",
        "name": "Switch State",
        "func": "function handleSwitch(payload, context, switchName, startName, finishName, verifyName) {\n    let switchState = context.get(switchName) || null;\n    let startState = context.get(startName) || false;\n    let finishState = context.get(finishName) || false;\n    let verifyState = context.get(verifyName) || false;\n\n    if (payload[switchName] && payload[switchName].Action == \"ON\") {\n        switchState = \"ON\";\n        startState = true;\n    } else if (payload[switchName] && payload[switchName].Action == \"OFF\" && switchState == \"ON\" && startState == true) {\n        switchState = \"OFF\";\n        finishState = true;\n    }\n    if (startState == true && finishState == true) {\n        verifyState = true;\n        startState = false;\n        finishState = false;\n    }\n\n    context.set(switchName, switchState);\n    context.set(startName, startState);\n    context.set(finishName, finishState);\n    context.set(verifyName, verifyState);\n\n    return {\n        switchState: switchState,\n        startState: startState,\n        finishState: finishState,\n        verifyState: verifyState\n    };\n}\n\nlet payload = msg.payload;\nlet verifyAdvance = handleSwitch(payload, context, 'Switch1', 'startAdvance', 'finishedAdvance', 'verifyAdvance');\nlet verifyCut = handleSwitch(payload, context, 'Switch2', 'startCut', 'finishedCut', 'verifyCut');\n\nmsg.switches = {\n    switch1: verifyAdvance.switchState,\n    switch2: verifyCut.switchState,\n    verifyAdvance: verifyAdvance.verifyState,\n    verifyCut: verifyCut.verifyState\n}\n\nif (verifyAdvance.verifyState == true) {\n    verifyAdvance.verifyState = false;\n    context.set('verifyAdvance', verifyAdvance.verifyState);\n}\nelse if (verifyCut.verifyState == true) {\n    verifyCut.verifyState = false;\n    context.set('verifyCut', verifyCut.verifyState);\n}\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 240,
        "wires": [
            [
                "a802cc75cfa94eb3"
            ]
        ],
        "icon": "node-red/swap.svg"
    },
    {
        "id": "1204138143f73d25",
        "type": "function",
        "z": "9f9f048f5359ff58",
        "name": "production machine",
        "func": "const { trelica6M, trelica12M, advanceCounter, serialNumber  } = msg.conditions;\nlet verifyAdvance = msg.switches.verifyAdvance || null;\nlet [machine, timestampLastAdvance, timestampOfLastTrelica] = ['machine', 'timestampLastAdvance', 'timestampOfLastTrelica'].map(key => context.get(key) || null);\nlet [countTrelica6M, countTrelica12M] = ['countTrelica6M', 'countTrelica12M'].map(key => context.get(key) || 0);\nlet resetShift = context.get('resetShift') || false;\nlet currentTimestamp = new Date();\n\nconst actions = {\n    resetShift: () => { countTrelica6M = 0; countTrelica12M = 0; resetShift = false; },\n    payloadReset: () => { resetShift = true;},\n    verifyAdvance: () => { timestampLastAdvance = currentTimestamp; },\n    verifyTrelica6M: () => {countTrelica6M++; timestampOfLastTrelica = currentTimestamp; },\n    verifyTrelica12M: () => {countTrelica12M++; timestampOfLastTrelica = currentTimestamp; },\n    machineNull: () => { machine = serialNumber; }\n};\n\nconst conditions = {\n    resetShift: resetShift === true,\n    payloadReset: msg.payload === 'reset',\n    verifyAdvance: verifyAdvance === true,\n    verifyTrelica6M: trelica6M === true,\n    verifyTrelica12M: trelica12M === true,\n    machineNull: serialNumber && machine === null,\n};\n\nObject.entries(conditions).forEach(([condition, isTrue]) => {\n    if (isTrue) {\n        actions[condition]();\n    }\n})\n\ncontext.set('countTrelica6M', countTrelica6M);\ncontext.set('countTrelica12M', countTrelica12M);\ncontext.set('resetShift', resetShift);\ncontext.set('timestampLastAdvance', timestampLastAdvance);\ncontext.set('timestampOfLastTrelica', timestampOfLastTrelica);\ncontext.set('machine', machine);\n\nmsg.data = {\n    verifyTrelica6M: trelica6M,\n    verifyTrelica12M: trelica12M,\n    advance: advanceCounter,\n    trelica6M: countTrelica6M,\n    trelica12M: countTrelica12M,\n    timestampLastAdvance: timestampLastAdvance,\n    timestampOfLastTrelica: timestampOfLastTrelica,\n    machine: machine,\n}\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1230,
        "y": 240,
        "wires": [
            [
                "fdb7f1df82fda35d",
                "95a2f28f2df9289e"
            ]
        ],
        "icon": "font-awesome/fa-book"
    },
    {
        "id": "a802cc75cfa94eb3",
        "type": "function",
        "z": "9f9f048f5359ff58",
        "name": "Conditions Machine",
        "func": "let { verifyAdvance, verifyCut} = msg.switches;\nlet [advanceCounter, cutCounter] = ['advanceCounter', 'cutCounter'].map(key => context.get(key) || 0);\nlet [trelica6M, trelica12M] = ['trelica6M', 'trelica12M'].map(key => context.get(key) || false);\n\nif(verifyAdvance) advanceCounter++;\nif(verifyCut) cutCounter++\ntrelica6M = advanceCounter >= 25 && advanceCounter <= 49 && cutCounter > 0 ? true : false;\ntrelica12M = advanceCounter >= 50 && advanceCounter <= 62 && cutCounter > 0 ? true : false;\n\nif (cutCounter > 0) {\n    advanceCounter = 0;\n    cutCounter = 0;\n\n    ['advanceCounter', 'cutCounter'].forEach(key => context.set(key, 0));\n}\ncontext.set('advanceCounter', advanceCounter);\n\nmsg.conditions = {\n    advanceCounter: advanceCounter,\n    cutCounter,\n    trelica6M,\n    trelica12M,\n    serialNumber: msg.payload.serialNumber\n}\n\nif (trelica6M || trelica12M) {\n    [trelica6M, trelica12M] = [false, false];\n    ['trelica6M', 'trelica12M'].forEach(key => context.set(key, false));\n}\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 240,
        "wires": [
            [
                "1204138143f73d25"
            ]
        ],
        "icon": "font-awesome/fa-bars"
    },
    {
        "id": "fdb7f1df82fda35d",
        "type": "function",
        "z": "9f9f048f5359ff58",
        "name": "TRELI√áA AZUL",
        "func": "let {verifyTrelica6M, verifyTrelica12M, advance, trelica6M, trelica12M, machine} = msg.data;\n\nmsg.payload = {\n    verifyTrelica6M: verifyTrelica6M,\n    verifyTrelica12M: verifyTrelica12M,\n    trelica6M: trelica6M,\n    trelica12M: trelica12M,\n    advance: advance,\n    deviceSerialNumber: machine\n}\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1260,
        "y": 280,
        "wires": [
            [
                "8664fa69048f059f"
            ]
        ],
        "icon": "font-awesome/fa-cogs"
    },
    {
        "id": "95a2f28f2df9289e",
        "type": "function",
        "z": "9f9f048f5359ff58",
        "name": "verifyStatus",
        "func": "const { timestampLastAdvance, timestampOfLastTrelica, trelica6M, trelica12M, machine } = msg.data;\nlet [differenceAdvanceTime, differenceProductionTime] = ['differenceAdvanceTime', 'differenceProductionTime'].map(key => context.get(key) || null);\nlet currentTimestamp = new Date();\nlet currentStatus = context.get('currentStatus') || null;\n\ndifferenceAdvanceTime = timestampLastAdvance !== null ? (currentTimestamp.getTime() - timestampLastAdvance.getTime()) / 1000 : null;\ndifferenceProductionTime = timestampOfLastTrelica !== null ? (currentTimestamp.getTime() - timestampOfLastTrelica.getTime()) / 1000 : null;\n\ncontext.set('differenceAdvanceTime', differenceAdvanceTime);\ncontext.set('differenceProductionTime', differenceProductionTime);\n\nif (timestampLastAdvance !== null) {\n\n    // Mapear estados\n        const isWorking = differenceAdvanceTime <= 59 || (differenceProductionTime <= 119 && differenceProductionTime !== null);\n        const isStopped = (differenceAdvanceTime >= 60 && differenceProductionTime >= 120 && differenceProductionTime <= 1799) ||\n        (differenceAdvanceTime >= 120 && differenceAdvanceTime <= 1799 && trelica6M === 0 && trelica12M === 0 && timestampOfLastTrelica == null);\n        const isTurnedOff = differenceAdvanceTime >= 1800 || differenceProductionTime >= 1800;\n\n        const newState = isWorking ? 'TRABALHANDO' : isStopped ? 'PARADO' : isTurnedOff ? 'DESLIGADO' : null;\n\n        if (newState) currentStatus = newState;     \n}\n\nif (timestampLastAdvance == null) currentStatus = \"DESLIGADO\";\n\ncontext.set('currentStatus', currentStatus);\n\nmsg.status = {\n    timeAdvance: differenceAdvanceTime,\n    timeLastTrelica: differenceProductionTime,\n    machine: machine,\n    currentStatus: currentStatus\n};\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1250,
        "y": 320,
        "wires": [
            [
                "43a7a7f77067c303",
                "df175ab4ecc06fe7"
            ]
        ],
        "icon": "node-red/status.svg"
    },
    {
        "id": "43a7a7f77067c303",
        "type": "function",
        "z": "9f9f048f5359ff58",
        "name": "FormatedMessage",
        "func": "let machine = msg.status.machine;\nlet timestamp = new Date().getTime();\nlet currentStatus = context.get('currentStatus') || null; \nlet oldStatus = msg.status.currentStatus;\n\nif(!currentStatus || currentStatus !== oldStatus) {\n    currentStatus = oldStatus;\n    context.set('currentStatus', currentStatus);\n\n    msg.payload = {\n            timestamp: timestamp,\n            deviceSerialNumber: machine,\n            status: currentStatus\n    }\n    return msg;\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1510,
        "y": 320,
        "wires": [
            []
        ],
        "icon": "font-awesome/fa-envelope"
    },
    {
        "id": "8664fa69048f059f",
        "type": "function",
        "z": "9f9f048f5359ff58",
        "name": "INCREMENT COUNT Treli√ßas",
        "func": "let { verifyTrelica6M, verifyTrelica12M, deviceSerialNumber } = msg.payload;\nlet unit = context.get('unit') || null;\nlet count = context.get('count') || 0;\nlet currentTimestamp = new Date();\n\nif (verifyTrelica6M === true) {\n    unit = \"Treli√ßa 6M\";\n    count = 1;\n    context.set('unit', unit);\n    context.set('count', count);\n\n    msg.payload = {\n        timestamp: currentTimestamp.getTime(),\n        deviceSerialNumber: deviceSerialNumber,\n        unit: unit,\n        count: count,\n    }\n    return msg;\n}\nelse if (verifyTrelica12M === true) {\n    unit = \"Treli√ßa 12M\";\n    count = 1;\n    context.set('unit', unit);\n    context.set('count', count);\n\n    msg.payload = {\n        timestamp: currentTimestamp.getTime(),\n        deviceSerialNumber: deviceSerialNumber,\n        unit: unit,\n        count: count,\n    }\n    return msg;\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1570,
        "y": 280,
        "wires": [
            [
                "84b9a3d82eaceb3d"
            ]
        ],
        "icon": "node-red/arrow-in.svg"
    },
    {
        "id": "54be72e6cc9791dd",
        "type": "inject",
        "z": "9f9f048f5359ff58",
        "name": "SWITCH2 ON",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF1599",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch2\": {\"Action\": \"ON\"} }",
        "payloadType": "json",
        "x": 150,
        "y": 260,
        "wires": [
            [
                "4151cc85b5a7654b"
            ]
        ]
    },
    {
        "id": "c7409ea4994dc98f",
        "type": "inject",
        "z": "9f9f048f5359ff58",
        "name": "SWITCH2 OFF",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF1599",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch2\": {\"Action\": \"OFF\"} }",
        "payloadType": "json",
        "x": 160,
        "y": 300,
        "wires": [
            [
                "4151cc85b5a7654b"
            ]
        ]
    },
    {
        "id": "ed6390cac1b73a0a",
        "type": "inject",
        "z": "9f9f048f5359ff58",
        "name": "TIMESTAMP (STATUS)",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "switches",
                "v": "{}",
                "vt": "json"
            },
            {
                "p": "conditions",
                "v": "{}",
                "vt": "json"
            },
            {
                "p": "data",
                "v": "{}",
                "vt": "json"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 840,
        "y": 180,
        "wires": [
            [
                "1204138143f73d25"
            ]
        ],
        "icon": "font-awesome/fa-hourglass-1"
    },
    {
        "id": "1bb0ccc3b2c30eef",
        "type": "Treli√ßas",
        "z": "9f9f048f5359ff58",
        "d": true,
        "name": "",
        "x": 660,
        "y": 420,
        "wires": [
            [
                "239ed2139812054d"
            ]
        ]
    },
    {
        "id": "e74a324d28d5aa00",
        "type": "mqtt in",
        "z": "9f9f048f5359ff58",
        "d": true,
        "name": "",
        "topic": "Aramebras",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "a7e2d5870aa3d2d2",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 140,
        "y": 420,
        "wires": [
            [
                "6dfee7e17ba72306"
            ]
        ]
    },
    {
        "id": "239ed2139812054d",
        "type": "debug",
        "z": "9f9f048f5359ff58",
        "d": true,
        "name": "debug 239",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 830,
        "y": 420,
        "wires": []
    },
    {
        "id": "da012ec4d1056627",
        "type": "switch",
        "z": "9f9f048f5359ff58",
        "d": true,
        "name": "OPTION SW",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "hask",
                "v": "Switch1",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "Switch2",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 490,
        "y": 420,
        "wires": [
            [
                "1bb0ccc3b2c30eef"
            ],
            [
                "1bb0ccc3b2c30eef"
            ]
        ]
    },
    {
        "id": "6dfee7e17ba72306",
        "type": "switch",
        "z": "9f9f048f5359ff58",
        "d": true,
        "name": "Machines",
        "property": "payload.serialNumber",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "DF1599",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "DF2A57",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 300,
        "y": 420,
        "wires": [
            [
                "da012ec4d1056627"
            ],
            [
                "da012ec4d1056627"
            ]
        ],
        "icon": "font-awesome/fa-desktop"
    },
    {
        "id": "df175ab4ecc06fe7",
        "type": "debug",
        "z": "9f9f048f5359ff58",
        "name": "debug 240",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1470,
        "y": 500,
        "wires": []
    },
    {
        "id": "14911612ad7f4be5",
        "type": "debug",
        "z": "9f9f048f5359ff58",
        "name": "debug 242",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1610,
        "y": 2760,
        "wires": []
    },
    {
        "id": "45cb30e7f63d1cdc",
        "type": "debug",
        "z": "9f9f048f5359ff58",
        "name": "debug 243",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 550,
        "y": 2560,
        "wires": []
    },
    {
        "id": "cd19228dd061b836",
        "type": "inject",
        "z": "9f9f048f5359ff58",
        "name": "TIMESTAMP RESET",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "switches",
                "v": "{}",
                "vt": "json"
            },
            {
                "p": "conditions",
                "v": "{}",
                "vt": "json"
            },
            {
                "p": "data",
                "v": "{}",
                "vt": "json"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "reset",
        "payloadType": "str",
        "x": 840,
        "y": 140,
        "wires": [
            [
                "1204138143f73d25"
            ]
        ],
        "icon": "font-awesome/fa-hourglass-1"
    },
    {
        "id": "f18573f78db40c1c",
        "type": "inject",
        "z": "9f9f048f5359ff58",
        "name": "TIMESTAMP (STATUS)",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "switches",
                "v": "{}",
                "vt": "json"
            },
            {
                "p": "conditions",
                "v": "{}",
                "vt": "json"
            },
            {
                "p": "data",
                "v": "{}",
                "vt": "json"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1260,
        "y": 1740,
        "wires": [
            [
                "30e21956a15f3a6a"
            ]
        ]
    },
    {
        "id": "cf498a7a19d38843",
        "type": "switch",
        "z": "9f9f048f5359ff58",
        "g": "e60c541e47049c4c",
        "name": "Machines",
        "property": "payload.serialNumber",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "DF1599",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "DF2A57",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 540,
        "y": 680,
        "wires": [
            [
                "53781a2224e33651"
            ],
            [
                "53781a2224e33651"
            ]
        ],
        "icon": "font-awesome/fa-desktop"
    },
    {
        "id": "e2ac976ca1a12778",
        "type": "function",
        "z": "9f9f048f5359ff58",
        "g": "e60c541e47049c4c",
        "name": "Update Status Machine",
        "func": "let trelicaProperties = flow.get('trelicaProperties');\nlet currentTimestamp = new Date();\nlet messages = []; // Array para armazenar as mensagens\n\nObject.keys(trelicaProperties).forEach(key => {\n  if (trelicaProperties[key].hasOwnProperty('timestampLastAction') && trelicaProperties[key].hasOwnProperty('timestampLastProduction')) {\n    let timestampLastAction = trelicaProperties[key]['timestampLastAction'];\n    let timestampLastProduction = trelicaProperties[key]['timestampLastProduction'];\n    \n    let differenceAdvanceTime = timestampLastAction ? (currentTimestamp.getTime() - timestampLastAction.getTime()) / 1000 : null; // √öltimo avan√ßo em segundos\n    let differenceProduction = timestampLastProduction ? (currentTimestamp.getTime() - timestampLastProduction.getTime()) / 1000 : null;\n    const oldState = trelicaProperties[key]['status'];\n\n    const isWorking = (differenceAdvanceTime <= 59 && differenceAdvanceTime !== null) || (differenceProduction <= 119 && differenceProduction !== null);\n    \n    const isStopped = (differenceAdvanceTime >= 60 && differenceProduction >= 120 && differenceProduction <= 1799) ||\n      (differenceAdvanceTime >= 60 && differenceAdvanceTime <= 1799 && differenceProduction === null);\n    \n    const isTurnedOff = differenceAdvanceTime >= 1800 || differenceProduction >= 1800 || differenceAdvanceTime === null;\n\n    const newState = isWorking ? 'TRABALHANDO' : isStopped ? 'PARADO' : isTurnedOff ? 'DESLIGADO' : null;\n\n    if (newState !== null && oldState !== newState){\n        trelicaProperties[key]['status'] = newState;\n\n        // Adiciona a nova mensagem ao array de mensagens\n        messages.push({\n          serialNumber: key,\n          currentStatus: newState\n        });\n    } \n  }\n});\nflow.set('trelicaProperties', trelicaProperties);\n\nmessages.forEach(msg => {\n  node.send({payload: msg});\n\n  return msg;\n});",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1570,
        "y": 680,
        "wires": [
            [
                "6afa319f05acaf5e"
            ]
        ],
        "icon": "font-awesome/fa-exchange"
    },
    {
        "id": "1849f447c9b7eaec",
        "type": "inject",
        "z": "9f9f048f5359ff58",
        "name": "SWITCH2 ON",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF1599",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch2\": {\"Action\": \"ON\"} }",
        "payloadType": "json",
        "x": 110,
        "y": 620,
        "wires": [
            [
                "da1a90e9a9d40865"
            ]
        ]
    },
    {
        "id": "53781a2224e33651",
        "type": "function",
        "z": "9f9f048f5359ff58",
        "g": "e60c541e47049c4c",
        "name": "Treli√ßa object main",
        "func": "let trelicaProperties = flow.get('trelicaProperties') || {}; \nlet serialNumber = msg.payload.serialNumber; // extra√ß√£o do n√∫mero de s√©rie\n\nif (msg.payload.Switch1 && msg.payload.Switch1.Action === \"ON\") { // momento do avan√ßo da treli√ßa\n    if (!trelicaProperties[serialNumber]) {\n            trelicaProperties[serialNumber] = {\n                \"startAdvance\": false,\n                \"finishedAdvance\": false,\n                \"startCut\": false,\n                \"finishedCut\": false,\n                \"trelica6M\": 0,\n                \"trelica12M\": 0,\n                \"advancements\": 0,\n                \"timestampLastAction\": null,\n                \"timestampLastProduction\": null,\n                \"unit\": null,\n                \"status\": null,\n            };\n    }\n}\nflow.set('trelicaProperties', trelicaProperties);\nnode.warn(trelicaProperties);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 680,
        "wires": [
            [
                "598b0d0225cda7b1"
            ]
        ],
        "icon": "font-awesome/fa-floppy-o"
    },
    {
        "id": "9d93d0dd9f0512fa",
        "type": "inject",
        "z": "9f9f048f5359ff58",
        "name": "SWITCH1 ON",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF1599",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch1\": {\"Action\": \"ON\"} }",
        "payloadType": "json",
        "x": 110,
        "y": 500,
        "wires": [
            [
                "da1a90e9a9d40865"
            ]
        ]
    },
    {
        "id": "106c64601d4c1dea",
        "type": "function",
        "z": "9f9f048f5359ff58",
        "name": "variable reset (Treli√ßa)",
        "func": "let trelicaProperties = flow.get('trelicaProperties');\n\nif (msg.payload === \"reset\" ) {\n    Object.keys(trelicaProperties).forEach(key => {\n        trelicaProperties[key].trelica6M = 0;\n        trelicaProperties[key].trelica12M = 0;\n    })\n}\nflow.set('trelicaProperties', trelicaProperties);\nnode.warn(trelicaProperties);\n\nreturn msg;",
        "outputs": 0,
        "timeout": "0",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 520,
        "wires": [],
        "icon": "font-awesome/fa-refresh"
    },
    {
        "id": "b7e1dea426efe8d9",
        "type": "function",
        "z": "9f9f048f5359ff58",
        "g": "e60c541e47049c4c",
        "name": "Get Count (Treli√ßa)",
        "func": "let serialNumber = msg.payload.serialNumber;\nlet trelicaProperties = flow.get('trelicaProperties');\n\nif (trelicaProperties[serialNumber] && trelicaProperties[serialNumber].unit !== null) {\n        let unit = trelicaProperties[serialNumber].unit;\n\n        msg.payload = {\n            timestamp: new Date().getTime(),\n            deviceSerialNumber: serialNumber,\n            unit: unit,\n            count: 1\n        }\n             trelicaProperties[serialNumber].unit = null;\n             flow.set('trelicaProperties', trelicaProperties);\n        return msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1890,
        "y": 640,
        "wires": [
            []
        ],
        "icon": "node-red-dashboard/ui_numeric.png"
    },
    {
        "id": "6afa319f05acaf5e",
        "type": "function",
        "z": "9f9f048f5359ff58",
        "g": "e60c541e47049c4c",
        "name": "Get changed Status (Treli√ßas)",
        "func": "let {serialNumber, currentStatus} = msg.payload;\nlet timestamp = new Date().getTime();\n\nif (serialNumber && currentStatus !== null) {\n    msg.payload = {\n        timestamp: timestamp,\n        deviceSerialNumber: serialNumber,\n        currentStatus: currentStatus\n    }\n    return msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1930,
        "y": 680,
        "wires": [
            []
        ],
        "icon": "node-red/status.svg"
    },
    {
        "id": "499ab72db648ae14",
        "type": "mqtt in",
        "z": "9f9f048f5359ff58",
        "d": true,
        "name": "",
        "topic": "Aramebras",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "a7e2d5870aa3d2d2",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 100,
        "y": 820,
        "wires": [
            [
                "cf498a7a19d38843"
            ]
        ]
    },
    {
        "id": "d74086fc6524a0ff",
        "type": "function",
        "z": "9f9f048f5359ff58",
        "g": "e60c541e47049c4c",
        "name": "Eurolls object main",
        "func": "let eurollsProperties = flow.get('eurollsProperties') || {};\nlet serialNumber = msg.payload.serialNumber; // extra√ß√£o do n√∫mero de s√©rie\n\nif (msg.payload.Switch1 && msg.payload.Switch1.Action === \"ON\") { // momento do avan√ßo da treli√ßa\n    if (!eurollsProperties[serialNumber]) {\n        eurollsProperties[serialNumber] = {\n            \"startAdvance\": false,\n            \"finishedAdvance\": false,\n            \"startCut\": false,\n            \"finishedCut\": false,\n            \"trelica6M\": 0,\n            \"trelica12M\": 0,\n            \"advancements\": 0,\n            \"timestampLastAction\": null,\n            \"timestampLastProduction\": null,\n            \"unit\": null,\n            \"status\": null,\n        };\n    }\n}\nflow.set('eurollsProperties', eurollsProperties);\nnode.warn(eurollsProperties);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 760,
        "wires": [
            [
                "e32f7057b867ab47"
            ]
        ],
        "icon": "font-awesome/fa-floppy-o"
    },
    {
        "id": "e32f7057b867ab47",
        "type": "function",
        "z": "9f9f048f5359ff58",
        "g": "e60c541e47049c4c",
        "name": "Get global TRELI√áAS",
        "func": "let serialNumber = msg.payload.serialNumber;\nlet eurollsProperties = flow.get('eurollsProperties');\nlet currentTimestamp = new Date();\nif ((msg.payload.Switch1 && msg.payload.Switch1.Action === \"ON\") && !eurollsProperties[serialNumber].startAdvance) {\n        eurollsProperties[serialNumber].startAdvance = true;\n}\nelse if ((msg.payload.Switch1 && msg.payload.Switch1.Action === \"OFF\") && eurollsProperties[serialNumber]) {\n        eurollsProperties[serialNumber].finishedAdvance = true;\n\n        if (eurollsProperties[serialNumber].startAdvance && eurollsProperties[serialNumber].finishedAdvance) {\n                eurollsProperties[serialNumber].startAdvance = false;\n                eurollsProperties[serialNumber].finishedAdvance = false;\n                eurollsProperties[serialNumber].advancements += 1;\n                eurollsProperties[serialNumber].timestampLastAction = currentTimestamp;\n        }\n}\n\nif ((msg.payload.Switch2 && msg.payload.Switch2.Action === \"ON\") && !eurollsProperties[serialNumber].startCut) {\n        eurollsProperties[serialNumber].startCut = true;\n}\nelse if ((msg.payload.Switch2 && msg.payload.Switch2.Action === \"OFF\") && eurollsProperties[serialNumber].startCut) {\n        eurollsProperties[serialNumber].finishedCut = true;\n\n        if ((eurollsProperties[serialNumber].advancements >= 25 && eurollsProperties[serialNumber].advancements <= 49)\n                && (eurollsProperties[serialNumber].startCut && eurollsProperties[serialNumber].finishedCut)) {\n\n                eurollsProperties[serialNumber].startCut = false;\n                eurollsProperties[serialNumber].finishedCut = false;\n                eurollsProperties[serialNumber].trelica6M += 1;\n                eurollsProperties[serialNumber].timestampLastProduction = currentTimestamp;\n                eurollsProperties[serialNumber].unit = \"Treli√ßa 6M\";\n        }\n        else if ((eurollsProperties[serialNumber].advancements >= 50 && eurollsProperties[serialNumber].advancements <= 62)\n                && (eurollsProperties[serialNumber].startCut && eurollsProperties[serialNumber].finishedCut)) {\n\n                eurollsProperties[serialNumber].startCut = false;\n                eurollsProperties[serialNumber].finishedCut = false;\n                eurollsProperties[serialNumber].trelica12M += 1;\n                eurollsProperties[serialNumber].timestampLastProduction = currentTimestamp;\n                eurollsProperties[serialNumber].unit = \"Treli√ßa 12M\";\n        }\n        eurollsProperties[serialNumber].advancements = 0;\n}\nflow.set('eurollsProperties', eurollsProperties);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1180,
        "y": 760,
        "wires": [
            [
                "c82ec0ee263231cd",
                "67c1fe26d71bab12"
            ]
        ],
        "icon": "node-red/file.svg"
    },
    {
        "id": "c82ec0ee263231cd",
        "type": "function",
        "z": "9f9f048f5359ff58",
        "g": "e60c541e47049c4c",
        "name": "Update Status Machine",
        "func": "let eurollsProperties = flow.get('eurollsProperties');\nlet currentTimestamp = new Date();\nlet messages = []; // Array para armazenar as mensagens\n\nObject.keys(eurollsProperties).forEach(key => {\n  if (eurollsProperties[key].hasOwnProperty('timestampLastAction') && eurollsProperties[key].hasOwnProperty('timestampLastProduction')) {\n    let timestampLastAction = eurollsProperties[key]['timestampLastAction'];\n    let timestampLastProduction = eurollsProperties[key]['timestampLastProduction'];\n\n    let differenceAdvanceTime = timestampLastAction ? (currentTimestamp.getTime() - timestampLastAction.getTime()) / 1000 : null; // √öltimo avan√ßo em segundos\n    let differenceProduction = timestampLastProduction ? (currentTimestamp.getTime() - timestampLastProduction.getTime()) / 1000 : null;\n    const oldState = eurollsProperties[key]['status'];\n\n    const isWorking = (differenceAdvanceTime <= 59 && differenceAdvanceTime !== null) || (differenceProduction <= 119 && differenceProduction !== null);\n\n    const isStopped = (differenceAdvanceTime >= 60 && differenceProduction >= 120 && differenceProduction <= 1799) ||\n      (differenceAdvanceTime >= 60 && differenceAdvanceTime <= 1799 && differenceProduction === null);\n\n    const isTurnedOff = differenceAdvanceTime >= 1800 || differenceProduction >= 1800 || differenceAdvanceTime === null;\n\n    const newState = isWorking ? 'TRABALHANDO' : isStopped ? 'PARADO' : isTurnedOff ? 'DESLIGADO' : null;\n\n    if (newState !== null && oldState !== newState) {\n      eurollsProperties[key]['status'] = newState;\n\n      // Adiciona a nova mensagem ao array de mensagens\n      messages.push({\n        serialNumber: key,\n        currentStatus: newState\n      });\n    }\n  }\n});\nflow.set('eurollsProperties', eurollsProperties);\n\nmessages.forEach(msg => {\n  node.send({ payload: msg });\n\n  return msg;\n});",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1590,
        "y": 780,
        "wires": [
            [
                "6256c69457d56dae"
            ]
        ],
        "icon": "font-awesome/fa-exchange"
    },
    {
        "id": "af4afa71f2c98cdb",
        "type": "function",
        "z": "9f9f048f5359ff58",
        "g": "e60c541e47049c4c",
        "name": "Get Count (Treli√ßa)",
        "func": "let serialNumber = msg.payload.serialNumber;\nlet eurollsProperties = flow.get('eurollsProperties');\n\nif (eurollsProperties[serialNumber] && eurollsProperties[serialNumber].unit !== null) {\n        let unit = eurollsProperties[serialNumber].unit;\n\n        msg.payload = {\n            timestamp: new Date().getTime(),\n            deviceSerialNumber: serialNumber,\n            unit: unit,\n            count: 1\n        }\n             eurollsProperties[serialNumber].unit = null;\n             flow.set('eurollsProperties', eurollsProperties);\n        return msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1890,
        "y": 740,
        "wires": [
            []
        ],
        "icon": "node-red-dashboard/ui_numeric.png"
    },
    {
        "id": "6256c69457d56dae",
        "type": "function",
        "z": "9f9f048f5359ff58",
        "g": "e60c541e47049c4c",
        "name": "Get changed Status (Treli√ßa)",
        "func": "let {serialNumber, currentStatus} = msg.payload;\nlet timestamp = new Date().getTime();\n\nif (serialNumber && currentStatus !== null) {\n    msg.payload = {\n        timestamp: timestamp,\n        deviceSerialNumber: serialNumber,\n        currentStatus: currentStatus\n    }\n    return msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1920,
        "y": 780,
        "wires": [
            []
        ],
        "icon": "node-red/status.svg"
    },
    {
        "id": "e5e77768249e2a1f",
        "type": "switch",
        "z": "9f9f048f5359ff58",
        "g": "e60c541e47049c4c",
        "name": "Machines",
        "property": "payload.serialNumber",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "DF1F94",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 540,
        "y": 760,
        "wires": [
            [
                "d74086fc6524a0ff"
            ]
        ],
        "icon": "font-awesome/fa-desktop"
    },
    {
        "id": "da1a90e9a9d40865",
        "type": "switch",
        "z": "9f9f048f5359ff58",
        "g": "e60c541e47049c4c",
        "name": "OPTION SW",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "hask",
                "v": "Switch1",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "Switch2",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 310,
        "y": 720,
        "wires": [
            [
                "cf498a7a19d38843",
                "e5e77768249e2a1f"
            ],
            [
                "cf498a7a19d38843",
                "e5e77768249e2a1f"
            ]
        ]
    },
    {
        "id": "743cbbe2bd44835c",
        "type": "function",
        "z": "9f9f048f5359ff58",
        "name": "variable reset (Eurolls)",
        "func": "let eurollsProperties = flow.get('eurollsProperties');\n\nif (msg.payload === \"reset\" ) {\n    Object.keys(eurollsProperties).forEach(key => {\n        eurollsProperties[key].trelica6M = 0;\n        eurollsProperties[key].trelica12M = 0;\n    })\n}\nflow.set('eurollsProperties', eurollsProperties);\n\nreturn msg;",
        "outputs": 0,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 560,
        "wires": [],
        "icon": "font-awesome/fa-refresh"
    },
    {
        "id": "d14b4cf8d6d14d9c",
        "type": "inject",
        "z": "9f9f048f5359ff58",
        "name": "SWITCH2 ON",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF1F94",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch2\": {\"Action\": \"ON\"} }",
        "payloadType": "json",
        "x": 110,
        "y": 760,
        "wires": [
            [
                "da1a90e9a9d40865"
            ]
        ]
    },
    {
        "id": "2e5a7b449b252e28",
        "type": "inject",
        "z": "9f9f048f5359ff58",
        "name": "SWITCH1 ON",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF1F94",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch1\": {\"Action\": \"ON\"} }",
        "payloadType": "json",
        "x": 110,
        "y": 720,
        "wires": [
            [
                "da1a90e9a9d40865"
            ]
        ]
    },
    {
        "id": "f584014a91c3f30d",
        "type": "switch",
        "z": "9f9f048f5359ff58",
        "name": "OPTION SW",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "hask",
                "v": "Switch1",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "Switch2",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "Switch3",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "StatusSNS",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 4,
        "x": 530,
        "y": 1040,
        "wires": [
            [
                "d83a43c4fc0bbb2d"
            ],
            [
                "d83a43c4fc0bbb2d"
            ],
            [
                "d83a43c4fc0bbb2d"
            ],
            [
                "d83a43c4fc0bbb2d"
            ]
        ]
    },
    {
        "id": "d83a43c4fc0bbb2d",
        "type": "change",
        "z": "9f9f048f5359ff58",
        "name": "delete time",
        "rules": [
            {
                "t": "delete",
                "p": "payload.timestamp",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.StatusSNS.Time",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.StatusSNS.Switch1",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.StatusSNS.Switch2",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.StatusSNS.Switch4",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 710,
        "y": 1040,
        "wires": [
            [
                "6f6bf79644acdfb5"
            ]
        ]
    },
    {
        "id": "686edac5dfb68c92",
        "type": "switch",
        "z": "9f9f048f5359ff58",
        "name": "Machines",
        "property": "payload.serialNumber",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "DF4C74",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "ABC123",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 360,
        "y": 1040,
        "wires": [
            [
                "f584014a91c3f30d"
            ],
            [
                "f584014a91c3f30d"
            ]
        ],
        "icon": "font-awesome/fa-desktop"
    },
    {
        "id": "c4736c6cbb8aca5e",
        "type": "inject",
        "z": "9f9f048f5359ff58",
        "name": "SWITCH1 ON",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF4C74",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch1\": {\"Action\": \"ON\"} }",
        "payloadType": "json",
        "x": 110,
        "y": 900,
        "wires": [
            [
                "686edac5dfb68c92"
            ]
        ]
    },
    {
        "id": "6e5949491942f427",
        "type": "inject",
        "z": "9f9f048f5359ff58",
        "name": "SWITCH2 ON",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF4C74",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch2\": {\"Action\": \"ON\"} }",
        "payloadType": "json",
        "x": 110,
        "y": 980,
        "wires": [
            [
                "686edac5dfb68c92"
            ]
        ]
    },
    {
        "id": "fcbe8766e75cccef",
        "type": "inject",
        "z": "9f9f048f5359ff58",
        "name": "STATUS8",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF4C74",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"StatusSNS\": {  \"Switch3\": \"ON\" } }",
        "payloadType": "json",
        "x": 100,
        "y": 1060,
        "wires": [
            [
                "686edac5dfb68c92"
            ]
        ]
    },
    {
        "id": "5824c8b95f152a10",
        "type": "inject",
        "z": "9f9f048f5359ff58",
        "name": "STATUS8",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF4C74",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"StatusSNS\": {  \"Switch3\": \"OFF\" } }",
        "payloadType": "json",
        "x": 100,
        "y": 1100,
        "wires": [
            [
                "686edac5dfb68c92"
            ]
        ]
    },
    {
        "id": "d724e9a1be2b52b4",
        "type": "inject",
        "z": "9f9f048f5359ff58",
        "name": "SWITCH3 ON",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF4C74",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch3\": {\"Action\": \"ON\"} }",
        "payloadType": "json",
        "x": 110,
        "y": 1140,
        "wires": [
            [
                "686edac5dfb68c92"
            ]
        ]
    },
    {
        "id": "cbe4ba77d86a26d4",
        "type": "inject",
        "z": "9f9f048f5359ff58",
        "name": "SWITCH3 OFF",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF4C74",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch3\": {\"Action\": \"OFF\"} }",
        "payloadType": "json",
        "x": 120,
        "y": 1180,
        "wires": [
            [
                "686edac5dfb68c92"
            ]
        ]
    },
    {
        "id": "6f6bf79644acdfb5",
        "type": "function",
        "z": "9f9f048f5359ff58",
        "name": "Columns object main",
        "func": "let columnProperties = flow.get('columnProperties') || {}; \nlet serialNumber = msg.payload.serialNumber; // extra√ß√£o do n√∫mero de s√©rie\nif ((msg.payload.Switch3 && msg.payload.Switch3.Action === \"ON\") || (msg.payload.StatusSNS && msg.payload.StatusSNS.Switch3 === \"ON\")) {\n    if(!columnProperties[serialNumber]) {\n        columnProperties[serialNumber] = {\n                \"startSolder\": false,\n                \"finishedSolder\": false,\n                \"startCut\": false,\n                \"finishedCut\": false,\n                \"columns\": 0,\n                \"solderCounter\": 0,\n                \"automaticMode\": false,\n                \"timestampLastAction\": null,\n                \"timestampLastProduction\": null,\n                \"unit\": null,\n                \"status\": null,\n        }\n    }\n    columnProperties[serialNumber].automaticMode = true;\n}\n\nelse if ((msg.payload.Switch3 && msg.payload.Switch3.Action === \"OFF\") || (msg.payload.StatusSNS && msg.payload.StatusSNS.Switch3 === \"OFF\")) {\n    if (!columnProperties[serialNumber]) {\n        columnProperties[serialNumber] = {\n            \"startSolder\": false,\n            \"finishedSolder\": false,\n            \"startCut\": false,\n            \"finishedCut\": false,\n            \"columns\": 0,\n            \"solderCounter\": 0,\n            \"automaticMode\": false,\n            \"timestampLastAction\": null,\n            \"timestampLastProduction\": null,\n            \"unit\": null,\n            \"status\": null,\n        }\n    }\n    columnProperties[serialNumber].automaticMode = false;\n}\nflow.set('columnProperties', columnProperties);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 1040,
        "wires": [
            [
                "79b5cd12b20e6958"
            ]
        ],
        "icon": "font-awesome/fa-floppy-o"
    },
    {
        "id": "79b5cd12b20e6958",
        "type": "function",
        "z": "9f9f048f5359ff58",
        "name": "Counters solder",
        "func": "let serialNumber = msg.payload.serialNumber;\nlet columnProperties = flow.get('columnProperties');\nlet currentTimestamp = new Date();\n\nif ((msg.payload.Switch1 && msg.payload.Switch1.Action === \"ON\") && columnProperties[serialNumber].automaticMode === true\n&& !columnProperties[serialNumber].startSolder) {\n        columnProperties[serialNumber].startSolder = true;\n\n}\nelse if ((msg.payload.Switch1 && msg.payload.Switch1.Action === \"OFF\") && columnProperties[serialNumber].automaticMode === true \n&& columnProperties[serialNumber].startSolder) {\n        columnProperties[serialNumber].finishedSolder = true;\n\n        if (columnProperties[serialNumber].startSolder && columnProperties[serialNumber].finishedSolder) {\n                columnProperties[serialNumber].startSolder = false;\n                columnProperties[serialNumber].finishedSolder = false;\n                columnProperties[serialNumber].solderCounter += 1;\n                columnProperties[serialNumber].timestampLastAction = currentTimestamp;\n        }\n}\n\nif ((msg.payload.Switch2 && msg.payload.Switch2.Action === \"ON\") && columnProperties[serialNumber].automaticMode === true\n&& !columnProperties[serialNumber].startCut) {\n        columnProperties[serialNumber].startCut = true;\n}\nelse if ((msg.payload.Switch2 && msg.payload.Switch2.Action === \"OFF\") && columnProperties[serialNumber].automaticMode &&\ncolumnProperties[serialNumber].startCut) {\n        columnProperties[serialNumber].finishedCut = true;\n\n        if(columnProperties[serialNumber].startCut && columnProperties[serialNumber].finishedCut &&\n        columnProperties[serialNumber].solderCounter >= 10 && columnProperties[serialNumber].solderCounter <= 28) {\n                columnProperties[serialNumber].startCut = false;\n                columnProperties[serialNumber].finishedCut = false;\n                columnProperties[serialNumber].columns += 1;\n                columnProperties[serialNumber].timestampLastProduction = currentTimestamp;\n                columnProperties[serialNumber].unit = \"Colunas\";\n        }\n        columnProperties[serialNumber].solderCounter = 0;\n}\nflow.set('columnProperties', columnProperties);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1120,
        "y": 1040,
        "wires": [
            [
                "24cb66e6e5afd0ed",
                "450ddc22498ad845"
            ]
        ],
        "icon": "node-red/file.svg"
    },
    {
        "id": "c733db40a65a364f",
        "type": "inject",
        "z": "9f9f048f5359ff58",
        "name": "SWITCH1 OFF",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF4C74",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch1\": {\"Action\": \"OFF\"} }",
        "payloadType": "json",
        "x": 120,
        "y": 940,
        "wires": [
            [
                "686edac5dfb68c92"
            ]
        ]
    },
    {
        "id": "24cb66e6e5afd0ed",
        "type": "function",
        "z": "9f9f048f5359ff58",
        "name": "Update Status Machine",
        "func": "let columnProperties = flow.get('columnProperties');\nlet currentTimestamp = new Date();\nlet messages = []\n\nObject.keys(columnProperties).forEach(key => {\n    if(columnProperties[key].hasOwnProperty('timestampLastAction') && columnProperties[key].hasOwnProperty('timestampLastProduction')) {\n        let timestampLastAction = columnProperties[key]['timestampLastAction'];\n        let timestampLastProduction = columnProperties[key]['timestampLastProduction'];\n\n        let differenceAction = timestampLastAction ? (currentTimestamp.getTime() - timestampLastAction.getTime()) / 1000 : null;\n        let differenceProduction = timestampLastProduction ? (currentTimestamp.getTime() - timestampLastProduction.getTime()) / 1000 : null;\n        let oldState = columnProperties[key]['status'];\n\n        const isWorking = (differenceAction <= 299 && differenceAction !== null) || (differenceProduction <= 299 && differenceProduction !== null);\n\n        const isStopped = (differenceAction >= 300 && differenceProduction >= 300 && differenceProduction <= 1799) ||\n            (differenceAction >= 300 && differenceAction <= 1799 && differenceProduction === null);\n\n        const isTurnedOff = differenceAction >= 1800 || differenceProduction >= 1800 || differenceAction === null;\n\n        const newState = isWorking ? 'TRABALHANDO' : isStopped ? 'PARADO' : isTurnedOff ? 'DESLIGADO' : null;\n\n        if (newState !== null && oldState !== newState) {\n            columnProperties[key]['status'] = newState;\n\n            messages.push({\n                serialNumber: key,\n                currentStatus: newState\n            });\n        }\n    }\n});\nflow.set('columnProperties', columnProperties);\n\nmessages.forEach(msg => {\n    node.send({ payload: msg});\n\n    return msg;\n});\nnode.warn(columnProperties);",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1350,
        "y": 1060,
        "wires": [
            [
                "c064fb8802adde52"
            ]
        ],
        "icon": "font-awesome/fa-exchange"
    },
    {
        "id": "c57db2ec75f3292c",
        "type": "function",
        "z": "9f9f048f5359ff58",
        "name": "Get Count (Columns)",
        "func": "let serialNumber = msg.payload.serialNumber;\nlet columnProperties = flow.get('columnProperties');\n\nif (columnProperties[serialNumber] && columnProperties[serialNumber].unit !== null) {\n        let unit = columnProperties[serialNumber].unit;\n\n        msg.payload = {\n            timestamp: new Date().getTime(),\n            deviceSerialNumber: serialNumber,\n            unit: unit,\n            count: 1\n        }\n             columnProperties[serialNumber].unit = null;\n             flow.set('columnProperties', columnProperties);\n        return msg;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1600,
        "y": 1020,
        "wires": [
            []
        ],
        "icon": "node-red-dashboard/ui_numeric.png"
    },
    {
        "id": "c064fb8802adde52",
        "type": "function",
        "z": "9f9f048f5359ff58",
        "name": "Get changed Status (Columns)",
        "func": "let {serialNumber, currentStatus} = msg.payload;\nlet timestamp = new Date().getTime();\n\nif (serialNumber && currentStatus !== null) {\n    msg.payload = {\n        timestamp: timestamp,\n        deviceSerialNumber: serialNumber,\n        status: currentStatus\n    }\n    return msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1630,
        "y": 1060,
        "wires": [
            [
                "b04015382db89126"
            ]
        ],
        "icon": "node-red/status.svg"
    },
    {
        "id": "fa75de377e5725cc",
        "type": "inject",
        "z": "9f9f048f5359ff58",
        "name": "STATUS8",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF32D0",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"StatusSNS\": {  \"Switch3\": \"ON\" } }",
        "payloadType": "json",
        "x": 100,
        "y": 1340,
        "wires": [
            [
                "7309e1f80f43f047"
            ]
        ]
    },
    {
        "id": "da68159461d684e0",
        "type": "inject",
        "z": "9f9f048f5359ff58",
        "name": "STATUS8",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF32D0",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"StatusSNS\": {  \"Switch3\": \"OFF\" } }",
        "payloadType": "json",
        "x": 100,
        "y": 1380,
        "wires": [
            [
                "7309e1f80f43f047"
            ]
        ]
    },
    {
        "id": "45396354407cf684",
        "type": "inject",
        "z": "9f9f048f5359ff58",
        "name": "SWITCH3 ON",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF32D0",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch3\": {\"Action\": \"ON\"} }",
        "payloadType": "json",
        "x": 110,
        "y": 1420,
        "wires": [
            [
                "7309e1f80f43f047"
            ]
        ]
    },
    {
        "id": "677de0c4fa4a3b41",
        "type": "inject",
        "z": "9f9f048f5359ff58",
        "name": "SWITCH3 OFF",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF32D0",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch3\": {\"Action\": \"OFF\"} }",
        "payloadType": "json",
        "x": 120,
        "y": 1460,
        "wires": [
            [
                "7309e1f80f43f047"
            ]
        ]
    },
    {
        "id": "983fd65fd741f0b4",
        "type": "inject",
        "z": "9f9f048f5359ff58",
        "name": "SWITCH2 ON",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF32D0",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch2\": {\"Action\": \"ON\"} }",
        "payloadType": "json",
        "x": 110,
        "y": 1260,
        "wires": [
            [
                "7309e1f80f43f047"
            ]
        ]
    },
    {
        "id": "495e1edf0f3d110a",
        "type": "inject",
        "z": "9f9f048f5359ff58",
        "name": "SWITCH2 OFF",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF32D0",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch2\": {\"Action\": \"OFF\"} }",
        "payloadType": "json",
        "x": 120,
        "y": 1300,
        "wires": [
            [
                "7309e1f80f43f047"
            ]
        ]
    },
    {
        "id": "7309e1f80f43f047",
        "type": "switch",
        "z": "9f9f048f5359ff58",
        "name": "Machines",
        "property": "payload.serialNumber",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "DF2E6E",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "DF32D0",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 320,
        "y": 1360,
        "wires": [
            [
                "8028d4f4905260f8"
            ],
            [
                "8028d4f4905260f8"
            ]
        ],
        "icon": "font-awesome/fa-desktop"
    },
    {
        "id": "8028d4f4905260f8",
        "type": "switch",
        "z": "9f9f048f5359ff58",
        "name": "OPTION SW",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "hask",
                "v": "Switch2",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "Switch3",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "StatusSNS",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 470,
        "y": 1360,
        "wires": [
            [
                "f83b4d447199ba7a"
            ],
            [
                "f83b4d447199ba7a"
            ],
            [
                "f83b4d447199ba7a"
            ]
        ]
    },
    {
        "id": "f83b4d447199ba7a",
        "type": "change",
        "z": "9f9f048f5359ff58",
        "name": "delete time",
        "rules": [
            {
                "t": "delete",
                "p": "payload.timestamp",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.StatusSNS.Time",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.StatusSNS.Switch1",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.StatusSNS.Switch2",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.StatusSNS.Switch4",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 650,
        "y": 1360,
        "wires": [
            [
                "053ea80c6dd7151f"
            ]
        ]
    },
    {
        "id": "053ea80c6dd7151f",
        "type": "function",
        "z": "9f9f048f5359ff58",
        "name": "Rebar object main",
        "func": "let rebarProperties = flow.get('rebarProperties') || {};\nlet serialNumber = msg.payload.serialNumber;\nif (!rebarProperties) {\n    rebarProperties = {};\n}\nif((msg.payload.Switch3 && msg.payload.Switch3.Action === \"ON\") || (msg.payload.StatusSNS && msg.payload.StatusSNS.Switch3 === \"ON\")) {\n    if(!rebarProperties[serialNumber]) {\n        rebarProperties[serialNumber] = {\n            \"switch2\": null,\n            \"startPart\": false,\n            \"finishedPart\": false,\n            \"rebar\": 0,\n            \"automaticMode\": false,\n            \"timestampLastAction\": null,\n            \"timestampLastProduction\": null,\n            \"unit\": null,\n            \"status\": null,\n        }\n    }\n    rebarProperties[serialNumber].automaticMode = true;\n} \nelse if ((msg.payload.Switch3 && msg.payload.Switch3.Action === \"OFF\") || (msg.payload.StatusSNS && msg.payload.StatusSNS.Switch3 === \"OFF\")) {\n    if(!rebarProperties[serialNumber]) {\n        rebarProperties[serialNumber] = {\n            \"switch2\": null,\n            \"startPart\": false,\n            \"finishedPart\": false,\n            \"rebar\": 0,\n            \"automaticMode\": false,\n            \"timestampLastAction\": null,\n            \"timestampLastProduction\": null,\n            \"unit\": null,\n            \"status\": null,\n        }\n    }\n    rebarProperties[serialNumber].automaticMode = false;\n}\nflow.set('rebarProperties', rebarProperties);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 1360,
        "wires": [
            [
                "f9f503ddecc1e037"
            ]
        ],
        "icon": "font-awesome/fa-floppy-o"
    },
    {
        "id": "f9f503ddecc1e037",
        "type": "function",
        "z": "9f9f048f5359ff58",
        "name": "Counters Part",
        "func": "let serialNumber = msg.payload.serialNumber;\nlet rebarProperties = flow.get('rebarProperties');\nlet currentTimestamp = new Date();\n\nif ((msg.payload.Switch2 && msg.payload.Switch2.Action === \"ON\") && !rebarProperties[serialNumber].startPart \n&& rebarProperties[serialNumber].automaticMode) {\n    rebarProperties[serialNumber].switch2 = \"ON\";\n    rebarProperties[serialNumber].startPart = true;\n    rebarProperties[serialNumber].timestampLastAction = currentTimestamp;\n}\nelse if ((msg.payload.Switch2 && msg.payload.Switch2.Action === \"OFF\") && rebarProperties[serialNumber].startPart \n&& rebarProperties[serialNumber].automaticMode) {\n    rebarProperties[serialNumber].finishedPart = true;\n\n    if (rebarProperties[serialNumber].startPart && rebarProperties[serialNumber].finishedPart) {\n        rebarProperties[serialNumber].switch2 = \"OFF\";\n        rebarProperties[serialNumber].startPart = false;\n        rebarProperties[serialNumber].finishedPart = false;\n        rebarProperties[serialNumber].timestampLastProduction = currentTimestamp;\n        rebarProperties[serialNumber].rebar += 1;\n        rebarProperties[serialNumber].unit = \"Pe√ßas\";\n    }\n}\nflow.set('rebarProperties', rebarProperties);\nnode.warn(rebarProperties);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1060,
        "y": 1360,
        "wires": [
            [
                "e83f303b2d10fe9c"
            ]
        ],
        "icon": "node-red/file.svg"
    },
    {
        "id": "e83f303b2d10fe9c",
        "type": "function",
        "z": "9f9f048f5359ff58",
        "name": "Update Status Machine",
        "func": "let rebarProperties = flow.get('rebarProperties');\nlet currentTimestamp = new Date();\nlet messages = [];\n\nObject.keys(rebarProperties).forEach(key => {\n    if(rebarProperties[key].hasOwnProperty('timestampLastAction') && rebarProperties[key].hasOwnProperty('timestampLastProduction')) {\n        let timestampLastAction = rebarProperties[key]['timestampLastAction'];\n        let timestampLastProduction = rebarProperties[key]['timestampLastProduction'];\n\n        let differenceAction = timestampLastAction ? (currentTimestamp.getTime() - timestampLastAction.getTime()) / 1000 : null;\n        let differenceProduction = timestampLastProduction ? (currentTimestamp.getTime() - timestampLastProduction.getTime()) / 1000 : null;\n        let oldState = rebarProperties[key]['status'];\n\n        const isWorking = (differenceAction <= 299 && differenceAction !== null) || (differenceProduction <= 299 && differenceProduction !== null);\n\n        const isStopped = (differenceAction >= 300 && differenceProduction >= 300 && differenceProduction <= 1799) ||\n            (differenceAction >= 300 && differenceAction <= 1799 && differenceProduction === null);\n\n        const isTurnedOff = differenceAction >= 1800 || differenceProduction >= 1800 || differenceAction === null;\n\n        const newState = isWorking ? 'TRABALHANDO' : isStopped ? 'PARADO' : isTurnedOff ? 'DESLIGADO' : null;\n\n        if(newState !== null && oldState !== newState) {\n            rebarProperties[key]['status'] = newState;\n\n            messages.push({\n                serialNumber: key,\n                currentStatus: newState\n            });\n        }\n    }\n});\nflow.set('rebarProperties', rebarProperties);\n\nmessages.forEach(msg => {\n    node.send({payload: msg});\n\n    return msg;\n});",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1310,
        "y": 1400,
        "wires": [
            [
                "0c1f6847119e1f2c"
            ]
        ],
        "icon": "font-awesome/fa-exchange"
    },
    {
        "id": "7ffc7163a3c9698b",
        "type": "function",
        "z": "9f9f048f5359ff58",
        "name": "Get Count (REBAR)",
        "func": "let serialNumber = msg.payload.serialNumber;\nlet rebarProperties = flow.get('rebarProperties');\n\nif (rebarProperties[serialNumber] && rebarProperties[serialNumber].unit !== null) {\n    let unit = rebarProperties[serialNumber].unit;\n\n    msg.payload = {\n        timestamp: new Date().getTime(),\n        deviceSerialNumber: serialNumber,\n        unit: unit,\n        count: 1\n    }\n        rebarProperties[serialNumber].unit = null;\n        flow.set('rebarProperties', rebarProperties);\n    \n    return msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1540,
        "y": 1360,
        "wires": [
            []
        ],
        "icon": "node-red-dashboard/ui_numeric.png"
    },
    {
        "id": "0c1f6847119e1f2c",
        "type": "function",
        "z": "9f9f048f5359ff58",
        "name": "Get changed Status (REBAR)",
        "func": "let {serialNumber, currentStatus} = msg.payload;\nlet timestamp = new Date().getTime();\n\nif (serialNumber && currentStatus !== null) {\n    msg.payload = {\n        timestamp: timestamp,\n        deviceSerialNumber: serialNumber,\n        status: currentStatus\n    }\n    return msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1570,
        "y": 1400,
        "wires": [
            [
                "9590c1fd5c3fcdfa"
            ]
        ],
        "icon": "node-red/status.svg"
    },
    {
        "id": "c662ec22a893d5f5",
        "type": "catch",
        "z": "9f9f048f5359ff58",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 1020,
        "y": 1500,
        "wires": [
            []
        ]
    },
    {
        "id": "598b0d0225cda7b1",
        "type": "function",
        "z": "9f9f048f5359ff58",
        "g": "e60c541e47049c4c",
        "name": "Treli√ßa Conditions",
        "func": "let serialNumber = msg.payload.serialNumber;\nlet trelicaProperties = flow.get('trelicaProperties');\nlet currentTimestamp = new Date();\nif ((msg.payload.Switch1 && msg.payload.Switch1.Action === \"ON\") && !trelicaProperties[serialNumber].startAdvance) {\n    trelicaProperties[serialNumber].startAdvance = true;\n}\nelse if ((msg.payload.Switch1 && msg.payload.Switch1.Action === \"OFF\") && trelicaProperties[serialNumber]) {\n    trelicaProperties[serialNumber].finishedAdvance = true;\n\n    if (trelicaProperties[serialNumber].startAdvance && trelicaProperties[serialNumber].finishedAdvance) {\n        trelicaProperties[serialNumber].startAdvance = false;\n        trelicaProperties[serialNumber].finishedAdvance = false;\n        trelicaProperties[serialNumber].advancements +=1;\n        trelicaProperties[serialNumber].timestampLastAction = currentTimestamp;\n    }\n}\n\nif ((msg.payload.Switch2 && msg.payload.Switch2.Action === \"ON\") && !trelicaProperties[serialNumber].startCut) {\n    trelicaProperties[serialNumber].startCut = true;\n}\nelse if ((msg.payload.Switch2 && msg.payload.Switch2.Action === \"OFF\") && trelicaProperties[serialNumber].startCut) {\n    trelicaProperties[serialNumber].finishedCut = true;\n\n    if ((trelicaProperties[serialNumber].advancements >= 25 && trelicaProperties[serialNumber].advancements <= 49)\n        && (trelicaProperties[serialNumber].startCut && trelicaProperties[serialNumber].finishedCut)) {\n\n            trelicaProperties[serialNumber].startCut = false;\n            trelicaProperties[serialNumber].finishedCut = false;\n            trelicaProperties[serialNumber].trelica6M += 1;\n            trelicaProperties[serialNumber].timestampLastProduction = currentTimestamp;\n            trelicaProperties[serialNumber].unit = \"Treli√ßa 6M\";\n    }\n    else if ((trelicaProperties[serialNumber].advancements >= 50 && trelicaProperties[serialNumber].advancements <= 62)\n        && (trelicaProperties[serialNumber].startCut && trelicaProperties[serialNumber].finishedCut)) {\n        \n        trelicaProperties[serialNumber].startCut = false;\n        trelicaProperties[serialNumber].finishedCut = false;\n        trelicaProperties[serialNumber].trelica12M += 1;\n        trelicaProperties[serialNumber].timestampLastProduction = currentTimestamp;\n        trelicaProperties[serialNumber].unit = \"Treli√ßa 12M\";\n    }\n    trelicaProperties[serialNumber].advancements = 0;\n}\nflow.set('trelicaProperties', trelicaProperties);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1170,
        "y": 680,
        "wires": [
            [
                "e2ac976ca1a12778",
                "d400af21f414722e"
            ]
        ],
        "icon": "font-awesome/fa-exclamation"
    },
    {
        "id": "5638a164bca6e65e",
        "type": "inject",
        "z": "9f9f048f5359ff58",
        "name": "SWITCH1 OFF",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF1599",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch1\": {\"Action\": \"OFF\"} }",
        "payloadType": "json",
        "x": 120,
        "y": 540,
        "wires": [
            [
                "da1a90e9a9d40865"
            ]
        ]
    },
    {
        "id": "b8484d8ea275e867",
        "type": "inject",
        "z": "9f9f048f5359ff58",
        "name": "SWITCH2 OFF",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF1599",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch2\": {\"Action\": \"OFF\"} }",
        "payloadType": "json",
        "x": 120,
        "y": 660,
        "wires": [
            [
                "da1a90e9a9d40865"
            ]
        ]
    },
    {
        "id": "9f11023eeccd4c56",
        "type": "inject",
        "z": "9f9f048f5359ff58",
        "name": "SWITCH2 OFF",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF4C74",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch2\": {\"Action\": \"OFF\"} }",
        "payloadType": "json",
        "x": 120,
        "y": 1020,
        "wires": [
            [
                "686edac5dfb68c92"
            ]
        ]
    },
    {
        "id": "84b9a3d82eaceb3d",
        "type": "debug",
        "z": "9f9f048f5359ff58",
        "name": "debug 280",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1830,
        "y": 280,
        "wires": []
    },
    {
        "id": "cb8373aa04a2a389",
        "type": "function",
        "z": "9f9f048f5359ff58",
        "name": "INCREMENT COUNT application",
        "func": "let { finishPart, deviceSerialNumber } = msg.payload;\nlet unit = context.get('unit') || null;\nlet count = context.get('count') || 0;\nlet currentTimestamp = new Date();\n\nif (finishPart === true) {\n    unit = \"Pe√ßas\";\n    count = 1;\n    context.set('unit', unit);\n    context.set('count', count);\n\n    msg.payload = {\n        timestamp: currentTimestamp.getTime(),\n        deviceSerialNumber: deviceSerialNumber,\n        unit: unit,\n        count: count,\n    }\n    return msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2020,
        "y": 1760,
        "wires": [
            [
                "5b67804b039d53b5"
            ]
        ]
    },
    {
        "id": "5b67804b039d53b5",
        "type": "debug",
        "z": "9f9f048f5359ff58",
        "name": "debug 281",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2330,
        "y": 1760,
        "wires": []
    },
    {
        "id": "8b805f0f9b77a3d7",
        "type": "function",
        "z": "9f9f048f5359ff58",
        "name": "INCREMENT COUNT application",
        "func": "let { verifyColumn, deviceSerialNumber } = msg.payload;\nlet unit = context.get('unit') || null;\nlet count = context.get('count') || 0;\nlet currentTimestamp = new Date();\n\nif (verifyColumn === true) {\n    unit = \"Colunas\";\n    count = 1;\n    context.set('unit', unit);\n    context.set('count', count);\n\n    msg.payload = {\n        timestamp: currentTimestamp.getTime(),\n        deviceSerialNumber: deviceSerialNumber,\n        unit: unit,\n        count: count\n    }\n    return msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2040,
        "y": 2640,
        "wires": [
            [
                "7767c6b5a648a5cb"
            ]
        ]
    },
    {
        "id": "8b32ee3eec609a24",
        "type": "inject",
        "z": "9f9f048f5359ff58",
        "name": "RESET SHIFTS",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "reset",
        "payloadType": "str",
        "x": 960,
        "y": 520,
        "wires": [
            [
                "7207a1062edb7cd4"
            ]
        ]
    },
    {
        "id": "7207a1062edb7cd4",
        "type": "link out",
        "z": "9f9f048f5359ff58",
        "name": "TRELI√áAS OUT",
        "mode": "link",
        "links": [
            "05a1ed76eb70f743"
        ],
        "x": 1115,
        "y": 520,
        "wires": [],
        "icon": "node-red/arrow-in.svg"
    },
    {
        "id": "05a1ed76eb70f743",
        "type": "link in",
        "z": "9f9f048f5359ff58",
        "name": "link in 1",
        "links": [
            "7207a1062edb7cd4"
        ],
        "x": 395,
        "y": 540,
        "wires": [
            [
                "106c64601d4c1dea",
                "743cbbe2bd44835c"
            ]
        ]
    },
    {
        "id": "b04015382db89126",
        "type": "debug",
        "z": "9f9f048f5359ff58",
        "name": "debug 300",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1830,
        "y": 1180,
        "wires": []
    },
    {
        "id": "9590c1fd5c3fcdfa",
        "type": "debug",
        "z": "9f9f048f5359ff58",
        "name": "debug 301",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1850,
        "y": 1520,
        "wires": []
    },
    {
        "id": "c112b95951570ef7",
        "type": "function",
        "z": "3781966928a5301c",
        "name": "Formated serialNumber",
        "func": "let serialNumber;\nlet topic = msg.topic\nlet teste = topic.split('/');\nserialNumber = teste[1].slice(10);\n\nmsg.payload = {\n    Switch1: msg.payload.Switch1,\n    serialNumber: serialNumber\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 140,
        "wires": [
            [
                "8a1437ba3d55afb1"
            ]
        ],
        "icon": "node-red/swap.svg"
    },
    {
        "id": "0f5e7b6c2dbd51bc",
        "type": "inject",
        "z": "3781966928a5301c",
        "name": "SWITCH1 ON",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "stat/connectv1_F6E84E/RESULT",
        "payload": "{\"Switch1\": {\"Action\": \"ON\"} }",
        "payloadType": "json",
        "x": 110,
        "y": 120,
        "wires": [
            [
                "cd5612a895e50710"
            ]
        ]
    },
    {
        "id": "cd5612a895e50710",
        "type": "switch",
        "z": "3781966928a5301c",
        "name": "MACHINE",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "stat/connectv1_F6E84E/RESULT",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 310,
        "y": 140,
        "wires": [
            [
                "c112b95951570ef7"
            ]
        ]
    },
    {
        "id": "8a1437ba3d55afb1",
        "type": "function",
        "z": "3781966928a5301c",
        "name": "Machine condition",
        "func": "let verifyPC = context.get('verifyPC') || false;\nlet startPC = context.get('startPC') || false;\nlet existsPC = context.get('existsPC') || false;\nlet switch1 = msg.payload.Switch1;\n\nif (switch1 && switch1.Action === \"ON\" && !existsPC) {\n    existsPC = true;\n    startPC = true;\n}\nelse if (switch1 && switch1.Action === \"OFF\" && existsPC) {\n    verifyPC = true;\n    existsPC = false;\n}\ncontext.set('verifyPC', verifyPC);\ncontext.set('existsPC', existsPC);\ncontext.set('startPC', startPC);\n\nmsg.conditions = {\n    startPC: startPC,\n    existsPC: existsPC,\n    verifyPC: verifyPC,\n    serialNumber: msg.payload.serialNumber\n}\n\nif (verifyPC === true) {\n    verifyPC = false;\n    existsPC = false;\n}\nstartPC = false;\ncontext.set('startPC', startPC);\ncontext.set('verifyPC', verifyPC);\ncontext.set('existsPC', existsPC);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 180,
        "wires": [
            [
                "49c51847943e795f"
            ]
        ],
        "icon": "font-awesome/fa-bars"
    },
    {
        "id": "fc97ee69c051f387",
        "type": "inject",
        "z": "3781966928a5301c",
        "name": "SWITCH1 OFF",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "stat/connectv1_F6E84E/RESULT",
        "payload": "{\"Switch1\": {\"Action\": \"OFF\"} }",
        "payloadType": "json",
        "x": 120,
        "y": 160,
        "wires": [
            [
                "cd5612a895e50710"
            ]
        ]
    },
    {
        "id": "49c51847943e795f",
        "type": "function",
        "z": "3781966928a5301c",
        "name": "Production machine",
        "func": "let {startPC, existsPC, verifyPC, serialNumber} = msg.conditions;\nlet pecas = context.get('pecas') || 0;\nlet resetShift = context.get('resetShift') || false;\nlet currentTimestamp = new Date();\nlet [startProduction, dateLastProduction, machine] = ['startProduction', 'dateLastProduction', 'machine'].map(key => context.get(key) || null);\n\n\nconst actions = {\n    resetShift: () => {pecas = 0, resetShift = false},\n    payloadReset: () => {resetShift = true},\n    startProduction: () => {startProduction = currentTimestamp},\n    finishedProduction: () => {pecas++, startProduction = null, dateLastProduction = currentTimestamp},\n    machineNull: () => {machine = serialNumber}\n}\nconst conditions = {\n    resetShift: resetShift,\n    payloadReset: msg.payload === 'reset',\n    startProduction: startPC === true,\n    finishedProduction: verifyPC === true,\n    machineNull: (serialNumber && machine === null) || (serialNumber && machine !== null && machine !== serialNumber)\n}\nObject.entries(conditions).forEach(([condition, isTrue]) => {\n    if (isTrue && actions[condition]) actions[condition]();\n});\ncontext.set('pecas', pecas);\ncontext.set('resetShift', resetShift);\ncontext.set('startProduction', startProduction);\ncontext.set('dateLastProduction', dateLastProduction);\ncontext.set('machine', machine);\n\nmsg.data = {\n    pecas: pecas,\n    dateStartProduction: startProduction,\n    dateLastProduction: dateLastProduction,\n    reset: resetShift,\n    machine: machine,\n}\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 220,
        "wires": [
            [
                "7b1a690cf631b633",
                "d588dd56d9299958"
            ]
        ],
        "icon": "font-awesome/fa-book"
    },
    {
        "id": "7b1a690cf631b633",
        "type": "function",
        "z": "3781966928a5301c",
        "name": "Verify status",
        "func": "let {dateStartProduction, dateLastProduction, machine, pecas } = msg.data;\nlet [differenceTimeStartProduction, differenceTimeLastProduction] = \n['differenceTimeStartProduction', 'differenceTimeLastProduction'].map(key => context.get(key) || 0);\nlet currentTimestamp = new Date();\nlet currentStatus = context.get('currentStatus');\n\ndifferenceTimeStartProduction = dateStartProduction !== null ? (currentTimestamp.getTime() - dateStartProduction.getTime()) / 1000 : null;\ndifferenceTimeLastProduction = dateLastProduction !== null ? (currentTimestamp.getTime() - dateLastProduction.getTime()) / 1000 : null;\n\ncontext.set('differenceTimeStartProduction', differenceTimeStartProduction);\ncontext.set('differenceTimeLastProduction', differenceTimeLastProduction);\n\nconst machineWorking = (differenceTimeStartProduction <= 29 && dateStartProduction !== null) \n|| (differenceTimeLastProduction !== null && differenceTimeLastProduction <= 29);\n\nconst machineIdle = (differenceTimeStartProduction === null && differenceTimeLastProduction >= 30 && differenceTimeLastProduction <= 59) ||\n(differenceTimeStartProduction !== null && differenceTimeStartProduction >= 30 && differenceTimeLastProduction === null);\n\nconst machineOff = (differenceTimeLastProduction >= 60 || differenceTimeStartProduction >= 60) || (differenceTimeStartProduction === null && differenceTimeLastProduction === null);\n\nconst newStatus = machineWorking ? 'TRABALHANDO' : machineIdle ? 'PARADO' : machineOff ? 'DESLIGADO' : null;\nif (newStatus) currentStatus = newStatus;\n\n\ncontext.set('currentStatus', currentStatus);\n\nmsg.status = {\n    pecas: pecas,\n    timeCurrentProduction: differenceTimeStartProduction,\n    timeLastProduction: differenceTimeLastProduction,\n    machine: machine,\n    currentStatus: currentStatus\n}\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 260,
        "wires": [
            [
                "5fd6caa01bee2690"
            ]
        ],
        "icon": "node-red/status.svg"
    },
    {
        "id": "629a98571d5b310d",
        "type": "inject",
        "z": "3781966928a5301c",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "conditions",
                "v": "{}",
                "vt": "json"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 220,
        "y": 220,
        "wires": [
            [
                "49c51847943e795f"
            ]
        ]
    },
    {
        "id": "d588dd56d9299958",
        "type": "function",
        "z": "3781966928a5301c",
        "name": "GANCHEIRA",
        "func": "let {pecas, machine } = msg.data;\n\nmsg.payload = {\n    pecas: pecas,\n    deviceSerialNumber: machine,\n    name: \"GANCHEIRA 01\"\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 220,
        "wires": [
            [
                "80fcd407061f476c",
                "5c3e23ec59689836"
            ]
        ],
        "icon": "font-awesome/fa-cogs"
    },
    {
        "id": "5fd6caa01bee2690",
        "type": "function",
        "z": "3781966928a5301c",
        "name": "Working time",
        "func": "let { currentStatus, pecas } = msg.status;\nlet currentTimestamp = new Date();\n\n// Obter os valores atuais das vari√°veis de contexto\nlet lastTimestampWorking = context.get('lastTimestampWorking') || null;\nlet lastTimestampIdle = context.get('lastTimestampIdle') || null;\nlet status = context.get('status') || null;\nlet sumWorkingTime = context.get('sumWorkingTime') || 0;\nlet sumIdleTime = context.get('sumIdleTime') || 0;\nlet sumProduction = context.get('sumProduction') || 0;\nlet resetShift = context.get('resetShift') || false;\n\nconst actions = {\n    resetShift: () => { sumWorkingTime = 0; sumIdleTime = 0; sumProduction = 0; lastTimestampWorking = null; lastTimestampIdle = null, resetShift = false },\n    payloadReset: () => { resetShift = true },\n    currentStatus: () => { status = currentStatus },\n    workingTime: () => {\n        if (lastTimestampWorking !== null && pecas > 0) {\n            let timeWorking = (currentTimestamp.getTime() - lastTimestampWorking.getTime()) / 1000;\n            sumWorkingTime += timeWorking;\n            lastTimestampIdle = null;\n        }\n    },\n    idleTime: () => {\n        if (lastTimestampIdle !== null && pecas > 0) {\n            let timeIdle = (currentTimestamp.getTime() - lastTimestampIdle.getTime()) / 1000;\n            sumIdleTime += timeIdle;\n            lastTimestampWorking = null;\n        }\n    }\n};\n\nconst conditions = {\n    resetShift: resetShift,\n    payloadReset: msg.payload === 'reset',\n    currentStatus: currentStatus !== null,\n    workingTime: (status !== null && status === \"TRABALHANDO\" && lastTimestampWorking !== null),\n    idleTime: ((status !== null && (status === \"PARADO\" || status === \"DESLIGADO\")) && lastTimestampIdle !== null)\n}\n\n// Atualizar vari√°veis de contexto e realizar a√ß√µes com base nas condi√ß√µes\nObject.entries(conditions).forEach(([condition, isTrue]) => {\n    if (isTrue && actions[condition]) actions[condition]();\n});\n\n// Calcular a produ√ß√£o total\nsumProduction = sumWorkingTime + sumIdleTime;\n\n// Definir novos valores das vari√°veis de contexto\ncontext.set('resetShift', resetShift);\ncontext.set('lastTimestampWorking', lastTimestampWorking);\ncontext.set('lastTimestampIdle', lastTimestampIdle);\ncontext.set('status', status);\ncontext.set('sumWorkingTime', sumWorkingTime);\ncontext.set('sumIdleTime', sumIdleTime);\ncontext.set('sumProduction', sumProduction);\n\n// Definir propriedades de produ√ß√£o no objeto 'msg'\nmsg.production = {\n    status: status,\n    sumWorkingTime: sumWorkingTime,\n    sumIdleTime: sumIdleTime,\n    sumProduction: sumProduction,\n    lastTimestampWorking: lastTimestampWorking,\n    lastTimestampIdle: lastTimestampIdle\n}\n\n// Atualizar o √∫ltimo timestamp dependendo do status\nif (status === \"TRABALHANDO\") {\n    lastTimestampWorking = currentTimestamp;\n    context.set('lastTimestampWorking', lastTimestampWorking);\n} else if (status === \"PARADO\" || status === \"DESLIGADO\") {\n    lastTimestampIdle = currentTimestamp;\n    context.set('lastTimestampIdle', lastTimestampIdle);\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 300,
        "wires": [
            [
                "acb6fc85d50b2bf4"
            ]
        ],
        "icon": "node-red/arduino.svg"
    },
    {
        "id": "3170a39641af1428",
        "type": "debug",
        "z": "3781966928a5301c",
        "name": "debug 311",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 510,
        "y": 440,
        "wires": []
    },
    {
        "id": "eb97470cab47d5d4",
        "type": "catch",
        "z": "3781966928a5301c",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 100,
        "y": 720,
        "wires": [
            [
                "820ae6c82cfad5ca"
            ]
        ]
    },
    {
        "id": "820ae6c82cfad5ca",
        "type": "debug",
        "z": "3781966928a5301c",
        "name": "debug 313",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 310,
        "y": 720,
        "wires": []
    },
    {
        "id": "86f5a1858ac5ae9e",
        "type": "ui_template",
        "z": "3781966928a5301c",
        "group": "a86510b8e099c912",
        "name": "",
        "order": 0,
        "width": 0,
        "height": 0,
        "format": "<style>\n    ui-card-panel {\n        border-radius: 10px;\n        box-shadow: rgba(100, 100, 111, 0.2) 0px 7px 29px 0px;\n    }\n\n    md-card .value {\n        font-size: 26px;\n        border-radius: 10px;\n        text-align: center;\n    }\n\n    .nr-dashboard-cardpanel layout-column {\n        border: 1px solid #fff;\n    }\n\n    md-card .label {\n        font-size: 20px;\n    }\n\n    .nr-dashboard-cardtitle {\n        text-align: center;\n        font-size: 30px;\n\n    }\n\n    .nr-dashboard-widget-N_MERO_DE_S_RIE.visible {\n        top: 0 !important;\n    }\n\n    .nr-dashboard-widget-STATUS.visible .value {\n        border-radius: 7px;\n        font-size: 20px;\n    }\n\n    md-card.nr-dashboard-text._md.layout-column.layout-align-center-center.nr-dashboard-widget-AVAN_OS.visible {\n        top: 350px !important;\n    }\n\n    md-card.nr-dashboard-text._md.layout-column.layout-align-center-center.nr-dashboard-widget-STATUS.visible {\n        top: 430px !important;\n        border-radius: 10px;\n    }\n\n    #BRF_CONTADOR_cards>md-card:nth-child(1) {\n        top: 2% !important\n    }\n\n    #BRF_CONTADOR {\n        top: 50% !important;\n        left: 10% !important;\n    }\n\n    #BRF_CONTADOR_cards>md-card:nth-child(4) {\n        top: 80%;\n    }\n\n    #BRF_CONTADOR_cards>md-card:nth-child(3) {\n        top: 25% !important;\n    }\n\n    #BRF_CONTAGEM_cards>md-card>p.label {\n        font-size: 26px;\n        font-weight: bold;\n        text-align: center;\n        display: flex;\n        align-items: center;\n    }\n\n    #BRF_CONTAGEM_cards>md-card>p.value {\n        font-size: 66px;\n        text-align: center;\n        display: flex;\n        align-items: center;\n    }\n\n    #BRF_CONTAGEM_cards {\n        width: 512px !important;\n        height: 170px !important;\n    }\n\n    #BRF_CONTAGEM_cards>md-card {\n        left: 13% !important;\n        top: 50px !important;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n    }\n\n    #BRF_CONTAGEM_cards>md-card.nr-dashboard-text._md.layout-column.layout-align-center-center.nr-dashboard-widget-Frangos.visible {\n        top: 120px !important;\n    }\n\n    #BRF_PERFORMANCE_cards>md-card:nth-child(1) {\n        top: 20px !important;\n    }\n\n    #BRF_PERFORMANCE_cards>md-card:nth-child(3) {\n        left: 35px !important;\n        top: 390px !important;\n        height: 49px !important;\n    }\n\n    #Tab_BRF {\n        top: 30% !important;\n    }\n\n    #BRF_DISPONIBILIDADE>div>p {\n        width: 501px !important;\n        font-size: 24px !important;\n        font-weight: bold !important;\n    }\n\n    #BRF_PERFORMANCE_cards {\n        height: 500px !important;\n    }\n\n    #BRF_DISPONIBILIDADE>div {\n        width: 512px !important;\n        height: 318px !important;\n    }\n\n    #BRF_DISPONIBILIDADE_cards {\n        left: 50px;\n    }\n\n    #BRF_DISPONIBILIDADE {\n        top: 190px !important;\n        left: 40% !important;\n    }\n\n    #BRF_DISPONIBILIDADE>div>p {\n        color: #fff;\n    }\n\n    #BRF_CONTAGEM {\n        left: 40% !important;\n    }\n</style>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 240,
        "y": 380,
        "wires": [
            []
        ]
    },
    {
        "id": "1a8fea444efb44c2",
        "type": "ui_gauge",
        "z": "3781966928a5301c",
        "name": "",
        "group": "e533aa27512c674f",
        "order": 2,
        "width": 8,
        "height": 4,
        "gtype": "donut",
        "title": "PERFORMANCE (%)",
        "label": "%",
        "format": "{{msg.payload.productionPercent}}",
        "min": 0,
        "max": "100",
        "colors": [
            "#f00505",
            "#f0f000",
            "#00b500"
        ],
        "seg1": "50",
        "seg2": "80",
        "diff": false,
        "className": "",
        "x": 1000,
        "y": 340,
        "wires": []
    },
    {
        "id": "967128a5bccd1ca6",
        "type": "ui_text",
        "z": "3781966928a5301c",
        "group": "e533aa27512c674f",
        "order": 3,
        "width": 0,
        "height": 0,
        "name": "STATUS",
        "label": "",
        "format": "{{msg.payload.status}}",
        "layout": "col-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": "24",
        "color": "#000000",
        "x": 960,
        "y": 160,
        "wires": []
    },
    {
        "id": "80fcd407061f476c",
        "type": "ui_text",
        "z": "3781966928a5301c",
        "group": "e533aa27512c674f",
        "order": 1,
        "width": 8,
        "height": 1,
        "name": "NOME DA M√ÅQUINA",
        "label": "",
        "format": "{{msg.payload.name}}",
        "layout": "col-center",
        "className": "",
        "style": true,
        "font": "Arial,Arial,Helvetica,sans-serif",
        "fontSize": "24",
        "color": "#ffffff",
        "x": 960,
        "y": 80,
        "wires": []
    },
    {
        "id": "5c3e23ec59689836",
        "type": "ui_text",
        "z": "3781966928a5301c",
        "group": "da937f62913568c2",
        "order": 1,
        "width": 8,
        "height": 1,
        "name": "CONTAGEM",
        "label": "CONTAGEM",
        "format": "{{msg.payload.pecas}}",
        "layout": "col-center",
        "className": "",
        "style": true,
        "font": "Arial,Arial,Helvetica,sans-serif",
        "fontSize": "24",
        "color": "#ffffff",
        "x": 950,
        "y": 120,
        "wires": []
    },
    {
        "id": "6f58897ef2e30371",
        "type": "ui_text",
        "z": "3781966928a5301c",
        "group": "da937f62913568c2",
        "order": 2,
        "width": 8,
        "height": 1,
        "name": "Frangos",
        "label": "Frangos",
        "format": "{{msg.payload.pecas}}",
        "layout": "col-center",
        "className": "",
        "style": true,
        "font": "Arial,Arial,Helvetica,sans-serif",
        "fontSize": "24",
        "color": "#ffffff",
        "x": 960,
        "y": 200,
        "wires": []
    },
    {
        "id": "0f956d7e280d974c",
        "type": "ui_text",
        "z": "3781966928a5301c",
        "group": "ad640183aae6b4ca",
        "order": 1,
        "width": 4,
        "height": 2,
        "name": "TEMPO TRABALHADO",
        "label": "TRABALHADO",
        "format": "{{msg.payload.workingTime }}",
        "layout": "col-center",
        "className": "",
        "style": true,
        "font": "Arial,Arial,Helvetica,sans-serif",
        "fontSize": "24",
        "color": "#ffffff",
        "x": 1010,
        "y": 260,
        "wires": []
    },
    {
        "id": "a6731a6f76a279b6",
        "type": "ui_text",
        "z": "3781966928a5301c",
        "group": "ad640183aae6b4ca",
        "order": 2,
        "width": 4,
        "height": 2,
        "name": "TEMPO PARADO",
        "label": "PARADO",
        "format": "{{msg.payload.idleTime}}",
        "layout": "col-center",
        "className": "",
        "style": true,
        "font": "Arial,Arial,Helvetica,sans-serif",
        "fontSize": "24",
        "color": "#ffffff",
        "x": 990,
        "y": 300,
        "wires": []
    },
    {
        "id": "acb6fc85d50b2bf4",
        "type": "function",
        "z": "3781966928a5301c",
        "name": "Number formated",
        "func": "const { status, sumWorkingTime, sumIdleTime, sumProduction } = msg.production;\nconst workingTimeSeconds = sumWorkingTime ? sumWorkingTime : 0;\nconst idleTimeSeconds = sumIdleTime ? sumIdleTime : 0;\nlet productionPercent = context.get('productionPercent') || 0;;\n\nproductionPercent = (sumWorkingTime/sumProduction) * 100;\nif (productionPercent >= 100) {\n    productionPercent = 100;\n}\nelse if (productionPercent <= 0 || sumProduction === 0) {\n    productionPercent = 0;\n}\nelse {\n    productionPercent = (sumWorkingTime / sumProduction) * 100;\n}\ncontext.set('productionPercent', productionPercent);\n\nfunction formatTime(totalSeconds) {\n    const hours = Math.floor(totalSeconds / 3600);\n    const minutes = Math.floor((totalSeconds % 3600) / 60);\n    const seconds = Math.floor(totalSeconds % 60);\n\n    return `${String(hours).padStart(2, \"0\")}:${String(minutes).padStart(2, \"0\")}:${String(seconds).padStart(2, \"0\")}`;\n}\n\nmsg.payload = {\n    workingTime: formatTime(workingTimeSeconds),\n    idleTime: formatTime(idleTimeSeconds),\n    productionPercent: productionPercent.toFixed(0) || 0,\n    status: status\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 300,
        "wires": [
            [
                "3170a39641af1428",
                "967128a5bccd1ca6",
                "0f956d7e280d974c",
                "a6731a6f76a279b6",
                "1a8fea444efb44c2"
            ]
        ],
        "icon": "font-awesome/fa-file-code-o"
    },
    {
        "id": "82a624b1835fa07b",
        "type": "inject",
        "z": "3781966928a5301c",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "status",
                "v": "{}",
                "vt": "json"
            },
            {
                "p": "conditions",
                "v": "{}",
                "vt": "json"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "reset",
        "payloadType": "str",
        "x": 210,
        "y": 280,
        "wires": [
            [
                "49c51847943e795f",
                "5fd6caa01bee2690"
            ]
        ]
    },
    {
        "id": "7cf9b04c32152af9",
        "type": "function",
        "z": "770249581d809dbd",
        "name": "Machine",
        "func": "/**\n * Pega o n√∫mero de s√©rie e salva esse dado \n * na propriedade \"serialNumber\" do objeto \"msg\" (msg.machine)\n */\n\nlet machine = msg.payload.serialNumber;\n\nmsg.machine = {\n    serialNumber: machine\n}\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 240,
        "y": 1040,
        "wires": [
            [
                "26cca6b8759e3cb3"
            ]
        ],
        "icon": "font-awesome/fa-desktop"
    },
    {
        "id": "26cca6b8759e3cb3",
        "type": "switch",
        "z": "770249581d809dbd",
        "name": "MACHINES",
        "property": "machine.serialNumber",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "DF3590",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "DF1209",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 390,
        "y": 1040,
        "wires": [
            [
                "db9b613891a6072f",
                "12624abeba74196c"
            ],
            [
                "0633185daa59695a",
                "12624abeba74196c"
            ]
        ]
    },
    {
        "id": "db9b613891a6072f",
        "type": "switch",
        "z": "770249581d809dbd",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "hask",
                "v": "Switch1",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "Switch2",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "Switch3",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "Switch4",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "StatusSNS",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 5,
        "x": 550,
        "y": 980,
        "wires": [
            [
                "b7cb417c26a66733"
            ],
            [
                "b7cb417c26a66733"
            ],
            [
                "b7cb417c26a66733"
            ],
            [
                "b7cb417c26a66733"
            ],
            [
                "b7cb417c26a66733"
            ]
        ]
    },
    {
        "id": "b7cb417c26a66733",
        "type": "change",
        "z": "770249581d809dbd",
        "name": "delete time",
        "rules": [
            {
                "t": "delete",
                "p": "payload.timestamp",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.StatusSNS.Time",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.StatusSNS.Switch2",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.StatusSNS.Switch3",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.StatusSNS.Switch4",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 710,
        "y": 980,
        "wires": [
            [
                "c9ad5c900a6b79ba"
            ]
        ]
    },
    {
        "id": "c9ad5c900a6b79ba",
        "type": "rbe",
        "z": "770249581d809dbd",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 850,
        "y": 980,
        "wires": [
            [
                "f5fb6e8867a0e3d1"
            ]
        ]
    },
    {
        "id": "f5fb6e8867a0e3d1",
        "type": "function",
        "z": "770249581d809dbd",
        "name": "SwitchesStates",
        "func": "var verifySwitch = msg.payload;\nlet switchSelected;\nlet action;\n\n// Mapeamento de todos os switches\nvar switchMap = {\n    'Switch1': verifySwitch && (verifySwitch.Switch1?.Action || verifySwitch.StatusSNS?.Switch1),\n    'Switch2': verifySwitch && verifySwitch.Switch2?.Action,\n    'Switch3': verifySwitch && verifySwitch.Switch3?.Action,\n    'Switch4': verifySwitch && verifySwitch.Switch4?.Action\n};\n\nfor (let key in switchMap) {\n    if (switchMap[key]) {\n        switchSelected = key;\n        action = switchMap[key];\n        break;\n    }\n}\nif (!switchSelected || !action) {\n    switchSelected = \"Valor inv√°lido\";\n    action = \"Valor inv√°lido\";\n}\ncontext.set('switchSelected', switchSelected);\ncontext.set('action', action);\n\nmsg.switchState = {\n    Switch: switchSelected,\n    action: action\n};\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 880,
        "wires": [
            [
                "f77723eeb7a33a9f"
            ]
        ],
        "icon": "node-red/swap.svg"
    },
    {
        "id": "f77723eeb7a33a9f",
        "type": "function",
        "z": "770249581d809dbd",
        "name": "ConditionsMachine",
        "func": "let switchExisting = msg.switchState;\n\nlet switchMap = {\n    \"Switch1\": 'automaticMode',\n    \"Switch2\": 'hidraulicsPressure',\n    \"Switch3\": 'ascendent',\n    \"Switch4\": 'slowDescent'\n}\n\nif (switchExisting.Switch && switchMap.hasOwnProperty(switchExisting.Switch)) {\n    let switchVariable = switchMap[switchExisting.Switch];\n    if (switchExisting.action == \"ON\") {\n        context.set(switchVariable, true);\n    } else if (switchExisting.action == \"OFF\") {\n        context.set(switchVariable, false);\n    }\n}\n\nmsg.conditions = {\n    modeAutomatic: context.get('automaticMode') || false,\n    hidraulicsPressure: context.get('hidraulicsPressure') || false,\n    ascendent: context.get('ascendent') || false,\n    slowDescent: context.get('slowDescent') || false\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1050,
        "y": 920,
        "wires": [
            [
                "c015e01e50962302"
            ]
        ],
        "icon": "font-awesome/fa-list"
    },
    {
        "id": "c015e01e50962302",
        "type": "function",
        "z": "770249581d809dbd",
        "name": "checkingFold",
        "func": "let modeAutomatic = msg.conditions.modeAutomatic\nlet hidraulicsPressure = msg.conditions.hidraulicsPressure;\nlet ascendent = msg.conditions.ascendent;\nlet slowDescent = msg.conditions.slowDescent;\nlet sumWorkingTime = context.get('sumWorkingTime') || 0;\nlet sumIdleTime = context.get('sumIdleTime') || 0;\nlet startWorking = context.get('startWorking') || null;\nlet lastTimestamp = context.get('lastTimestamp') || null;\nlet currentTimestamp = new Date();\nlet completeAscent = context.get('completeAscent') || false;\nlet completeDescent = context.get('completeDescent') || false;\nlet verifyFold = context.get('verifyFold') || false;\n\nif(modeAutomatic && !hidraulicsPressure && slowDescent && ascendent ) { /* verifica√ß√£o para in√≠cio do golpe (descida da m√°quina) */\n    completeDescent = true;\n    context.set('completeDescent', completeDescent);\n    context.set('startWorking', currentTimestamp.getTime());\n}\nelse if(modeAutomatic && !slowDescent && hidraulicsPressure && !ascendent) { /* verifica√ß√£o para final do golpe (subida da m√°quina) */\n    completeAscent = true;\n    context.set('completeAscent', completeAscent);\n}\nif(completeDescent && completeAscent) {\n    verifyFold = true;\n    context.set('verifyFold', verifyFold);\n\n    completeDescent = false;\n    completeAscent = false;\n\n    context.set('completeDescent', completeDescent);\n    context.set('completeAscent', completeAscent);\n}\nmsg.data = {\n    checkingFold: verifyFold,\n    startWorking: startWorking\n}\nif(verifyFold) {\n    verifyFold = false;\n    context.set('verifyFold', verifyFold);\n}\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 960,
        "wires": [
            [
                "8126283260144045"
            ]
        ],
        "icon": "font-awesome/fa-folder-open"
    },
    {
        "id": "8126283260144045",
        "type": "function",
        "z": "770249581d809dbd",
        "name": "construct payload",
        "func": "let payload = msg.payload;\nlet data = msg.data || {};\nlet conditions = msg.conditions || {};\nlet verifyFold = data.checkingFold || false;\nlet startWorking = data.startWorking || null;\nlet slowDescent = conditions.slowDescent || false;\nlet currentTimestamp = new Date();\nlet contextData = {\n    foldCount: context.get('foldCount') || 0,\n    lastTimestamp: context.get('lastTimestamp') || null,\n    sumWorkingTime: context.get('sumWorkingTime') || 0,\n    sumIdleTime: context.get('sumIdleTime') || 0,\n    resetShift: context.get('resetShift') || false\n};\nlet workingTimeMinutes = context.get('workingTimeMinutes') || 0;\nlet idleTimeMinutes = context.get('idleTimeMinutes') || 0;\n\nif(contextData.resetShift && !verifyFold) { /* Reseta as vari√°veis ao final do turno da m√°quina */\n    contextData = {\n        foldCount: 0,\n        sumWorkingTime: 0,\n        sumIdleTime: 0,\n        lastTimestamp: null,\n        resetShift: false\n    };\n}\nif(verifyFold) { /*Verifica se a dobra foi realizada na m√°quina */\n    contextData.foldCount++;\n    contextData.lastTimestamp = currentTimestamp;\n\n    if(startWorking !== null) {\n        let timeWorking = (currentTimestamp.getTime() - startWorking) /1000;\n        contextData.sumWorkingTime += timeWorking;\n\n        workingTimeMinutes = contextData.sumWorkingTime/60;\n        context.set('workingTimeMinutes', workingTimeMinutes);\n    }\n}\nif(slowDescent && contextData.lastTimestamp) {\n    let timeIdle = (currentTimestamp.getTime() - contextData.lastTimestamp.getTime()) / 1000;\n\n    if(timeIdle >= 300) { /* verifica√ß√£o se a diferen√ßa entre uma dobra e outra durou mais que 300 segundos */\n        contextData.sumIdleTime += timeIdle;\n\n        workingTimeMinutes = contextData.sumWorkingTime/60;\n        context.set('idleTimeMinutes', idleTimeMinutes);\n    }\n    else {\n        contextData.sumWorkingTime += timeIdle;\n\n        workingTimeMinutes = contextData.sumWorkingTime/60;\n        context.set('workingTimeMinutes', workingTimeMinutes);\n    }\n}\nfor (let key in contextData) {\n    context.set(key, contextData[key]);\n}\nmsg.payload = {\n    dobras: contextData.foldCount,\n    workingTime: contextData.sumWorkingTime,\n    workingTimeMinutes: workingTimeMinutes,\n    idleTime: contextData.sumIdleTime,\n    idleTimeMinutes: idleTimeMinutes\n}\nif(payload == \"reset\") {\n    contextData.resetShift = true;\n    context.set('resetShift', contextData.resetShift);\n}\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1050,
        "y": 1000,
        "wires": [
            [
                "c112a00becaa4e16"
            ]
        ],
        "icon": "node-red/envelope.svg"
    },
    {
        "id": "0633185daa59695a",
        "type": "switch",
        "z": "770249581d809dbd",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "hask",
                "v": "Switch1",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "Switch2",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "Switch3",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "Switch4",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "StatusSNS",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 5,
        "x": 550,
        "y": 1100,
        "wires": [
            [
                "62b0f55d2a29d046"
            ],
            [
                "62b0f55d2a29d046"
            ],
            [
                "62b0f55d2a29d046"
            ],
            [
                "62b0f55d2a29d046"
            ],
            [
                "62b0f55d2a29d046"
            ]
        ]
    },
    {
        "id": "62b0f55d2a29d046",
        "type": "change",
        "z": "770249581d809dbd",
        "name": "delete time",
        "rules": [
            {
                "t": "delete",
                "p": "payload.timestamp",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.StatusSNS.Time",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.StatusSNS.Switch2",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.StatusSNS.Switch3",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.StatusSNS.Switch4",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 710,
        "y": 1100,
        "wires": [
            [
                "e345944e6aa6646b"
            ]
        ]
    },
    {
        "id": "e345944e6aa6646b",
        "type": "rbe",
        "z": "770249581d809dbd",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 850,
        "y": 1100,
        "wires": [
            [
                "3a6c137a426efa22"
            ]
        ]
    },
    {
        "id": "3a6c137a426efa22",
        "type": "function",
        "z": "770249581d809dbd",
        "name": "SwitchesStates",
        "func": "var verifySwitch = msg.payload;\nlet switchSelected;\nlet action;\n\n// Mapeamento de todos os switches\nvar switchMap = {\n    'Switch1': verifySwitch && (verifySwitch.Switch1?.Action || verifySwitch.StatusSNS?.Switch1),\n    'Switch2': verifySwitch && verifySwitch.Switch2?.Action,\n    'Switch3': verifySwitch && verifySwitch.Switch3?.Action,\n    'Switch4': verifySwitch && verifySwitch.Switch4?.Action\n};\n\nfor (let key in switchMap) {\n    if (switchMap[key]) {\n        switchSelected = key;\n        action = switchMap[key];\n        break;\n    }\n}\nif (!switchSelected || !action) {\n    switchSelected = \"Valor inv√°lido\";\n    action = \"Valor inv√°lido\";\n}\ncontext.set('switchSelected', switchSelected);\ncontext.set('action', action);\n\nmsg.switchState = {\n    Switch: switchSelected,\n    action: action\n};\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 1120,
        "wires": [
            [
                "9bac0d75af2e1101"
            ]
        ],
        "icon": "node-red/swap.svg"
    },
    {
        "id": "9bac0d75af2e1101",
        "type": "function",
        "z": "770249581d809dbd",
        "name": "ConditionsMachine",
        "func": "let switchExisting = msg.switchState;\n\nlet switchMap = {\n    \"Switch1\": 'automaticMode',\n    \"Switch2\": 'hidraulicsPressure',\n    \"Switch3\": 'ascendent',\n    \"Switch4\": 'slowDescent'\n}\n\nif (switchExisting.Switch && switchMap.hasOwnProperty(switchExisting.Switch)) {\n    let switchVariable = switchMap[switchExisting.Switch];\n    if (switchExisting.action == \"ON\") {\n        context.set(switchVariable, true);\n    } else if (switchExisting.action == \"OFF\") {\n        context.set(switchVariable, false);\n    }\n}\n\nmsg.conditions = {\n    modeAutomatic: context.get('automaticMode') || false,\n    hidraulicsPressure: context.get('hidraulicsPressure') || false,\n    ascendent: context.get('ascendent') || false,\n    slowDescent: context.get('slowDescent') || false\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 1160,
        "wires": [
            [
                "c67c771141bd1bb3"
            ]
        ],
        "icon": "font-awesome/fa-list"
    },
    {
        "id": "c67c771141bd1bb3",
        "type": "function",
        "z": "770249581d809dbd",
        "name": "checkingFold",
        "func": "let modeAutomatic = msg.conditions.modeAutomatic\nlet hidraulicsPressure = msg.conditions.hidraulicsPressure;\nlet ascendent = msg.conditions.ascendent;\nlet slowDescent = msg.conditions.slowDescent;\nlet sumWorkingTime = context.get('sumWorkingTime') || 0;\nlet sumIdleTime = context.get('sumIdleTime') || 0;\nlet startWorking = context.get('startWorking') || null;\nlet lastTimestamp = context.get('lastTimestamp') || null;\nlet currentTimestamp = new Date();\nlet completeAscent = context.get('completeAscent') || false;\nlet completeDescent = context.get('completeDescent') || false;\nlet verifyFold = context.get('verifyFold') || false;\n\nif(modeAutomatic && !hidraulicsPressure && slowDescent && ascendent ) { /* verifica√ß√£o para in√≠cio do golpe (descida da m√°quina) */\n    completeDescent = true;\n    context.set('completeDescent', completeDescent);\n    context.set('startWorking', currentTimestamp.getTime());\n}\nelse if(modeAutomatic && !slowDescent && hidraulicsPressure && !ascendent) { /* verifica√ß√£o para final do golpe (subida da m√°quina) */\n    completeAscent = true;\n    context.set('completeAscent', completeAscent);\n}\nif(completeDescent && completeAscent) {\n    verifyFold = true;\n    context.set('verifyFold', verifyFold);\n\n    completeDescent = false;\n    completeAscent = false;\n\n    context.set('completeDescent', completeDescent);\n    context.set('completeAscent', completeAscent);\n}\nmsg.data = {\n    checkingFold: verifyFold,\n    startWorking: startWorking\n}\nif(verifyFold) {\n    verifyFold = false;\n    context.set('verifyFold', verifyFold);\n}\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1010,
        "y": 1200,
        "wires": [
            [
                "d2ac9dc10b0ba673"
            ]
        ],
        "icon": "font-awesome/fa-folder-open"
    },
    {
        "id": "340745ab9bb8324c",
        "type": "function",
        "z": "770249581d809dbd",
        "name": "DODRADEIRA NEWTON PSR17530",
        "func": "let payload = msg.payload;\nlet machine = msg.machine.serialNumber;\nlet workingTimeMinutes = context.get('workingTimeMinutes') || 0;\nlet idleTimeMinutes = context.get('idleTimeMinutes') || 0;\n\nfunction minutesToHours(totalMinutes) {\n    var hours = String(Math.floor(totalMinutes / 60)).padStart(2, \"0\");\n    var minutes = String(totalMinutes % 60).padStart(2, \"0\");\n\n    return `${hours}:${minutes}`;\n}\n\nif (payload.workingTime && payload.workingTime > 0) {\n    workingTimeMinutes = payload.workingTime/60;\n    context.set('workingTimeMinutes', workingTimeMinutes);\n}\nif (payload.idleTime && payload.idleTime > 0) {\n    idleTimeMinutes = payload.idleTimeMinutes / 60;\n    context.set('idleTimeMinutes', idleTimeMinutes);\n}\n\nmsg.payload = {\n    dobras: payload.dobras,\n    workingTimeMinutes: minutesToHours(workingTimeMinutes.toFixed(0)),\n    idleTimeMinutes: minutesToHours(idleTimeMinutes.toFixed(0)),\n    deviceSerialNumber: machine\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 1280,
        "wires": [
            []
        ],
        "icon": "node-red/envelope.svg"
    },
    {
        "id": "d2ac9dc10b0ba673",
        "type": "function",
        "z": "770249581d809dbd",
        "name": "construct payload",
        "func": "let payload = msg.payload;\nlet data = msg.data || {};\nlet conditions = msg.conditions || {};\nlet verifyFold = data.checkingFold || false;\nlet startWorking = data.startWorking || null;\nlet slowDescent = conditions.slowDescent || false;\nlet currentTimestamp = new Date();\nlet contextData = {\n    foldCount: context.get('foldCount') || 0,\n    lastTimestamp: context.get('lastTimestamp') || null,\n    sumWorkingTime: context.get('sumWorkingTime') || 0,\n    sumIdleTime: context.get('sumIdleTime') || 0,\n    resetShift: context.get('resetShift') || false\n};\nlet workingTimeMinutes = context.get('workingTimeMinutes') || 0;\nlet idleTimeMinutes = context.get('idleTimeMinutes') || 0;\n\nif(contextData.resetShift && !verifyFold) { /* Reseta as vari√°veis ao final do turno da m√°quina */\n    contextData = {\n        foldCount: 0,\n        sumWorkingTime: 0,\n        sumIdleTime: 0,\n        lastTimestamp: null,\n        resetShift: false\n    };\n}\nif(verifyFold) { /*Verifica se a dobra foi realizada na m√°quina */\n    contextData.foldCount++;\n    contextData.lastTimestamp = currentTimestamp;\n\n    if(startWorking !== null) {\n        let timeWorking = (currentTimestamp.getTime() - startWorking) /1000;\n        contextData.sumWorkingTime += timeWorking;\n\n        workingTimeMinutes = contextData.sumWorkingTime/60;\n        context.set('workingTimeMinutes', workingTimeMinutes);\n    }\n}\nif(slowDescent && contextData.lastTimestamp) {\n    let timeIdle = (currentTimestamp.getTime() - contextData.lastTimestamp.getTime()) / 1000;\n\n    if(timeIdle >= 300) { /* verifica√ß√£o se a diferen√ßa entre uma dobra e outra durou mais que 300 segundos */\n        contextData.sumIdleTime += timeIdle;\n\n        workingTimeMinutes = contextData.sumWorkingTime/60;\n        context.set('idleTimeMinutes', idleTimeMinutes);\n    }\n    else {\n        contextData.sumWorkingTime += timeIdle;\n\n        workingTimeMinutes = contextData.sumWorkingTime/60;\n        context.set('workingTimeMinutes', workingTimeMinutes);\n    }\n}\nfor (let key in contextData) {\n    context.set(key, contextData[key]);\n}\nmsg.payload = {\n    dobras: contextData.foldCount,\n    workingTime: contextData.sumWorkingTime,\n    workingTimeMinutes: workingTimeMinutes,\n    idleTime: contextData.sumIdleTime,\n    idleTimeMinutes: idleTimeMinutes\n}\nif(payload == \"reset\") {\n    contextData.resetShift = true;\n    context.set('resetShift', contextData.resetShift);\n}\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 1240,
        "wires": [
            [
                "340745ab9bb8324c"
            ]
        ],
        "icon": "node-red/envelope.svg"
    },
    {
        "id": "46232ab24ebd0d68",
        "type": "debug",
        "z": "770249581d809dbd",
        "name": "debug 140",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1390,
        "y": 1280,
        "wires": []
    },
    {
        "id": "c112a00becaa4e16",
        "type": "function",
        "z": "770249581d809dbd",
        "name": "DODRADEIRA NEWTON PSR7020",
        "func": "let payload = msg.payload;\nlet machine = msg.machine.serialNumber;\nlet workingTimeMinutes = context.get('workingTimeMinutes') || 0;\nlet idleTimeMinutes = context.get('idleTimeMinutes') || 0;\n\nfunction minutesToHours(totalMinutes) {\n    var hours = String(Math.floor(totalMinutes / 60)).padStart(2, \"0\");\n    var minutes = String(totalMinutes % 60).padStart(2, \"0\");\n\n    return `${hours}:${minutes}`;\n}\n\nif (payload.workingTime && payload.workingTime > 0) {\n    workingTimeMinutes = payload.workingTime/60;\n    context.set('workingTimeMinutes', workingTimeMinutes);\n}\nif (payload.idleTime && payload.idleTime > 0) {\n    idleTimeMinutes = payload.idleTimeMinutes / 60;\n    context.set('idleTimeMinutes', idleTimeMinutes);\n}\n\nmsg.payload = {\n    dobras: payload.dobras,\n    workingTimeMinutes: minutesToHours(workingTimeMinutes.toFixed(0)),\n    idleTimeMinutes: minutesToHours(idleTimeMinutes.toFixed(0)),\n    deviceSerialNumber: machine\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1100,
        "y": 1040,
        "wires": [
            [
                "9d81f4710d1436c8"
            ]
        ],
        "icon": "node-red/envelope.svg"
    },
    {
        "id": "5e39cc8f051081bb",
        "type": "inject",
        "z": "770249581d809dbd",
        "name": "SWITCH1 ON",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF1209",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch1\": {\"Action\": \"ON\"} }",
        "payloadType": "json",
        "x": 130,
        "y": 40,
        "wires": [
            [
                "be875bcbf8381c19"
            ]
        ]
    },
    {
        "id": "cff0ca35aba38881",
        "type": "inject",
        "z": "770249581d809dbd",
        "name": "SWITCH1 OFF",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF1209",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch1\": {\"Action\": \"OFF\"} }",
        "payloadType": "json",
        "x": 140,
        "y": 80,
        "wires": [
            [
                "be875bcbf8381c19"
            ]
        ]
    },
    {
        "id": "3fc168600d662d5d",
        "type": "inject",
        "z": "770249581d809dbd",
        "name": "SWITCH2 ON",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF1209",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch2\": {\"Action\": \"ON\"} }",
        "payloadType": "json",
        "x": 130,
        "y": 260,
        "wires": [
            [
                "be875bcbf8381c19"
            ]
        ]
    },
    {
        "id": "bcf3ccfc9f92cbff",
        "type": "inject",
        "z": "770249581d809dbd",
        "name": "SWITCH2 OFF",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF1209",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch2\": {\"Action\": \"OFF\"} }",
        "payloadType": "json",
        "x": 140,
        "y": 300,
        "wires": [
            [
                "be875bcbf8381c19"
            ]
        ]
    },
    {
        "id": "8f8186f913e0fb3b",
        "type": "inject",
        "z": "770249581d809dbd",
        "name": "SWITCH3 ON",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF1209",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch3\": {\"Action\": \"ON\"} }",
        "payloadType": "json",
        "x": 130,
        "y": 360,
        "wires": [
            [
                "be875bcbf8381c19"
            ]
        ]
    },
    {
        "id": "904bcf4462e8d500",
        "type": "inject",
        "z": "770249581d809dbd",
        "name": "SWITCH3 OFF",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF1209",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch3\": {\"Action\": \"OFF\"} }",
        "payloadType": "json",
        "x": 140,
        "y": 400,
        "wires": [
            [
                "be875bcbf8381c19"
            ]
        ]
    },
    {
        "id": "b0db1a2abbda32f4",
        "type": "inject",
        "z": "770249581d809dbd",
        "name": "SWITCH4 ON",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF1209",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch4\": {\"Action\": \"ON\"} }",
        "payloadType": "json",
        "x": 130,
        "y": 460,
        "wires": [
            [
                "be875bcbf8381c19"
            ]
        ]
    },
    {
        "id": "0b88d51a1b50740f",
        "type": "inject",
        "z": "770249581d809dbd",
        "name": "SWITCH4 OFF",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF1209",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch4\": {\"Action\": \"OFF\"} }",
        "payloadType": "json",
        "x": 140,
        "y": 500,
        "wires": [
            [
                "be875bcbf8381c19"
            ]
        ]
    },
    {
        "id": "888ce17ff4694d33",
        "type": "inject",
        "z": "770249581d809dbd",
        "name": "STATUS8",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF1209",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"StatusSNS\": {  \"Switch1\": \"ON\" } }",
        "payloadType": "json",
        "x": 120,
        "y": 120,
        "wires": [
            [
                "be875bcbf8381c19"
            ]
        ]
    },
    {
        "id": "0bcfc1a9df56c442",
        "type": "inject",
        "z": "770249581d809dbd",
        "name": "STATUS8",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF1209",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"StatusSNS\": {  \"Switch1\": \"OFF\" } }",
        "payloadType": "json",
        "x": 120,
        "y": 160,
        "wires": [
            [
                "be875bcbf8381c19"
            ]
        ]
    },
    {
        "id": "12624abeba74196c",
        "type": "debug",
        "z": "770249581d809dbd",
        "name": "debug 150",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 630,
        "y": 1240,
        "wires": []
    },
    {
        "id": "4b3cc4c2fb49e465",
        "type": "debug",
        "z": "770249581d809dbd",
        "name": "debug 151",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 330,
        "y": 1240,
        "wires": []
    },
    {
        "id": "de2cf57aef20a2b6",
        "type": "inject",
        "z": "770249581d809dbd",
        "name": "RESET Shift1",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "conditions",
                "v": "{}",
                "vt": "json"
            },
            {
                "p": "data",
                "v": "{}",
                "vt": "json"
            },
            {
                "p": "machine",
                "v": "{}",
                "vt": "json"
            }
        ],
        "repeat": "",
        "crontab": "10 02 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "reset",
        "payloadType": "str",
        "x": 700,
        "y": 900,
        "wires": [
            [
                "8126283260144045"
            ]
        ]
    },
    {
        "id": "9d81f4710d1436c8",
        "type": "debug",
        "z": "770249581d809dbd",
        "name": "debug 162",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1450,
        "y": 960,
        "wires": []
    },
    {
        "id": "be875bcbf8381c19",
        "type": "switch",
        "z": "770249581d809dbd",
        "name": "Machines",
        "property": "payload.serialNumber",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "DF1209",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 380,
        "y": 320,
        "wires": [
            [
                "e5e4ddfaf92ebbab"
            ]
        ],
        "icon": "font-awesome/fa-desktop"
    },
    {
        "id": "e5e4ddfaf92ebbab",
        "type": "switch",
        "z": "770249581d809dbd",
        "name": "Switches",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "hask",
                "v": "Switch1",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "Switch2",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "Switch3",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "Switch4",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "StatusSNS",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 5,
        "x": 540,
        "y": 180,
        "wires": [
            [
                "853170c47cd371b7"
            ],
            [
                "853170c47cd371b7"
            ],
            [
                "853170c47cd371b7"
            ],
            [
                "853170c47cd371b7"
            ],
            [
                "853170c47cd371b7"
            ]
        ]
    },
    {
        "id": "853170c47cd371b7",
        "type": "change",
        "z": "770249581d809dbd",
        "name": "delete time",
        "rules": [
            {
                "t": "delete",
                "p": "payload.timestamp",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.StatusSNS.Time",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.StatusSNS.Switch2",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.StatusSNS.Switch3",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.StatusSNS.Switch4",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 710,
        "y": 180,
        "wires": [
            [
                "c4d73bb86babbec8"
            ]
        ]
    },
    {
        "id": "c4d73bb86babbec8",
        "type": "rbe",
        "z": "770249581d809dbd",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 870,
        "y": 180,
        "wires": [
            [
                "fbb745e3060d4396"
            ]
        ]
    },
    {
        "id": "fbb745e3060d4396",
        "type": "function",
        "z": "770249581d809dbd",
        "name": "Switch State",
        "func": "function handleSwitch(payload, context, switchName, statusSNSName, startName, finishName) {\n    let switchKey = Object.keys(payload).find(key => key.startsWith(switchName)) // extrai o switch que chegou no payload\n    let switchState = context.get(switchName) || null;\n    let actionValue = payload[switchKey] ? payload[switchKey].Action : null; // extrai o estado do switch que chegou\n    let statusSNS = payload[statusSNSName] && payload[statusSNSName][switchName];\n    let startState = context.get(startName) || false;\n    let finishState = context.get(finishName) || false;\n\n    switchState = actionValue || statusSNS || switchState; // adquiri o estado do switch que chegou\n\n    if (switchState == \"ON\") { // Condi√ß√£o que caracteriza o in√≠cio da produ√ß√£o da pe√ßa\n        startState = true;\n    }\n    else if (switchState === \"OFF\" && context.get(switchName) === \"ON\") {\n        finishState = true;\n        startState = false;\n    }\n    context.set(switchName, switchState);\n    context.set(startName, startState);\n    context.set(finishName, finishState);\n\n    return {\n        switchState: switchState,\n        startState: startState,\n        finishState: finishState,\n    };\n}\nlet payload = msg.payload;\nlet automaticMode = handleSwitch(payload, context, 'Switch1', 'StatusSNS', 'automaticMode', 'noAutomaticMode');\nlet verifyPression = handleSwitch(payload, context, 'Switch2', 'StatusSNS', 'startPression', 'finishedPression');\nlet verifyAscent = handleSwitch(payload, context, 'Switch3', 'StatusSNS', 'startingAscent', 'finishedAscent');\nlet verifyDescent = handleSwitch(payload, context, 'Switch4', 'StatusSNS', 'startingDescent', 'finishedDescent');\n\nmsg.switches = {\n    switch1: automaticMode.switchState,\n    switch2: verifyPression.switchState,\n    switch3: verifyAscent.switchState,\n    switch4: verifyDescent.switchState,\n    automaticMode: automaticMode.startState,\n    startPression: verifyPression.startState,\n    finishedPression: verifyPression.finishState,\n    startingAscent: verifyAscent.startState,\n    finishedAscent: verifyAscent.finishState,\n    startingDescent: verifyDescent.startState,\n    finishedDescent: verifyDescent.finishState\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 220,
        "wires": [
            [
                "fcd373b55c2ebcab"
            ]
        ],
        "icon": "node-red/swap.svg"
    },
    {
        "id": "32b311f2a0a07053",
        "type": "debug",
        "z": "770249581d809dbd",
        "name": "debug 227",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1450,
        "y": 380,
        "wires": [],
        "icon": "node-red/comment.svg"
    },
    {
        "id": "fcd373b55c2ebcab",
        "type": "function",
        "z": "770249581d809dbd",
        "name": "Conditions Machine",
        "func": "let {automaticMode, startPression, finishedPression, startingAscent, finishedAscent, startingDescent, finishedDescent} = msg.switches;\nlet startingFold = context.get('startingFold') || false;\nlet finishedFold = context.get('finishedFold') || false;\nlet verifyFold = context.get('verifyFold') || false;\n\n// in√≠cio da dobra \nif (automaticMode == true && !startPression && startingDescent == true && startingAscent == true && finishedFold == false) {\n    startingFold = true;\n}\nelse if (automaticMode == true && finishedDescent == true && startPression == true \n        && startingAscent == false && finishedAscent == true && startingFold == true) {\n    \n    finishedFold = true;\n}\n\nif (startingFold == true && finishedFold == true) {\n    verifyFold = true;\n    startingFold = false;\n    finishedFold = false;\n}\ncontext.set('startingFold', startingFold);\ncontext.set('finishedFold', finishedFold);\ncontext.set('verifyFold', verifyFold);\n\nmsg.conditions = {\n    startingFold: startingFold,\n    finishedFold: finishedFold,\n    verifyFold: verifyFold,\n    serialNumber: msg.payload.serialNumber\n}\nverifyFold = false\ncontext.set('verifyFold', verifyFold);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 260,
        "wires": [
            [
                "5fd2e22b6eb2dcc8"
            ]
        ],
        "icon": "font-awesome/fa-bars"
    },
    {
        "id": "5fd2e22b6eb2dcc8",
        "type": "function",
        "z": "770249581d809dbd",
        "name": "Production Machine",
        "func": "let {serialNumber, startingFold, verifyFold} = msg.conditions;\nlet timestampStartFold = context.get('timestampStartFold') || null;\nlet timestampLastFold = context.get('timestampLastFold') || null;\nlet machine = context.get('machine') || null;\nlet foldCount = context.get('foldCount') || 0;\nlet resetShift = context.get('resetShift') || false;\nlet currentTimestamp = new Date();\n\nconst actions = {\n    resetShift: () => {foldCount = 0; resetShift = false; },\n    payloadReset: () => {resetShift = true; },\n    startFold: () => {timestampStartFold = currentTimestamp; },\n    finishedFold: () => {foldCount++; timestampLastFold = currentTimestamp; },\n    machineNull: () => {machine = serialNumber; }\n};\nconst conditions = {\n    resetShift: resetShift === true,\n    payloadReset: msg.payload === 'reset',\n    startFold: startingFold === true,\n    finishedFold: verifyFold === true,\n    machineNull: serialNumber && machine == null\n}\n\nObject.entries(conditions).forEach(([condition, isTrue]) => {\n    if(isTrue) {\n        actions[condition]();\n    }\n});\ncontext.set('foldCount', foldCount);\ncontext.set('resetShift', resetShift);\ncontext.set('timestampStartFold', timestampStartFold);\ncontext.set('timestampLastFold', timestampLastFold);\ncontext.set('machine', machine);\n\nmsg.data = {\n    foldCount: foldCount,\n    startProduction: timestampStartFold,\n    dateLastProduction: timestampLastFold,\n    reset: resetShift,\n    machine: machine,\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1160,
        "y": 260,
        "wires": [
            [
                "f04fa70430288931",
                "100b36fb6629ef52"
            ]
        ],
        "icon": "font-awesome/fa-bars"
    },
    {
        "id": "c908602f493880b3",
        "type": "inject",
        "z": "770249581d809dbd",
        "name": "TIMESTAMP (STATUS)",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "switches",
                "v": "{}",
                "vt": "json"
            },
            {
                "p": "conditions",
                "v": "{}",
                "vt": "json"
            },
            {
                "p": "data",
                "v": "{}",
                "vt": "json"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 920,
        "y": 100,
        "wires": [
            [
                "5fd2e22b6eb2dcc8"
            ]
        ],
        "icon": "font-awesome/fa-hourglass-1"
    },
    {
        "id": "e87d7f7236983238",
        "type": "inject",
        "z": "770249581d809dbd",
        "name": "TIMESTAMP RESET",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "switches",
                "v": "{}",
                "vt": "json"
            },
            {
                "p": "conditions",
                "v": "{}",
                "vt": "json"
            },
            {
                "p": "data",
                "v": "{}",
                "vt": "json"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "reset",
        "payloadType": "str",
        "x": 920,
        "y": 140,
        "wires": [
            [
                "5fd2e22b6eb2dcc8"
            ]
        ],
        "icon": "font-awesome/fa-hourglass-1"
    },
    {
        "id": "f04fa70430288931",
        "type": "function",
        "z": "770249581d809dbd",
        "name": "VerifyStatus",
        "func": "let { startProduction, dateLastProduction, machine } = msg.data;\nlet [differenceTimeStartProduction, differenceTimelastProduction] = ['differenceTimeStartProduction', 'differenceTimelasProduction'].map(key => context.get(key) || 0);\nlet currentTimestamp = new Date();\nlet currentStatus = context.get('currentStatus') || null;\n\ndifferenceTimeStartProduction = startProduction !== null ? (currentTimestamp.getTime() - startProduction.getTime()) / 1000 : null;\ndifferenceTimelastProduction = dateLastProduction !== null ? (currentTimestamp.getTime() - dateLastProduction.getTime()) / 1000 : null;\n\ncontext.set('differenceTimeStartProduction', differenceTimeStartProduction);\ncontext.set('differenceTimelastProduction', differenceTimelastProduction);\n\nif (startProduction !== null) {\n    //Mapear status\n    const machineWorking = differenceTimeStartProduction <= 299 || (differenceTimelastProduction !== null && differenceTimelastProduction <= 299);\n\n    const machineIdle = (differenceTimeStartProduction >= 300 && differenceTimelastProduction >= 300 && differenceTimelastProduction <= 1799) ||\n        (differenceTimeStartProduction >= 300 && differenceTimeStartProduction <= 1799 && dateLastProduction === null);\n\n    const machineOff = ((differenceTimeStartProduction >= 300 && differenceTimelastProduction >= 1800) || (differenceTimeStartProduction >= 1800 && dateLastProduction === null));\n\n    const newStatus = machineWorking ? 'TRABALHANDO' : machineIdle ? 'PARADO' : machineOff ? 'DESLIGADO' : null;\n    if (newStatus) currentStatus = newStatus;\n}\n\nif (startProduction == null) currentStatus = \"DESLIGADO\";\n\ncontext.set('currentStatus', currentStatus);\n\nmsg.status = {\n    timeCurrentProduction: differenceTimeStartProduction,\n    timeLastProduction: differenceTimelastProduction,\n    machine: machine,\n    currentStatus: currentStatus\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1370,
        "y": 300,
        "wires": [
            [
                "32b311f2a0a07053"
            ]
        ],
        "icon": "node-red/status.svg"
    },
    {
        "id": "ce1e41a4cc7575b3",
        "type": "catch",
        "z": "770249581d809dbd",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 720,
        "y": 420,
        "wires": [
            [
                "be7e2eef56bc7080"
            ]
        ]
    },
    {
        "id": "be7e2eef56bc7080",
        "type": "debug",
        "z": "770249581d809dbd",
        "name": "debug 228",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 890,
        "y": 420,
        "wires": [],
        "icon": "node-red/comment.svg"
    },
    {
        "id": "100b36fb6629ef52",
        "type": "function",
        "z": "770249581d809dbd",
        "name": "DODRADEIRA N. PSR7020",
        "func": "let {foldCount, machine} = msg.data;\n\nmsg.payload = {\n    dobras: foldCount,\n    deviceSerialNumber: machine\n}\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1420,
        "y": 260,
        "wires": [
            []
        ],
        "icon": "font-awesome/fa-cogs"
    },
    {
        "id": "f957d067fe18987e",
        "type": "switch",
        "z": "770249581d809dbd",
        "name": "Machines",
        "property": "payload.serialNumber",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "DF1209",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "DF3590",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 360,
        "y": 1660,
        "wires": [
            [
                "8fbe40d33b6cbae1"
            ],
            [
                "1b4946cd1f9ffc41"
            ]
        ],
        "icon": "font-awesome/fa-desktop"
    },
    {
        "id": "8fbe40d33b6cbae1",
        "type": "switch",
        "z": "770249581d809dbd",
        "name": "Switches",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "hask",
                "v": "Switch1",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "Switch2",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "Switch3",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "Switch4",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "StatusSNS",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 5,
        "x": 540,
        "y": 1580,
        "wires": [
            [
                "9082f5a6834402f4"
            ],
            [
                "9082f5a6834402f4"
            ],
            [
                "9082f5a6834402f4"
            ],
            [
                "9082f5a6834402f4"
            ],
            [
                "9082f5a6834402f4"
            ]
        ]
    },
    {
        "id": "9082f5a6834402f4",
        "type": "change",
        "z": "770249581d809dbd",
        "name": "delete time",
        "rules": [
            {
                "t": "delete",
                "p": "payload.timestamp",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.StatusSNS.Time",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.StatusSNS.Switch2",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.StatusSNS.Switch3",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.StatusSNS.Switch4",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 730,
        "y": 1580,
        "wires": [
            [
                "c42f412abaeabbaa"
            ]
        ]
    },
    {
        "id": "c42f412abaeabbaa",
        "type": "rbe",
        "z": "770249581d809dbd",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 890,
        "y": 1580,
        "wires": [
            [
                "96ef9cc8da590e8e"
            ]
        ]
    },
    {
        "id": "96ef9cc8da590e8e",
        "type": "function",
        "z": "770249581d809dbd",
        "name": "Switch State",
        "func": "function handleSwitch(payload, context, switchName, statusSNSName, startName, finishName) {\n    let switchKey = Object.keys(payload).find(key => key.startsWith(switchName)) // extrai o switch que chegou no payload\n    let switchState = context.get(switchName) || null;\n    let actionValue = payload[switchKey] ? payload[switchKey].Action : null; // extrai o estado do switch que chegou\n    let statusSNS = payload[statusSNSName] && payload[statusSNSName][switchName];\n    let startState = context.get(startName) || false;\n    let finishState = context.get(finishName) || false;\n\n    switchState = actionValue || statusSNS || switchState; // adquiri o estado do switch que chegou\n\n    if (switchState == \"ON\") { // Condi√ß√£o que caracteriza o in√≠cio da produ√ß√£o da pe√ßa\n        startState = true;\n    }\n    else if (switchState === \"OFF\" && context.get(switchName) === \"ON\") {\n        finishState = true;\n        startState = false;\n    }\n    context.set(switchName, switchState);\n    context.set(startName, startState);\n    context.set(finishName, finishState);\n\n    return {\n        switchState: switchState,\n        startState: startState,\n        finishState: finishState,\n    };\n}\nlet payload = msg.payload;\nlet automaticMode = handleSwitch(payload, context, 'Switch1', 'StatusSNS', 'automaticMode', 'noAutomaticMode');\nlet verifyPression = handleSwitch(payload, context, 'Switch2', 'StatusSNS', 'startPression', 'finishedPression');\nlet verifyAscent = handleSwitch(payload, context, 'Switch3', 'StatusSNS', 'startingAscent', 'finishedAscent');\nlet verifyDescent = handleSwitch(payload, context, 'Switch4', 'StatusSNS', 'startingDescent', 'finishedDescent');\n\nmsg.switches = {\n    switch1: automaticMode.switchState,\n    switch2: verifyPression.switchState,\n    switch3: verifyAscent.switchState,\n    switch4: verifyDescent.switchState,\n    automaticMode: automaticMode.startState,\n    startPression: verifyPression.startState,\n    finishedPression: verifyPression.finishState,\n    startingAscent: verifyAscent.startState,\n    finishedAscent: verifyAscent.finishState,\n    startingDescent: verifyDescent.startState,\n    finishedDescent: verifyDescent.finishState\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 1580,
        "wires": [
            [
                "20c71e6d74e749a6"
            ]
        ],
        "icon": "node-red/swap.svg"
    },
    {
        "id": "20c71e6d74e749a6",
        "type": "function",
        "z": "770249581d809dbd",
        "name": "Conditions Machine",
        "func": "let { automaticMode, startPression, finishedPression, startingAscent, finishedAscent, startingDescent, finishedDescent } = msg.switches;\nlet startingFold = context.get('startingFold') || false;\nlet finishedFold = context.get('finishedFold') || false;\nlet verifyFold = context.get('verifyFold') || false;\n\n// in√≠cio da dobra \nif (automaticMode == true && !startPression && startingDescent == true && startingAscent == true && finishedFold == false) {\n    startingFold = true;\n}\nelse if (automaticMode == true && finishedDescent == true && startPression == true\n    && startingAscent == false && finishedAscent == true && startingFold == true) {\n\n    finishedFold = true;\n}\n\nif (startingFold == true && finishedFold == true) {\n    verifyFold = true;\n    startingFold = false;\n    finishedFold = false;\n}\ncontext.set('startingFold', startingFold);\ncontext.set('finishedFold', finishedFold);\ncontext.set('verifyFold', verifyFold);\n\nmsg.conditions = {\n    startingFold: startingFold,\n    finishedFold: finishedFold,\n    verifyFold: verifyFold,\n    serialNumber: msg.payload.serialNumber\n}\nverifyFold = false\ncontext.set('verifyFold', verifyFold);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 1620,
        "wires": [
            [
                "6bf9339b692d089d"
            ]
        ],
        "icon": "font-awesome/fa-bars"
    },
    {
        "id": "6bf9339b692d089d",
        "type": "function",
        "z": "770249581d809dbd",
        "name": "Production Machine",
        "func": "let { serialNumber, startingFold, verifyFold } = msg.conditions;\nlet [timestampStartFold, timestampLastFold, machine] = ['timestampStartFold', 'timestampLastFold', 'machine'].map(key => context.get(key) || null);\nlet foldCount = context.get('foldCount') || 0;\nlet resetShift = context.get('resetShift') || false;\nlet currentTimestamp = new Date();\n\nconst actions = {\n    resetShift: () => { foldCount = 0; resetShift = false; },\n    payloadReset: () => { resetShift = true; },\n    startFold: () => { timestampStartFold = currentTimestamp; },\n    finishedFold: () => { foldCount++; timestampLastFold = currentTimestamp; },\n    machineNull: () => { machine = serialNumber; }\n};\nconst conditions = {\n    resetShift: resetShift === true,\n    payloadReset: msg.payload === 'reset',\n    startFold: startingFold === true,\n    finishedFold: verifyFold === true,\n    machineNull: serialNumber && machine == null\n}\n\nObject.entries(conditions).forEach(([condition, isTrue]) => {\n    if (isTrue) {\n        actions[condition]();\n    }\n});\ncontext.set('foldCount', foldCount);\ncontext.set('resetShift', resetShift);\ncontext.set('timestampStartFold', timestampStartFold);\ncontext.set('timestampLastFold', timestampLastFold);\ncontext.set('machine', machine);\n\nmsg.data = {\n    verifyFold: verifyFold,\n    foldCount: foldCount,\n    startProduction: timestampStartFold,\n    dateLastProduction: timestampLastFold,\n    reset: resetShift,\n    machine: machine,\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1100,
        "y": 1660,
        "wires": [
            [
                "11154b931e2a5443",
                "e5aae78907a3c9f9"
            ]
        ],
        "icon": "font-awesome/fa-bars"
    },
    {
        "id": "11154b931e2a5443",
        "type": "function",
        "z": "770249581d809dbd",
        "name": "VerifyStatus",
        "func": "let { startProduction, dateLastProduction, machine } = msg.data;\nlet [differenceTimeStartProduction, differenceTimelastProduction] = ['differenceTimeStartProduction', 'differenceTimelasProduction'].map(key => context.get(key) || 0);\nlet currentTimestamp = new Date();\nlet currentStatus = context.get('currentStatus') || null;\n\ndifferenceTimeStartProduction = startProduction !== null ? (currentTimestamp.getTime() - startProduction.getTime()) / 1000 : null;\ndifferenceTimelastProduction = dateLastProduction !== null ? (currentTimestamp.getTime() - dateLastProduction.getTime()) / 1000 : null;\n\ncontext.set('differenceTimeStartProduction', differenceTimeStartProduction);\ncontext.set('differenceTimelastProduction', differenceTimelastProduction);\n\nif (startProduction !== null) {\n    //Mapear status\n    const machineWorking = differenceTimeStartProduction <= 299 || (differenceTimelastProduction !== null && differenceTimelastProduction <= 299);\n\n    const machineIdle = (differenceTimeStartProduction >= 300 && differenceTimelastProduction >= 300 && differenceTimelastProduction <= 1799) ||\n        (differenceTimeStartProduction >= 300 && differenceTimeStartProduction <= 1799 && dateLastProduction === null);\n\n    const machineOff = ((differenceTimeStartProduction >= 300 && differenceTimelastProduction >= 1800) || (differenceTimeStartProduction >= 1800 && dateLastProduction === null));\n\n    const newStatus = machineWorking ? 'TRABALHANDO' : machineIdle ? 'PARADO' : machineOff ? 'DESLIGADO' : null;\n    if (newStatus) currentStatus = newStatus;\n}\n\nif (startProduction == null) currentStatus = \"DESLIGADO\";\n\ncontext.set('currentStatus', currentStatus);\n\nmsg.status = {\n    timeCurrentProduction: differenceTimeStartProduction,\n    timeLastProduction: differenceTimelastProduction,\n    machine: machine,\n    currentStatus: currentStatus\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1410,
        "y": 1680,
        "wires": [
            [
                "272cdd6d9bbd6056",
                "5d149d7d047e8c49"
            ]
        ],
        "icon": "node-red/status.svg"
    },
    {
        "id": "e5aae78907a3c9f9",
        "type": "function",
        "z": "770249581d809dbd",
        "name": "DODRADEIRA N. PSR17530",
        "func": "let { verifyFold, foldCount, machine } = msg.data;\n\nmsg.payload = {\n    verifyFold: verifyFold,\n    dobras: foldCount,\n    deviceSerialNumber: machine\n}\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1460,
        "y": 1640,
        "wires": [
            [
                "3feccc9fa54b9147"
            ]
        ],
        "icon": "font-awesome/fa-cogs"
    },
    {
        "id": "1b4946cd1f9ffc41",
        "type": "switch",
        "z": "770249581d809dbd",
        "name": "Switches",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "hask",
                "v": "Switch1",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "Switch2",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "Switch3",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "Switch4",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "StatusSNS",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 5,
        "x": 540,
        "y": 1740,
        "wires": [
            [
                "5dae28700e395289"
            ],
            [
                "5dae28700e395289"
            ],
            [
                "5dae28700e395289"
            ],
            [
                "5dae28700e395289"
            ],
            [
                "5dae28700e395289"
            ]
        ]
    },
    {
        "id": "5dae28700e395289",
        "type": "change",
        "z": "770249581d809dbd",
        "name": "delete time",
        "rules": [
            {
                "t": "delete",
                "p": "payload.timestamp",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.StatusSNS.Time",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.StatusSNS.Switch2",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.StatusSNS.Switch3",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.StatusSNS.Switch4",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 730,
        "y": 1740,
        "wires": [
            [
                "4d18122673eb0474"
            ]
        ]
    },
    {
        "id": "4d18122673eb0474",
        "type": "rbe",
        "z": "770249581d809dbd",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 890,
        "y": 1740,
        "wires": [
            [
                "556c1d0df03728c4"
            ]
        ]
    },
    {
        "id": "556c1d0df03728c4",
        "type": "function",
        "z": "770249581d809dbd",
        "name": "Switch State",
        "func": "function handleSwitch(payload, context, switchName, startName, finishName) {\n    let switchState = context.get(switchName) || null;\n    let startState = context.get(startName) || false;\n    let finishState = context.get(finishName) || false;\n\n    if (payload[switchName] && payload[switchName].Action == \"ON\") { // captura \"ON\" do SW2, SW3 E SW4\n        switchState = \"ON\";\n        startState = true;\n\n    } else if (payload[switchName] && payload[switchName].Action == \"OFF\" && switchState == \"ON\") {\n        switchState = \"OFF\";\n        finishState = true;\n\n        startState = false;\n    }\n\n    context.set(switchName, switchState);\n    context.set(startName, startState);\n    context.set(finishName, finishState);\n\n    return {\n        switchState: switchState,\n        startState: startState,\n        finishState: finishState,\n    };\n}\n\nlet payload = msg.payload;\nlet switch1 = context.get('switch1') || null // valor do switch1 \nlet automaticMode = context.get('automaticMode') || false;\nlet verifyPression = handleSwitch(payload, context, 'Switch2','startPression','finishedPression');\nlet verifyAscent = handleSwitch(payload, context, 'Switch3','startingAscent','finishedAscent');\nlet verifyDescent = handleSwitch(payload, context, 'Switch4','startingDescent','finishedDescent');\n\nif ((payload.Switch1 && payload.Switch1.Action == \"ON\") || (payload.StatusSNS && payload.StatusSNS.Switch1 == \"ON\")) {\n    switch1 = \"ON\";\n    context.set('switch1', switch1);\n\n    automaticMode = true;\n    context.set('automaticMode', automaticMode);\n}\nelse if (((payload.Switch1 && payload.Switch1.Action == \"OFF\") || (payload.StatusSNS && payload.StatusSNS.Switch1 == \"OFF\")) && switch1 == \"ON\") {\n    switch1 = \"OFF\";\n    context.set('switch1', switch1);\n\n    automaticMode = false;\n    context.set('automaticMode', automaticMode);\n}\n\nmsg.switches = {\n    switch1: switch1,\n    switch2: verifyPression.switchState,\n    switch3: verifyAscent.switchState,\n    switch4: verifyDescent.switchState,\n    automaticMode: automaticMode,\n    startPression: verifyPression.startState,\n    finishedPression: verifyPression.finishState,\n    startingAscent: verifyAscent.startState,\n    finishedAscent: verifyAscent.finishState,\n    startingDescent: verifyDescent.startState,\n    finishedDescent: verifyDescent.finishState\n};\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 1740,
        "wires": [
            [
                "40c388bbf4a08f8c"
            ]
        ],
        "icon": "node-red/swap.svg"
    },
    {
        "id": "40c388bbf4a08f8c",
        "type": "function",
        "z": "770249581d809dbd",
        "name": "Conditions Machine",
        "func": "let serialNumber = msg.payload.serialNumber;\nlet automaticMode = msg.switches.automaticMode;\nlet startPression = msg.switches.startPression;\nlet finishedPression = msg.switches.finishedPression;\nlet startingAscent = msg.switches.startingAscent;\nlet finishedAscent = msg.switches.finishedAscent;\nlet startingDescent = msg.switches.startingDescent;\nlet finishedDescent = msg.switches.finishedDescent;\nlet startingFold = context.get('startingFold') || false;\nlet finishedFold = context.get('finishedFold') || false;\nlet verifyFold = context.get('verifyFold') || false;\n\n// in√≠cio da dobra \nif (automaticMode == true && !startPression && startingDescent == true && startingAscent == true && finishedFold == false) {\n    startingFold = true;\n    context.set('startingFold', startingFold);\n}\nelse if (automaticMode == true && finishedDescent == true && startPression == true && startingDescent == false && finishedAscent == true && startingFold == true) {\n    finishedFold = true;\n    context.set('finishedFold', finishedFold);\n}\n\nif (startingFold == true && finishedFold == true) {\n    verifyFold = true;\n    context.set('verifyFold', verifyFold);\n\n    startingFold = false;\n    finishedFold = false;\n    context.set('startingFold', startingFold);\n    context.set('finishedFold', finishedFold);\n}\n\nmsg.conditions = {\n    startingFold: startingFold,\n    finishedFold: finishedFold,\n    verifyFold: verifyFold,\n    machine: serialNumber\n}\n\nif (verifyFold == true) {\n    verifyFold = false;\n    context.set('verifyFold', verifyFold);\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 1780,
        "wires": [
            [
                "21c90126d0de0ef8"
            ]
        ],
        "icon": "font-awesome/fa-bars"
    },
    {
        "id": "21c90126d0de0ef8",
        "type": "function",
        "z": "770249581d809dbd",
        "name": "Production Machine",
        "func": "let payload = msg.payload;\nlet serialNumber = msg.conditions.machine;\nlet startingFold = msg.conditions.startingFold;\nlet finishedFold = msg.conditions.finishedFold;\nlet verifyFold = msg.conditions.verifyFold;\nlet timestampStartFold = context.get('timestampStartFold') || null;\nlet timestampLastFold = context.get('timestampLastFold') || null;\nlet machine = context.get('machine') || null;\nlet foldCount = context.get('foldCount') || 0;\nlet machineActivity = context.get('machineActivity') || 0;\nlet machineInactivity = context.get('machineInactivity') || 0;\nlet resetShift = context.get('resetShift') || false;\nlet currentStatus = context.get('currentStatus') || 'PARADA';\nlet currentTimestamp = new Date();\n\nconst actions = {\n    'resetShift': () => {\n        foldCount = 0;\n        machineActivity = 0;\n        machineInactivity = 0;\n        resetShift = false;\n\n        context.set('foldCount', foldCount);\n        context.set('machineActivity', machineActivity);\n        context.set('machineInactivity', machineInactivity);\n        context.set('resetShift', resetShift);\n    },\n    'payloadReset': () => {\n        resetShift = true;\n        context.set('resetShift', resetShift);\n    },\n    'startFold': () => {\n        timestampStartFold = currentTimestamp;\n        context.set('timestampStartFold', timestampStartFold);\n\n        if (timestampLastFold !== null) {\n            let timeIdle = (currentTimestamp.getTime() - timestampLastFold.getTime()) / 1000;\n\n            if (timeIdle >= 300) {\n                machineInactivity += timeIdle;\n                context.set('machineInactivity', machineInactivity);\n            }\n            else {\n                machineActivity += timeIdle;\n                context.set('machineActivity', machineActivity);\n            }\n        };\n\n        currentStatus = \"TRABALHANDO\";\n        context.set('currentStatus', currentStatus);\n    },\n    'finishedFold': () => {\n        foldCount++;\n\n        timestampLastFold = currentTimestamp;\n        context.set('timestampLastFold', timestampLastFold);\n\n        currentStatus = \"PARADA\";\n        context.set('currentStatus', currentStatus);\n\n        timestampStartFold = null;\n        context.set('timestampStartFold', timestampStartFold);\n    },\n    'machineNull': () => {\n        machine = serialNumber;\n        context.set('machine', machine);\n    }\n};\n\nif (resetShift === true) actions.resetShift();\nif (payload === 'reset') actions.payloadReset();\nif (startingFold === true && timestampStartFold == null) actions.startFold();\nif (verifyFold === true) actions.finishedFold();\nif (serialNumber && machine == null) actions.machineNull();\n\ncontext.set('foldCount', foldCount);\n\nmsg.data = {\n    foldCount: foldCount,\n    workingTime: machineActivity,\n    idleTime: machineInactivity,\n    dateStartingFold: timestampStartFold,\n    dateLastProduction: timestampLastFold,\n    reset: resetShift,\n    machine: machine,\n    status: currentStatus\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1100,
        "y": 1820,
        "wires": [
            [
                "464557b7f898573f",
                "5292739d452d7b3e"
            ]
        ],
        "icon": "font-awesome/fa-bars"
    },
    {
        "id": "464557b7f898573f",
        "type": "function",
        "z": "770249581d809dbd",
        "name": "VerifyStatus",
        "func": "let dateStartingFold = msg.data.dateStartingFold;\nlet dateLastProduction = msg.data.dateLastProduction;\nlet machine = msg.data.machine;\nlet currentTimestamp = new Date();\nlet currentStatus = context.get('currentStatus') || null;\nlet differenceTimeStartFold = context.get('differenceTimeStartFold') || 0;\nlet differenceTimelastProduction = context.get('differenceTimelastProduction') || 0;\n\nif (dateStartingFold !== null) {\n    differenceTimeStartFold = (currentTimestamp.getTime() - dateStartingFold.getTime()) / 1000;\n    context.set('differenceTimeStartFold', differenceTimeStartFold);\n}\n\nif (dateLastProduction !== null) {\n    differenceTimelastProduction = (currentTimestamp.getTime() - dateLastProduction.getTime()) / 1000;\n    context.set('differenceTimelastProduction', differenceTimelastProduction);\n}\n\nif (dateStartingFold !== null || dateLastProduction !== null) {\n\n    if ((differenceTimeStartFold <= 299 && dateLastProduction == null) || (differenceTimeStartFold <= 299 && differenceTimelastProduction <= 299 && dateLastProduction !== null)) {\n        currentStatus = \"TRABALHANDO\";\n        context.set('currentStatus', currentStatus);\n    }\n    else if ((differenceTimeStartFold >= 300 && differenceTimelastProduction >= 300 && differenceTimelastProduction <= 1799)\n            || (differenceTimeStartFold >= 300 && differenceTimeStartFold <= 1799 && dateLastProduction === null)\n            || (differenceTimelastProduction >= 300 && differenceTimelastProduction <= 1799 && dateStartingFold === null)) {\n        \n        currentStatus = \"PARADO\";\n        context.set('currentStatus', currentStatus);\n\n    }\n    else if ((differenceTimeStartFold >= 300 && differenceTimelastProduction >= 1800) || (differenceTimeStartFold >= 1800 && dateLastProduction === null)\n            || (differenceTimelastProduction >= 1800 && dateStartingFold === null)) {\n        currentStatus = \"DESLIGADO\";\n        context.set('currentStatus', currentStatus);\n    }\n}\n\nelse if (dateStartingFold == null && dateLastProduction == null) {\n    currentStatus = \"DESLIGADO\";\n    context.set('currentStatus', currentStatus);\n}\n\nmsg.status = {\n    timeCurrentProduction: differenceTimeStartFold,\n    timeLastProduction: differenceTimelastProduction,\n    machine: machine,\n    currentStatus: currentStatus\n}\n\n return msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1410,
        "y": 1860,
        "wires": [
            []
        ],
        "icon": "node-red/status.svg"
    },
    {
        "id": "5292739d452d7b3e",
        "type": "function",
        "z": "770249581d809dbd",
        "name": "DODRADEIRA N. PSR7020",
        "func": "let workingTime = msg.data.workingTime;\nlet idleTime = msg.data.idleTime;\nlet foldCount = msg.data.foldCount;\nlet status = msg.data.status;\nlet reset = msg.data.reset;\nlet machine = msg.data.machine;\nlet workingTimeMinutes = context.get('workingTimeMinutes') || 0;\nlet idleTimeMinutes = context.get('idleTimeMinutes') || 0;\n\nfunction minutesToHours(totalMinutes) {\n    var hours = String(Math.floor(totalMinutes / 60)).padStart(2, \"0\");\n    var minutes = String(totalMinutes % 60).padStart(2, \"0\");\n\n    return `${hours}:${minutes}`;\n}\n\nif (reset == true) {\n    workingTimeMinutes = 0;\n    idleTimeMinutes = 0;\n\n    context.set('workingTimeMinutes', workingTimeMinutes);\n    context.set('idleTimeMinutes', idleTimeMinutes);\n}\n\nworkingTimeMinutes = workingTime;\nidleTimeMinutes = idleTime;\n\nif (workingTimeMinutes > 0) {\n    workingTimeMinutes = workingTime / 60;\n}\n\nif (idleTimeMinutes > 0) {\n    idleTimeMinutes = idleTime / 60;\n}\n\ncontext.set('workingTimeMinutes', workingTimeMinutes);\ncontext.set('idleTimeMinutes', idleTimeMinutes);\n\nmsg.payload = {\n    dobras: foldCount,\n    workingTimeMinutes: minutesToHours(workingTimeMinutes.toFixed(0)),\n    idleTimeMinutes: minutesToHours(idleTimeMinutes.toFixed(0)),\n    status: status,\n    deviceSerialNumber: machine\n}\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1460,
        "y": 1800,
        "wires": [
            []
        ],
        "icon": "font-awesome/fa-cogs"
    },
    {
        "id": "5d149d7d047e8c49",
        "type": "debug",
        "z": "770249581d809dbd",
        "name": "debug 230",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1770,
        "y": 1960,
        "wires": []
    },
    {
        "id": "3feccc9fa54b9147",
        "type": "function",
        "z": "770249581d809dbd",
        "name": "Increment Dobras",
        "func": "let { verifyFold, deviceSerialNumber } = msg.payload;\nlet unit = context.get('unit') || null;\nlet count = context.get('count') || 0;\nlet currentTimestamp = new Date();\n\nif (verifyFold === true) {\n    unit = \"Dobras\";\n    count = 1;\n    context.set('unit', unit);\n    context.set('count', count);\n\n    msg.payload = {\n        timestamp: currentTimestamp.getTime(),\n        deviceSerialNumber: deviceSerialNumber,\n        unit: unit,\n        count: count\n    }\n    return msg;\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1730,
        "y": 1640,
        "wires": [
            [
                "6e60c8351eb52b3a"
            ]
        ],
        "icon": "node-red/arrow-in.svg"
    },
    {
        "id": "272cdd6d9bbd6056",
        "type": "function",
        "z": "770249581d809dbd",
        "name": "FormatedMessage",
        "func": "let machine = msg.status.machine;\nlet timestamp = new Date().getTime();\nlet currentStatus = context.get('currentStatus') || null; \nlet oldStatus = msg.status.currentStatus;\n\nif(!currentStatus || currentStatus !== oldStatus) {\n    currentStatus = oldStatus;\n    context.set('currentStatus', currentStatus);\n\n    msg.payload = {\n            timestamp: timestamp,\n            deviceSerialNumber: machine,\n            status: currentStatus\n    }\n    return msg;\n}\nreturn null;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1730,
        "y": 1680,
        "wires": [
            [
                "acb5b945f64272dd"
            ]
        ],
        "icon": "font-awesome/fa-envelope"
    },
    {
        "id": "6e60c8351eb52b3a",
        "type": "debug",
        "z": "770249581d809dbd",
        "name": "debug 282",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1890,
        "y": 1580,
        "wires": []
    },
    {
        "id": "acb5b945f64272dd",
        "type": "debug",
        "z": "770249581d809dbd",
        "name": "debug 283",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1930,
        "y": 1680,
        "wires": []
    },
    {
        "id": "93a1660e5d4eaa4b",
        "type": "inject",
        "z": "770249581d809dbd",
        "name": "SWITCH1 ON",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF1209",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch1\": {\"Action\": \"ON\"} }",
        "payloadType": "json",
        "x": 110,
        "y": 1560,
        "wires": [
            [
                "f957d067fe18987e"
            ]
        ]
    },
    {
        "id": "27329dd697bc3821",
        "type": "inject",
        "z": "770249581d809dbd",
        "name": "SWITCH1 OFF",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF1209",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch1\": {\"Action\": \"OFF\"} }",
        "payloadType": "json",
        "x": 120,
        "y": 1600,
        "wires": [
            [
                "f957d067fe18987e"
            ]
        ]
    },
    {
        "id": "89222c546d420d80",
        "type": "inject",
        "z": "770249581d809dbd",
        "name": "SWITCH2 ON",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF1209",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch2\": {\"Action\": \"ON\"} }",
        "payloadType": "json",
        "x": 110,
        "y": 1780,
        "wires": [
            [
                "f957d067fe18987e"
            ]
        ]
    },
    {
        "id": "fdf9b6f09539814a",
        "type": "inject",
        "z": "770249581d809dbd",
        "name": "SWITCH2 OFF",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF1209",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch2\": {\"Action\": \"OFF\"} }",
        "payloadType": "json",
        "x": 120,
        "y": 1820,
        "wires": [
            [
                "f957d067fe18987e"
            ]
        ]
    },
    {
        "id": "411bca11bd737c3d",
        "type": "inject",
        "z": "770249581d809dbd",
        "name": "SWITCH3 ON",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF1209",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch3\": {\"Action\": \"ON\"} }",
        "payloadType": "json",
        "x": 110,
        "y": 1880,
        "wires": [
            [
                "f957d067fe18987e"
            ]
        ]
    },
    {
        "id": "68c97ede9cb66d1e",
        "type": "inject",
        "z": "770249581d809dbd",
        "name": "SWITCH3 OFF",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF1209",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch3\": {\"Action\": \"OFF\"} }",
        "payloadType": "json",
        "x": 120,
        "y": 1920,
        "wires": [
            [
                "f957d067fe18987e"
            ]
        ]
    },
    {
        "id": "f2b3e092ea3f727c",
        "type": "inject",
        "z": "770249581d809dbd",
        "name": "SWITCH4 ON",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF1209",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch4\": {\"Action\": \"ON\"} }",
        "payloadType": "json",
        "x": 110,
        "y": 1980,
        "wires": [
            [
                "f957d067fe18987e"
            ]
        ]
    },
    {
        "id": "a067d977a82ea8f9",
        "type": "inject",
        "z": "770249581d809dbd",
        "name": "SWITCH4 OFF",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF1209",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch4\": {\"Action\": \"OFF\"} }",
        "payloadType": "json",
        "x": 120,
        "y": 2020,
        "wires": [
            [
                "f957d067fe18987e"
            ]
        ]
    },
    {
        "id": "3943ed926c696bfb",
        "type": "inject",
        "z": "770249581d809dbd",
        "name": "STATUS8",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF1209",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"StatusSNS\": {  \"Switch1\": \"ON\" } }",
        "payloadType": "json",
        "x": 100,
        "y": 1640,
        "wires": [
            [
                "f957d067fe18987e"
            ]
        ]
    },
    {
        "id": "3102480a5aaa4686",
        "type": "inject",
        "z": "770249581d809dbd",
        "name": "STATUS8",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF1209",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"StatusSNS\": {  \"Switch1\": \"OFF\" } }",
        "payloadType": "json",
        "x": 100,
        "y": 1680,
        "wires": [
            [
                "f957d067fe18987e"
            ]
        ]
    },
    {
        "id": "3c30304df5d6a721",
        "type": "switch",
        "z": "770249581d809dbd",
        "name": "Machines",
        "property": "payload.serialNumber",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "DF1209",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "DF3590",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 860,
        "y": 2380,
        "wires": [
            [
                "9784b68f5aa69299"
            ],
            [
                "9784b68f5aa69299"
            ]
        ],
        "icon": "font-awesome/fa-desktop"
    },
    {
        "id": "fcbc82111509fccf",
        "type": "switch",
        "z": "770249581d809dbd",
        "name": "Switches",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "hask",
                "v": "Switch1",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "Switch2",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "Switch3",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "Switch4",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "StatusSNS",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 5,
        "x": 520,
        "y": 2380,
        "wires": [
            [
                "aa36a66e1182ef75"
            ],
            [
                "aa36a66e1182ef75"
            ],
            [
                "aa36a66e1182ef75"
            ],
            [
                "aa36a66e1182ef75"
            ],
            [
                "aa36a66e1182ef75"
            ]
        ]
    },
    {
        "id": "82188d0ddb68b315",
        "type": "inject",
        "z": "770249581d809dbd",
        "name": "SWITCH1 ON",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF1209",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch1\": {\"Action\": \"ON\"} }",
        "payloadType": "json",
        "x": 210,
        "y": 2160,
        "wires": [
            [
                "fcbc82111509fccf"
            ]
        ]
    },
    {
        "id": "514ef59856830c4d",
        "type": "inject",
        "z": "770249581d809dbd",
        "name": "SWITCH1 OFF",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF1209",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch1\": {\"Action\": \"OFF\"} }",
        "payloadType": "json",
        "x": 220,
        "y": 2200,
        "wires": [
            [
                "fcbc82111509fccf"
            ]
        ]
    },
    {
        "id": "a7fb0d107305207d",
        "type": "inject",
        "z": "770249581d809dbd",
        "name": "SWITCH2 ON",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF1209",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch2\": {\"Action\": \"ON\"} }",
        "payloadType": "json",
        "x": 210,
        "y": 2380,
        "wires": [
            [
                "fcbc82111509fccf"
            ]
        ]
    },
    {
        "id": "a84a6f9d78f5bee7",
        "type": "inject",
        "z": "770249581d809dbd",
        "name": "SWITCH2 OFF",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF1209",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch2\": {\"Action\": \"OFF\"} }",
        "payloadType": "json",
        "x": 220,
        "y": 2420,
        "wires": [
            [
                "fcbc82111509fccf"
            ]
        ]
    },
    {
        "id": "8b42c3770fd7b348",
        "type": "inject",
        "z": "770249581d809dbd",
        "name": "SWITCH3 ON",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF1209",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch3\": {\"Action\": \"ON\"} }",
        "payloadType": "json",
        "x": 210,
        "y": 2480,
        "wires": [
            [
                "fcbc82111509fccf"
            ]
        ]
    },
    {
        "id": "2d89db57d7f4cf1a",
        "type": "inject",
        "z": "770249581d809dbd",
        "name": "SWITCH3 OFF",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF1209",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch3\": {\"Action\": \"OFF\"} }",
        "payloadType": "json",
        "x": 220,
        "y": 2520,
        "wires": [
            [
                "fcbc82111509fccf"
            ]
        ]
    },
    {
        "id": "9494bf400f62160a",
        "type": "inject",
        "z": "770249581d809dbd",
        "name": "SWITCH4 ON",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF1209",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch4\": {\"Action\": \"ON\"} }",
        "payloadType": "json",
        "x": 210,
        "y": 2580,
        "wires": [
            [
                "fcbc82111509fccf"
            ]
        ]
    },
    {
        "id": "424f13ed5bf3c64d",
        "type": "inject",
        "z": "770249581d809dbd",
        "name": "SWITCH4 OFF",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF1209",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch4\": {\"Action\": \"OFF\"} }",
        "payloadType": "json",
        "x": 220,
        "y": 2620,
        "wires": [
            [
                "fcbc82111509fccf"
            ]
        ]
    },
    {
        "id": "3897ba0f86bf0c89",
        "type": "inject",
        "z": "770249581d809dbd",
        "name": "STATUS8",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF1209",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"StatusSNS\": {  \"Switch1\": \"ON\" } }",
        "payloadType": "json",
        "x": 200,
        "y": 2240,
        "wires": [
            [
                "fcbc82111509fccf"
            ]
        ]
    },
    {
        "id": "28b97513fcf47237",
        "type": "inject",
        "z": "770249581d809dbd",
        "name": "STATUS8",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF1209",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"StatusSNS\": {  \"Switch1\": \"OFF\" } }",
        "payloadType": "json",
        "x": 200,
        "y": 2280,
        "wires": [
            [
                "fcbc82111509fccf"
            ]
        ]
    },
    {
        "id": "aa36a66e1182ef75",
        "type": "change",
        "z": "770249581d809dbd",
        "name": "delete time",
        "rules": [
            {
                "t": "delete",
                "p": "payload.timestamp",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.StatusSNS.Time",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.StatusSNS.Switch2",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.StatusSNS.Switch3",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.StatusSNS.Switch4",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 690,
        "y": 2380,
        "wires": [
            [
                "3c30304df5d6a721"
            ]
        ]
    },
    {
        "id": "9784b68f5aa69299",
        "type": "function",
        "z": "770249581d809dbd",
        "name": "Dobra object main",
        "func": "let dobraNewtonProperties = flow.get('dobraNewtonProperties') || {};\nlet serialNumber = msg.payload.serialNumber;\nlet getSwitch = Object.keys(msg.payload).find(key => key.startsWith('Switch')) || null;\nlet getStatusSNS = Object.keys(msg.payload).find(key => key.startsWith('StatusSNS')) || null;\n\nif (getSwitch !== null || getStatusSNS !== null) {\n    if (!dobraNewtonProperties[serialNumber]) {\n        dobraNewtonProperties[serialNumber] = {\n            \"automaticMode\": false,\n            \"noAutomaticMode\": false,\n            \"startPression\": false,\n            \"finishedPression\": false,\n            \"startingAscent\": false,\n            \"finishedAscent\": false,\n            \"startingDescent\": false,\n            \"finishedDescent\": false,\n            \"startFold\": false,\n            \"fold\": 0,\n            \"dateStartProduction\": null,\n            \"dateLastProduction\": null,\n            \"unit\": null,\n            \"status\": null,\n        }\n    }\n}\nflow.set('dobraNewtonProperties', dobraNewtonProperties);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 2380,
        "wires": [
            [
                "e5946b14495b4cf1"
            ]
        ],
        "icon": "font-awesome/fa-save"
    },
    {
        "id": "e5946b14495b4cf1",
        "type": "function",
        "z": "770249581d809dbd",
        "name": "Handle switches",
        "func": "let handleSwitch = function(payload, context, machineProperties, statusSNSName, switchName, startName, finishName) {\n    let switchKey = Object.keys(payload).find(key => key.startsWith(switchName));\n    let switchState = context.get(switchName) || null;\n    let actionValue = payload[switchKey] ? payload[switchKey].Action : null;\n    let statusSNS = payload[statusSNSName] && payload[statusSNSName][switchName];\n    let startState = machineProperties[startName] || false;\n    let finishState = machineProperties[finishName] || false;\n\n    switchState = actionValue || statusSNS || switchState;\n\n    if (switchState === \"ON\") {\n        startState = true;\n        finishState = false;\n    }\n    else if (switchState === \"OFF\") {\n        finishState = true;\n        startState = false;\n    }\n    machineProperties[startName] = startState;\n    machineProperties[finishName] = finishState;\n    return {\n        switchState: switchState,\n        startState: startState,\n        finishState: finishState,\n    };\n}\nlet payload = msg.payload;\nlet serialNumber = msg.payload.serialNumber;\nlet dobraNewtonProperties = flow.get('dobraNewtonProperties') || {};\nlet machineProperties = dobraNewtonProperties[serialNumber] || {};\n\nlet verifyAutomaticMode = handleSwitch(payload, context, machineProperties, 'StatusSNS', 'Switch1', 'automaticMode', 'noAutomaticMode');\nlet verifyPression = handleSwitch(payload, context, machineProperties, 'StatusSNS', 'Switch2', 'startPression', 'finishedPression');\nlet verifyAscent = handleSwitch(payload, context, machineProperties, 'StatusSNS', 'Switch3', 'startingAscent', 'finishedAscent');\nlet verifyDescent = handleSwitch(payload, context, machineProperties, 'StatusSNS', 'Switch4', 'startingDescent', 'finishedDescent');\n\ndobraNewtonProperties[serialNumber].automaticMode = verifyAutomaticMode.startState;\ndobraNewtonProperties[serialNumber].noAutomaticMode = verifyAutomaticMode.finishState;\ndobraNewtonProperties[serialNumber].startPression = verifyPression.startState;\ndobraNewtonProperties[serialNumber].finishedPression = verifyPression.finishState;\ndobraNewtonProperties[serialNumber].startingAscent = verifyAscent.startState;\ndobraNewtonProperties[serialNumber].finishedAscent = verifyAscent.finishState;\ndobraNewtonProperties[serialNumber].startingDescent = verifyDescent.startState;\ndobraNewtonProperties[serialNumber].finishedDescent = verifyDescent.finishState;\nflow.set('dobraNewtonProperties', dobraNewtonProperties);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1300,
        "y": 2380,
        "wires": [
            [
                "5334a7f1fa99fc9d"
            ]
        ],
        "icon": "font-awesome/fa-clone"
    },
    {
        "id": "5334a7f1fa99fc9d",
        "type": "function",
        "z": "770249581d809dbd",
        "name": "Machine condition",
        "func": "let dobraNewtonProperties = flow.get('dobraNewtonProperties') || {};\nlet serialNumber = msg.payload.serialNumber;\nlet currentTimestamp = new Date();\n\nif (dobraNewtonProperties[serialNumber].automaticMode && !dobraNewtonProperties[serialNumber].startPression &&\ndobraNewtonProperties[serialNumber].startingAscent && dobraNewtonProperties[serialNumber].startingDescent && \n!dobraNewtonProperties[serialNumber].startFold) {\n    \n    dobraNewtonProperties[serialNumber].startFold = true;\n    dobraNewtonProperties[serialNumber].dateStartProduction = currentTimestamp;\n}\nelse if (dobraNewtonProperties[serialNumber].automaticMode && dobraNewtonProperties[serialNumber].finishedDescent && \ndobraNewtonProperties[serialNumber].finishedAscent && dobraNewtonProperties[serialNumber].startFold) {\n\n    dobraNewtonProperties[serialNumber].startFold = false;\n    dobraNewtonProperties[serialNumber].fold += 1;\n    dobraNewtonProperties[serialNumber].dateLastProduction = currentTimestamp;\n    dobraNewtonProperties[serialNumber].unit = \"Dobras\";\n}\nflow.set('dobraNewtonProperties', dobraNewtonProperties);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1510,
        "y": 2380,
        "wires": [
            [
                "f1c0935d9ea3ad17",
                "084d1c1990cd659c"
            ]
        ],
        "icon": "font-awesome/fa-bars"
    },
    {
        "id": "f1c0935d9ea3ad17",
        "type": "function",
        "z": "770249581d809dbd",
        "name": "Update status machine",
        "func": "let dobraNewtonProperties = flow.get('dobraNewtonProperties') || {};\nlet currentTimestamp = new Date();\nlet messages = [];\n\nif (dobraNewtonProperties) {\n    Object.keys(dobraNewtonProperties).forEach(key => {\n        if (dobraNewtonProperties[key].hasOwnProperty('dateStartProduction') && dobraNewtonProperties[key].hasOwnProperty('dateLastProduction')) {\n            let dateStartProduction = dobraNewtonProperties[key]['dateStartProduction'];\n            let dateLastProduction = dobraNewtonProperties[key]['dateLastProduction'];\n            let oldState = dobraNewtonProperties[key]['status'];\n\n            let timeStartProduction = dateStartProduction ? (currentTimestamp.getTime() - dateStartProduction.getTime()) / 1000 : null;\n            let timeLastProduction = dateLastProduction ? (currentTimestamp.getTime() - dateLastProduction.getTime()) / 1000 : null;\n\n            const isWorking = (dateStartProduction !== null && timeStartProduction <= 299) || \n            (dateLastProduction !== null && timeLastProduction <= 299);\n\n            const isStopped = (timeStartProduction >= 300 && timeLastProduction >= 300 && timeLastProduction <= 1799) ||\n            (timeStartProduction >= 300 && timeStartProduction <= 1799 && timeLastProduction === null);\n\n            const isTurnedOff = (timeStartProduction >= 1800 && timeLastProduction === null) ||\n            (timeLastProduction >= 1800 && timeLastProduction >= 1800) || timeStartProduction === null;\n\n            const newState = isWorking ? \"TRABALHANDO\" : isStopped ? \"PARADO\" : isTurnedOff ? \"DESLIGADO\" : null;\n\n            if (newState !== null && oldState !== newState) {\n                dobraNewtonProperties[key]['status'] = newState;\n\n                messages.push({\n                    serialNumber: key,\n                    currentStatus: newState\n                });\n            }\n       \n        }\n    });\nflow.set('dobraNewtonProperties', dobraNewtonProperties);\n\nmessages.forEach(msg =>{\n    node.send({ payload: msg});\n\n    return msg;\n});\n}\nnode.warn(dobraNewtonProperties);",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1780,
        "y": 2400,
        "wires": [
            [
                "fb13f3316a082248"
            ]
        ],
        "icon": "font-awesome/fa-exchange"
    },
    {
        "id": "38a608471f1e0efb",
        "type": "function",
        "z": "770249581d809dbd",
        "name": "Get count (Dobras)",
        "func": "let dobraNewtonProperties = flow.get('dobraNewtonProperties') || {};\nlet serialNumber = msg.payload.serialNumber;\n\nif (dobraNewtonProperties) {\n    if (dobraNewtonProperties[serialNumber] && dobraNewtonProperties[serialNumber].unit !== null) {\n        let unit = dobraNewtonProperties[serialNumber].unit;\n        \n        msg.payload = {\n            timestamp: new Date().getTime(),\n            deviceSerialNumber: serialNumber,\n            unit: unit,\n            count: 1\n        }\n        dobraNewtonProperties[serialNumber].unit = null;\n        flow.set('dobraNewtonProperties', dobraNewtonProperties);\n        return msg\n    }\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2050,
        "y": 2360,
        "wires": [
            []
        ],
        "icon": "font-awesome/fa-plus"
    },
    {
        "id": "fb13f3316a082248",
        "type": "function",
        "z": "770249581d809dbd",
        "name": "Get changed status (Dobras)",
        "func": "let {serialNumber, currentStatus} = msg.payload;\nlet timestamp = new Date();\n\nif (serialNumber && currentStatus !== null) {\n    msg.payload ={\n        timestamp: timestamp,\n        deviceSerialNumber: serialNumber,\n        status: currentStatus\n    }\n    return msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2080,
        "y": 2400,
        "wires": [
            []
        ],
        "icon": "node-red/status.svg"
    },
    {
        "id": "b7abc078581f73cb",
        "type": "switch",
        "z": "770249581d809dbd",
        "name": "Machines",
        "property": "payload.serialNumber",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "DF1209",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "DF3590",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 860,
        "y": 2960,
        "wires": [
            [
                "4190987baff786b9"
            ],
            [
                "4190987baff786b9"
            ]
        ],
        "icon": "font-awesome/fa-desktop"
    },
    {
        "id": "8c22ce1bf46aa2e0",
        "type": "switch",
        "z": "770249581d809dbd",
        "name": "Switches",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "hask",
                "v": "Switch1",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "Switch2",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "Switch3",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "Switch4",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "StatusSNS",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 5,
        "x": 520,
        "y": 2960,
        "wires": [
            [
                "f05740f1a19261f6"
            ],
            [
                "f05740f1a19261f6"
            ],
            [
                "f05740f1a19261f6"
            ],
            [
                "f05740f1a19261f6"
            ],
            [
                "f05740f1a19261f6"
            ]
        ]
    },
    {
        "id": "a475f09a69a36a76",
        "type": "inject",
        "z": "770249581d809dbd",
        "name": "SWITCH1 ON",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF1209",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch1\": {\"Action\": \"ON\"} }",
        "payloadType": "json",
        "x": 210,
        "y": 2740,
        "wires": [
            [
                "8c22ce1bf46aa2e0"
            ]
        ]
    },
    {
        "id": "eb5f42776354b8d0",
        "type": "inject",
        "z": "770249581d809dbd",
        "name": "SWITCH1 OFF",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF1209",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch1\": {\"Action\": \"OFF\"} }",
        "payloadType": "json",
        "x": 220,
        "y": 2780,
        "wires": [
            [
                "8c22ce1bf46aa2e0"
            ]
        ]
    },
    {
        "id": "9e4013583bb8a65e",
        "type": "inject",
        "z": "770249581d809dbd",
        "name": "SWITCH2 ON",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF1209",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch2\": {\"Action\": \"ON\"} }",
        "payloadType": "json",
        "x": 210,
        "y": 2960,
        "wires": [
            [
                "8c22ce1bf46aa2e0"
            ]
        ]
    },
    {
        "id": "7b452d78ce76c1d6",
        "type": "inject",
        "z": "770249581d809dbd",
        "name": "SWITCH2 OFF",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF1209",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch2\": {\"Action\": \"OFF\"} }",
        "payloadType": "json",
        "x": 220,
        "y": 3000,
        "wires": [
            [
                "8c22ce1bf46aa2e0"
            ]
        ]
    },
    {
        "id": "425ce64f4d2f05cd",
        "type": "inject",
        "z": "770249581d809dbd",
        "name": "SWITCH3 ON",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF1209",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch3\": {\"Action\": \"ON\"} }",
        "payloadType": "json",
        "x": 210,
        "y": 3060,
        "wires": [
            [
                "8c22ce1bf46aa2e0"
            ]
        ]
    },
    {
        "id": "e342589e326dd6fc",
        "type": "inject",
        "z": "770249581d809dbd",
        "name": "SWITCH3 OFF",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF1209",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch3\": {\"Action\": \"OFF\"} }",
        "payloadType": "json",
        "x": 220,
        "y": 3100,
        "wires": [
            [
                "8c22ce1bf46aa2e0"
            ]
        ]
    },
    {
        "id": "30e0a0414218c2c1",
        "type": "inject",
        "z": "770249581d809dbd",
        "name": "SWITCH4 ON",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF1209",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch4\": {\"Action\": \"ON\"} }",
        "payloadType": "json",
        "x": 210,
        "y": 3160,
        "wires": [
            [
                "8c22ce1bf46aa2e0"
            ]
        ]
    },
    {
        "id": "0e2cd5470817139e",
        "type": "inject",
        "z": "770249581d809dbd",
        "name": "SWITCH4 OFF",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF1209",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch4\": {\"Action\": \"OFF\"} }",
        "payloadType": "json",
        "x": 220,
        "y": 3200,
        "wires": [
            [
                "8c22ce1bf46aa2e0"
            ]
        ]
    },
    {
        "id": "a978bb0defbf5d6a",
        "type": "inject",
        "z": "770249581d809dbd",
        "name": "STATUS8",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF3590",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"StatusSNS\": {  \"Switch1\": \"ON\" } }",
        "payloadType": "json",
        "x": 200,
        "y": 2820,
        "wires": [
            [
                "8c22ce1bf46aa2e0"
            ]
        ]
    },
    {
        "id": "c4d7f1bc5aab1bb8",
        "type": "inject",
        "z": "770249581d809dbd",
        "name": "STATUS8",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF1209",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"StatusSNS\": {  \"Switch1\": \"OFF\" } }",
        "payloadType": "json",
        "x": 200,
        "y": 2860,
        "wires": [
            [
                "8c22ce1bf46aa2e0"
            ]
        ]
    },
    {
        "id": "f05740f1a19261f6",
        "type": "change",
        "z": "770249581d809dbd",
        "name": "delete time",
        "rules": [
            {
                "t": "delete",
                "p": "payload.timestamp",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.StatusSNS.Time",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.StatusSNS.Switch2",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.StatusSNS.Switch3",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.StatusSNS.Switch4",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 690,
        "y": 2960,
        "wires": [
            [
                "b7abc078581f73cb"
            ]
        ]
    },
    {
        "id": "4190987baff786b9",
        "type": "function",
        "z": "770249581d809dbd",
        "name": "Dobra object main",
        "func": "let dobraNewton = flow.get('dobraNewton') || {};\nlet serialNumber = msg.payload.serialNumber;\nlet getSwitch = Object.keys(msg.payload).find(key => key.startsWith('Switch')) || null;\nlet getStatusSNS = Object.keys(msg.payload).find(key => key.startsWith('StatusSNS')) || null;\n\nif (getSwitch !== null || getStatusSNS !== null) {\n    if (!dobraNewton[serialNumber]) {\n        dobraNewton[serialNumber] = {\n            \"automaticMode\": false,\n            \"noAutomaticMode\": false,\n            \"startPression\": false,\n            \"finishedPression\": false,\n            \"startingAscent\": false,\n            \"finishedAscent\": false,\n            \"startingDescent\": false,\n            \"finishedDescent\": false,\n            \"startFold\": false,\n            \"fold\": 0,\n            \"dateStartProduction\": null,\n            \"dateLastProduction\": null,\n            \"unit\": null,\n            \"status\": null\n        }\n    }\n}\nflow.set('dobraNewton', dobraNewton);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 2960,
        "wires": [
            [
                "1e2ab62bcdf32db1"
            ]
        ],
        "icon": "font-awesome/fa-save"
    },
    {
        "id": "1e2ab62bcdf32db1",
        "type": "function",
        "z": "770249581d809dbd",
        "name": "Handle switches",
        "func": "let payload = msg.payload;\nlet serialNumber = payload.serialNumber;\nlet dobraNewton = flow.get('dobraNewton') || {};\nlet getSwitch = Object.keys(payload).find(key => key.startsWith('Switch'));\nlet getStatusSNS = payload.StatusSNS || {};\nlet actionStatusSNS = getStatusSNS.Switch1 || null;\nlet actionValue = getSwitch ? payload[getSwitch].Action : null;\n\nfunction updateDobraNewtonProperty(property, onValue, offValue) {\n    if (actionValue === \"ON\" || actionStatusSNS === \"ON\") {\n        dobraNewton[serialNumber][property] = onValue;\n    } else if (actionValue === \"OFF\" || actionStatusSNS === \"OFF\") {\n        dobraNewton[serialNumber][property] = offValue;\n    }\n}\n\nif (getSwitch === \"Switch1\" || Object.keys(getStatusSNS).includes(\"Switch1\")) {\n    updateDobraNewtonProperty('automaticMode', true, false);\n} else if (getSwitch === \"Switch2\") {\n    updateDobraNewtonProperty('startPression', true, false);\n    updateDobraNewtonProperty('finishedPression', false, true);\n} else if (getSwitch === \"Switch3\") {\n    updateDobraNewtonProperty('startingAscent', true, false);\n    updateDobraNewtonProperty('finishedAscent', false, true);\n} else if (getSwitch === \"Switch4\") {\n    updateDobraNewtonProperty('startingDescent', true, false);\n    updateDobraNewtonProperty('finishedDescent', false, true);\n}\nflow.set('dobraNewton', dobraNewton);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1280,
        "y": 2960,
        "wires": [
            [
                "1e0a7f250e23fb27"
            ]
        ],
        "icon": "font-awesome/fa-clone"
    },
    {
        "id": "1e0a7f250e23fb27",
        "type": "function",
        "z": "770249581d809dbd",
        "name": "Machine conditions",
        "func": "let dobraNewton = flow.get('dobraNewton');\nlet serialNumber = msg.payload.serialNumber;\nlet currentTimestamp = new Date();\n\nif (dobraNewton[serialNumber].automaticMode && dobraNewton[serialNumber].startPression && dobraNewton[serialNumber].startingAscent &&\ndobraNewton[serialNumber].startingDescent && !dobraNewton[serialNumber].startFold) {\n    dobraNewton[serialNumber].startFold = true;\n    dobraNewton[serialNumber].dateStartProduction = currentTimestamp;\n}\nelse if (dobraNewton[serialNumber].automaticMode && dobraNewton[serialNumber].finishedDescent && \ndobraNewton[serialNumber].finishedAscent && dobraNewton[serialNumber].startFold) {\n    \n    dobraNewton[serialNumber].startFold = false\n    dobraNewton[serialNumber].dateLastProduction = currentTimestamp;\n    dobraNewton[serialNumber].fold += 1;\n    dobraNewton[serialNumber].unit = \"Dobras\";\n}\nflow.set('dobraNewton', dobraNewton);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1510,
        "y": 2960,
        "wires": [
            [
                "eb98161bd00885b1",
                "9717abda31ef0250"
            ]
        ],
        "icon": "font-awesome/fa-bars"
    },
    {
        "id": "eb98161bd00885b1",
        "type": "function",
        "z": "770249581d809dbd",
        "name": "Update status machine",
        "func": "let dobraNewton = flow.get('dobraNewton');\nlet currentTimestamp = new Date();\nlet messages = [];\n\nif (dobraNewton) {\n    Object.keys(dobraNewton).forEach(key => {\n        if (dobraNewton[key].hasOwnProperty('dateStartProduction') && dobraNewton[key].hasOwnProperty('dateLastProduction')) {\n            let dateStartProduction = dobraNewton[key]['dateStartProduction'];\n            let dateLastProduction = dobraNewton[key]['dateLastProduction'];\n            let oldState = dobraNewton[key]['status'];\n\n            let differenceLastAction = dateStartProduction ? (currentTimestamp.getTime() - dateStartProduction.getTime()) / 1000 : null;\n            let differenceLastProduction = dateLastProduction ? (currentTimestamp.getTime() - dateLastProduction.getTime()) / 1000 : null;\n\n            const isWorking = (dateStartProduction !== null && differenceLastAction <= 299) ||\n            (dateLastProduction !== null && dateLastProduction <= 299);\n\n            const isStopped = (differenceLastAction >= 300 && differenceLastProduction >= 300 && differenceLastProduction <= 1799) ||\n            (differenceLastAction >= 300 && differenceLastAction <= 1799 && dateLastProduction === null);\n\n            const isTurnedOff = (differenceLastAction >= 1800 && dateLastProduction === null) ||\n            (differenceLastProduction >= 1800 && differenceLastAction >= 1800) || dateStartProduction === null;\n\n            const newState = isWorking ? \"TRABALHANDO\" : isStopped ? \"PARADO\" : isTurnedOff ? \"DESLIGADO\" : null;\n\n            if (newState !== null && oldState !== newState) {\n                dobraNewton[key]['status'] = newState;\n\n                messages.push({\n                    serialNumber: key,\n                    currentStatus: newState\n                });\n            }\n        }\n    });\nflow.set('dobraNewton', dobraNewton);\n\nmessages.forEach(msg => {\n    node.send({payload: msg});\n\n    return msg;\n});\n}\nnode.warn(dobraNewton);",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1740,
        "y": 2980,
        "wires": [
            [
                "99f01a0f6a0a2e9d"
            ]
        ],
        "icon": "font-awesome/fa-exchange"
    },
    {
        "id": "95390280b21b37bd",
        "type": "function",
        "z": "770249581d809dbd",
        "name": "Get count (Dobras)",
        "func": "let dobraNewton = flow.get('dobraNewton');\nlet serialNumber = msg.payload.serialNumber;\n\nif (dobraNewton) {\n    if (dobraNewton[serialNumber] && dobraNewton[serialNumber].unit !== null) {\n        let unit = dobraNewton[serialNumber].unit;\n\n        msg.payload = {\n            timestamp: new Date().getTime(),\n            deviceSerialNumber: serialNumber,\n            unit: unit,\n            count: 1\n        }\n        dobraNewton[serialNumber].unit = null;\n        flow.set('dobraNewton', dobraNewton);\n        return msg;\n    }\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1990,
        "y": 2940,
        "wires": [
            []
        ],
        "icon": "font-awesome/fa-plus"
    },
    {
        "id": "99f01a0f6a0a2e9d",
        "type": "function",
        "z": "770249581d809dbd",
        "name": "Get changed status (Dobras)",
        "func": "let {serialNumber, currentStatus} = msg.payload;\nlet timestamp = new Date();\n\nif (serialNumber && currentStatus !== null) {\n    msg.payload ={\n        timestamp: timestamp,\n        deviceSerialNumber: serialNumber,\n        status: currentStatus\n    }\n    return msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2020,
        "y": 2980,
        "wires": [
            []
        ],
        "icon": "node-red/status.svg"
    },
    {
        "id": "b648521da395c889",
        "type": "switch",
        "z": "62737f754ac7d56d",
        "name": "OPTION SW",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "hask",
                "v": "Switch1",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "Switch2",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "StatusSNS",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 550,
        "y": 180,
        "wires": [
            [
                "2dc1aa7090f3b6a0"
            ],
            [
                "2dc1aa7090f3b6a0"
            ],
            [
                "2dc1aa7090f3b6a0"
            ]
        ]
    },
    {
        "id": "457d4f1db305366a",
        "type": "rbe",
        "z": "62737f754ac7d56d",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 890,
        "y": 180,
        "wires": [
            [
                "630c0064f58021eb"
            ]
        ]
    },
    {
        "id": "2dc1aa7090f3b6a0",
        "type": "change",
        "z": "62737f754ac7d56d",
        "name": "delete time",
        "rules": [
            {
                "t": "delete",
                "p": "payload.timestamp",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.StatusSNS.Time",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.StatusSNS.Switch1",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.StatusSNS.Switch3",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.StatusSNS.Switch4",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 730,
        "y": 180,
        "wires": [
            [
                "457d4f1db305366a"
            ]
        ],
        "icon": "font-awesome/fa-times-circle"
    },
    {
        "id": "630c0064f58021eb",
        "type": "function",
        "z": "62737f754ac7d56d",
        "name": "State Switches",
        "func": "function handleSwitch(payload, context, switchName, statusSNSName, startName, finishName, verifyName) {\n  let switchKey = Object.keys(payload).find(key => key.startsWith(switchName)) // extrai o switch que chegou no payload\n  let switchState = context.get(switchName) || null;\n  let actionValue = payload[switchKey] ? payload[switchKey].Action : null; // extrai o estado do switch que chegou\n  let statusSNS = payload[statusSNSName] && payload[statusSNSName][switchName];\n  let startState = context.get(startName) || false;\n  let finishState = context.get(finishName) || false;\n  let verifyState = context.get(verifyName) || false;\n\n  switchState = actionValue || statusSNS || switchState; // adquiri o estado do switch que chegou\n\n  if (switchState == \"ON\" && finishState == false) { // Condi√ß√£o que caracteriza o in√≠cio da produ√ß√£o da pe√ßa\n    startState = true;\n  }\n  else if (switchState == \"OFF\" && startState == true) { // condi√ß√£o que caracteriza o final da produ√ß√£o da pe√ßa\n    finishState = true;\n  }\n  verifyState = startState == true && finishState == true ? true : false;\n\n  if (verifyState == true) { // reseta o in√≠cio o fim da produ√ß√£o quando a pe√ßa √© produzida\n    startState = false;\n    finishState = false;\n\n  }\n  context.set(switchName, switchState);\n  context.set(startName, startState);\n  context.set(finishName, finishState);\n  context.set(verifyName, verifyState);\n\n  return {\n    switchState: switchState,\n    startState: startState,\n    finishState: finishState,\n    verifyState: verifyState\n  };\n}\n\nlet payload = msg.payload;\nlet verifyCable = handleSwitch(payload, context, 'Switch1', 'StatusSNS', 'startProduction', 'finisehdProduction', 'verifyCable');\nlet verifyDoor = handleSwitch(payload, context, 'Switch2', 'StatusSNS', 'closedDoor', 'openDoor', 'verifyDoor');\n\nmsg.switches = {\n  switch1: verifyCable.switchState,\n  switch2: verifyDoor.switchState,\n  startProduction: verifyCable.startState,\n  finishedProduction: verifyCable.finishState,\n  verifyCable: verifyCable.verifyState,\n  machineDoorState: verifyDoor.startState,\n}\nverifyCable.verifyState = false; // reseta a condi√ß√£o de pe√ßa produzindo para false quando a pe√ßa √© finalizada\ncontext.set('verifyCable', verifyCable.verifyState);\n\nverifyDoor.verifyState = false;\ncontext.set('verifyDoor', verifyDoor.verifyState);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1040,
        "y": 180,
        "wires": [
            [
                "27cff172aa325b7c"
            ]
        ],
        "icon": "node-red/swap.svg"
    },
    {
        "id": "27cff172aa325b7c",
        "type": "function",
        "z": "62737f754ac7d56d",
        "name": "Conditions Machine",
        "func": "let { startProduction, verifyCable, machineDoorState} = msg.switches;\nlet finishedCable = machineDoorState && verifyCable ? true : false;\n\ncontext.set('finishedCable', finishedCable);\n\nmsg.conditions = {\n    startProduction: startProduction,\n    finishedCable: finishedCable,\n    serialNumber: msg.payload.serialNumber\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1250,
        "y": 180,
        "wires": [
            [
                "52550fa139fcfbc9"
            ]
        ],
        "icon": "font-awesome/fa-bars"
    },
    {
        "id": "52550fa139fcfbc9",
        "type": "function",
        "z": "62737f754ac7d56d",
        "name": "Production Machine",
        "func": "let { startProduction, finishedCable, serialNumber } = msg.conditions;\nlet [machine, startOfCable, dateLastProduction] = ['machine', 'startOfCable', 'dateLastProduction'].map(key => context.get(key) || null);\nlet cableCount = context.get('cableCount') || 0;\nlet resetShift = context.get('resetShift') || false;\nlet currentTimestamp = new Date();\n\nconst actions = {\n    resetShift: () => {cableCount = 0; resetShift = false; },\n    payloadReset: () => { resetShift = true;},\n    startCable: () => {startOfCable = currentTimestamp; },\n    finishedCable: () => {cableCount++; dateLastProduction = currentTimestamp; },\n    machineNull: () => {machine = serialNumber; }\n};\nconst conditions = {\n    resetShift: resetShift === true,\n    payloadReset: msg.payload === 'reset',\n    startCable: startProduction === true,\n    finishedCable: finishedCable === true,\n    machineNull: serialNumber && machine == null,\n}\n\nObject.entries(conditions).forEach(([condition, isTrue]) => {\n    if (isTrue && actions[condition]) actions[condition]();\n});\ncontext.set('cableCount', cableCount);\ncontext.set('resetShift', resetShift);\ncontext.set('startOfCable', startOfCable);\ncontext.set('dateLastProduction', dateLastProduction);\ncontext.set('machine', machine);\n\nmsg.data = {\n    finishedCable: finishedCable,\n    cableCount: cableCount,\n    dateStartProduction: startOfCable,\n    dateLastProduction: dateLastProduction,\n    reset: resetShift,\n    machine: machine,\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1480,
        "y": 180,
        "wires": [
            [
                "205039a00dcdeeec",
                "7b2eb67854f245f6"
            ]
        ],
        "icon": "font-awesome/fa-book"
    },
    {
        "id": "99842a86b1130f5b",
        "type": "switch",
        "z": "62737f754ac7d56d",
        "name": "Machine",
        "property": "payload.serialNumber",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "DF0FCE",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "DF3680",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 380,
        "y": 220,
        "wires": [
            [
                "b648521da395c889"
            ],
            [
                "405d958dc3c80c40"
            ]
        ],
        "icon": "font-awesome/fa-desktop"
    },
    {
        "id": "405d958dc3c80c40",
        "type": "switch",
        "z": "62737f754ac7d56d",
        "name": "OPTION SW",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "hask",
                "v": "Switch1",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 550,
        "y": 240,
        "wires": [
            [
                "2f291765e43d474a"
            ]
        ]
    },
    {
        "id": "2f291765e43d474a",
        "type": "function",
        "z": "62737f754ac7d56d",
        "name": "State Switch",
        "func": "function handleSwitch(payload, context, switchName, startName, finishName, verifyName) {\n  let switchState = context.get(switchName) || null;\n  let startState = context.get(startName) || false;\n  let finishState = context.get(finishName) || false;\n  let verifyState = context.get(verifyName) || false;\n\n  if (payload[switchName] && payload[switchName].Action == \"OFF\") {\n    switchState = \"OFF\";\n    startState = true;\n  } else if (payload[switchName] && payload[switchName].Action == \"ON\" && switchState == \"OFF\" && startState == true) {\n    switchState = \"ON\";\n    finishState = true;\n  }\n  if (startState == true && finishState == true) {\n    verifyState = true;\n    startState = false;\n    finishState = false;\n  }\n\n  context.set(switchName, switchState);\n  context.set(startName, startState);\n  context.set(finishName, finishState);\n  context.set(verifyName, verifyState);\n\n  return {\n    switchState: switchState,\n    startState: startState,\n    finishState: finishState,\n    verifyState: verifyState\n  };\n}\n\nlet electricalTest = handleSwitch(msg.payload, context, 'Switch1', 'startElectricalTest', 'finisehdElectricalTest', 'verifyElectricalTest'); // verifica√ß√£o andamento do teste el√©trico\n\nmsg.switches = {\n  switch1: electricalTest.switchState,\n  startElectricalTest: electricalTest.startState,\n  finisehdElectricalTest: electricalTest.finishState,\n  verifyElectricalTest: electricalTest.verifyState,\n}\nelectricalTest.verifyState = false;\ncontext.set('verifyElectricalTest', electricalTest.verifyState);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 240,
        "wires": [
            [
                "dfab6ceb5c0c78e2"
            ]
        ],
        "icon": "node-red/swap.svg"
    },
    {
        "id": "dfab6ceb5c0c78e2",
        "type": "function",
        "z": "62737f754ac7d56d",
        "name": "Conditions Machine",
        "func": "let { startElectricalTest, verifyElectricalTest } = msg.switches;\n\nmsg.conditions = {\n    startTest: startElectricalTest,\n    finishedEletricalTest: verifyElectricalTest,\n    serialNumber: msg.payload.serialNumber,\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1150,
        "y": 240,
        "wires": [
            [
                "8c255dc9a2e0972a"
            ]
        ],
        "icon": "font-awesome/fa-bars"
    },
    {
        "id": "8c255dc9a2e0972a",
        "type": "function",
        "z": "62737f754ac7d56d",
        "name": "Production Machine",
        "func": "let {startTest, finishedEletricalTest, serialNumber } = msg.conditions;\nlet [machine, startWorking, timestampOfLastTest] = ['machine', 'startWorking', 'timestampOfLastTest'].map(key => context.get(key) || null);\nlet [testCount, testDuration] = ['testCount', 'testDuration'].map(key => context.get(key) || 0);\nlet resetShift = context.get('resetShift') || false;\nlet currentTimestamp = new Date();\n\nconst actions = {\n    payloadReset: () => {resetShift = true; },\n    resetShift: () => {testCount = 0; resetShift = false; },\n    testStarting: () => { startWorking = currentTimestamp;},\n    finishedTest: () => { testDuration = (currentTimestamp.getTime() - startWorking.getTime()) /1000; startWorking = null;testCount++; timestampOfLastTest = currentTimestamp;},\n    machineNull: () => { machine = serialNumber; },\n};\nconst conditions = {\n    payloadReset: msg.payload === 'reset',\n    resetShift: resetShift === true,\n    testStarting: startTest === true,\n    finishedTest: finishedEletricalTest === true,\n    machineNull: serialNumber && machine == null\n}\n\nObject.entries(conditions).forEach(([condition, isTrue]) => {\n        if (isTrue && actions[condition]) actions[condition]();\n});\ncontext.set('resetShift', resetShift);\ncontext.set('testCount', testCount);\ncontext.set('startWorking', startWorking);\ncontext.set('testDuration', testDuration);\ncontext.set('timestampOfLastTest', timestampOfLastTest);\ncontext.set('machine', machine);\n\nmsg.data = {\n    finishedEletricalTest: finishedEletricalTest,\n    testCount: testCount,\n    lastTestDuration: testDuration,\n    dateStartingTest: startWorking,\n    dateLastProduction: timestampOfLastTest,\n    machine: machine\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1480,
        "y": 240,
        "wires": [
            [
                "c4c10c5eba4363c0",
                "f115d661f707cae2"
            ]
        ],
        "icon": "font-awesome/fa-book"
    },
    {
        "id": "742b949cd5b86895",
        "type": "catch",
        "z": "62737f754ac7d56d",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 880,
        "y": 800,
        "wires": [
            [
                "04ed45efddc086b1"
            ]
        ]
    },
    {
        "id": "04ed45efddc086b1",
        "type": "debug",
        "z": "62737f754ac7d56d",
        "name": "debug 195",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1090,
        "y": 800,
        "wires": []
    },
    {
        "id": "8fa8599f181ffe11",
        "type": "inject",
        "z": "62737f754ac7d56d",
        "name": "SWITCH1 ON",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF3680",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch1\": {\"Action\": \"ON\"} }",
        "payloadType": "json",
        "x": 130,
        "y": 140,
        "wires": [
            [
                "99842a86b1130f5b"
            ]
        ]
    },
    {
        "id": "0efa6ae8351a6a22",
        "type": "inject",
        "z": "62737f754ac7d56d",
        "name": "SWITCH1 OFF",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF3680",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch1\": {\"Action\": \"OFF\"} }",
        "payloadType": "json",
        "x": 140,
        "y": 180,
        "wires": [
            [
                "99842a86b1130f5b"
            ]
        ]
    },
    {
        "id": "205039a00dcdeeec",
        "type": "function",
        "z": "62737f754ac7d56d",
        "name": "verifyStatus",
        "func": "let { dateStartProduction, dateLastProduction, machine } = msg.data;\nlet [differenceTimedateStartProduction, differenceTimelastProduction] = ['differenceTimedateStartProduction', 'differenceTimelasProduction'].map(key => context.get(key) || 0);\nlet currentTimestamp = new Date();\nlet currentStatus = context.get('currentStatus') || null;\n\ndifferenceTimedateStartProduction = dateStartProduction !== null ? (currentTimestamp.getTime() - dateStartProduction.getTime()) / 1000 : null;\ndifferenceTimelastProduction = dateLastProduction !== null ? (currentTimestamp.getTime() - dateLastProduction.getTime()) / 1000 : null;\n\ncontext.set('differenceTimedateStartProduction', differenceTimedateStartProduction);\ncontext.set('differenceTimelastProduction', differenceTimelastProduction);\n\nif (dateStartProduction !== null) {\n\n    //Mapear status\n    const machineWorking = differenceTimedateStartProduction <= 299 || (differenceTimelastProduction !== null && differenceTimelastProduction <= 299);\n\n    const machineIdle = (differenceTimedateStartProduction >= 300 && differenceTimelastProduction >= 300 && differenceTimelastProduction <= 1799) ||\n        (differenceTimedateStartProduction >= 300 && differenceTimedateStartProduction <= 1799 && dateLastProduction === null);\n\n    const machineOff = ((differenceTimedateStartProduction >= 300 && differenceTimelastProduction >= 1800) || (differenceTimedateStartProduction >= 1800 && dateLastProduction === null));\n\n    const newStatus = machineWorking ? 'TRABALHANDO' : machineIdle ? 'PARADO' : machineOff ? 'DESLIGADO' : null;\n    if (newStatus) currentStatus = newStatus;\n}\n\nif (dateStartProduction == null) currentStatus = \"DESLIGADO\";\n\ncontext.set('currentStatus', currentStatus);\n\nmsg.status = {\n    timeCurrentProduction: differenceTimedateStartProduction,\n    timeLastProduction: differenceTimelastProduction,\n    machine: machine,\n    currentStatus: currentStatus\n}\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1730,
        "y": 180,
        "wires": [
            [
                "761a105a73b2bbc2"
            ]
        ],
        "icon": "node-red/status.svg"
    },
    {
        "id": "7b2eb67854f245f6",
        "type": "function",
        "z": "62737f754ac7d56d",
        "name": "CORTE DE CRIMPAGEM",
        "func": "let { finishedCable, cableCount, machine} = msg.data;\n\nmsg.payload = {\n    finishedCable: finishedCable,\n    cabos: cableCount,\n    deviceSerialNumber: machine\n}\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1770,
        "y": 140,
        "wires": [
            [
                "ade9581ddd2f8269"
            ]
        ],
        "icon": "font-awesome/fa-cogs"
    },
    {
        "id": "f115d661f707cae2",
        "type": "function",
        "z": "62737f754ac7d56d",
        "name": "verifyStatus",
        "func": "let {dateStartingTest, dateLastProduction, machine} = msg.data;\nlet currentTimestamp = new Date();\nlet currentStatus = context.get(\"currentStatus\") || null;\nlet timeCurrentProduction = dateStartingTest !== null ? (currentTimestamp.getTime() - dateStartingTest.getTime()) /1000 : null;\nlet timeLastProduction = dateLastProduction !== null ? (currentTimestamp.getTime() - dateLastProduction.getTime()) /1000 : null;\n\ncontext.set(\"timeCurrentProduction\", timeCurrentProduction);\ncontext.set(\"timeLastProduction\", timeLastProduction);\n\nif (dateStartingTest !== null && dateLastProduction == null) currentStatus = \"TRABALHANDO\";\n\nelse if (dateLastProduction !== null) {\n    //Mapeamento dos status\n    const machineWorking = (dateStartingTest !== null) || (timeLastProduction <= 299);\n    const machineIdle = (dateStartingTest == null && timeLastProduction >= 300 && timeLastProduction <= 1799);\n    const machineOff = (dateStartingTest == null && timeLastProduction >= 1800)\n\n    const newStatus = machineWorking ? \"TRABALHANDO\" : machineIdle ? \"PARADO\" : machineOff ? \"DESLIGADO\" : null;\n    if (newStatus) currentStatus = newStatus;\n}\nelse if (dateStartingTest == null && dateLastProduction == null) currentStatus = \"DESLIGADO\";\n\ncontext.set('currentStatus', currentStatus);\n\nmsg.status = {\n    timeCurrentProduction: timeCurrentProduction,\n    timeLastProduction: timeLastProduction,\n    machine: machine,\n    currentStatus: currentStatus\n}\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1730,
        "y": 280,
        "wires": [
            [
                "9a665e1353246655",
                "f8d9175a9936497d"
            ]
        ],
        "icon": "node-red/status.svg"
    },
    {
        "id": "c4c10c5eba4363c0",
        "type": "function",
        "z": "62737f754ac7d56d",
        "name": "TESTE EL√âTRICO",
        "func": "let { finishedEletricalTest, testCount, lastTestDuration, machine} = msg.data;\n\nmsg.payload = {\n    finishedEletricalTest,\n    testes: testCount,\n    lastTestDuration: lastTestDuration,\n    deviceSerialNumber: machine\n}\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1750,
        "y": 240,
        "wires": [
            [
                "e1f530ba68bafe3b"
            ]
        ],
        "icon": "font-awesome/fa-cogs"
    },
    {
        "id": "761a105a73b2bbc2",
        "type": "function",
        "z": "62737f754ac7d56d",
        "name": "FormatedMessage",
        "func": "let machine = msg.status.machine;\nlet timestamp = new Date().getTime();\nlet currentStatus = context.get('currentStatus') || null; \nlet oldStatus = msg.status.currentStatus;\n\nif(!currentStatus || currentStatus !== oldStatus) {\n    currentStatus = oldStatus;\n    context.set('currentStatus', currentStatus);\n\n    msg.payload = {\n            timestamp: timestamp,\n            deviceSerialNumber: machine,\n            status: currentStatus\n    }\n    return msg;\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2050,
        "y": 180,
        "wires": [
            []
        ],
        "icon": "font-awesome/fa-envelope"
    },
    {
        "id": "ade9581ddd2f8269",
        "type": "function",
        "z": "62737f754ac7d56d",
        "name": "Increment Cabos",
        "func": "let { finishedCable, deviceSerialNumber } = msg.payload;\nlet unit = context.get('unit') || null;\nlet count = context.get('count') || 0;\nlet currentTimestamp = new Date();\n\nif (finishedCable === true) {\n    unit = \"Cabos\";\n    count = 1;\n    context.set('unit', unit);\n    context.set('count', count);\n\n    msg.payload = {\n        timestamp: currentTimestamp.getTime(),\n        deviceSerialNumber: deviceSerialNumber,\n        unit: unit,\n        count: count\n    }\n    return msg;\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2050,
        "y": 140,
        "wires": [
            []
        ],
        "icon": "node-red/arrow-in.svg"
    },
    {
        "id": "9a665e1353246655",
        "type": "function",
        "z": "62737f754ac7d56d",
        "name": "FormatedMessage",
        "func": "let machine = msg.status.machine;\nlet timestamp = new Date().getTime();\nlet currentStatus = context.get('currentStatus') || null; \nlet oldStatus = msg.status.currentStatus;\n\nif(!currentStatus || currentStatus !== oldStatus) {\n    currentStatus = oldStatus;\n    context.set('currentStatus', currentStatus);\n\n    msg.payload = {\n            timestamp: timestamp,\n            deviceSerialNumber: machine,\n            status: currentStatus\n    }\n    return msg;\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2050,
        "y": 280,
        "wires": [
            []
        ],
        "icon": "font-awesome/fa-envelope"
    },
    {
        "id": "e1f530ba68bafe3b",
        "type": "function",
        "z": "62737f754ac7d56d",
        "name": "Increment Testes",
        "func": "let { finishedEletricalTest, deviceSerialNumber } = msg.payload;\nlet unit = context.get('unit') || null;\nlet count = context.get('count') || 0;\nlet currentTimestamp = new Date();\n\nif (finishedEletricalTest === true) {\n    unit = \"Testes\";\n    count = 1;\n    context.set('unit', unit);\n    context.set('count', count);\n\n    msg.payload = {\n        timestamp: currentTimestamp.getTime(),\n        deviceSerialNumber: deviceSerialNumber,\n        unit: unit,\n        count: count\n    }\n    return msg;\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2050,
        "y": 240,
        "wires": [
            [
                "94f643b40742f13d"
            ]
        ],
        "icon": "node-red/arrow-in.svg"
    },
    {
        "id": "f8d9175a9936497d",
        "type": "debug",
        "z": "62737f754ac7d56d",
        "name": "debug 235",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2090,
        "y": 380,
        "wires": []
    },
    {
        "id": "eee5d44c1ccc2a5f",
        "type": "inject",
        "z": "62737f754ac7d56d",
        "name": "TIMESTAMP (STATUS)",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "switches",
                "v": "{}",
                "vt": "json"
            },
            {
                "p": "conditions",
                "v": "{}",
                "vt": "json"
            },
            {
                "p": "data",
                "v": "{}",
                "vt": "json"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1220,
        "y": 80,
        "wires": [
            [
                "52550fa139fcfbc9"
            ]
        ],
        "icon": "font-awesome/fa-hourglass-1"
    },
    {
        "id": "0b39a3da6b8e85a7",
        "type": "inject",
        "z": "62737f754ac7d56d",
        "name": "TIMESTAMP RESET",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "switches",
                "v": "{}",
                "vt": "json"
            },
            {
                "p": "conditions",
                "v": "{}",
                "vt": "json"
            },
            {
                "p": "data",
                "v": "{}",
                "vt": "json"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "reset",
        "payloadType": "str",
        "x": 1220,
        "y": 140,
        "wires": [
            [
                "8c255dc9a2e0972a",
                "52550fa139fcfbc9"
            ]
        ],
        "icon": "font-awesome/fa-hourglass-1"
    },
    {
        "id": "dbd0aa9f6522071e",
        "type": "function",
        "z": "62737f754ac7d56d",
        "name": "State Switches",
        "func": "function handleSwitch(payload, context, switchName, statusSNSName, startName, finishName, verifyName) {\n   let switchKey = Object.keys(payload).find(key => key.startsWith(switchName)) // extrai o switch que chegou no payload\n   let switchState = context.get(switchName) || null;\n   let actionValue = payload[switchKey] ? payload[switchKey].Action : null; // extrai o estado do switch que chegou\n   let statusSNS = payload[statusSNSName] && payload[statusSNSName][switchName];\n   let startState = context.get(startName) || false;\n   let finishState = context.get(finishName) || false;\n   let verifyState = context.get(verifyName) || false;\n\n   switchState = actionValue || statusSNS || switchState; // adquiri o estado do switch que chegou\n\n   if (switchState == \"ON\" && finishState == false) { // Condi√ß√£o que caracteriza o in√≠cio da produ√ß√£o da pe√ßa\n      startState = true;\n   }\n   else if (switchState == \"OFF\" && startState == true) { // condi√ß√£o que caracteriza o final da produ√ß√£o da pe√ßa\n      finishState = true;\n   }\n   verifyState = startState == true && finishState == true ? true : false;\n\n   if (verifyState == true) { // reseta o in√≠cio o fim da produ√ß√£o quando a pe√ßa √© produzida\n      startState = false;\n      finishState = false;\n\n   }\n   context.set(switchName, switchState);\n   context.set(startName, startState);\n   context.set(finishName, finishState);\n   context.set(verifyName, verifyState);\n\n   return {\n      switchState: switchState,\n      startState: startState,\n      finishState: finishState,\n      verifyState: verifyState\n   };\n}\n\nlet payload = msg.payload;\nlet switch1 = handleSwitch(payload, context, 'Switch1', 'StatusSNS','startProduction', 'finisehdProduction','verifyCable');\nlet switch2 = handleSwitch(payload, context, 'Switch2', 'StatusSNS','closedDoor','openDoor','verifyDoor');\n\nmsg.switches = {\n   switch1: switch1.switchState,\n   switch2: switch2.switchState,\n   startProduction: switch1.startState,\n   finishedProduction: switch1.finishState,\n   verifyCable: switch1.verifyState,\n   machineDoorState: switch2.startState,\n}\nswitch1.verifyState = false; // reseta a condi√ß√£o de pe√ßa produzindo para false quando a pe√ßa √© finalizada\ncontext.set('verifyCable', switch1.verifyState);\n\nswitch2.verifyState = false;\ncontext.set('verifyDoor', switch2.verifyState);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1300,
        "y": 480,
        "wires": [
            [
                "1cbcfc566c54fe1d"
            ]
        ],
        "icon": "node-red/swap.svg"
    },
    {
        "id": "04fd73df76a9eb90",
        "type": "inject",
        "z": "62737f754ac7d56d",
        "name": "SWITCH1 ON",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF3680",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch1\": {\"Action\": \"ON\"} }",
        "payloadType": "json",
        "x": 1030,
        "y": 320,
        "wires": [
            [
                "dbd0aa9f6522071e"
            ]
        ]
    },
    {
        "id": "5365503ad59e7241",
        "type": "inject",
        "z": "62737f754ac7d56d",
        "name": "SWITCH1 OFF",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF3680",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch1\": {\"Action\": \"OFF\"} }",
        "payloadType": "json",
        "x": 1040,
        "y": 360,
        "wires": [
            [
                "dbd0aa9f6522071e"
            ]
        ]
    },
    {
        "id": "723f15bf3f90d996",
        "type": "inject",
        "z": "62737f754ac7d56d",
        "name": "SWITCH2 ON",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF3680",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch2\": {\"Action\": \"ON\"} }",
        "payloadType": "json",
        "x": 1030,
        "y": 420,
        "wires": [
            [
                "dbd0aa9f6522071e"
            ]
        ]
    },
    {
        "id": "bb4698c9435d12d7",
        "type": "inject",
        "z": "62737f754ac7d56d",
        "name": "SWITCH2 OFF",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF3680",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch2\": {\"Action\": \"OFF\"} }",
        "payloadType": "json",
        "x": 1040,
        "y": 460,
        "wires": [
            [
                "dbd0aa9f6522071e"
            ]
        ]
    },
    {
        "id": "ebc9117f5b3a65f3",
        "type": "inject",
        "z": "62737f754ac7d56d",
        "name": "STATUS8",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF1209",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"StatusSNS\": {  \"Switch3\": \"ON\" } }",
        "payloadType": "json",
        "x": 1020,
        "y": 520,
        "wires": [
            [
                "dbd0aa9f6522071e"
            ]
        ]
    },
    {
        "id": "dd1482308ca942da",
        "type": "inject",
        "z": "62737f754ac7d56d",
        "name": "STATUS8",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF1209",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"StatusSNS\": {  \"Switch3\": \"OFF\" } }",
        "payloadType": "json",
        "x": 1020,
        "y": 560,
        "wires": [
            [
                "dbd0aa9f6522071e"
            ]
        ]
    },
    {
        "id": "a21a2e8e0cb7150a",
        "type": "inject",
        "z": "62737f754ac7d56d",
        "name": "SWITCH3 ON",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF3680",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch3\": {\"Action\": \"ON\"} }",
        "payloadType": "json",
        "x": 1030,
        "y": 600,
        "wires": [
            [
                "dbd0aa9f6522071e"
            ]
        ]
    },
    {
        "id": "42ad7638d1550e05",
        "type": "inject",
        "z": "62737f754ac7d56d",
        "name": "SWITCH3 OFF",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF3680",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch3\": {\"Action\": \"OFF\"} }",
        "payloadType": "json",
        "x": 1040,
        "y": 640,
        "wires": [
            [
                "dbd0aa9f6522071e"
            ]
        ]
    },
    {
        "id": "1cbcfc566c54fe1d",
        "type": "function",
        "z": "62737f754ac7d56d",
        "name": "Conditions Machine",
        "func": "let serialNumber = msg.payload.serialNumber;\nlet startProduction = msg.switches.startProduction;\nlet machineDoorState = msg.switches.machineDoorState;\nlet verifyCable = msg.switches.verifyCable;\nlet finishedCable = context.get('finishedCable') || false;\n\nif (machineDoorState === true && verifyCable === true) { // indica que o cabo foi finalizado\n    finishedCable = true;\n}\n\nmsg.conditions = {\n    startProduction: startProduction,\n    finishedCable: finishedCable,\n    serialNumber: serialNumber\n}\n\nif (finishedCable == true) { // reseta o estado de cabo finalizado para false para n√£o duplicar o contador\n    finishedCable = false;\n}\ncontext.set('finishedCable', finishedCable);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1510,
        "y": 480,
        "wires": [
            [
                "e885d41058bf2ae3"
            ]
        ],
        "icon": "font-awesome/fa-bars"
    },
    {
        "id": "e885d41058bf2ae3",
        "type": "function",
        "z": "62737f754ac7d56d",
        "name": "Production Machine",
        "func": "let payload = msg.payload;\nlet finishedCable = msg.conditions.finishedCable;\nlet startProduction = msg.conditions.startProduction;\nlet serialNumber = msg.conditions.serialNumber;\nlet machine = context.get('machine') || null;\nlet startOfCable = context.get('startOfCable') || null;\nlet dateLastProduction = context.get('dateLastProduction') || null;\nlet machineActivity = context.get('machineActivity') || 0;\nlet machineInactivity = context.get('machineInactivity') || 0;\nlet cableCount = context.get('cableCount') || 0;\nlet resetShift = context.get('resetShift') || false;\nlet currentTimestamp = new Date();\nlet currentStatus = context.get('currentStatus') || 'PARADA';\n\nconst actions = {\n    'resetShift': () => {\n        cableCount = 0;\n        machineActivity = 0;\n        machineInactivity = 0;\n        resetShift = false;\n    \n        context.set('cableCount', cableCount);\n        context.set('machineActivity', machineActivity);\n        context.set('machineInactivity', machineInactivity);\n        context.set('resetShift', resetShift);\n    \n    },\n    'payloadReset': () => {\n        resetShift = true\n        context.set('resetShift', resetShift);\n    },\n    'startCable': () => {\n        startOfCable = currentTimestamp;\n        context.set('startOfCable', startOfCable);\n\n        currentStatus = \"TRABALHANDO\";\n        context.set('currentStatus', currentStatus);\n    },\n    'finishedCable': () => {\n        cableCount++;\n\n        dateLastProduction = currentTimestamp;\n        context.set('dateLastProduction', dateLastProduction);\n\n        currentStatus = \"PARADA\";\n        context.set('currentStatus', currentStatus);\n    },\n    'machineNull': () => {\n        machine = serialNumber;\n        context.set('machine', machine);\n    }\n};\n\nif (resetShift === true) actions.resetShift();\nif (payload === 'reset') actions.payloadReset();\nif (startProduction === true) actions.startCable();\nif (finishedCable == true) actions.finishedCable();\nif (serialNumber && machine == null) actions.machineNull();\n\ncontext.set('cableCount', cableCount);\n\nmsg.data = {\n    startOfCable: startOfCable,\n    cableCount: cableCount,\n    dateLastProduction: dateLastProduction,\n    reset: resetShift,\n    machine: machine,\n    status: currentStatus\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1740,
        "y": 480,
        "wires": [
            [
                "6d8d5557d58f8ab2",
                "32fa59860f9c8cea"
            ]
        ],
        "icon": "font-awesome/fa-book"
    },
    {
        "id": "6d8d5557d58f8ab2",
        "type": "function",
        "z": "62737f754ac7d56d",
        "name": "CORTE DE CRIMPAGEM",
        "func": "let cableCount = msg.data.cableCount;\nlet machine = msg.data.machine;\n\nmsg.payload = {\n    cabos: cableCount,\n    deviceSerialNumber: machine\n}\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1990,
        "y": 460,
        "wires": [
            []
        ],
        "icon": "font-awesome/fa-cogs"
    },
    {
        "id": "32fa59860f9c8cea",
        "type": "function",
        "z": "62737f754ac7d56d",
        "name": "verifyStatus",
        "func": "const statusWorking = \"TRABALHANDO\";\nconst statusStopped = \"PARADO\";\nconst statusOff = \"DESLIGADO\";\n\nfunction calculateTimeDifference(start, end) { // realiza o c√°lculo de diferen√ßa de tempo\n    return (end.getTime() - start.getTime()) / 1000;\n}\n\nfunction setStatusAndSave(context, status) { // determina o status atual da m√°quina\n    context.set('currentStatus', status);\n    return status;\n}\n\nlet { startOfCable = null, press: countPress, machine } = msg.data;\nlet dateLastProduction = msg.data.dateLastProduction || null; \nlet currentTimestamp = new Date();\nlet currentStatus = context.get('currentStatus') || null;\nlet differenceTimeStartProduction = context.get('differenceTimeStartProduction') || 0;\nlet differenceTimelastProduction = context.get('differenceTimelastProduction') || 0;\n\nif (dateLastProduction !== null) { // realiza o c√°lculo de quanto tempo se passou desde a √∫ltima produ√ß√£o\n    differenceTimelastProduction = calculateTimeDifference(dateLastProduction, currentTimestamp);\n    context.set('differenceTimelastProduction', differenceTimelastProduction);\n}\n\nif (startOfCable !== null) { // realiza o c√°lculo de quanto tempo se iniciou a produ√ß√£o atual \n    differenceTimeStartProduction = calculateTimeDifference(startOfCable, currentTimestamp);\n    context.set('differenceTimeStartProduction', differenceTimeStartProduction);\n\n    const statusDefinition = [\n        { condition: () => (differenceTimeStartProduction <= 299 && differenceTimelastProduction <= 299), status: statusWorking },\n        {\n            condition: () => (differenceTimeStartProduction >= 300 && differenceTimelastProduction >= 300 && differenceTimelastProduction <= 1799)\n                || (differenceTimeStartProduction >= 300 && differenceTimeStartProduction <= 1799 && dateLastProduction === null), status: statusStopped\n        }, \n        { condition: () => (differenceTimeStartProduction >= 300 && differenceTimelastProduction >= 1800) || (differenceTimeStartProduction >= 1800 && dateLastProduction === null), status: statusOff }\n    ];\n\n    for (let decision of statusDefinition) { // percorre as condi√ß√µes para determinar qual o status atual da m√°quina\n        if (decision.condition()) {\n            currentStatus = setStatusAndSave(context, decision.status);\n            \n        }\n    }\n} else if (startOfCable == null) {\n    currentStatus = setStatusAndSave(context, statusOff);\n}\n\nmsg.status = {\n    timeCurrentProduction: differenceTimeStartProduction,\n    timeLastProduction: differenceTimelastProduction,\n    machine: machine,\n    currentStatus: currentStatus\n}\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1950,
        "y": 500,
        "wires": [
            [
                "c4b48423a5815964"
            ]
        ],
        "icon": "node-red/status.svg"
    },
    {
        "id": "c4b48423a5815964",
        "type": "debug",
        "z": "62737f754ac7d56d",
        "name": "debug 238",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2310,
        "y": 620,
        "wires": []
    },
    {
        "id": "1866c62f64445577",
        "type": "inject",
        "z": "62737f754ac7d56d",
        "name": "TIMESTAMP (STATUS)",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "switches",
                "v": "{}",
                "vt": "json"
            },
            {
                "p": "conditions",
                "v": "{}",
                "vt": "json"
            },
            {
                "p": "data",
                "v": "{}",
                "vt": "json"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1480,
        "y": 440,
        "wires": [
            [
                "e885d41058bf2ae3"
            ]
        ],
        "icon": "font-awesome/fa-hourglass-1"
    },
    {
        "id": "fb78d0751075b812",
        "type": "inject",
        "z": "62737f754ac7d56d",
        "name": "SWITCH2 ON",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF0FCE",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch2\": {\"Action\": \"ON\"} }",
        "payloadType": "json",
        "x": 130,
        "y": 240,
        "wires": [
            [
                "99842a86b1130f5b"
            ]
        ]
    },
    {
        "id": "ccea4a7e9c151431",
        "type": "inject",
        "z": "62737f754ac7d56d",
        "name": "SWITCH2 OFF",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF0FCE",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch2\": {\"Action\": \"OFF\"} }",
        "payloadType": "json",
        "x": 140,
        "y": 280,
        "wires": [
            [
                "99842a86b1130f5b"
            ]
        ]
    },
    {
        "id": "3a9915240d727ed0",
        "type": "inject",
        "z": "62737f754ac7d56d",
        "name": "SWITCH1 ON",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "ABC123",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch1\": {\"Action\": \"ON\"} }",
        "payloadType": "json",
        "x": 130,
        "y": 1320,
        "wires": [
            []
        ]
    },
    {
        "id": "97582ece79dd571e",
        "type": "inject",
        "z": "62737f754ac7d56d",
        "name": "SWITCH1 OFF",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "ABC123",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch1\": {\"Action\": \"OFF\"} }",
        "payloadType": "json",
        "x": 140,
        "y": 1360,
        "wires": [
            []
        ]
    },
    {
        "id": "86288a4c05ad29c1",
        "type": "switch",
        "z": "62737f754ac7d56d",
        "name": "Machine",
        "property": "payload.serialNumber",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "DF0FCE",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 460,
        "y": 1060,
        "wires": [
            [
                "98c7f7193c0af62a"
            ]
        ],
        "icon": "font-awesome/fa-desktop"
    },
    {
        "id": "9186a6a77bd54a33",
        "type": "inject",
        "z": "62737f754ac7d56d",
        "name": "SWITCH1 ON",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF0FCE",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch1\": {\"Action\": \"ON\"} }",
        "payloadType": "json",
        "x": 190,
        "y": 940,
        "wires": [
            [
                "86288a4c05ad29c1"
            ]
        ]
    },
    {
        "id": "f50db7588516e662",
        "type": "inject",
        "z": "62737f754ac7d56d",
        "name": "SWITCH1 OFF",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF0FCE",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch1\": {\"Action\": \"OFF\"} }",
        "payloadType": "json",
        "x": 200,
        "y": 980,
        "wires": [
            [
                "86288a4c05ad29c1"
            ]
        ]
    },
    {
        "id": "45da6c3f597283b0",
        "type": "inject",
        "z": "62737f754ac7d56d",
        "name": "SWITCH2 ON",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF0FCE",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch2\": {\"Action\": \"ON\"} }",
        "payloadType": "json",
        "x": 190,
        "y": 1040,
        "wires": [
            [
                "86288a4c05ad29c1"
            ]
        ]
    },
    {
        "id": "7c861bb2e59a6906",
        "type": "inject",
        "z": "62737f754ac7d56d",
        "name": "SWITCH2 OFF",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF0FCE",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch2\": {\"Action\": \"OFF\"} }",
        "payloadType": "json",
        "x": 200,
        "y": 1080,
        "wires": [
            [
                "86288a4c05ad29c1"
            ]
        ]
    },
    {
        "id": "98c7f7193c0af62a",
        "type": "switch",
        "z": "62737f754ac7d56d",
        "name": "OPTION SW",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "hask",
                "v": "Switch1",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "Switch2",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "StatusSNS",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 630,
        "y": 1060,
        "wires": [
            [
                "1db4b836368584de"
            ],
            [
                "1db4b836368584de"
            ],
            [
                "1db4b836368584de"
            ]
        ]
    },
    {
        "id": "1db4b836368584de",
        "type": "change",
        "z": "62737f754ac7d56d",
        "name": "delete time",
        "rules": [
            {
                "t": "delete",
                "p": "payload.timestamp",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.StatusSNS.Time",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.StatusSNS.Switch1",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.StatusSNS.Switch3",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.StatusSNS.Switch4",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 810,
        "y": 1060,
        "wires": [
            [
                "80b029cada701880"
            ]
        ],
        "icon": "font-awesome/fa-times-circle"
    },
    {
        "id": "80b029cada701880",
        "type": "function",
        "z": "62737f754ac7d56d",
        "name": "Crimpagem object main",
        "func": "let crimpagemProperties = flow.get('crimpagemProperties') || {};\nlet serialNumber = msg.payload.serialNumber;\nlet getSwitch = Object.keys(msg.payload).find(key => key.startsWith('Switch'));\nlet actionValue = msg.payload[getSwitch] ? msg.payload[getSwitch].Action : null;\n\nif (getSwitch === \"Switch1\" || getSwitch === \"Switch2\") {\n    if(!crimpagemProperties[serialNumber]) {\n        crimpagemProperties[serialNumber] = {\n            \"startCable\": false,\n            \"finishedCable\": false,\n            \"cable\": 0,\n            \"machineDoor\": false,\n            \"timestampLastAction\": null,\n            \"timestampLastProduction\": null,\n            \"unit\": null,\n            \"status\": null,\n        }\n    }\n}\nflow.set('crimpagemProperties', crimpagemProperties);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 1060,
        "wires": [
            [
                "a85e964e987162bb"
            ]
        ],
        "icon": "font-awesome/fa-floppy-o"
    },
    {
        "id": "5ee846a3fd193501",
        "type": "inject",
        "z": "62737f754ac7d56d",
        "name": "STATUS8",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF0FCE",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"StatusSNS\": {  \"Switch2\": \"ON\" } }",
        "payloadType": "json",
        "x": 180,
        "y": 1120,
        "wires": [
            [
                "86288a4c05ad29c1"
            ]
        ]
    },
    {
        "id": "4c9bed7c7dbe51e9",
        "type": "inject",
        "z": "62737f754ac7d56d",
        "name": "STATUS8",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF0FCE",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"StatusSNS\": {  \"Switch2\": \"OFF\" } }",
        "payloadType": "json",
        "x": 180,
        "y": 1160,
        "wires": [
            [
                "86288a4c05ad29c1"
            ]
        ]
    },
    {
        "id": "2144f42202cc720a",
        "type": "function",
        "z": "62737f754ac7d56d",
        "name": "Counters cable",
        "func": "let serialNumber = msg.payload.serialNumber;\nlet crimpagemProperties = flow.get('crimpagemProperties');\nlet currentTimestamp = new Date();\n\nif ((msg.payload.Switch1 && msg.payload.Switch1.Action === \"ON\") && crimpagemProperties[serialNumber].machineDoor \n&& !crimpagemProperties[serialNumber].startCable) {\n    crimpagemProperties[serialNumber].startCable = true;\n    crimpagemProperties[serialNumber].timestampLastAction = currentTimestamp;\n}\nelse if ((msg.payload.Switch1 && msg.payload.Switch1.Action === \"OFF\") && (crimpagemProperties[serialNumber].machineDoor \n&& crimpagemProperties[serialNumber].startCable)) {\n    \n        crimpagemProperties[serialNumber].startCable = false;\n        crimpagemProperties[serialNumber].timestampLastProduction = currentTimestamp;\n        crimpagemProperties[serialNumber].cable += 1;\n        crimpagemProperties[serialNumber].unit = \"Cabos\";\n}\nflow.set('crimpagemProperties', crimpagemProperties);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1500,
        "y": 1060,
        "wires": [
            [
                "573f58018a978ff9",
                "11fb36f79b8874c8"
            ]
        ],
        "icon": "node-red/file.svg"
    },
    {
        "id": "536fc91aedcf58b5",
        "type": "function",
        "z": "62737f754ac7d56d",
        "name": "Get Count (Cable)",
        "func": "let serialNumber = msg.payload.serialNumber;\nlet crimpagemProperties = flow.get('crimpagemProperties');\n\nif (crimpagemProperties) {\n    if (crimpagemProperties[serialNumber] && crimpagemProperties[serialNumber].unit !== null) {\n        let unit = crimpagemProperties[serialNumber].unit;\n\n        msg.payload = {\n            timestamp: new Date().getTime(),\n            deviceSerialNumber: serialNumber,\n            unit: unit,\n            count: 1\n        }\n            crimpagemProperties[serialNumber].unit = null;\n            flow.set('crimpagemProperties', crimpagemProperties);\n        \n        return msg;\n    }\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1990,
        "y": 1020,
        "wires": [
            []
        ],
        "icon": "font-awesome/fa-plus"
    },
    {
        "id": "b33adb05903d3d23",
        "type": "function",
        "z": "62737f754ac7d56d",
        "name": "Get changed Status (Cable)",
        "func": "let {serialNumber, currentStatus} = msg.payload;\nlet timestamp = new Date().getTime();\n\nif (serialNumber && currentStatus !== null) {\n    msg.payload = {\n        timestamp: timestamp,\n        deviceSerialNumber: serialNumber,\n        status: currentStatus\n    }\n    return msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2020,
        "y": 1060,
        "wires": [
            []
        ],
        "icon": "node-red/status.svg"
    },
    {
        "id": "573f58018a978ff9",
        "type": "function",
        "z": "62737f754ac7d56d",
        "name": "Update Status Machine",
        "func": "let crimpagemProperties = flow.get('crimpagemProperties');\nlet currentTimestamp = new Date();\nlet messages = [];\n\nObject.keys(crimpagemProperties).forEach(key => {\n    if (crimpagemProperties[key].hasOwnProperty('timestampLastAction') && crimpagemProperties[key].hasOwnProperty('timestampLastProduction')) {\n        let timestampLastAction = crimpagemProperties[key]['timestampLastAction'];\n        let timestampLastProduction = crimpagemProperties[key]['timestampLastProduction'];\n\n        let differenceStartAction = timestampLastAction ? (currentTimestamp.getTime() - timestampLastAction.getTime()) / 1000 : null;\n        let differenceProduction = timestampLastProduction ? (currentTimestamp.getTime() - timestampLastProduction.getTime()) / 1000 : null;\n        let oldState = crimpagemProperties[key]['status'];\n\n        const isWorking = (differenceStartAction <= 299 && differenceStartAction !== null) || (differenceProduction <= 299 && differenceProduction !== null);\n\n        const isStopped = (differenceStartAction >= 300 && differenceProduction >= 300 && differenceProduction <= 1799) ||\n            (differenceStartAction >= 300 && differenceStartAction <= 1799 && differenceProduction === null);\n\n        const isTurnedOff = differenceStartAction >= 1800 || differenceProduction >= 1800 || differenceStartAction === null;\n\n        const newState = isWorking ? 'TRABALHANDO' : isStopped ? 'PARADO' : isTurnedOff ? 'DESLIGADO' : null;\n\n        if (newState !== null && oldState !== newState) {\n            crimpagemProperties[key]['status'] = newState;\n\n            messages.push({\n                serialNumber: key,\n                currentStatus: newState\n            });\n        }\n    }\n});\nflow.set('crimpagemProperties', crimpagemProperties);\n\nmessages.forEach(msg => {\n    node.send({ payload: msg });\n\n    return msg;\n});\n// node.warn(crimpagemProperties);",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1750,
        "y": 1060,
        "wires": [
            [
                "b33adb05903d3d23"
            ]
        ],
        "icon": "font-awesome/fa-exchange"
    },
    {
        "id": "94f643b40742f13d",
        "type": "debug",
        "z": "62737f754ac7d56d",
        "name": "debug 284",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2390,
        "y": 340,
        "wires": []
    },
    {
        "id": "a85e964e987162bb",
        "type": "function",
        "z": "62737f754ac7d56d",
        "name": "Verify machine door",
        "func": "let getStatusSNS = msg.payload.StatusSNS && Object.keys(msg.payload.StatusSNS).find(key => key.startsWith('Switch2'));\nlet valueStatusSNS = msg.payload['StatusSNS'] && msg.payload['StatusSNS']['Switch2'];\nlet getSwitch = Object.keys(msg.payload).find(key => key.startsWith('Switch'));\nlet actionValue = msg.payload[getSwitch] ? msg.payload[getSwitch].Action : null;\nlet crimpagemProperties = flow.get('crimpagemProperties');\nlet serialNumber = msg.payload.serialNumber;\n\nif ((getSwitch === \"Switch2\" && actionValue === \"ON\") || (getStatusSNS === \"Switch2\" && valueStatusSNS === \"ON\")) {\n    crimpagemProperties[serialNumber].machineDoor = true;\n}\nelse if ((getSwitch === \"Switch2\" && actionValue === \"OFF\") || (getStatusSNS === \"Switch2\" && valueStatusSNS === \"OFF\")) {\n    crimpagemProperties[serialNumber].machineDoor = false;\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1280,
        "y": 1060,
        "wires": [
            [
                "2144f42202cc720a"
            ]
        ],
        "icon": "node-red-dashboard/ui_switch.png"
    },
    {
        "id": "2f5e396dddc737bf",
        "type": "switch",
        "z": "dae82ca7554ded9f",
        "name": "Machines",
        "property": "payload.serialNumber",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "DF5A52",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "DF0C9A",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "DF3E20",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "DF2010",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 4,
        "x": 260,
        "y": 220,
        "wires": [
            [
                "2671e82d3464460e"
            ],
            [
                "b8e06074d12115e8"
            ],
            [
                "849889aafa671487"
            ],
            [
                "2dd0b799f6a1ddf4"
            ]
        ],
        "icon": "font-awesome/fa-desktop"
    },
    {
        "id": "7dc4ec4f2e0505cf",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "Switch State",
        "func": "function handleSwitch(payload, context, switchName, statusSNSName, startName, finishName, verifyName) {\n    let switchKey = Object.keys(payload).find(key => key.startsWith(switchName)) // extrai o switch que chegou no payload\n    let switchState = context.get(switchName) || null;\n    let actionValue = payload[switchKey] ? payload[switchKey].Action : null; // extrai o estado do switch que chegou\n    let statusSNS = payload[statusSNSName] && payload[statusSNSName][switchName];\n    let startState = context.get(startName) || false;\n    let finishState = context.get(finishName) || false;\n    let verifyState = context.get(verifyName) || false;\n\n    switchState = actionValue || statusSNS || switchState; // adquiri o estado do switch que chegou\n\n    if (switchState == \"ON\" && finishState == false) { // Condi√ß√£o que caracteriza o in√≠cio da produ√ß√£o do pulso\n        startState = true;\n    }\n    else if (switchState == \"OFF\" && startState == true) { // condi√ß√£o que caracteriza o final da produ√ß√£o do pulso\n        finishState = true;\n    }\n    verifyState = startState == true && finishState == true ? true : false;\n\n    if (verifyState == true) { // reseta o in√≠cio o fim da produ√ß√£o quando a pe√ßa √© produzida\n        startState = false;\n        finishState = false;\n\n    }\n    context.set(switchName, switchState);\n    context.set(startName, startState);\n    context.set(finishName, finishState);\n    context.set(verifyName, verifyState);\n\n    return {\n        switchState: switchState,\n        startState: startState,\n        finishState: finishState,\n        verifyState: verifyState\n    };\n}\nlet payload = msg.payload;\nlet switch1 = handleSwitch(payload, context, 'Switch1', 'StatusSNS', 'startPulse', 'finishedPulse', 'verifyPulse');\n\nmsg.switches = {\n    switch1: switch1.switchState,\n    startPulse: switch1.startState,\n    verifyPulse: switch1.verifyState,\n}\nswitch1.verifyState = false; // reseta a condi√ß√£o de pulso para false quando o gatilho √© solto\ncontext.set('verifyPulse', switch1.verifyState);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 180,
        "wires": [
            [
                "753e0fba4e75f089"
            ]
        ],
        "icon": "node-red/swap.svg"
    },
    {
        "id": "2671e82d3464460e",
        "type": "switch",
        "z": "dae82ca7554ded9f",
        "name": "OPTION SW",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "hask",
                "v": "Switch1",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "StatusSNS",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 450,
        "y": 180,
        "wires": [
            [
                "7a87a50303447e2b"
            ],
            [
                "7a87a50303447e2b"
            ]
        ]
    },
    {
        "id": "753e0fba4e75f089",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "Conditions Machine",
        "func": "let { startPulse, verifyPulse } = msg.switches;\n\nmsg.conditions = {\n    startPulse,\n    verifyPulse,\n    serialNumber: msg.payload.serialNumber\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1150,
        "y": 180,
        "wires": [
            [
                "44692dbdf02e6fad"
            ]
        ],
        "icon": "font-awesome/fa-bars"
    },
    {
        "id": "44692dbdf02e6fad",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "Production Machine",
        "func": "let { startPulse, verifyPulse, serialNumber } = msg.conditions;\nlet [machine, startWorking, lastTimestamp] = ['machine', 'startWorking', 'lastTimestamp'].map(key => context.get(key) || null);\nlet currentTimestamp = new Date();\nlet pulseCount = context.get('pulseCount') || 0;\nlet resetShift = context.get('resetShift') || false;\n\nconst actions = {\n    resetShift: () => { pulseCount = 0; resetShift = false },\n    payloadReset: () => { resetShift = true },\n    startProduction: () => { startWorking = currentTimestamp },\n    verifyPulse: () => { pulseCount++, lastTimestamp = currentTimestamp },\n    machineNull: () => { machine = serialNumber }\n};\n\nconst conditions = {\n    resetShift: resetShift == true,\n    payloadReset: msg.payload === 'reset',\n    startProduction: startPulse == true,\n    verifyPulse: verifyPulse == true,\n    machineNull: serialNumber && machine == null,\n};\n\nObject.entries(conditions).forEach(([condition, isTrue]) => {\n    if (isTrue) actions[condition]()\n});\ncontext.set('pulseCount', pulseCount);\ncontext.set('resetShift', resetShift);\ncontext.set('startWorking', startWorking);\ncontext.set('lastTimestamp', lastTimestamp);\ncontext.set('machine', machine);\n\nmsg.data = {\n    verifyPulse: verifyPulse,\n    pulse: pulseCount,\n    dateStartProduction: startWorking,\n    dateLastProduction: lastTimestamp,\n    machine: machine,\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1380,
        "y": 180,
        "wires": [
            [
                "4f71ed5cefbaa5d8",
                "aa467add4d09076e"
            ]
        ],
        "icon": "font-awesome/fa-book"
    },
    {
        "id": "4f71ed5cefbaa5d8",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "FSM-09",
        "func": "let {pulses, machine, verifyPulse} = msg.data;\n\nmsg.payload = {\n    verifyPulse: verifyPulse,\n    pulsos: pulses,\n    deviceSerialNumber: machine\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1660,
        "y": 220,
        "wires": [
            [
                "5bc87310136c06a1"
            ]
        ],
        "icon": "font-awesome/fa-cogs"
    },
    {
        "id": "aa467add4d09076e",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "verifyStatus",
        "func": "let { dateStartProduction, dateLastProduction, machine } = msg.data;\nlet [differenceTimedateStartProduction, differenceTimelastProduction] = ['differenceTimedateStartProduction', 'differenceTimelasProduction'].map(key => context.get(key) || 0);\nlet currentTimestamp = new Date();\nlet currentStatus = context.get('currentStatus') || null;\n\ndifferenceTimedateStartProduction = dateStartProduction !== null ? (currentTimestamp.getTime() - dateStartProduction.getTime()) / 1000 : null;\ndifferenceTimelastProduction = dateLastProduction !== null ? (currentTimestamp.getTime() - dateLastProduction.getTime()) / 1000 : null;\n\ncontext.set('differenceTimedateStartProduction', differenceTimedateStartProduction);\ncontext.set('differenceTimelastProduction', differenceTimelastProduction);\n\nif (dateStartProduction !== null) {\n\n    //Mapear status\n    const machineWorking = differenceTimedateStartProduction <= 299 || (differenceTimelastProduction !== null && differenceTimelastProduction <= 299);\n\n    const machineIdle = (differenceTimedateStartProduction >= 300 && differenceTimelastProduction >= 300 && differenceTimelastProduction <= 1799) ||\n        (differenceTimedateStartProduction >= 300 && differenceTimedateStartProduction <= 1799 && dateLastProduction === null);\n\n    const machineOff = ((differenceTimedateStartProduction >= 300 && differenceTimelastProduction >= 1800) || (differenceTimedateStartProduction >= 1800 && dateLastProduction === null));\n\n    const newStatus = machineWorking ? 'TRABALHANDO' : machineIdle ? 'PARADO' : machineOff ? 'DESLIGADO' : null;\n    if (newStatus) currentStatus = newStatus;\n}\n\nif (dateStartProduction == null) currentStatus = \"DESLIGADO\";\n\ncontext.set('currentStatus', currentStatus);\n\nmsg.status = {\n    timeCurrentProduction: differenceTimedateStartProduction,\n    timeLastProduction: differenceTimelastProduction,\n    machine: machine,\n    currentStatus: currentStatus\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1670,
        "y": 280,
        "wires": [
            [
                "29cca2b046761958",
                "650b6985affcfba4"
            ]
        ],
        "icon": "node-red/status.svg"
    },
    {
        "id": "7a87a50303447e2b",
        "type": "change",
        "z": "dae82ca7554ded9f",
        "name": "delete time",
        "rules": [
            {
                "t": "delete",
                "p": "payload.timestamp",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.StatusSNS.Time",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.StatusSNS.Switch2",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.StatusSNS.Switch3",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.StatusSNS.Switch4",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 630,
        "y": 180,
        "wires": [
            [
                "339628106a4ce4e3"
            ]
        ],
        "icon": "font-awesome/fa-times-circle"
    },
    {
        "id": "29cca2b046761958",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "FormatedMessage",
        "func": "let machine = msg.status.machine;\nlet timestamp = new Date().getTime();\nlet currentStatus = context.get('currentStatus') || null; \nlet oldStatus = msg.status.currentStatus;\n\nif(!currentStatus || currentStatus !== oldStatus) {\n    currentStatus = oldStatus;\n    context.set('currentStatus', currentStatus);\n\n    msg.payload = {\n            timestamp: timestamp,\n            deviceSerialNumber: machine,\n            status: currentStatus\n    }\n    return msg;\n}\nreturn null;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1690,
        "y": 320,
        "wires": [
            []
        ],
        "icon": "font-awesome/fa-envelope"
    },
    {
        "id": "339628106a4ce4e3",
        "type": "rbe",
        "z": "dae82ca7554ded9f",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 790,
        "y": 180,
        "wires": [
            [
                "7dc4ec4f2e0505cf"
            ]
        ]
    },
    {
        "id": "bf7cba4c68bd55a1",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "Switch State",
        "func": "let payload = msg.payload; \nlet switch1 = context.get('switch1') || null;\n\nif ((payload.Switch1 && payload.Switch1.Action == \"ON\") || (payload.StatusSNS && payload.StatusSNS.Switch1 == \"ON\")) {\n    context.set('switch1', \"ON\");\n}\nif ((payload.Switch1 && payload.Switch1.Action == \"OFF\") || (payload.StatusSNS && payload.StatusSNS.Switch1 == \"OFF\") && switch1 == \"ON\") {\n    context.set('switch1', \"OFF\");\n}\nmsg.switches = {\n    switch1: context.get('switch1')\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 220,
        "wires": [
            [
                "11909a663dd878ae"
            ]
        ],
        "icon": "node-red/swap.svg"
    },
    {
        "id": "11909a663dd878ae",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "Conditions Machine",
        "func": "let switch1 = msg.switches.switch1 || null;\nlet serialNumber = msg.payload.serialNumber;\nlet verifyPulse = context.get('verifyPulse') || false; /* verifica se o pulso foi finalizado  */\nlet startPulse = context.get('startPulse') || false; /* verifica se o gatilho da solda est√° pressionada foi iniciada */\n\nif (switch1 == \"ON\") { /* momento em que o gatilho do laser √© pressionado*/\n    startPulse = true;\n    context.set('startPulse', startPulse);\n}\n\nif (switch1 == \"OFF\" && startPulse) { /* momento em que o gatilho do laser √© solto */\n    verifyPulse = true;\n    startPulse = false;\n\n    context.set('verifyPulse', verifyPulse);\n    context.set('startPulse', startPulse);\n}\n\nmsg.conditions = {\n    verifyPulse: verifyPulse,\n    startPulse: startPulse,\n    machine: serialNumber\n}\n\nif (verifyPulse) {\n    verifyPulse = false;\n    context.set('verifyPulse', verifyPulse);\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1150,
        "y": 220,
        "wires": [
            [
                "b17f578771451289"
            ]
        ],
        "icon": "font-awesome/fa-bars"
    },
    {
        "id": "b17f578771451289",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "Production Machine",
        "func": "let startPulse = msg.conditions.startPulse;\nlet verifyPulse = msg.conditions.verifyPulse;\nlet serialNumber = msg.conditions.machine;\nlet payload = msg.payload;\nlet machine = context.get('machine') || null;\nlet startWorking = context.get('startWorking') || null;\nlet lastTimestamp = context.get('lastTimestamp') || null;\nlet currentTimestamp = new Date().getTime();\nlet sumWorkingTime = context.get('sumWorkingTime') || 0;\nlet sumIdleTime = context.get('sumIdleTime') || 0;\nlet pulseCount = context.get('pulseCount') || 0;\nlet currentStatus = context.get('currentStatus') || \"PARADA\";\nlet verifyWorking = context.get('verifyWorking') || false;\nlet resetShift = context.get('resetShift') || false;\n\nif (resetShift) {\n    pulseCount = 0;\n    sumWorkingTime = 0;\n    sumIdleTime = 0;\n\n    context.set('pulseCount', pulseCount);\n    context.set('sumWorkingTime', sumWorkingTime);\n    context.set('sumIdleTime', sumIdleTime);\n\n    resetShift = false;\n    context.set('resetShift', resetShift);\n}\n\nif (startPulse) {\n\n    startWorking = currentTimestamp;\n    context.set('startWorking', startWorking);\n\n    if (lastTimestamp !== null) {\n        let differenceTimeSignals = (currentTimestamp - lastTimestamp) / 1000;\n\n        if (differenceTimeSignals >= 300) {\n            sumIdleTime += differenceTimeSignals;\n            context.set('sumIdleTime', sumIdleTime);\n        }\n        else {\n            sumWorkingTime += differenceTimeSignals;\n            context.set('sumWorkingTime', sumWorkingTime);\n        }\n    }\n    currentStatus = \"TRABALHANDO\";\n    context.set('currentStatus', currentStatus);\n\n    verifyWorking = true;\n    context.set('verifyWorking', true);\n}\nelse if (startPulse == false) {\n    currentStatus = \"PARADA\";\n    context.set('currentStatus', currentStatus);\n}\n\nif (verifyPulse) {\n    pulseCount++;\n\n    lastTimestamp = currentTimestamp\n    context.set('lastTimestamp', lastTimestamp);\n\n    let timeWorking = (currentTimestamp - startWorking) / 1000;\n    sumWorkingTime += timeWorking;\n    context.set('sumWorkingTime', sumWorkingTime);\n\n}\n\nif (machine == null) {\n    machine = serialNumber;\n    context.set('machine', machine);\n}\n\nif (payload === \"reset\") {\n    resetShift = true;\n    context.set('resetShift', true);\n}\ncontext.set('pulseCount', pulseCount);\n\nmsg.data = {\n    pulse: pulseCount,\n    workingTime: sumWorkingTime.toFixed(3),\n    idleTime: sumIdleTime.toFixed(3),\n    status: currentStatus,\n    verifyWorking: verifyWorking,\n    lastTimestamp: lastTimestamp,\n    machine: machine,\n    reset: resetShift\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1380,
        "y": 220,
        "wires": [
            [
                "8f7bd57c178072a5",
                "88a0ee0ad05c0db7"
            ]
        ],
        "icon": "font-awesome/fa-book"
    },
    {
        "id": "8f7bd57c178072a5",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "FSM-04",
        "func": "let workingTime = msg.data.workingTime;\nlet idleTime = msg.data.idleTime;\nlet press = msg.data.press;\nlet status = msg.data.status;\nlet reset = msg.data.reset;\nlet machine = msg.topic;\nlet workingTimeMinutes = context.get('workingTimeMinutes') || 0;\nlet idleTimeMinutes = context.get('idleTimeMinutes') || 0;\n\nfunction minutesToHours(totalMinutes) {\n    var hours = String(Math.floor(totalMinutes / 60)).padStart(2, \"0\");\n    var minutes = String(totalMinutes % 60).padStart(2, \"0\");\n\n    return `${hours}:${minutes}`;\n}\n\nif (reset == true) {\n    workingTimeMinutes = 0;\n    idleTimeMinutes = 0;\n\n    context.set('workingTimeMinutes', workingTimeMinutes);\n    context.set('idleTimeMinutes', 0);\n}\n\nif (workingTime > 0 || idleTime > 0) {\n    workingTimeMinutes = workingTime / 60;\n    idleTimeMinutes = idleTime / 60;\n}\n\nmsg.payload = {\n    press: press,\n    workingTimeMinutes: minutesToHours(workingTimeMinutes.toFixed(0)),\n    idleTimeMinutes: minutesToHours(idleTimeMinutes.toFixed(0)),\n    status: status,\n    deviceSerialNumber: machine\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1660,
        "y": 380,
        "wires": [
            []
        ],
        "icon": "font-awesome/fa-cogs"
    },
    {
        "id": "88a0ee0ad05c0db7",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "verifyStatus",
        "func": "let verifyPC = msg.conditions.verifyPC;\nlet startPC = msg.conditions.startPC;\nlet lastTimestamp = msg.data.lastTimestamp;\nlet machine = msg.data.machine;\nlet status = msg.data.status;\nlet currentTimestamp = new Date();\nlet currentStatus = context.get('currentStatus') || null;\nlet differenceInSeconds = context.get('differenceInSeconds') || 0;\n\nif(lastTimestamp !== null) {\n\n    differenceInSeconds = (currentTimestamp.getTime() - lastTimestamp) / 1000;\n    context.set('differenceInSeconds', differenceInSeconds);\n\n    if(differenceInSeconds >= 300 && (!startPC && !verifyPC) && status == \"PARADA\") {\n        currentStatus = \"PARADA\";\n        context.set('currentStatus', currentStatus);\n    }\n\n    if ((differenceInSeconds <= 299) || (startPC == true || verifyPC == true) || (status == \"TRABALHANDO\")) {\n        currentStatus = \"TRABALHANDO\";\n        context.set('currentStatus', currentStatus);\n    }\n\n    else if (differenceInSeconds >= 1800) {\n        currentStatus = \"DESLIGADO\";\n        context.set('currentStatus', currentStatus);\n    }\n}\nelse if( lastTimestamp == null && status == \"PARADA\") {\n    currentStatus = \"DESLIGADO\";\n    context.set('currentStatus', currentStatus);\n}\nmsg.status = {\n    time: differenceInSeconds,\n    machine: machine,\n    currentStatus: currentStatus\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1670,
        "y": 420,
        "wires": [
            [
                "9b4dafebe51948cc"
            ]
        ],
        "icon": "node-red/status.svg"
    },
    {
        "id": "9b4dafebe51948cc",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "FormatedMessage",
        "func": "let machine = msg.status.machine;\nlet timestamp = new Date().getTime();\nlet currentStatus = context.get('currentStatus') || null; \nlet oldStatus = msg.status.currentStatus;\n\nif(!currentStatus || currentStatus !== oldStatus) {\n    currentStatus = oldStatus;\n    context.set('currentStatus', currentStatus);\n\n    msg.payload = {\n            timestamp: timestamp,\n            deviceSerialNumber: machine,\n            status: currentStatus\n    }\n    return msg;\n}\nreturn null;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1690,
        "y": 460,
        "wires": [
            []
        ],
        "icon": "font-awesome/fa-envelope"
    },
    {
        "id": "501dc1676d76a5cd",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "Switch State",
        "func": "let payload = msg.payload; \nlet switch1 = context.get('switch1') || null;\n\nif ((payload.Switch1 && payload.Switch1.Action == \"ON\") || (payload.StatusSNS && payload.StatusSNS.Switch1 == \"ON\")) {\n    context.set('switch1', \"ON\");\n}\nif ((payload.Switch1 && payload.Switch1.Action == \"OFF\") || (payload.StatusSNS && payload.StatusSNS.Switch1 == \"OFF\") && switch1 == \"ON\") {\n    context.set('switch1', \"OFF\");\n}\nmsg.switches = {\n    switch1: context.get('switch1')\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 260,
        "wires": [
            [
                "af7c31f62baf5741"
            ]
        ],
        "icon": "node-red/swap.svg"
    },
    {
        "id": "af7c31f62baf5741",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "Conditions Machine",
        "func": "let switch1 = msg.switches.switch1 || null;\nlet serialNumber = msg.payload.serialNumber;\nlet verifyPulse = context.get('verifyPulse') || false; /* verifica se o pulso foi finalizado  */\nlet startPulse = context.get('startPulse') || false; /* verifica se o gatilho da solda est√° pressionada foi iniciada */\n\nif (switch1 == \"ON\") { /* momento em que o gatilho do laser √© pressionado*/\n    startPulse = true;\n    context.set('startPulse', startPulse);\n}\n\nif (switch1 == \"OFF\" && startPulse) { /* momento em que o gatilho do laser √© solto */\n    verifyPulse = true;\n    startPulse = false;\n\n    context.set('verifyPulse', verifyPulse);\n    context.set('startPulse', startPulse);\n}\n\nmsg.conditions = {\n    verifyPulse: verifyPulse,\n    startPulse: startPulse,\n    machine: serialNumber\n}\n\nif (verifyPulse) {\n    verifyPulse = false;\n    context.set('verifyPulse', verifyPulse);\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1150,
        "y": 260,
        "wires": [
            [
                "64a7688f5f14a19d"
            ]
        ],
        "icon": "font-awesome/fa-bars"
    },
    {
        "id": "64a7688f5f14a19d",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "Production Machine",
        "func": "let startPulse = msg.conditions.startPulse;\nlet verifyPulse = msg.conditions.verifyPulse;\nlet serialNumber = msg.conditions.machine;\nlet payload = msg.payload;\nlet machine = context.get('machine') || null;\nlet startWorking = context.get('startWorking') || null;\nlet lastTimestamp = context.get('lastTimestamp') || null;\nlet currentTimestamp = new Date().getTime();\nlet sumWorkingTime = context.get('sumWorkingTime') || 0;\nlet sumIdleTime = context.get('sumIdleTime') || 0;\nlet pulseCount = context.get('pulseCount') || 0;\nlet currentStatus = context.get('currentStatus') || \"PARADA\";\nlet verifyWorking = context.get('verifyWorking') || false;\nlet resetShift = context.get('resetShift') || false;\n\nif (resetShift) {\n    pulseCount = 0;\n    sumWorkingTime = 0;\n    sumIdleTime = 0;\n\n    context.set('pulseCount', pulseCount);\n    context.set('sumWorkingTime', sumWorkingTime);\n    context.set('sumIdleTime', sumIdleTime);\n\n    resetShift = false;\n    context.set('resetShift', resetShift);\n}\n\nif (startPulse) {\n\n    startWorking = currentTimestamp;\n    context.set('startWorking', startWorking);\n\n    if (lastTimestamp !== null) {\n        let differenceTimeSignals = (currentTimestamp - lastTimestamp) / 1000;\n\n        if (differenceTimeSignals >= 300) {\n            sumIdleTime += differenceTimeSignals;\n            context.set('sumIdleTime', sumIdleTime);\n        }\n        else {\n            sumWorkingTime += differenceTimeSignals;\n            context.set('sumWorkingTime', sumWorkingTime);\n        }\n    }\n    currentStatus = \"TRABALHANDO\";\n    context.set('currentStatus', currentStatus);\n\n    verifyWorking = true;\n    context.set('verifyWorking', true);\n}\nelse if (startPulse == false) {\n    currentStatus = \"PARADA\";\n    context.set('currentStatus', currentStatus);\n}\n\nif (verifyPulse) {\n    pulseCount++;\n\n    lastTimestamp = currentTimestamp\n    context.set('lastTimestamp', lastTimestamp);\n\n    let timeWorking = (currentTimestamp - startWorking) / 1000;\n    sumWorkingTime += timeWorking;\n    context.set('sumWorkingTime', sumWorkingTime);\n\n}\n\nif (machine == null) {\n    machine = serialNumber;\n    context.set('machine', machine);\n}\n\nif (payload === \"reset\") {\n    resetShift = true;\n    context.set('resetShift', true);\n}\ncontext.set('pulseCount', pulseCount);\n\nmsg.data = {\n    pulse: pulseCount,\n    workingTime: sumWorkingTime.toFixed(3),\n    idleTime: sumIdleTime.toFixed(3),\n    status: currentStatus,\n    verifyWorking: verifyWorking,\n    lastTimestamp: lastTimestamp,\n    machine: machine,\n    reset: resetShift\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1380,
        "y": 260,
        "wires": [
            [
                "f8b4960bfadfe002",
                "79b60c57e928fe89"
            ]
        ],
        "icon": "font-awesome/fa-book"
    },
    {
        "id": "f8b4960bfadfe002",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "FSM-02",
        "func": "let workingTime = msg.data.workingTime;\nlet idleTime = msg.data.idleTime;\nlet press = msg.data.press;\nlet status = msg.data.status;\nlet reset = msg.data.reset;\nlet machine = msg.topic;\nlet workingTimeMinutes = context.get('workingTimeMinutes') || 0;\nlet idleTimeMinutes = context.get('idleTimeMinutes') || 0;\n\nfunction minutesToHours(totalMinutes) {\n    var hours = String(Math.floor(totalMinutes / 60)).padStart(2, \"0\");\n    var minutes = String(totalMinutes % 60).padStart(2, \"0\");\n\n    return `${hours}:${minutes}`;\n}\n\nif (reset == true) {\n    workingTimeMinutes = 0;\n    idleTimeMinutes = 0;\n\n    context.set('workingTimeMinutes', workingTimeMinutes);\n    context.set('idleTimeMinutes', 0);\n}\n\nif (workingTime > 0 || idleTime > 0) {\n    workingTimeMinutes = workingTime / 60;\n    idleTimeMinutes = idleTime / 60;\n}\n\nmsg.payload = {\n    press: press,\n    workingTimeMinutes: minutesToHours(workingTimeMinutes.toFixed(0)),\n    idleTimeMinutes: minutesToHours(idleTimeMinutes.toFixed(0)),\n    status: status,\n    deviceSerialNumber: machine\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1660,
        "y": 520,
        "wires": [
            []
        ],
        "icon": "font-awesome/fa-cogs"
    },
    {
        "id": "79b60c57e928fe89",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "verifyStatus",
        "func": "let verifyPC = msg.conditions.verifyPC;\nlet startPC = msg.conditions.startPC;\nlet lastTimestamp = msg.data.lastTimestamp;\nlet machine = msg.data.machine;\nlet status = msg.data.status;\nlet currentTimestamp = new Date();\nlet currentStatus = context.get('currentStatus') || null;\nlet differenceInSeconds = context.get('differenceInSeconds') || 0;\n\nif(lastTimestamp !== null) {\n\n    differenceInSeconds = (currentTimestamp.getTime() - lastTimestamp) / 1000;\n    context.set('differenceInSeconds', differenceInSeconds);\n\n    if(differenceInSeconds >= 300 && (!startPC && !verifyPC) && status == \"PARADA\") {\n        currentStatus = \"PARADA\";\n        context.set('currentStatus', currentStatus);\n    }\n\n    if ((differenceInSeconds <= 299) || (startPC == true || verifyPC == true) || (status == \"TRABALHANDO\")) {\n        currentStatus = \"TRABALHANDO\";\n        context.set('currentStatus', currentStatus);\n    }\n\n    else if (differenceInSeconds >= 1800) {\n        currentStatus = \"DESLIGADO\";\n        context.set('currentStatus', currentStatus);\n    }\n}\nelse if( lastTimestamp == null && status == \"PARADA\") {\n    currentStatus = \"DESLIGADO\";\n    context.set('currentStatus', currentStatus);\n}\nmsg.status = {\n    time: differenceInSeconds,\n    machine: machine,\n    currentStatus: currentStatus\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1670,
        "y": 560,
        "wires": [
            [
                "fecfa00e62943d04"
            ]
        ],
        "icon": "node-red/status.svg"
    },
    {
        "id": "fecfa00e62943d04",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "FormatedMessage",
        "func": "let machine = msg.status.machine;\nlet timestamp = new Date().getTime();\nlet currentStatus = context.get('currentStatus') || null; \nlet oldStatus = msg.status.currentStatus;\n\nif(!currentStatus || currentStatus !== oldStatus) {\n    currentStatus = oldStatus;\n    context.set('currentStatus', currentStatus);\n\n    msg.payload = {\n            timestamp: timestamp,\n            deviceSerialNumber: machine,\n            status: currentStatus\n    }\n    return msg;\n}\nreturn null;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1690,
        "y": 600,
        "wires": [
            []
        ],
        "icon": "font-awesome/fa-envelope"
    },
    {
        "id": "1a4e6e1950cdb984",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "Switch State",
        "func": "let payload = msg.payload; \nlet switch1 = context.get('switch1') || null;\n\nif ((payload.Switch1 && payload.Switch1.Action == \"ON\") || (payload.StatusSNS && payload.StatusSNS.Switch1 == \"ON\")) {\n    context.set('switch1', \"ON\");\n}\nif ((payload.Switch1 && payload.Switch1.Action == \"OFF\") || (payload.StatusSNS && payload.StatusSNS.Switch1 == \"OFF\") && switch1 == \"ON\") {\n    context.set('switch1', \"OFF\");\n}\nmsg.switches = {\n    switch1: context.get('switch1')\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 300,
        "wires": [
            [
                "9881409ae2200ec9"
            ]
        ],
        "icon": "node-red/swap.svg"
    },
    {
        "id": "9881409ae2200ec9",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "Conditions Machine",
        "func": "let switch1 = msg.switches.switch1 || null;\nlet serialNumber = msg.payload.serialNumber;\nlet verifyPulse = context.get('verifyPulse') || false; /* verifica se o pulso foi finalizado  */\nlet startPulse = context.get('startPulse') || false; /* verifica se o gatilho da solda est√° pressionada foi iniciada */\n\nif (switch1 == \"ON\") { /* momento em que o gatilho do laser √© pressionado*/\n    startPulse = true;\n    context.set('startPulse', startPulse);\n}\n\nif (switch1 == \"OFF\" && startPulse) { /* momento em que o gatilho do laser √© solto */\n    verifyPulse = true;\n    startPulse = false;\n\n    context.set('verifyPulse', verifyPulse);\n    context.set('startPulse', startPulse);\n}\n\nmsg.conditions = {\n    verifyPulse: verifyPulse,\n    startPulse: startPulse,\n    machine: serialNumber\n}\n\nif (verifyPulse) {\n    verifyPulse = false;\n    context.set('verifyPulse', verifyPulse);\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1150,
        "y": 300,
        "wires": [
            [
                "2c2db4b35c5cb715"
            ]
        ],
        "icon": "font-awesome/fa-bars"
    },
    {
        "id": "2c2db4b35c5cb715",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "Production Machine",
        "func": "let startPulse = msg.conditions.startPulse;\nlet verifyPulse = msg.conditions.verifyPulse;\nlet serialNumber = msg.conditions.machine;\nlet payload = msg.payload;\nlet machine = context.get('machine') || null;\nlet startWorking = context.get('startWorking') || null;\nlet lastTimestamp = context.get('lastTimestamp') || null;\nlet currentTimestamp = new Date().getTime();\nlet sumWorkingTime = context.get('sumWorkingTime') || 0;\nlet sumIdleTime = context.get('sumIdleTime') || 0;\nlet pulseCount = context.get('pulseCount') || 0;\nlet currentStatus = context.get('currentStatus') || \"PARADA\";\nlet verifyWorking = context.get('verifyWorking') || false;\nlet resetShift = context.get('resetShift') || false;\n\nif (resetShift) {\n    pulseCount = 0;\n    sumWorkingTime = 0;\n    sumIdleTime = 0;\n\n    context.set('pulseCount', pulseCount);\n    context.set('sumWorkingTime', sumWorkingTime);\n    context.set('sumIdleTime', sumIdleTime);\n\n    resetShift = false;\n    context.set('resetShift', resetShift);\n}\n\nif (startPulse) {\n\n    startWorking = currentTimestamp;\n    context.set('startWorking', startWorking);\n\n    if (lastTimestamp !== null) {\n        let differenceTimeSignals = (currentTimestamp - lastTimestamp) / 1000;\n\n        if (differenceTimeSignals >= 300) {\n            sumIdleTime += differenceTimeSignals;\n            context.set('sumIdleTime', sumIdleTime);\n        }\n        else {\n            sumWorkingTime += differenceTimeSignals;\n            context.set('sumWorkingTime', sumWorkingTime);\n        }\n    }\n    currentStatus = \"TRABALHANDO\";\n    context.set('currentStatus', currentStatus);\n\n    verifyWorking = true;\n    context.set('verifyWorking', true);\n}\nelse if (startPulse == false) {\n    currentStatus = \"PARADA\";\n    context.set('currentStatus', currentStatus);\n}\n\nif (verifyPulse) {\n    pulseCount++;\n\n    lastTimestamp = currentTimestamp\n    context.set('lastTimestamp', lastTimestamp);\n\n    let timeWorking = (currentTimestamp - startWorking) / 1000;\n    sumWorkingTime += timeWorking;\n    context.set('sumWorkingTime', sumWorkingTime);\n\n}\n\nif (machine == null) {\n    machine = serialNumber;\n    context.set('machine', machine);\n}\n\nif (payload === \"reset\") {\n    resetShift = true;\n    context.set('resetShift', true);\n}\ncontext.set('pulseCount', pulseCount);\n\nmsg.data = {\n    pulse: pulseCount,\n    workingTime: sumWorkingTime.toFixed(3),\n    idleTime: sumIdleTime.toFixed(3),\n    status: currentStatus,\n    verifyWorking: verifyWorking,\n    lastTimestamp: lastTimestamp,\n    machine: machine,\n    reset: resetShift\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1380,
        "y": 300,
        "wires": [
            [
                "1b568469f8ccc98c",
                "1a8dae0223532395"
            ]
        ],
        "icon": "font-awesome/fa-book"
    },
    {
        "id": "1b568469f8ccc98c",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "FSM-10",
        "func": "let workingTime = msg.data.workingTime;\nlet idleTime = msg.data.idleTime;\nlet press = msg.data.press;\nlet status = msg.data.status;\nlet reset = msg.data.reset;\nlet machine = msg.topic;\nlet workingTimeMinutes = context.get('workingTimeMinutes') || 0;\nlet idleTimeMinutes = context.get('idleTimeMinutes') || 0;\n\nfunction minutesToHours(totalMinutes) {\n    var hours = String(Math.floor(totalMinutes / 60)).padStart(2, \"0\");\n    var minutes = String(totalMinutes % 60).padStart(2, \"0\");\n\n    return `${hours}:${minutes}`;\n}\n\nif (reset == true) {\n    workingTimeMinutes = 0;\n    idleTimeMinutes = 0;\n\n    context.set('workingTimeMinutes', workingTimeMinutes);\n    context.set('idleTimeMinutes', 0);\n}\n\nif (workingTime > 0 || idleTime > 0) {\n    workingTimeMinutes = workingTime / 60;\n    idleTimeMinutes = idleTime / 60;\n}\n\nmsg.payload = {\n    press: press,\n    workingTimeMinutes: minutesToHours(workingTimeMinutes.toFixed(0)),\n    idleTimeMinutes: minutesToHours(idleTimeMinutes.toFixed(0)),\n    status: status,\n    deviceSerialNumber: machine\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1660,
        "y": 660,
        "wires": [
            []
        ],
        "icon": "font-awesome/fa-cogs"
    },
    {
        "id": "1a8dae0223532395",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "verifyStatus",
        "func": "let verifyPC = msg.conditions.verifyPC;\nlet startPC = msg.conditions.startPC;\nlet lastTimestamp = msg.data.lastTimestamp;\nlet machine = msg.data.machine;\nlet status = msg.data.status;\nlet currentTimestamp = new Date();\nlet currentStatus = context.get('currentStatus') || null;\nlet differenceInSeconds = context.get('differenceInSeconds') || 0;\n\nif(lastTimestamp !== null) {\n\n    differenceInSeconds = (currentTimestamp.getTime() - lastTimestamp) / 1000;\n    context.set('differenceInSeconds', differenceInSeconds);\n\n    if(differenceInSeconds >= 300 && (!startPC && !verifyPC) && status == \"PARADA\") {\n        currentStatus = \"PARADA\";\n        context.set('currentStatus', currentStatus);\n    }\n\n    if ((differenceInSeconds <= 299) || (startPC == true || verifyPC == true) || (status == \"TRABALHANDO\")) {\n        currentStatus = \"TRABALHANDO\";\n        context.set('currentStatus', currentStatus);\n    }\n\n    else if (differenceInSeconds >= 1800) {\n        currentStatus = \"DESLIGADO\";\n        context.set('currentStatus', currentStatus);\n    }\n}\nelse if( lastTimestamp == null && status == \"PARADA\") {\n    currentStatus = \"DESLIGADO\";\n    context.set('currentStatus', currentStatus);\n}\nmsg.status = {\n    time: differenceInSeconds,\n    machine: machine,\n    currentStatus: currentStatus\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1670,
        "y": 700,
        "wires": [
            [
                "e83761faba9990a5"
            ]
        ],
        "icon": "node-red/status.svg"
    },
    {
        "id": "e83761faba9990a5",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "FormatedMessage",
        "func": "let machine = msg.status.machine;\nlet timestamp = new Date().getTime();\nlet currentStatus = context.get('currentStatus') || null; \nlet oldStatus = msg.status.currentStatus;\n\nif(!currentStatus || currentStatus !== oldStatus) {\n    currentStatus = oldStatus;\n    context.set('currentStatus', currentStatus);\n\n    msg.payload = {\n            timestamp: timestamp,\n            deviceSerialNumber: machine,\n            status: currentStatus\n    }\n    return msg;\n}\nreturn null;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1690,
        "y": 740,
        "wires": [
            []
        ],
        "icon": "font-awesome/fa-envelope"
    },
    {
        "id": "b5a364cc3f1e8c6b",
        "type": "switch",
        "z": "dae82ca7554ded9f",
        "name": "Machines",
        "property": "payload.serialNumber",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "DF2D26",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "DF2E84",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "C939E9",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "DF4FFE",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "DF1591",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "DF0694",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 6,
        "x": 260,
        "y": 680,
        "wires": [
            [
                "494092a41d43adf6"
            ],
            [
                "2fb84e249f024855"
            ],
            [
                "f6c08cf79ee7ee79"
            ],
            [
                "8467d684bdd1ca14"
            ],
            [
                "74a3b32666571ea3"
            ],
            [
                "4fa68c8ac7a56081"
            ]
        ],
        "icon": "font-awesome/fa-desktop"
    },
    {
        "id": "dc4fee6627927e6a",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "Switch State",
        "func": "let payload = msg.payload; \nlet switch1 = context.get('switch1') || null;\n\nif ((payload.Switch1 && payload.Switch1.Action == \"ON\") || (payload.StatusSNS && payload.StatusSNS.Switch1 == \"ON\")) {\n    context.set('switch1', \"ON\");\n}\nif ((payload.Switch1 && payload.Switch1.Action == \"OFF\") || (payload.StatusSNS && payload.StatusSNS.Switch1 == \"OFF\") && switch1 == \"ON\") {\n    context.set('switch1', \"OFF\");\n}\nmsg.switches = {\n    switch1: context.get('switch1')\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 600,
        "wires": [
            [
                "873a697c8acb8614"
            ]
        ],
        "icon": "node-red/swap.svg"
    },
    {
        "id": "494092a41d43adf6",
        "type": "switch",
        "z": "dae82ca7554ded9f",
        "name": "OPTION SW",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "hask",
                "v": "Switch1",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "StatusSNS",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 450,
        "y": 600,
        "wires": [
            [
                "1f025c7b025e0bed"
            ],
            [
                "1f025c7b025e0bed"
            ]
        ]
    },
    {
        "id": "873a697c8acb8614",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "Conditions Machine",
        "func": "let switch1 = msg.switches.switch1 || null;\nlet serialNumber = msg.payload.serialNumber;\nlet verifyPulse = context.get('verifyPulse') || false; /* verifica se o pulso foi finalizado  */\nlet startPulse = context.get('startPulse') || false; /* verifica se o gatilho da solda est√° pressionada foi iniciada */\n\nif (switch1 == \"ON\") { /* momento em que o gatilho do laser √© pressionado*/\n    startPulse = true;\n    context.set('startPulse', startPulse);\n}\n\nif (switch1 == \"OFF\" && startPulse) { /* momento em que o gatilho do laser √© solto */\n    verifyPulse = true;\n    startPulse = false;\n\n    context.set('verifyPulse', verifyPulse);\n    context.set('startPulse', startPulse);\n}\n\nmsg.conditions = {\n    verifyPulse: verifyPulse,\n    startPulse: startPulse,\n    machine: serialNumber\n}\n\nif (verifyPulse) {\n    verifyPulse = false;\n    context.set('verifyPulse', verifyPulse);\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1150,
        "y": 600,
        "wires": [
            [
                "3f54b582e3900f80"
            ]
        ],
        "icon": "font-awesome/fa-bars"
    },
    {
        "id": "3f54b582e3900f80",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "Production Machine",
        "func": "let startPulse = msg.conditions.startPulse;\nlet verifyPulse = msg.conditions.verifyPulse;\nlet serialNumber = msg.conditions.machine;\nlet payload = msg.payload;\nlet machine = context.get('machine') || null;\nlet startWorking = context.get('startWorking') || null;\nlet lastTimestamp = context.get('lastTimestamp') || null;\nlet currentTimestamp = new Date().getTime();\nlet sumWorkingTime = context.get('sumWorkingTime') || 0;\nlet sumIdleTime = context.get('sumIdleTime') || 0;\nlet pulseCount = context.get('pulseCount') || 0;\nlet currentStatus = context.get('currentStatus') || \"PARADA\";\nlet verifyWorking = context.get('verifyWorking') || false;\nlet resetShift = context.get('resetShift') || false;\n\nif (resetShift) {\n    pulseCount = 0;\n    sumWorkingTime = 0;\n    sumIdleTime = 0;\n\n    context.set('pulseCount', pulseCount);\n    context.set('sumWorkingTime', sumWorkingTime);\n    context.set('sumIdleTime', sumIdleTime);\n\n    resetShift = false;\n    context.set('resetShift', resetShift);\n}\n\nif (startPulse) {\n\n    startWorking = currentTimestamp;\n    context.set('startWorking', startWorking);\n\n    if (lastTimestamp !== null) {\n        let differenceTimeSignals = (currentTimestamp - lastTimestamp) / 1000;\n\n        if (differenceTimeSignals >= 300) {\n            sumIdleTime += differenceTimeSignals;\n            context.set('sumIdleTime', sumIdleTime);\n        }\n        else {\n            sumWorkingTime += differenceTimeSignals;\n            context.set('sumWorkingTime', sumWorkingTime);\n        }\n    }\n    currentStatus = \"TRABALHANDO\";\n    context.set('currentStatus', currentStatus);\n\n    verifyWorking = true;\n    context.set('verifyWorking', true);\n}\nelse if (startPulse == false) {\n    currentStatus = \"PARADA\";\n    context.set('currentStatus', currentStatus);\n}\n\nif (verifyPulse) {\n    pulseCount++;\n\n    lastTimestamp = currentTimestamp\n    context.set('lastTimestamp', lastTimestamp);\n\n    let timeWorking = (currentTimestamp - startWorking) / 1000;\n    sumWorkingTime += timeWorking;\n    context.set('sumWorkingTime', sumWorkingTime);\n\n}\n\nif (machine == null) {\n    machine = serialNumber;\n    context.set('machine', machine);\n}\n\nif (payload === \"reset\") {\n    resetShift = true;\n    context.set('resetShift', true);\n}\ncontext.set('pulseCount', pulseCount);\n\nmsg.data = {\n    pulse: pulseCount,\n    workingTime: sumWorkingTime.toFixed(3),\n    idleTime: sumIdleTime.toFixed(3),\n    status: currentStatus,\n    verifyWorking: verifyWorking,\n    lastTimestamp: lastTimestamp,\n    machine: machine,\n    reset: resetShift\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1380,
        "y": 600,
        "wires": [
            [
                "f73b4d2c7292838a",
                "c4db7a8143e04bdf"
            ]
        ],
        "icon": "font-awesome/fa-book"
    },
    {
        "id": "f73b4d2c7292838a",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "FSM-11",
        "func": "let workingTime = msg.data.workingTime;\nlet idleTime = msg.data.idleTime;\nlet press = msg.data.press;\nlet status = msg.data.status;\nlet reset = msg.data.reset;\nlet machine = msg.topic;\nlet workingTimeMinutes = context.get('workingTimeMinutes') || 0;\nlet idleTimeMinutes = context.get('idleTimeMinutes') || 0;\n\nfunction minutesToHours(totalMinutes) {\n    var hours = String(Math.floor(totalMinutes / 60)).padStart(2, \"0\");\n    var minutes = String(totalMinutes % 60).padStart(2, \"0\");\n\n    return `${hours}:${minutes}`;\n}\n\nif (reset == true) {\n    workingTimeMinutes = 0;\n    idleTimeMinutes = 0;\n\n    context.set('workingTimeMinutes', workingTimeMinutes);\n    context.set('idleTimeMinutes', 0);\n}\n\nif (workingTime > 0 || idleTime > 0) {\n    workingTimeMinutes = workingTime / 60;\n    idleTimeMinutes = idleTime / 60;\n}\n\nmsg.payload = {\n    press: press,\n    workingTimeMinutes: minutesToHours(workingTimeMinutes.toFixed(0)),\n    idleTimeMinutes: minutesToHours(idleTimeMinutes.toFixed(0)),\n    status: status,\n    deviceSerialNumber: machine\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1660,
        "y": 800,
        "wires": [
            []
        ],
        "icon": "font-awesome/fa-cogs"
    },
    {
        "id": "c4db7a8143e04bdf",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "verifyStatus",
        "func": "let verifyPC = msg.conditions.verifyPC;\nlet startPC = msg.conditions.startPC;\nlet lastTimestamp = msg.data.lastTimestamp;\nlet machine = msg.data.machine;\nlet status = msg.data.status;\nlet currentTimestamp = new Date();\nlet currentStatus = context.get('currentStatus') || null;\nlet differenceInSeconds = context.get('differenceInSeconds') || 0;\n\nif(lastTimestamp !== null) {\n\n    differenceInSeconds = (currentTimestamp.getTime() - lastTimestamp) / 1000;\n    context.set('differenceInSeconds', differenceInSeconds);\n\n    if(differenceInSeconds >= 300 && (!startPC && !verifyPC) && status == \"PARADA\") {\n        currentStatus = \"PARADA\";\n        context.set('currentStatus', currentStatus);\n    }\n\n    if ((differenceInSeconds <= 299) || (startPC == true || verifyPC == true) || (status == \"TRABALHANDO\")) {\n        currentStatus = \"TRABALHANDO\";\n        context.set('currentStatus', currentStatus);\n    }\n\n    else if (differenceInSeconds >= 1800) {\n        currentStatus = \"DESLIGADO\";\n        context.set('currentStatus', currentStatus);\n    }\n}\nelse if( lastTimestamp == null && status == \"PARADA\") {\n    currentStatus = \"DESLIGADO\";\n    context.set('currentStatus', currentStatus);\n}\nmsg.status = {\n    time: differenceInSeconds,\n    machine: machine,\n    currentStatus: currentStatus\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1670,
        "y": 840,
        "wires": [
            [
                "371b8668afea80f2"
            ]
        ],
        "icon": "node-red/status.svg"
    },
    {
        "id": "1f025c7b025e0bed",
        "type": "change",
        "z": "dae82ca7554ded9f",
        "name": "delete time",
        "rules": [
            {
                "t": "delete",
                "p": "payload.timestamp",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.StatusSNS.Time",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.StatusSNS.Switch2",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.StatusSNS.Switch3",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.StatusSNS.Switch4",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 630,
        "y": 600,
        "wires": [
            [
                "5797a3c9143213b9"
            ]
        ],
        "icon": "font-awesome/fa-times-circle"
    },
    {
        "id": "371b8668afea80f2",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "FormatedMessage",
        "func": "let machine = msg.status.machine;\nlet timestamp = new Date().getTime();\nlet currentStatus = context.get('currentStatus') || null; \nlet oldStatus = msg.status.currentStatus;\n\nif(!currentStatus || currentStatus !== oldStatus) {\n    currentStatus = oldStatus;\n    context.set('currentStatus', currentStatus);\n\n    msg.payload = {\n            timestamp: timestamp,\n            deviceSerialNumber: machine,\n            status: currentStatus\n    }\n    return msg;\n}\nreturn null;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1690,
        "y": 880,
        "wires": [
            []
        ],
        "icon": "font-awesome/fa-envelope"
    },
    {
        "id": "5797a3c9143213b9",
        "type": "rbe",
        "z": "dae82ca7554ded9f",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 790,
        "y": 600,
        "wires": [
            [
                "dc4fee6627927e6a"
            ]
        ]
    },
    {
        "id": "65a75958dc08ef21",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "Switch State",
        "func": "let payload = msg.payload; \nlet switch1 = context.get('switch1') || null;\n\nif ((payload.Switch1 && payload.Switch1.Action == \"ON\") || (payload.StatusSNS && payload.StatusSNS.Switch1 == \"ON\")) {\n    context.set('switch1', \"ON\");\n}\nif ((payload.Switch1 && payload.Switch1.Action == \"OFF\") || (payload.StatusSNS && payload.StatusSNS.Switch1 == \"OFF\") && switch1 == \"ON\") {\n    context.set('switch1', \"OFF\");\n}\nmsg.switches = {\n    switch1: context.get('switch1')\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 640,
        "wires": [
            [
                "b4311caed146b50c"
            ]
        ],
        "icon": "node-red/swap.svg"
    },
    {
        "id": "2fb84e249f024855",
        "type": "switch",
        "z": "dae82ca7554ded9f",
        "name": "OPTION SW",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "hask",
                "v": "Switch1",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "StatusSNS",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 450,
        "y": 640,
        "wires": [
            [
                "3cee9ab8c25aa53c"
            ],
            [
                "3cee9ab8c25aa53c"
            ]
        ]
    },
    {
        "id": "b4311caed146b50c",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "Conditions Machine",
        "func": "let switch1 = msg.switches.switch1 || null;\nlet serialNumber = msg.payload.serialNumber;\nlet verifyPulse = context.get('verifyPulse') || false; /* verifica se o pulso foi finalizado  */\nlet startPulse = context.get('startPulse') || false; /* verifica se o gatilho da solda est√° pressionada foi iniciada */\n\nif (switch1 == \"ON\") { /* momento em que o gatilho do laser √© pressionado*/\n    startPulse = true;\n    context.set('startPulse', startPulse);\n}\n\nif (switch1 == \"OFF\" && startPulse) { /* momento em que o gatilho do laser √© solto */\n    verifyPulse = true;\n    startPulse = false;\n\n    context.set('verifyPulse', verifyPulse);\n    context.set('startPulse', startPulse);\n}\n\nmsg.conditions = {\n    verifyPulse: verifyPulse,\n    startPulse: startPulse,\n    machine: serialNumber\n}\n\nif (verifyPulse) {\n    verifyPulse = false;\n    context.set('verifyPulse', verifyPulse);\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1150,
        "y": 640,
        "wires": [
            [
                "3a9918d2db7b8c6b"
            ]
        ],
        "icon": "font-awesome/fa-bars"
    },
    {
        "id": "3a9918d2db7b8c6b",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "Production Machine",
        "func": "let startPulse = msg.conditions.startPulse;\nlet verifyPulse = msg.conditions.verifyPulse;\nlet serialNumber = msg.conditions.machine;\nlet payload = msg.payload;\nlet machine = context.get('machine') || null;\nlet startWorking = context.get('startWorking') || null;\nlet lastTimestamp = context.get('lastTimestamp') || null;\nlet currentTimestamp = new Date().getTime();\nlet sumWorkingTime = context.get('sumWorkingTime') || 0;\nlet sumIdleTime = context.get('sumIdleTime') || 0;\nlet pulseCount = context.get('pulseCount') || 0;\nlet currentStatus = context.get('currentStatus') || \"PARADA\";\nlet verifyWorking = context.get('verifyWorking') || false;\nlet resetShift = context.get('resetShift') || false;\n\nif (resetShift) {\n    pulseCount = 0;\n    sumWorkingTime = 0;\n    sumIdleTime = 0;\n\n    context.set('pulseCount', pulseCount);\n    context.set('sumWorkingTime', sumWorkingTime);\n    context.set('sumIdleTime', sumIdleTime);\n\n    resetShift = false;\n    context.set('resetShift', resetShift);\n}\n\nif (startPulse) {\n\n    startWorking = currentTimestamp;\n    context.set('startWorking', startWorking);\n\n    if (lastTimestamp !== null) {\n        let differenceTimeSignals = (currentTimestamp - lastTimestamp) / 1000;\n\n        if (differenceTimeSignals >= 300) {\n            sumIdleTime += differenceTimeSignals;\n            context.set('sumIdleTime', sumIdleTime);\n        }\n        else {\n            sumWorkingTime += differenceTimeSignals;\n            context.set('sumWorkingTime', sumWorkingTime);\n        }\n    }\n    currentStatus = \"TRABALHANDO\";\n    context.set('currentStatus', currentStatus);\n\n    verifyWorking = true;\n    context.set('verifyWorking', true);\n}\nelse if (startPulse == false) {\n    currentStatus = \"PARADA\";\n    context.set('currentStatus', currentStatus);\n}\n\nif (verifyPulse) {\n    pulseCount++;\n\n    lastTimestamp = currentTimestamp\n    context.set('lastTimestamp', lastTimestamp);\n\n    let timeWorking = (currentTimestamp - startWorking) / 1000;\n    sumWorkingTime += timeWorking;\n    context.set('sumWorkingTime', sumWorkingTime);\n\n}\n\nif (machine == null) {\n    machine = serialNumber;\n    context.set('machine', machine);\n}\n\nif (payload === \"reset\") {\n    resetShift = true;\n    context.set('resetShift', true);\n}\ncontext.set('pulseCount', pulseCount);\n\nmsg.data = {\n    pulse: pulseCount,\n    workingTime: sumWorkingTime.toFixed(3),\n    idleTime: sumIdleTime.toFixed(3),\n    status: currentStatus,\n    verifyWorking: verifyWorking,\n    lastTimestamp: lastTimestamp,\n    machine: machine,\n    reset: resetShift\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1380,
        "y": 640,
        "wires": [
            [
                "7186f1b3ba761d17",
                "1c9b99f3d68cf3ab"
            ]
        ],
        "icon": "font-awesome/fa-book"
    },
    {
        "id": "7186f1b3ba761d17",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "FST- 01",
        "func": "let workingTime = msg.data.workingTime;\nlet idleTime = msg.data.idleTime;\nlet press = msg.data.press;\nlet status = msg.data.status;\nlet reset = msg.data.reset;\nlet machine = msg.topic;\nlet workingTimeMinutes = context.get('workingTimeMinutes') || 0;\nlet idleTimeMinutes = context.get('idleTimeMinutes') || 0;\n\nfunction minutesToHours(totalMinutes) {\n    var hours = String(Math.floor(totalMinutes / 60)).padStart(2, \"0\");\n    var minutes = String(totalMinutes % 60).padStart(2, \"0\");\n\n    return `${hours}:${minutes}`;\n}\n\nif (reset == true) {\n    workingTimeMinutes = 0;\n    idleTimeMinutes = 0;\n\n    context.set('workingTimeMinutes', workingTimeMinutes);\n    context.set('idleTimeMinutes', 0);\n}\n\nif (workingTime > 0 || idleTime > 0) {\n    workingTimeMinutes = workingTime / 60;\n    idleTimeMinutes = idleTime / 60;\n}\n\nmsg.payload = {\n    press: press,\n    workingTimeMinutes: minutesToHours(workingTimeMinutes.toFixed(0)),\n    idleTimeMinutes: minutesToHours(idleTimeMinutes.toFixed(0)),\n    status: status,\n    deviceSerialNumber: machine\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1660,
        "y": 940,
        "wires": [
            []
        ],
        "icon": "font-awesome/fa-cogs"
    },
    {
        "id": "1c9b99f3d68cf3ab",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "verifyStatus",
        "func": "let verifyPC = msg.conditions.verifyPC;\nlet startPC = msg.conditions.startPC;\nlet lastTimestamp = msg.data.lastTimestamp;\nlet machine = msg.data.machine;\nlet status = msg.data.status;\nlet currentTimestamp = new Date();\nlet currentStatus = context.get('currentStatus') || null;\nlet differenceInSeconds = context.get('differenceInSeconds') || 0;\n\nif(lastTimestamp !== null) {\n\n    differenceInSeconds = (currentTimestamp.getTime() - lastTimestamp) / 1000;\n    context.set('differenceInSeconds', differenceInSeconds);\n\n    if(differenceInSeconds >= 300 && (!startPC && !verifyPC) && status == \"PARADA\") {\n        currentStatus = \"PARADA\";\n        context.set('currentStatus', currentStatus);\n    }\n\n    if ((differenceInSeconds <= 299) || (startPC == true || verifyPC == true) || (status == \"TRABALHANDO\")) {\n        currentStatus = \"TRABALHANDO\";\n        context.set('currentStatus', currentStatus);\n    }\n\n    else if (differenceInSeconds >= 1800) {\n        currentStatus = \"DESLIGADO\";\n        context.set('currentStatus', currentStatus);\n    }\n}\nelse if( lastTimestamp == null && status == \"PARADA\") {\n    currentStatus = \"DESLIGADO\";\n    context.set('currentStatus', currentStatus);\n}\nmsg.status = {\n    time: differenceInSeconds,\n    machine: machine,\n    currentStatus: currentStatus\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1670,
        "y": 980,
        "wires": [
            [
                "9b723476cc11a87f"
            ]
        ],
        "icon": "node-red/status.svg"
    },
    {
        "id": "3cee9ab8c25aa53c",
        "type": "change",
        "z": "dae82ca7554ded9f",
        "name": "delete time",
        "rules": [
            {
                "t": "delete",
                "p": "payload.timestamp",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.StatusSNS.Time",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.StatusSNS.Switch2",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.StatusSNS.Switch3",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.StatusSNS.Switch4",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 630,
        "y": 640,
        "wires": [
            [
                "33defa460d0d353b"
            ]
        ],
        "icon": "font-awesome/fa-times-circle"
    },
    {
        "id": "9b723476cc11a87f",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "FormatedMessage",
        "func": "let machine = msg.status.machine;\nlet timestamp = new Date().getTime();\nlet currentStatus = context.get('currentStatus') || null; \nlet oldStatus = msg.status.currentStatus;\n\nif(!currentStatus || currentStatus !== oldStatus) {\n    currentStatus = oldStatus;\n    context.set('currentStatus', currentStatus);\n\n    msg.payload = {\n            timestamp: timestamp,\n            deviceSerialNumber: machine,\n            status: currentStatus\n    }\n    return msg;\n}\nreturn null;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1690,
        "y": 1020,
        "wires": [
            []
        ],
        "icon": "font-awesome/fa-envelope"
    },
    {
        "id": "33defa460d0d353b",
        "type": "rbe",
        "z": "dae82ca7554ded9f",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 790,
        "y": 640,
        "wires": [
            [
                "65a75958dc08ef21"
            ]
        ]
    },
    {
        "id": "0730211b61036a1b",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "Switch State",
        "func": "let payload = msg.payload; \nlet switch1 = context.get('switch1') || null;\n\nif ((payload.Switch1 && payload.Switch1.Action == \"ON\") || (payload.StatusSNS && payload.StatusSNS.Switch1 == \"ON\")) {\n    context.set('switch1', \"ON\");\n}\nif ((payload.Switch1 && payload.Switch1.Action == \"OFF\") || (payload.StatusSNS && payload.StatusSNS.Switch1 == \"OFF\") && switch1 == \"ON\") {\n    context.set('switch1', \"OFF\");\n}\nmsg.switches = {\n    switch1: context.get('switch1')\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 680,
        "wires": [
            [
                "c219b09997c558d7"
            ]
        ],
        "icon": "node-red/swap.svg"
    },
    {
        "id": "f6c08cf79ee7ee79",
        "type": "switch",
        "z": "dae82ca7554ded9f",
        "name": "OPTION SW",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "hask",
                "v": "Switch1",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "StatusSNS",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 450,
        "y": 680,
        "wires": [
            [
                "8798d534c8fde99f"
            ],
            [
                "8798d534c8fde99f"
            ]
        ]
    },
    {
        "id": "c219b09997c558d7",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "Conditions Machine",
        "func": "let switch1 = msg.switches.switch1 || null;\nlet serialNumber = msg.payload.serialNumber;\nlet verifyPulse = context.get('verifyPulse') || false; /* verifica se o pulso foi finalizado  */\nlet startPulse = context.get('startPulse') || false; /* verifica se o gatilho da solda est√° pressionada foi iniciada */\n\nif (switch1 == \"ON\") { /* momento em que o gatilho do laser √© pressionado*/\n    startPulse = true;\n    context.set('startPulse', startPulse);\n}\n\nif (switch1 == \"OFF\" && startPulse) { /* momento em que o gatilho do laser √© solto */\n    verifyPulse = true;\n    startPulse = false;\n\n    context.set('verifyPulse', verifyPulse);\n    context.set('startPulse', startPulse);\n}\n\nmsg.conditions = {\n    verifyPulse: verifyPulse,\n    startPulse: startPulse,\n    machine: serialNumber\n}\n\nif (verifyPulse) {\n    verifyPulse = false;\n    context.set('verifyPulse', verifyPulse);\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1150,
        "y": 680,
        "wires": [
            [
                "7938c1b51c11e10a"
            ]
        ],
        "icon": "font-awesome/fa-bars"
    },
    {
        "id": "7938c1b51c11e10a",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "Production Machine",
        "func": "let startPulse = msg.conditions.startPulse;\nlet verifyPulse = msg.conditions.verifyPulse;\nlet serialNumber = msg.conditions.machine;\nlet payload = msg.payload;\nlet machine = context.get('machine') || null;\nlet startWorking = context.get('startWorking') || null;\nlet lastTimestamp = context.get('lastTimestamp') || null;\nlet currentTimestamp = new Date().getTime();\nlet sumWorkingTime = context.get('sumWorkingTime') || 0;\nlet sumIdleTime = context.get('sumIdleTime') || 0;\nlet pulseCount = context.get('pulseCount') || 0;\nlet currentStatus = context.get('currentStatus') || \"PARADA\";\nlet verifyWorking = context.get('verifyWorking') || false;\nlet resetShift = context.get('resetShift') || false;\n\nif (resetShift) {\n    pulseCount = 0;\n    sumWorkingTime = 0;\n    sumIdleTime = 0;\n\n    context.set('pulseCount', pulseCount);\n    context.set('sumWorkingTime', sumWorkingTime);\n    context.set('sumIdleTime', sumIdleTime);\n\n    resetShift = false;\n    context.set('resetShift', resetShift);\n}\n\nif (startPulse) {\n\n    startWorking = currentTimestamp;\n    context.set('startWorking', startWorking);\n\n    if (lastTimestamp !== null) {\n        let differenceTimeSignals = (currentTimestamp - lastTimestamp) / 1000;\n\n        if (differenceTimeSignals >= 300) {\n            sumIdleTime += differenceTimeSignals;\n            context.set('sumIdleTime', sumIdleTime);\n        }\n        else {\n            sumWorkingTime += differenceTimeSignals;\n            context.set('sumWorkingTime', sumWorkingTime);\n        }\n    }\n    currentStatus = \"TRABALHANDO\";\n    context.set('currentStatus', currentStatus);\n\n    verifyWorking = true;\n    context.set('verifyWorking', true);\n}\nelse if (startPulse == false) {\n    currentStatus = \"PARADA\";\n    context.set('currentStatus', currentStatus);\n}\n\nif (verifyPulse) {\n    pulseCount++;\n\n    lastTimestamp = currentTimestamp\n    context.set('lastTimestamp', lastTimestamp);\n\n    let timeWorking = (currentTimestamp - startWorking) / 1000;\n    sumWorkingTime += timeWorking;\n    context.set('sumWorkingTime', sumWorkingTime);\n\n}\n\nif (machine == null) {\n    machine = serialNumber;\n    context.set('machine', machine);\n}\n\nif (payload === \"reset\") {\n    resetShift = true;\n    context.set('resetShift', true);\n}\ncontext.set('pulseCount', pulseCount);\n\nmsg.data = {\n    pulse: pulseCount,\n    workingTime: sumWorkingTime.toFixed(3),\n    idleTime: sumIdleTime.toFixed(3),\n    status: currentStatus,\n    verifyWorking: verifyWorking,\n    lastTimestamp: lastTimestamp,\n    machine: machine,\n    reset: resetShift\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1380,
        "y": 680,
        "wires": [
            [
                "277a6bd81385717a",
                "1ed8ad4144a376f0"
            ]
        ],
        "icon": "font-awesome/fa-book"
    },
    {
        "id": "277a6bd81385717a",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "FSM-01 03",
        "func": "let workingTime = msg.data.workingTime;\nlet idleTime = msg.data.idleTime;\nlet press = msg.data.press;\nlet status = msg.data.status;\nlet reset = msg.data.reset;\nlet machine = msg.topic;\nlet workingTimeMinutes = context.get('workingTimeMinutes') || 0;\nlet idleTimeMinutes = context.get('idleTimeMinutes') || 0;\n\nfunction minutesToHours(totalMinutes) {\n    var hours = String(Math.floor(totalMinutes / 60)).padStart(2, \"0\");\n    var minutes = String(totalMinutes % 60).padStart(2, \"0\");\n\n    return `${hours}:${minutes}`;\n}\n\nif (reset == true) {\n    workingTimeMinutes = 0;\n    idleTimeMinutes = 0;\n\n    context.set('workingTimeMinutes', workingTimeMinutes);\n    context.set('idleTimeMinutes', 0);\n}\n\nif (workingTime > 0 || idleTime > 0) {\n    workingTimeMinutes = workingTime / 60;\n    idleTimeMinutes = idleTime / 60;\n}\n\nmsg.payload = {\n    press: press,\n    workingTimeMinutes: minutesToHours(workingTimeMinutes.toFixed(0)),\n    idleTimeMinutes: minutesToHours(idleTimeMinutes.toFixed(0)),\n    status: status,\n    deviceSerialNumber: machine\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1670,
        "y": 1080,
        "wires": [
            []
        ],
        "icon": "font-awesome/fa-cogs"
    },
    {
        "id": "1ed8ad4144a376f0",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "verifyStatus",
        "func": "let verifyPC = msg.conditions.verifyPC;\nlet startPC = msg.conditions.startPC;\nlet lastTimestamp = msg.data.lastTimestamp;\nlet machine = msg.data.machine;\nlet status = msg.data.status;\nlet currentTimestamp = new Date();\nlet currentStatus = context.get('currentStatus') || null;\nlet differenceInSeconds = context.get('differenceInSeconds') || 0;\n\nif(lastTimestamp !== null) {\n\n    differenceInSeconds = (currentTimestamp.getTime() - lastTimestamp) / 1000;\n    context.set('differenceInSeconds', differenceInSeconds);\n\n    if(differenceInSeconds >= 300 && (!startPC && !verifyPC) && status == \"PARADA\") {\n        currentStatus = \"PARADA\";\n        context.set('currentStatus', currentStatus);\n    }\n\n    if ((differenceInSeconds <= 299) || (startPC == true || verifyPC == true) || (status == \"TRABALHANDO\")) {\n        currentStatus = \"TRABALHANDO\";\n        context.set('currentStatus', currentStatus);\n    }\n\n    else if (differenceInSeconds >= 1800) {\n        currentStatus = \"DESLIGADO\";\n        context.set('currentStatus', currentStatus);\n    }\n}\nelse if( lastTimestamp == null && status == \"PARADA\") {\n    currentStatus = \"DESLIGADO\";\n    context.set('currentStatus', currentStatus);\n}\nmsg.status = {\n    time: differenceInSeconds,\n    machine: machine,\n    currentStatus: currentStatus\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1670,
        "y": 1120,
        "wires": [
            [
                "b58708e7ebb4bb37"
            ]
        ],
        "icon": "node-red/status.svg"
    },
    {
        "id": "8798d534c8fde99f",
        "type": "change",
        "z": "dae82ca7554ded9f",
        "name": "delete time",
        "rules": [
            {
                "t": "delete",
                "p": "payload.timestamp",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.StatusSNS.Time",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.StatusSNS.Switch2",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.StatusSNS.Switch3",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.StatusSNS.Switch4",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 630,
        "y": 680,
        "wires": [
            [
                "add0eacc8e54e650"
            ]
        ],
        "icon": "font-awesome/fa-times-circle"
    },
    {
        "id": "b58708e7ebb4bb37",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "FormatedMessage",
        "func": "let machine = msg.status.machine;\nlet timestamp = new Date().getTime();\nlet currentStatus = context.get('currentStatus') || null; \nlet oldStatus = msg.status.currentStatus;\n\nif(!currentStatus || currentStatus !== oldStatus) {\n    currentStatus = oldStatus;\n    context.set('currentStatus', currentStatus);\n\n    msg.payload = {\n            timestamp: timestamp,\n            deviceSerialNumber: machine,\n            status: currentStatus\n    }\n    return msg;\n}\nreturn null;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1690,
        "y": 1160,
        "wires": [
            []
        ],
        "icon": "font-awesome/fa-envelope"
    },
    {
        "id": "add0eacc8e54e650",
        "type": "rbe",
        "z": "dae82ca7554ded9f",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 790,
        "y": 680,
        "wires": [
            [
                "0730211b61036a1b"
            ]
        ]
    },
    {
        "id": "81fa5ee9974b5001",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "Switch State",
        "func": "let payload = msg.payload; \nlet switch1 = context.get('switch1') || null;\n\nif ((payload.Switch1 && payload.Switch1.Action == \"ON\") || (payload.StatusSNS && payload.StatusSNS.Switch1 == \"ON\")) {\n    context.set('switch1', \"ON\");\n}\nif ((payload.Switch1 && payload.Switch1.Action == \"OFF\") || (payload.StatusSNS && payload.StatusSNS.Switch1 == \"OFF\") && switch1 == \"ON\") {\n    context.set('switch1', \"OFF\");\n}\nmsg.switches = {\n    switch1: context.get('switch1')\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 720,
        "wires": [
            [
                "80af635fc362d492"
            ]
        ],
        "icon": "node-red/swap.svg"
    },
    {
        "id": "8467d684bdd1ca14",
        "type": "switch",
        "z": "dae82ca7554ded9f",
        "name": "OPTION SW",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "hask",
                "v": "Switch1",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "StatusSNS",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 450,
        "y": 720,
        "wires": [
            [
                "91944c1f9d5b3878"
            ],
            [
                "91944c1f9d5b3878"
            ]
        ]
    },
    {
        "id": "80af635fc362d492",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "Conditions Machine",
        "func": "let switch1 = msg.switches.switch1 || null;\nlet serialNumber = msg.payload.serialNumber;\nlet verifyPulse = context.get('verifyPulse') || false; /* verifica se o pulso foi finalizado  */\nlet startPulse = context.get('startPulse') || false; /* verifica se o gatilho da solda est√° pressionada foi iniciada */\n\nif (switch1 == \"ON\") { /* momento em que o gatilho do laser √© pressionado*/\n    startPulse = true;\n    context.set('startPulse', startPulse);\n}\n\nif (switch1 == \"OFF\" && startPulse) { /* momento em que o gatilho do laser √© solto */\n    verifyPulse = true;\n    startPulse = false;\n\n    context.set('verifyPulse', verifyPulse);\n    context.set('startPulse', startPulse);\n}\n\nmsg.conditions = {\n    verifyPulse: verifyPulse,\n    startPulse: startPulse,\n    machine: serialNumber\n}\n\nif (verifyPulse) {\n    verifyPulse = false;\n    context.set('verifyPulse', verifyPulse);\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1150,
        "y": 720,
        "wires": [
            [
                "9a1311f731643e64"
            ]
        ],
        "icon": "font-awesome/fa-bars"
    },
    {
        "id": "9a1311f731643e64",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "Production Machine",
        "func": "let startPulse = msg.conditions.startPulse;\nlet verifyPulse = msg.conditions.verifyPulse;\nlet serialNumber = msg.conditions.machine;\nlet payload = msg.payload;\nlet machine = context.get('machine') || null;\nlet startWorking = context.get('startWorking') || null;\nlet lastTimestamp = context.get('lastTimestamp') || null;\nlet currentTimestamp = new Date().getTime();\nlet sumWorkingTime = context.get('sumWorkingTime') || 0;\nlet sumIdleTime = context.get('sumIdleTime') || 0;\nlet pulseCount = context.get('pulseCount') || 0;\nlet currentStatus = context.get('currentStatus') || \"PARADA\";\nlet verifyWorking = context.get('verifyWorking') || false;\nlet resetShift = context.get('resetShift') || false;\n\nif (resetShift) {\n    pulseCount = 0;\n    sumWorkingTime = 0;\n    sumIdleTime = 0;\n\n    context.set('pulseCount', pulseCount);\n    context.set('sumWorkingTime', sumWorkingTime);\n    context.set('sumIdleTime', sumIdleTime);\n\n    resetShift = false;\n    context.set('resetShift', resetShift);\n}\n\nif (startPulse) {\n\n    startWorking = currentTimestamp;\n    context.set('startWorking', startWorking);\n\n    if (lastTimestamp !== null) {\n        let differenceTimeSignals = (currentTimestamp - lastTimestamp) / 1000;\n\n        if (differenceTimeSignals >= 300) {\n            sumIdleTime += differenceTimeSignals;\n            context.set('sumIdleTime', sumIdleTime);\n        }\n        else {\n            sumWorkingTime += differenceTimeSignals;\n            context.set('sumWorkingTime', sumWorkingTime);\n        }\n    }\n    currentStatus = \"TRABALHANDO\";\n    context.set('currentStatus', currentStatus);\n\n    verifyWorking = true;\n    context.set('verifyWorking', true);\n}\nelse if (startPulse == false) {\n    currentStatus = \"PARADA\";\n    context.set('currentStatus', currentStatus);\n}\n\nif (verifyPulse) {\n    pulseCount++;\n\n    lastTimestamp = currentTimestamp\n    context.set('lastTimestamp', lastTimestamp);\n\n    let timeWorking = (currentTimestamp - startWorking) / 1000;\n    sumWorkingTime += timeWorking;\n    context.set('sumWorkingTime', sumWorkingTime);\n\n}\n\nif (machine == null) {\n    machine = serialNumber;\n    context.set('machine', machine);\n}\n\nif (payload === \"reset\") {\n    resetShift = true;\n    context.set('resetShift', true);\n}\ncontext.set('pulseCount', pulseCount);\n\nmsg.data = {\n    pulse: pulseCount,\n    workingTime: sumWorkingTime.toFixed(3),\n    idleTime: sumIdleTime.toFixed(3),\n    status: currentStatus,\n    verifyWorking: verifyWorking,\n    lastTimestamp: lastTimestamp,\n    machine: machine,\n    reset: resetShift\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1380,
        "y": 720,
        "wires": [
            [
                "123e0e3a50fb3063",
                "343ac39daa711427"
            ]
        ],
        "icon": "font-awesome/fa-book"
    },
    {
        "id": "123e0e3a50fb3063",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "FSM-08",
        "func": "let workingTime = msg.data.workingTime;\nlet idleTime = msg.data.idleTime;\nlet press = msg.data.press;\nlet status = msg.data.status;\nlet reset = msg.data.reset;\nlet machine = msg.topic;\nlet workingTimeMinutes = context.get('workingTimeMinutes') || 0;\nlet idleTimeMinutes = context.get('idleTimeMinutes') || 0;\n\nfunction minutesToHours(totalMinutes) {\n    var hours = String(Math.floor(totalMinutes / 60)).padStart(2, \"0\");\n    var minutes = String(totalMinutes % 60).padStart(2, \"0\");\n\n    return `${hours}:${minutes}`;\n}\n\nif (reset == true) {\n    workingTimeMinutes = 0;\n    idleTimeMinutes = 0;\n\n    context.set('workingTimeMinutes', workingTimeMinutes);\n    context.set('idleTimeMinutes', 0);\n}\n\nif (workingTime > 0 || idleTime > 0) {\n    workingTimeMinutes = workingTime / 60;\n    idleTimeMinutes = idleTime / 60;\n}\n\nmsg.payload = {\n    press: press,\n    workingTimeMinutes: minutesToHours(workingTimeMinutes.toFixed(0)),\n    idleTimeMinutes: minutesToHours(idleTimeMinutes.toFixed(0)),\n    status: status,\n    deviceSerialNumber: machine\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1660,
        "y": 1220,
        "wires": [
            []
        ],
        "icon": "font-awesome/fa-cogs"
    },
    {
        "id": "343ac39daa711427",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "verifyStatus",
        "func": "let verifyPC = msg.conditions.verifyPC;\nlet startPC = msg.conditions.startPC;\nlet lastTimestamp = msg.data.lastTimestamp;\nlet machine = msg.data.machine;\nlet status = msg.data.status;\nlet currentTimestamp = new Date();\nlet currentStatus = context.get('currentStatus') || null;\nlet differenceInSeconds = context.get('differenceInSeconds') || 0;\n\nif(lastTimestamp !== null) {\n\n    differenceInSeconds = (currentTimestamp.getTime() - lastTimestamp) / 1000;\n    context.set('differenceInSeconds', differenceInSeconds);\n\n    if(differenceInSeconds >= 300 && (!startPC && !verifyPC) && status == \"PARADA\") {\n        currentStatus = \"PARADA\";\n        context.set('currentStatus', currentStatus);\n    }\n\n    if ((differenceInSeconds <= 299) || (startPC == true || verifyPC == true) || (status == \"TRABALHANDO\")) {\n        currentStatus = \"TRABALHANDO\";\n        context.set('currentStatus', currentStatus);\n    }\n\n    else if (differenceInSeconds >= 1800) {\n        currentStatus = \"DESLIGADO\";\n        context.set('currentStatus', currentStatus);\n    }\n}\nelse if( lastTimestamp == null && status == \"PARADA\") {\n    currentStatus = \"DESLIGADO\";\n    context.set('currentStatus', currentStatus);\n}\nmsg.status = {\n    time: differenceInSeconds,\n    machine: machine,\n    currentStatus: currentStatus\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1670,
        "y": 1260,
        "wires": [
            [
                "ab11dbd8cd0736d5"
            ]
        ],
        "icon": "node-red/status.svg"
    },
    {
        "id": "91944c1f9d5b3878",
        "type": "change",
        "z": "dae82ca7554ded9f",
        "name": "delete time",
        "rules": [
            {
                "t": "delete",
                "p": "payload.timestamp",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.StatusSNS.Time",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.StatusSNS.Switch2",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.StatusSNS.Switch3",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.StatusSNS.Switch4",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 630,
        "y": 720,
        "wires": [
            [
                "3203b29c8d26e9dd"
            ]
        ],
        "icon": "font-awesome/fa-times-circle"
    },
    {
        "id": "ab11dbd8cd0736d5",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "FormatedMessage",
        "func": "let machine = msg.status.machine;\nlet timestamp = new Date().getTime();\nlet currentStatus = context.get('currentStatus') || null; \nlet oldStatus = msg.status.currentStatus;\n\nif(!currentStatus || currentStatus !== oldStatus) {\n    currentStatus = oldStatus;\n    context.set('currentStatus', currentStatus);\n\n    msg.payload = {\n            timestamp: timestamp,\n            deviceSerialNumber: machine,\n            status: currentStatus\n    }\n    return msg;\n}\nreturn null;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1690,
        "y": 1300,
        "wires": [
            []
        ],
        "icon": "font-awesome/fa-envelope"
    },
    {
        "id": "3203b29c8d26e9dd",
        "type": "rbe",
        "z": "dae82ca7554ded9f",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 790,
        "y": 720,
        "wires": [
            [
                "81fa5ee9974b5001"
            ]
        ]
    },
    {
        "id": "20ec5a38aaf93bf0",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "Switch State",
        "func": "let payload = msg.payload; \nlet switch1 = context.get('switch1') || null;\n\nif ((payload.Switch1 && payload.Switch1.Action == \"ON\") || (payload.StatusSNS && payload.StatusSNS.Switch1 == \"ON\")) {\n    context.set('switch1', \"ON\");\n}\nif ((payload.Switch1 && payload.Switch1.Action == \"OFF\") || (payload.StatusSNS && payload.StatusSNS.Switch1 == \"OFF\") && switch1 == \"ON\") {\n    context.set('switch1', \"OFF\");\n}\nmsg.switches = {\n    switch1: context.get('switch1')\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 760,
        "wires": [
            [
                "8313072d2a7b1610"
            ]
        ],
        "icon": "node-red/swap.svg"
    },
    {
        "id": "74a3b32666571ea3",
        "type": "switch",
        "z": "dae82ca7554ded9f",
        "name": "OPTION SW",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "hask",
                "v": "Switch1",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "StatusSNS",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 450,
        "y": 760,
        "wires": [
            [
                "72f5438f1e869c6c"
            ],
            [
                "72f5438f1e869c6c"
            ]
        ]
    },
    {
        "id": "8313072d2a7b1610",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "Conditions Machine",
        "func": "let switch1 = msg.switches.switch1 || null;\nlet serialNumber = msg.payload.serialNumber;\nlet verifyPulse = context.get('verifyPulse') || false; /* verifica se o pulso foi finalizado  */\nlet startPulse = context.get('startPulse') || false; /* verifica se o gatilho da solda est√° pressionada foi iniciada */\n\nif (switch1 == \"ON\") { /* momento em que o gatilho do laser √© pressionado*/\n    startPulse = true;\n    context.set('startPulse', startPulse);\n}\n\nif (switch1 == \"OFF\" && startPulse) { /* momento em que o gatilho do laser √© solto */\n    verifyPulse = true;\n    startPulse = false;\n\n    context.set('verifyPulse', verifyPulse);\n    context.set('startPulse', startPulse);\n}\n\nmsg.conditions = {\n    verifyPulse: verifyPulse,\n    startPulse: startPulse,\n    machine: serialNumber\n}\n\nif (verifyPulse) {\n    verifyPulse = false;\n    context.set('verifyPulse', verifyPulse);\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1150,
        "y": 760,
        "wires": [
            [
                "fe8528a00573bbb2"
            ]
        ],
        "icon": "font-awesome/fa-bars"
    },
    {
        "id": "fe8528a00573bbb2",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "Production Machine",
        "func": "let startPulse = msg.conditions.startPulse;\nlet verifyPulse = msg.conditions.verifyPulse;\nlet serialNumber = msg.conditions.machine;\nlet payload = msg.payload;\nlet machine = context.get('machine') || null;\nlet startWorking = context.get('startWorking') || null;\nlet lastTimestamp = context.get('lastTimestamp') || null;\nlet currentTimestamp = new Date().getTime();\nlet sumWorkingTime = context.get('sumWorkingTime') || 0;\nlet sumIdleTime = context.get('sumIdleTime') || 0;\nlet pulseCount = context.get('pulseCount') || 0;\nlet currentStatus = context.get('currentStatus') || \"PARADA\";\nlet verifyWorking = context.get('verifyWorking') || false;\nlet resetShift = context.get('resetShift') || false;\n\nif (resetShift) {\n    pulseCount = 0;\n    sumWorkingTime = 0;\n    sumIdleTime = 0;\n\n    context.set('pulseCount', pulseCount);\n    context.set('sumWorkingTime', sumWorkingTime);\n    context.set('sumIdleTime', sumIdleTime);\n\n    resetShift = false;\n    context.set('resetShift', resetShift);\n}\n\nif (startPulse) {\n\n    startWorking = currentTimestamp;\n    context.set('startWorking', startWorking);\n\n    if (lastTimestamp !== null) {\n        let differenceTimeSignals = (currentTimestamp - lastTimestamp) / 1000;\n\n        if (differenceTimeSignals >= 300) {\n            sumIdleTime += differenceTimeSignals;\n            context.set('sumIdleTime', sumIdleTime);\n        }\n        else {\n            sumWorkingTime += differenceTimeSignals;\n            context.set('sumWorkingTime', sumWorkingTime);\n        }\n    }\n    currentStatus = \"TRABALHANDO\";\n    context.set('currentStatus', currentStatus);\n\n    verifyWorking = true;\n    context.set('verifyWorking', true);\n}\nelse if (startPulse == false) {\n    currentStatus = \"PARADA\";\n    context.set('currentStatus', currentStatus);\n}\n\nif (verifyPulse) {\n    pulseCount++;\n\n    lastTimestamp = currentTimestamp\n    context.set('lastTimestamp', lastTimestamp);\n\n    let timeWorking = (currentTimestamp - startWorking) / 1000;\n    sumWorkingTime += timeWorking;\n    context.set('sumWorkingTime', sumWorkingTime);\n\n}\n\nif (machine == null) {\n    machine = serialNumber;\n    context.set('machine', machine);\n}\n\nif (payload === \"reset\") {\n    resetShift = true;\n    context.set('resetShift', true);\n}\ncontext.set('pulseCount', pulseCount);\n\nmsg.data = {\n    pulse: pulseCount,\n    workingTime: sumWorkingTime.toFixed(3),\n    idleTime: sumIdleTime.toFixed(3),\n    status: currentStatus,\n    verifyWorking: verifyWorking,\n    lastTimestamp: lastTimestamp,\n    machine: machine,\n    reset: resetShift\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1380,
        "y": 760,
        "wires": [
            [
                "59c672334f0fceef",
                "cdb5dad896f41070"
            ]
        ],
        "icon": "font-awesome/fa-book"
    },
    {
        "id": "59c672334f0fceef",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "FSM-05",
        "func": "let workingTime = msg.data.workingTime;\nlet idleTime = msg.data.idleTime;\nlet press = msg.data.press;\nlet status = msg.data.status;\nlet reset = msg.data.reset;\nlet machine = msg.topic;\nlet workingTimeMinutes = context.get('workingTimeMinutes') || 0;\nlet idleTimeMinutes = context.get('idleTimeMinutes') || 0;\n\nfunction minutesToHours(totalMinutes) {\n    var hours = String(Math.floor(totalMinutes / 60)).padStart(2, \"0\");\n    var minutes = String(totalMinutes % 60).padStart(2, \"0\");\n\n    return `${hours}:${minutes}`;\n}\n\nif (reset == true) {\n    workingTimeMinutes = 0;\n    idleTimeMinutes = 0;\n\n    context.set('workingTimeMinutes', workingTimeMinutes);\n    context.set('idleTimeMinutes', 0);\n}\n\nif (workingTime > 0 || idleTime > 0) {\n    workingTimeMinutes = workingTime / 60;\n    idleTimeMinutes = idleTime / 60;\n}\n\nmsg.payload = {\n    press: press,\n    workingTimeMinutes: minutesToHours(workingTimeMinutes.toFixed(0)),\n    idleTimeMinutes: minutesToHours(idleTimeMinutes.toFixed(0)),\n    status: status,\n    deviceSerialNumber: machine\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1660,
        "y": 1360,
        "wires": [
            []
        ],
        "icon": "font-awesome/fa-cogs"
    },
    {
        "id": "cdb5dad896f41070",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "verifyStatus",
        "func": "let verifyPC = msg.conditions.verifyPC;\nlet startPC = msg.conditions.startPC;\nlet lastTimestamp = msg.data.lastTimestamp;\nlet machine = msg.data.machine;\nlet status = msg.data.status;\nlet currentTimestamp = new Date();\nlet currentStatus = context.get('currentStatus') || null;\nlet differenceInSeconds = context.get('differenceInSeconds') || 0;\n\nif(lastTimestamp !== null) {\n\n    differenceInSeconds = (currentTimestamp.getTime() - lastTimestamp) / 1000;\n    context.set('differenceInSeconds', differenceInSeconds);\n\n    if(differenceInSeconds >= 300 && (!startPC && !verifyPC) && status == \"PARADA\") {\n        currentStatus = \"PARADA\";\n        context.set('currentStatus', currentStatus);\n    }\n\n    if ((differenceInSeconds <= 299) || (startPC == true || verifyPC == true) || (status == \"TRABALHANDO\")) {\n        currentStatus = \"TRABALHANDO\";\n        context.set('currentStatus', currentStatus);\n    }\n\n    else if (differenceInSeconds >= 1800) {\n        currentStatus = \"DESLIGADO\";\n        context.set('currentStatus', currentStatus);\n    }\n}\nelse if( lastTimestamp == null && status == \"PARADA\") {\n    currentStatus = \"DESLIGADO\";\n    context.set('currentStatus', currentStatus);\n}\nmsg.status = {\n    time: differenceInSeconds,\n    machine: machine,\n    currentStatus: currentStatus\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1670,
        "y": 1400,
        "wires": [
            [
                "a6616385564fde27"
            ]
        ],
        "icon": "node-red/status.svg"
    },
    {
        "id": "72f5438f1e869c6c",
        "type": "change",
        "z": "dae82ca7554ded9f",
        "name": "delete time",
        "rules": [
            {
                "t": "delete",
                "p": "payload.timestamp",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.StatusSNS.Time",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.StatusSNS.Switch2",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.StatusSNS.Switch3",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.StatusSNS.Switch4",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 630,
        "y": 760,
        "wires": [
            [
                "4b4a25d121b64434"
            ]
        ],
        "icon": "font-awesome/fa-times-circle"
    },
    {
        "id": "a6616385564fde27",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "FormatedMessage",
        "func": "let machine = msg.status.machine;\nlet timestamp = new Date().getTime();\nlet currentStatus = context.get('currentStatus') || null; \nlet oldStatus = msg.status.currentStatus;\n\nif(!currentStatus || currentStatus !== oldStatus) {\n    currentStatus = oldStatus;\n    context.set('currentStatus', currentStatus);\n\n    msg.payload = {\n            timestamp: timestamp,\n            deviceSerialNumber: machine,\n            status: currentStatus\n    }\n    return msg;\n}\nreturn null;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1690,
        "y": 1440,
        "wires": [
            []
        ],
        "icon": "font-awesome/fa-envelope"
    },
    {
        "id": "4b4a25d121b64434",
        "type": "rbe",
        "z": "dae82ca7554ded9f",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 790,
        "y": 760,
        "wires": [
            [
                "20ec5a38aaf93bf0"
            ]
        ]
    },
    {
        "id": "a6ea2fb9ba749a3a",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "Switch State",
        "func": "let payload = msg.payload; \nlet switch1 = context.get('switch1') || null;\n\nif ((payload.Switch1 && payload.Switch1.Action == \"ON\") || (payload.StatusSNS && payload.StatusSNS.Switch1 == \"ON\")) {\n    context.set('switch1', \"ON\");\n}\nif ((payload.Switch1 && payload.Switch1.Action == \"OFF\") || (payload.StatusSNS && payload.StatusSNS.Switch1 == \"OFF\") && switch1 == \"ON\") {\n    context.set('switch1', \"OFF\");\n}\nmsg.switches = {\n    switch1: context.get('switch1')\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 800,
        "wires": [
            [
                "1280ad4a565b4596"
            ]
        ],
        "icon": "node-red/swap.svg"
    },
    {
        "id": "4fa68c8ac7a56081",
        "type": "switch",
        "z": "dae82ca7554ded9f",
        "name": "OPTION SW",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "hask",
                "v": "Switch1",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "StatusSNS",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 450,
        "y": 800,
        "wires": [
            [
                "6ba04899531416d0"
            ],
            [
                "6ba04899531416d0"
            ]
        ]
    },
    {
        "id": "1280ad4a565b4596",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "Conditions Machine",
        "func": "let switch1 = msg.switches.switch1 || null;\nlet serialNumber = msg.payload.serialNumber;\nlet verifyPulse = context.get('verifyPulse') || false; /* verifica se o pulso foi finalizado  */\nlet startPulse = context.get('startPulse') || false; /* verifica se o gatilho da solda est√° pressionada foi iniciada */\n\nif (switch1 == \"ON\") { /* momento em que o gatilho do laser √© pressionado*/\n    startPulse = true;\n    context.set('startPulse', startPulse);\n}\n\nif (switch1 == \"OFF\" && startPulse) { /* momento em que o gatilho do laser √© solto */\n    verifyPulse = true;\n    startPulse = false;\n\n    context.set('verifyPulse', verifyPulse);\n    context.set('startPulse', startPulse);\n}\n\nmsg.conditions = {\n    verifyPulse: verifyPulse,\n    startPulse: startPulse,\n    machine: serialNumber\n}\n\nif (verifyPulse) {\n    verifyPulse = false;\n    context.set('verifyPulse', verifyPulse);\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1150,
        "y": 800,
        "wires": [
            [
                "52ef7d56844fe1ab"
            ]
        ],
        "icon": "font-awesome/fa-bars"
    },
    {
        "id": "52ef7d56844fe1ab",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "Production Machine",
        "func": "let startPulse = msg.conditions.startPulse;\nlet verifyPulse = msg.conditions.verifyPulse;\nlet serialNumber = msg.conditions.machine;\nlet payload = msg.payload;\nlet machine = context.get('machine') || null;\nlet startWorking = context.get('startWorking') || null;\nlet lastTimestamp = context.get('lastTimestamp') || null;\nlet currentTimestamp = new Date().getTime();\nlet sumWorkingTime = context.get('sumWorkingTime') || 0;\nlet sumIdleTime = context.get('sumIdleTime') || 0;\nlet pulseCount = context.get('pulseCount') || 0;\nlet currentStatus = context.get('currentStatus') || \"PARADA\";\nlet verifyWorking = context.get('verifyWorking') || false;\nlet resetShift = context.get('resetShift') || false;\n\nif (resetShift) {\n    pulseCount = 0;\n    sumWorkingTime = 0;\n    sumIdleTime = 0;\n\n    context.set('pulseCount', pulseCount);\n    context.set('sumWorkingTime', sumWorkingTime);\n    context.set('sumIdleTime', sumIdleTime);\n\n    resetShift = false;\n    context.set('resetShift', resetShift);\n}\n\nif (startPulse) {\n\n    startWorking = currentTimestamp;\n    context.set('startWorking', startWorking);\n\n    if (lastTimestamp !== null) {\n        let differenceTimeSignals = (currentTimestamp - lastTimestamp) / 1000;\n\n        if (differenceTimeSignals >= 300) {\n            sumIdleTime += differenceTimeSignals;\n            context.set('sumIdleTime', sumIdleTime);\n        }\n        else {\n            sumWorkingTime += differenceTimeSignals;\n            context.set('sumWorkingTime', sumWorkingTime);\n        }\n    }\n    currentStatus = \"TRABALHANDO\";\n    context.set('currentStatus', currentStatus);\n\n    verifyWorking = true;\n    context.set('verifyWorking', true);\n}\nelse if (startPulse == false) {\n    currentStatus = \"PARADA\";\n    context.set('currentStatus', currentStatus);\n}\n\nif (verifyPulse) {\n    pulseCount++;\n\n    lastTimestamp = currentTimestamp\n    context.set('lastTimestamp', lastTimestamp);\n\n    let timeWorking = (currentTimestamp - startWorking) / 1000;\n    sumWorkingTime += timeWorking;\n    context.set('sumWorkingTime', sumWorkingTime);\n\n}\n\nif (machine == null) {\n    machine = serialNumber;\n    context.set('machine', machine);\n}\n\nif (payload === \"reset\") {\n    resetShift = true;\n    context.set('resetShift', true);\n}\ncontext.set('pulseCount', pulseCount);\n\nmsg.data = {\n    pulse: pulseCount,\n    workingTime: sumWorkingTime.toFixed(3),\n    idleTime: sumIdleTime.toFixed(3),\n    status: currentStatus,\n    verifyWorking: verifyWorking,\n    lastTimestamp: lastTimestamp,\n    machine: machine,\n    reset: resetShift\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1380,
        "y": 800,
        "wires": [
            [
                "99af59c609b93b19",
                "409be4d6f17d859f"
            ]
        ],
        "icon": "font-awesome/fa-book"
    },
    {
        "id": "99af59c609b93b19",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "SM003 ",
        "func": "let workingTime = msg.data.workingTime;\nlet idleTime = msg.data.idleTime;\nlet pulse = msg.data.pulse;\nlet status = msg.data.status;\nlet reset = msg.data.reset;\nlet machine = msg.payload.serialNumber;\nlet workingTimeMinutes = context.get('workingTimeMinutes') || 0;\nlet idleTimeMinutes = context.get('idleTimeMinutes') || 0;\n\nfunction minutesToHours(totalMinutes) {\n    var hours = String(Math.floor(totalMinutes / 60)).padStart(2, \"0\");\n    var minutes = String(totalMinutes % 60).padStart(2, \"0\");\n\n    return `${hours}:${minutes}`;\n}\n\nif (reset == true) {\n    workingTimeMinutes = 0;\n    idleTimeMinutes = 0;\n\n    context.set('workingTimeMinutes', workingTimeMinutes);\n    context.set('idleTimeMinutes', 0);\n}\n\nif (workingTime > 0 || idleTime > 0) {\n    workingTimeMinutes = workingTime / 60;\n    idleTimeMinutes = idleTime / 60;\n}\n\nmsg.payload = {\n    pulsos: pulse,\n    workingTimeMinutes: minutesToHours(workingTimeMinutes.toFixed(0)),\n    idleTimeMinutes: minutesToHours(idleTimeMinutes.toFixed(0)),\n    status: status,\n    deviceSerialNumber: machine\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1660,
        "y": 1500,
        "wires": [
            []
        ],
        "icon": "font-awesome/fa-cogs"
    },
    {
        "id": "409be4d6f17d859f",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "verifyStatus",
        "func": "let verifyPC = msg.conditions.verifyPC;\nlet startPC = msg.conditions.startPC;\nlet lastTimestamp = msg.data.lastTimestamp;\nlet machine = msg.data.machine;\nlet status = msg.data.status;\nlet currentTimestamp = new Date();\nlet currentStatus = context.get('currentStatus') || null;\nlet differenceInSeconds = context.get('differenceInSeconds') || 0;\n\nif(lastTimestamp !== null) {\n\n    differenceInSeconds = (currentTimestamp.getTime() - lastTimestamp) / 1000;\n    context.set('differenceInSeconds', differenceInSeconds);\n\n    if(differenceInSeconds >= 300 && (!startPC && !verifyPC) && status == \"PARADA\") {\n        currentStatus = \"PARADA\";\n        context.set('currentStatus', currentStatus);\n    }\n\n    if ((differenceInSeconds <= 299) || (startPC == true || verifyPC == true) || (status == \"TRABALHANDO\")) {\n        currentStatus = \"TRABALHANDO\";\n        context.set('currentStatus', currentStatus);\n    }\n\n    else if (differenceInSeconds >= 1800) {\n        currentStatus = \"DESLIGADO\";\n        context.set('currentStatus', currentStatus);\n    }\n}\nelse if( lastTimestamp == null && status == \"PARADA\") {\n    currentStatus = \"DESLIGADO\";\n    context.set('currentStatus', currentStatus);\n}\nmsg.status = {\n    time: differenceInSeconds,\n    machine: machine,\n    currentStatus: currentStatus\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1670,
        "y": 1540,
        "wires": [
            [
                "383f0c104064cecf"
            ]
        ],
        "icon": "node-red/status.svg"
    },
    {
        "id": "6ba04899531416d0",
        "type": "change",
        "z": "dae82ca7554ded9f",
        "name": "delete time",
        "rules": [
            {
                "t": "delete",
                "p": "payload.timestamp",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.StatusSNS.Time",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.StatusSNS.Switch2",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.StatusSNS.Switch3",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.StatusSNS.Switch4",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 630,
        "y": 800,
        "wires": [
            [
                "8bf770743b1548ec"
            ]
        ],
        "icon": "font-awesome/fa-times-circle"
    },
    {
        "id": "383f0c104064cecf",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "FormatedMessage",
        "func": "let machine = msg.status.machine;\nlet timestamp = new Date().getTime();\nlet currentStatus = context.get('currentStatus') || null; \nlet oldStatus = msg.status.currentStatus;\n\nif(!currentStatus || currentStatus !== oldStatus) {\n    currentStatus = oldStatus;\n    context.set('currentStatus', currentStatus);\n\n    msg.payload = {\n            timestamp: timestamp,\n            deviceSerialNumber: machine,\n            status: currentStatus\n    }\n    return msg;\n}\nreturn null;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1690,
        "y": 1580,
        "wires": [
            []
        ],
        "icon": "font-awesome/fa-envelope"
    },
    {
        "id": "8bf770743b1548ec",
        "type": "rbe",
        "z": "dae82ca7554ded9f",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 790,
        "y": 800,
        "wires": [
            [
                "a6ea2fb9ba749a3a"
            ]
        ]
    },
    {
        "id": "9512a57ed3c50f11",
        "type": "switch",
        "z": "dae82ca7554ded9f",
        "name": "Machine",
        "property": "payload.serialNumber",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "DF3C2D",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 280,
        "y": 1060,
        "wires": [
            [
                "a9769af83f2d5737"
            ]
        ],
        "icon": "font-awesome/fa-desktop"
    },
    {
        "id": "a9769af83f2d5737",
        "type": "switch",
        "z": "dae82ca7554ded9f",
        "name": "OPTION SW",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "hask",
                "v": "Switch1",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "Switch2",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "Switch3",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 450,
        "y": 1060,
        "wires": [
            [
                "92c3896c8a557885"
            ],
            [
                "92c3896c8a557885"
            ],
            [
                "92c3896c8a557885"
            ]
        ]
    },
    {
        "id": "92c3896c8a557885",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "switch State",
        "func": "\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 1060,
        "wires": [
            [
                "15a38d251e43056c"
            ]
        ]
    },
    {
        "id": "15a38d251e43056c",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "Conditions Machine",
        "func": "let switch1 = msg.switches.switch1 || null;\nlet switch2 = msg.switches.switch2 || null;\nlet switch3 = msg.switches.switch3 || null;\nlet serialNumber = msg.payload.serialNumber;\nlet manualPress = context.get('manualPress') || false; /* verifica se o manual est√° pressionado */\nlet quickDescent = context.get('quickDescent') || false; /* verifica se a m√°quina desceu */\nlet completeDescent = context.get('completeDescent') || false /* constata se a m√°quina completou a descida r√°pida */\nlet verifyPress = context.get('verifyPress') || false /* consulta se a prensa foi realizada */ \nlet completePress = context.get('completePress') || false /* verifica se a m√°quina realizou a prensa  */ \n\nif (switch1 == \"ON\") {\n    manualPress = true;\n    context.set('manualPress', manualPress);\n}\n\nif (switch1 == \"OFF\") {\n    \n}\n\n//  if (switch1 == \"ON\") { /* momento em que o gatilho do laser √© pressionado*/\n//     startPulse = true;\n//     context.set('startPulse', startPulse);\n// }\n\n// if (switch1 == \"OFF\" && startPulse) { /* momento em que o gatilho do laser √© solto */\n//     verifyPulse = true;\n//     startPulse = false;\n\n//     context.set('verifyPulse', verifyPulse);\n//     context.set('startPulse', startPulse);\n// }\n\n// msg.conditions = {\n//     verifyPulse: verifyPulse,\n//     startPulse: startPulse,\n//     machine: serialNumber\n// }\n\n// if (verifyPulse) {\n//     verifyPulse = false;\n//     context.set('verifyPulse', verifyPulse);\n// } \nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 1060,
        "wires": [
            []
        ],
        "icon": "font-awesome/fa-bars"
    },
    {
        "id": "c968ec71e32e73e8",
        "type": "inject",
        "z": "dae82ca7554ded9f",
        "name": "SWITCH1 ON",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF158B",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch1\": {\"Action\": \"ON\"} }",
        "payloadType": "json",
        "x": 130,
        "y": 1640,
        "wires": [
            [
                "512e35961811135a"
            ]
        ]
    },
    {
        "id": "32a98172ecc3e391",
        "type": "inject",
        "z": "dae82ca7554ded9f",
        "name": "SWITCH1 OFF",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF158B",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch1\": {\"Action\": \"OFF\"} }",
        "payloadType": "json",
        "x": 140,
        "y": 1680,
        "wires": [
            [
                "512e35961811135a"
            ]
        ]
    },
    {
        "id": "70070a7067035894",
        "type": "inject",
        "z": "dae82ca7554ded9f",
        "name": "SWITCH2 ON",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF158B",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch2\": {\"Action\": \"ON\"} }",
        "payloadType": "json",
        "x": 130,
        "y": 1740,
        "wires": [
            [
                "512e35961811135a"
            ]
        ]
    },
    {
        "id": "79845b1111f929b5",
        "type": "inject",
        "z": "dae82ca7554ded9f",
        "name": "SWITCH2 OFF",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF158B",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch2\": {\"Action\": \"OFF\"} }",
        "payloadType": "json",
        "x": 140,
        "y": 1780,
        "wires": [
            [
                "512e35961811135a"
            ]
        ]
    },
    {
        "id": "cfad34f581466f21",
        "type": "inject",
        "z": "dae82ca7554ded9f",
        "name": "SWITCH3 ON ",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF158B",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch3\": {\"Action\": \"ON\"} }",
        "payloadType": "json",
        "x": 130,
        "y": 1920,
        "wires": [
            [
                "512e35961811135a"
            ]
        ]
    },
    {
        "id": "f68c59e394f6c8ea",
        "type": "inject",
        "z": "dae82ca7554ded9f",
        "name": "SWITCH3 OFF",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF158B",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch3\": {\"Action\": \"OFF\"} }",
        "payloadType": "json",
        "x": 140,
        "y": 1960,
        "wires": [
            [
                "512e35961811135a"
            ]
        ]
    },
    {
        "id": "51a08409003ac60b",
        "type": "inject",
        "z": "dae82ca7554ded9f",
        "name": "STATUS8",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF158B",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"StatusSNS\": {  \"Switch2\": \"ON\" } }",
        "payloadType": "json",
        "x": 140,
        "y": 1820,
        "wires": [
            [
                "512e35961811135a"
            ]
        ]
    },
    {
        "id": "4ea12f05e6bf49cc",
        "type": "inject",
        "z": "dae82ca7554ded9f",
        "name": "STATUS8",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF158B",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"StatusSNS\": {  \"Switch2\": \"OFF\" } }",
        "payloadType": "json",
        "x": 120,
        "y": 1860,
        "wires": [
            [
                "512e35961811135a"
            ]
        ]
    },
    {
        "id": "512e35961811135a",
        "type": "switch",
        "z": "dae82ca7554ded9f",
        "name": "Machine",
        "property": "payload.serialNumber",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "DF158B",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 360,
        "y": 1780,
        "wires": [
            [
                "8ce7066aa5e4a962"
            ]
        ],
        "icon": "font-awesome/fa-desktop"
    },
    {
        "id": "77d8f802f3a13217",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "Switches State",
        "func": "function handleSwitch(payload, context, switchName, statusSNSName, startName, finishName) {\n    let switchKey = Object.keys(payload).find(key => key.startsWith(switchName)) // extrai o switch que chegou no payload\n    let switchState = context.get(switchName) || null;\n    let actionValue = payload[switchKey] ? payload[switchKey].Action : null; // extrai o estado do switch que chegou\n    let statusSNS = payload[statusSNSName] && payload[statusSNSName][switchName];\n    let startState = context.get(startName) || false;\n    let finishState = context.get(finishName) || false;\n\n    switchState = actionValue || statusSNS || switchState; // adquiri o estado do switch que chegou\n\n    if (switchState == \"ON\" ) { // Condi√ß√£o que caracteriza o in√≠cio da produ√ß√£o\n        startState = true;\n        finishState = false;\n    }\n    else if (switchState == \"OFF\" && startState == true) { // condi√ß√£o que caracteriza o final da produ√ß√£o \n        startState = false;\n        finishState = true;\n    }\n    context.set(switchName, switchState);\n    context.set(startName, startState);\n    context.set(finishName, finishState);\n\n    return {\n        switchState: switchState,\n        startState: startState,\n        finishState: finishState,\n    };\n}\nlet payload = msg.payload;\nlet verifyLaser = handleSwitch(payload, context, 'Switch1', 'StatusSNS', 'laserON', 'laserOFF');\nlet verifyMachine = handleSwitch(payload,context, 'Switch2', 'StatusSNS', 'readyMachine','noReadyMachine');\nlet tableDoor = handleSwitch(payload, context, 'Switch3', 'StatusSNS', 'openDoor', 'closeDoor');\n\nmsg.switches = {\n    switch1: verifyLaser.switchState,\n    switch2: verifyMachine.switchState,\n    switch3: tableDoor.switchState,\n    laserON: verifyLaser.startState,\n    laserOFF: verifyLaser.finishState,\n    readyMachine: verifyMachine.startState,\n    noReadyMachine: verifyMachine.finishState,\n    openDoor: tableDoor.startState,\n    closeDoor: tableDoor.finishState\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 1780,
        "wires": [
            [
                "2d70d908dd31ae08"
            ]
        ],
        "icon": "node-red/swap.svg"
    },
    {
        "id": "8ce7066aa5e4a962",
        "type": "switch",
        "z": "dae82ca7554ded9f",
        "name": "OPTION SW",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "hask",
                "v": "Switch1",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "Switch2",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "Switch3",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "StatusSNS",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 4,
        "x": 510,
        "y": 1780,
        "wires": [
            [
                "4f574b8eb0ea601d"
            ],
            [
                "4f574b8eb0ea601d"
            ],
            [
                "4f574b8eb0ea601d"
            ],
            [
                "4f574b8eb0ea601d"
            ]
        ]
    },
    {
        "id": "4f574b8eb0ea601d",
        "type": "change",
        "z": "dae82ca7554ded9f",
        "name": "delete time",
        "rules": [
            {
                "t": "delete",
                "p": "payload.timestamp",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.StatusSNS.Time",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.StatusSNS.Switch1",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.StatusSNS.Switch3",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.StatusSNS.Switch4",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 690,
        "y": 1780,
        "wires": [
            [
                "208aa209061da652"
            ]
        ],
        "icon": "font-awesome/fa-times-circle"
    },
    {
        "id": "208aa209061da652",
        "type": "rbe",
        "z": "dae82ca7554ded9f",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 830,
        "y": 1780,
        "wires": [
            [
                "77d8f802f3a13217"
            ]
        ]
    },
    {
        "id": "2d70d908dd31ae08",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "Conditions Machine",
        "func": "let {laserON, laserOFF, readyMachine, noReadyMachine, openDoor} = msg.switches;\nlet startingCutPlan = context.get('startingCutPlan') || false;\nlet finishedCutPlan = context.get('finishedCutPlan') || false;\nlet existsCutPlan = context.get('existsCutPlan') || false;\n\nif (readyMachine && laserON && !openDoor && !existsCutPlan) { // in√≠cio do corte da chapa\n    startingCutPlan = true;\n    existsCutPlan = true;\n}\nelse if (noReadyMachine && laserOFF && openDoor && existsCutPlan) {\n    existsCutPlan = false;\n    finishedCutPlan = true;\n}\ncontext.set('startingCutPlan', startingCutPlan);\ncontext.set('finishedCutPlan', finishedCutPlan);\ncontext.set('existsCutPlan', existsCutPlan);\n\nmsg.conditions = {\n    startingCutPlan: startingCutPlan,\n    finishedCutPlan: finishedCutPlan,\n    existsCutPlan: existsCutPlan,\n    serialNumber: msg.payload.serialNumber\n}\nstartingCutPlan = false;\ncontext.set('startingCutPlan', startingCutPlan);\n\nfinishedCutPlan = false;\ncontext.set('finishedCutPlan', finishedCutPlan);\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1210,
        "y": 1780,
        "wires": [
            [
                "49151e42e3561d3e"
            ]
        ],
        "icon": "font-awesome/fa-list"
    },
    {
        "id": "49151e42e3561d3e",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "Production Machine",
        "func": "let { startingCutPlan, finishedCutPlan, serialNumber } = msg.conditions || {};\nlet Switch1 = (msg.payload && msg.payload.Switch1) ? msg.payload.Switch1 : {}; // Verifica√ß√£o para garantir que Switch1 exista\nlet [dateStartProduction, dateLastProduction, machine, lastDateSW1] = ['dateStartProduction', 'dateLastProduction', 'machine', 'lastDateSW1'].map(key => context.get(key) || null);\nlet [plateSteel, durationCutPlan] = ['plateSteel', 'durationCutPlan'].map(key => context.get(key) || 0);\nlet resetShift = context.get('resetShift') || false;\nlet currentTimestamp = new Date();\n\nconst actions = {\n    resetShift: () => { plateSteel = 0; resetShift = false; },\n    payloadReset: () => { resetShift = true; },\n    dateStartProduction: () => { dateStartProduction = currentTimestamp; },\n    finishedProduction: () => { durationCutPlan = (currentTimestamp.getTime() - dateStartProduction.getTime()) / 1000; plateSteel++; dateStartProduction = null; dateLastProduction = currentTimestamp },\n    machineNull: () => { machine = serialNumber },\n    lastDateSW1: () => { lastDateSW1 = currentTimestamp },\n    lastDateSW1Null: () => { lastDateSW1 = null }\n};\nconst conditions = {\n    resetShift: resetShift === true,\n    payloadReset: msg.payload === 'reset',\n    dateStartProduction: startingCutPlan === true,\n    finishedProduction: finishedCutPlan === true,\n    machineNull: (serialNumber && machine === null) || (serialNumber && machine !== serialNumber && machine !== null),\n    lastDateSW1: Switch1.Action === \"ON\", // Acesso direto ao Action do Switch1\n    lastDateSW1Null: Switch1.Action === \"OFF\" // Acesso direto ao Action do Switch1\n};\nObject.entries(conditions).forEach(([condition, isTrue]) => {\n    if (isTrue && actions[condition]) actions[condition]();\n});\n\ncontext.set('dateStartProduction', dateStartProduction);\ncontext.set('dateLastProduction', dateLastProduction);\ncontext.set('machine', machine);\ncontext.set('plateSteel', plateSteel);\ncontext.set('resetShift', resetShift);\ncontext.set('durationCutPlan', durationCutPlan);\ncontext.set('lastDateSW1', lastDateSW1);\n\nmsg.data = {\n    finishedCutPlan: finishedCutPlan,\n    chapas: plateSteel,\n    lastDateSW1: lastDateSW1,\n    durationLastCutPlan: durationCutPlan,\n    dateStartProduction: dateStartProduction,\n    dateLastProduction: dateLastProduction,\n    machine: machine,\n    reset: resetShift\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1440,
        "y": 1780,
        "wires": [
            [
                "cd8c1c1451ecf128",
                "a79c60c2bc9289fe"
            ]
        ],
        "icon": "font-awesome/fa-book"
    },
    {
        "id": "a79c60c2bc9289fe",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "LASER BYSTRONIC",
        "func": "let { finishedCutPlan, chapas, durationLastCutPlan, machine} = msg.data;\nlet workingMinutes = durationLastCutPlan ? durationLastCutPlan/60 : 0;\n\nfunction minutesToHours(totalMinutes) {\n    var hours = String(Math.floor(totalMinutes / 60)).padStart(2, \"0\");\n    var minutes = String(totalMinutes % 60).padStart(2, \"0\");\n\n    return `${hours}:${minutes}`;\n}\nmsg.payload = {\n    finishedCutPlan: finishedCutPlan,\n    chapas: chapas,\n    durationLastCutPlan: minutesToHours(workingMinutes.toFixed(0)),\n    deviceSerialNumber: machine\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1700,
        "y": 1760,
        "wires": [
            [
                "14cb141dafad1b99"
            ]
        ],
        "icon": "font-awesome/fa-cogs"
    },
    {
        "id": "cd8c1c1451ecf128",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "verifyStatus",
        "func": "let {dateStartProduction, dateLastProduction, machine, lastDateSW1} = msg.data;\nlet currentTimestamp = new Date();\nlet currentStatus = context.get('currentStatus') || null;\nlet timeLastSW1ON = lastDateSW1 !== null ? (currentTimestamp.getTime() - lastDateSW1.getTime()) / 1000 : null;\nlet timeCurrentProduction = dateStartProduction !== null ? (currentTimestamp.getTime() - dateStartProduction.getTime()) / 1000 : null;\nlet timeLastProduction = dateLastProduction !== null ? (currentTimestamp.getTime() - dateLastProduction.getTime()) / 1000 : null;\n\ncontext.set('timeCurrentProduction', timeCurrentProduction);\ncontext.set('timeLastProduction', timeLastProduction);\ncontext.set('timeLastSW1ON', timeLastSW1ON);\n\nif ((dateStartProduction !== null && dateLastProduction === null && timeCurrentProduction <= 10799)\n|| (dateStartProduction !== null && dateLastProduction === null && timeLastSW1ON !== null && timeLastSW1ON <= 10799)) currentStatus = \"TRABALHANDO\";\n\nelse if (dateLastProduction !== null) {\n    //Mapeamento dos status\n    const machineWorking = (dateStartProduction !== null && timeCurrentProduction <= 10799) ||\n    (dateStartProduction !== null && timeLastSW1ON !== null && timeLastSW1ON <= 10799);\n    const machineIdle = (dateStartProduction === null && timeLastProduction >= 300 && timeLastProduction <= 1799);\n    const machineOff = ((dateStartProduction === null && timeLastProduction >= 1800) || (timeCurrentProduction >= 10800));\n\n    const newStatus = machineWorking ? \"TRABALHANDO\" : machineIdle ? \"PARADO\" : machineOff ? \"DESLIGADO\" : null;\n    if (newStatus) currentStatus = newStatus;\n}\nelse if ((dateStartProduction === null && dateLastProduction === null) || (timeCurrentProduction >= 10800 && timeLastProduction >= 3600)) currentStatus = \"DESLIGADO\";\n\ncontext.set('currentStatus', currentStatus);\n\nmsg.status = {\n    timeCurrentProduction: timeCurrentProduction,\n    timeLastProduction: timeLastProduction,\n    machine: machine,\n    currentStatus: currentStatus\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1670,
        "y": 1800,
        "wires": [
            [
                "ebf86860ef7befc8",
                "97d3b621175aa7ad"
            ]
        ],
        "icon": "node-red/status.svg"
    },
    {
        "id": "ebf86860ef7befc8",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "FormatedMessage",
        "func": "let machine = msg.status.machine;\nlet timestamp = new Date().getTime();\nlet currentStatus = context.get('currentStatus') || null; \nlet oldStatus = msg.status.currentStatus;\n\nif(!currentStatus || currentStatus !== oldStatus) {\n    currentStatus = oldStatus;\n    context.set('currentStatus', currentStatus);\n\n    msg.payload = {\n            timestamp: timestamp,\n            deviceSerialNumber: machine,\n            status: currentStatus\n    }\n    return msg;\n}\nreturn null;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1930,
        "y": 1800,
        "wires": [
            []
        ],
        "icon": "font-awesome/fa-envelope"
    },
    {
        "id": "d9eac05a459c7866",
        "type": "inject",
        "z": "dae82ca7554ded9f",
        "name": "SWITCH1 ON",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF32CC",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch1\": {\"Action\": \"ON\"} }",
        "payloadType": "json",
        "x": 130,
        "y": 4340,
        "wires": [
            [
                "c9b7e9bcf64dc85c"
            ]
        ]
    },
    {
        "id": "d5e1c369ce7c0c47",
        "type": "inject",
        "z": "dae82ca7554ded9f",
        "name": "SWITCH1 OFF",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF32CC",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch1\": {\"Action\": \"OFF\"} }",
        "payloadType": "json",
        "x": 140,
        "y": 4380,
        "wires": [
            [
                "c9b7e9bcf64dc85c"
            ]
        ]
    },
    {
        "id": "377da60c1cfcb615",
        "type": "inject",
        "z": "dae82ca7554ded9f",
        "name": "SWITCH3 ON",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF32CC",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch3\": {\"Action\": \"ON\"} }",
        "payloadType": "json",
        "x": 130,
        "y": 4580,
        "wires": [
            [
                "c9b7e9bcf64dc85c"
            ]
        ]
    },
    {
        "id": "1662c3ccdfb3d555",
        "type": "inject",
        "z": "dae82ca7554ded9f",
        "name": "SWITCH3 OFF",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF32CC",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch3\": {\"Action\": \"OFF\"} }",
        "payloadType": "json",
        "x": 140,
        "y": 4620,
        "wires": [
            [
                "c9b7e9bcf64dc85c"
            ]
        ]
    },
    {
        "id": "c9b7e9bcf64dc85c",
        "type": "switch",
        "z": "dae82ca7554ded9f",
        "name": "Machines",
        "property": "payload.serialNumber",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "DF32CC",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 360,
        "y": 4420,
        "wires": [
            [
                "05f5f6da8e0dd218"
            ]
        ],
        "icon": "font-awesome/fa-desktop"
    },
    {
        "id": "05f5f6da8e0dd218",
        "type": "switch",
        "z": "dae82ca7554ded9f",
        "name": "OPTION SW",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "hask",
                "v": "Switch1",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "Switch2",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "Switch3",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "StatusSNS",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 4,
        "x": 550,
        "y": 4420,
        "wires": [
            [
                "23e6773189b7bf47"
            ],
            [
                "23e6773189b7bf47"
            ],
            [
                "23e6773189b7bf47"
            ],
            [
                "23e6773189b7bf47"
            ]
        ]
    },
    {
        "id": "23e6773189b7bf47",
        "type": "change",
        "z": "dae82ca7554ded9f",
        "name": "delete time",
        "rules": [
            {
                "t": "delete",
                "p": "payload.timestamp",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.StatusSNS.Time",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.StatusSNS.Switch1",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.StatusSNS.Switch3",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.StatusSNS.Switch4",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 750,
        "y": 4420,
        "wires": [
            [
                "a7361bc982648b96"
            ]
        ],
        "icon": "font-awesome/fa-minus-circle"
    },
    {
        "id": "a7361bc982648b96",
        "type": "rbe",
        "z": "dae82ca7554ded9f",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 910,
        "y": 4420,
        "wires": [
            [
                "7ff3a6a8a1c13353"
            ]
        ]
    },
    {
        "id": "7ff3a6a8a1c13353",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "Switches States",
        "func": "function handleSwitch(payload, context, switchName, statusSNSName, startName, finishName, verifyName) {\n    let switchKey = Object.keys(payload).find(key => key.startsWith(switchName)) // extrai o switch que chegou no payload\n    let switchState = context.get(switchName) || null;\n    let actionValue = payload[switchKey] ? payload[switchKey].Action : null; // extrai o estado do switch que chegou\n    let statusSNS = payload[statusSNSName] && payload[statusSNSName][switchName];\n    let startState = context.get(startName) || false;\n    let finishState = context.get(finishName) || false;\n    let verifyState = context.get(verifyName) || false;\n\n    switchState = actionValue || statusSNS || switchState; // adquiri o estado do switch que chegou\n\n    if (switchState == \"ON\" && finishState == false) { // Condi√ß√£o que caracteriza o in√≠cio da produ√ß√£o da pe√ßa\n        startState = true;\n    }\n    else if (switchState == \"OFF\" && startState == true) { // condi√ß√£o que caracteriza o final da produ√ß√£o da pe√ßa\n        finishState = true;\n    }\n    if (startState == true && finishState == true) {\n        verifyState = true;\n        startState = false;\n        finishState = false;\n    }\n    context.set(switchName, switchState);\n    context.set(startName, startState);\n    context.set(finishName, finishState);\n    context.set(verifyName, verifyState);\n\n    return {\n        switchState: switchState,\n        startState: startState,\n        finishState: finishState,\n        verifyState: verifyState\n    };\n}\nlet payload = msg.payload;\nlet machineUse = handleSwitch(payload, context, 'Switch1', 'StatusSNS', 'conditionForUse', 'useFinished', 'verifyUse');\nlet activeCycle = handleSwitch(payload, context,'Switch2','StatusSNS', 'startCycle','finishedCycle','verifyCycle');\nlet pulse = handleSwitch(payload, context, 'Switch3', 'StatusSNS', 'solderArcleStable', 'arcleSolderFinished', 'verifySolderArcle');\n\nmsg.switches = {\n    switch1: machineUse.switchState,\n    switch2: activeCycle.switchState,\n    switch3: pulse.switchState,\n    conditionForUse: machineUse.startState,\n    useFinished: machineUse.finishState,\n    verifyUse: machineUse.verifyState,\n    solderArcleStablet: pulse.startState,\n    arcleSolderFinished: pulse.finishState,\n    verifySolderArcle: pulse.verifyState,\n    activeCycle: activeCycle.startState,\n\n}\nif (machineUse.verifyState == true && pulse.verifyState == true) {\n    machineUse.verifyState = false;\n    context.set('verifyUse', machineUse.verifyState);\n\n    pulse.verifyState = false;\n    context.set('verifySolderArcle', pulse.verifyState);\n}\nactiveCycle.verifyState = false;\ncontext.set('verifyCycle', activeCycle.verifyState);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1100,
        "y": 4420,
        "wires": [
            [
                "58862dd439d5bf15"
            ]
        ],
        "icon": "node-red/swap.svg"
    },
    {
        "id": "114755683a92c745",
        "type": "debug",
        "z": "dae82ca7554ded9f",
        "name": "debug 210",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2150,
        "y": 4420,
        "wires": []
    },
    {
        "id": "6b5fda67440f890f",
        "type": "inject",
        "z": "dae82ca7554ded9f",
        "name": "SWITCH2 ON",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF32CC",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch2\": {\"Action\": \"ON\"} }",
        "payloadType": "json",
        "x": 130,
        "y": 4440,
        "wires": [
            [
                "c9b7e9bcf64dc85c"
            ]
        ]
    },
    {
        "id": "2e56d7d03e7b79a5",
        "type": "inject",
        "z": "dae82ca7554ded9f",
        "name": "SWITCH2 OFF",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF32CC",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch2\": {\"Action\": \"OFF\"} }",
        "payloadType": "json",
        "x": 140,
        "y": 4480,
        "wires": [
            [
                "c9b7e9bcf64dc85c"
            ]
        ]
    },
    {
        "id": "58862dd439d5bf15",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "Conditions Machine",
        "func": "let {conditionForUse, verifyUse,activeCycle, verifySolderArcle } = msg.switches;\nlet verifyPulse = verifyUse && verifySolderArcle ? true : false; // verifica se o pulso foi realizado\n\nmsg.conditions = {\n    verifyPulse: verifyPulse,\n    serialNumber: msg.payload.serialNumber\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1290,
        "y": 4420,
        "wires": [
            [
                "1d97bf2afeb735e3"
            ]
        ],
        "icon": "font-awesome/fa-bars"
    },
    {
        "id": "1d97bf2afeb735e3",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "Production Machine",
        "func": "let {verifyPulse, serialNumber} = msg.conditions;\nlet currentTimestamp = new Date();\nlet lastTimestamp = context.get('lastTimestamp') || null;\nlet machine = context.get('machine') || null;\nlet pulsesCounts = context.get('pulsesCounts') || 0;\nlet resetShift = context.get('resetShift') || false;\n\nconst actions = {\n    resetShift: () => {pulsesCounts = 0;},\n    payloadReset: () => {resetShift = true; },\n    verifyPulse: () => {pulsesCounts++; lastTimestamp = currentTimestamp},\n    machineNull: () => { machine = serialNumber; },\n}\nconst conditions = {\n    resetShift: resetShift === true,\n    payloadReset: msg.payload === 'reset',\n    verifyPulse: verifyPulse == true,\n    machineNull: serialNumber && machine == null,\n};\n\nObject.entries(conditions).forEach(([condition, isTrue]) =>{\n    if (isTrue) actions[condition]()\n});\ncontext.set('pulsesCounts', pulsesCounts);\ncontext.set('resetShift', resetShift);\ncontext.set('lastTimestamp', lastTimestamp);\ncontext.set('machine', machine);\n\nmsg.data = {\n    pulses: pulsesCounts,\n    verifyPulse: verifyPulse,\n    machine: machine,\n    lastTimestamp: lastTimestamp,\n    reset: resetShift\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1520,
        "y": 4420,
        "wires": [
            [
                "bc717b4f44b0e4ca",
                "69456f3be1c58da3"
            ]
        ],
        "icon": "font-awesome/fa-book"
    },
    {
        "id": "203dc1a5b1b5febd",
        "type": "catch",
        "z": "dae82ca7554ded9f",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 600,
        "y": 4680,
        "wires": [
            [
                "a9208417960f2b68"
            ]
        ]
    },
    {
        "id": "a9208417960f2b68",
        "type": "debug",
        "z": "dae82ca7554ded9f",
        "name": "debug 211",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 810,
        "y": 4700,
        "wires": []
    },
    {
        "id": "bc717b4f44b0e4ca",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "ROBO 01",
        "func": "let {pulses, machine, verifyPulse} = msg.data;\n\nmsg.payload = {\n    verifyPulse: verifyPulse,\n    pulsos: pulses,\n    deviceSerialNumber: machine\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1720,
        "y": 4420,
        "wires": [
            [
                "7f7959a8cf358fd5"
            ]
        ],
        "icon": "font-awesome/fa-cogs"
    },
    {
        "id": "69456f3be1c58da3",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "verifyStatus",
        "func": "let {lastTimestamp, machine} = msg.data;\nlet currentTimestamp = new Date();\nlet currentStatus = context.get('currentStatus') || null;\n\nlet differenceInSeconds = lastTimestamp !== null ? (currentTimestamp.getTime() - lastTimestamp.getTime()) : 0;\ncontext.set('differenceInSeconds', differenceInSeconds);\n\nif (lastTimestamp !== null) {\n    //Mapear status\n    const machineWorking = differenceInSeconds <= 299;\n    const machineIdle = differenceInSeconds >= 300 && differenceInSeconds <= 1799;\n    const machineOff = differenceInSeconds >= 1800;\n\n    const newStatus = machineWorking ? 'TRABALHANDO'  : machineIdle ? 'PARADO' : machineOff ? 'DESLIGADO'  : null;\n    if(newStatus) currentStatus = newStatus;\n}\n\nelse if (lastTimestamp == null) currentStatus = 'DESLIGADO';\n\ncontext.set('currentStatus', currentStatus);\n\nmsg.status = {\n    time: differenceInSeconds,\n    machine: machine,\n    currentStatus: currentStatus\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1730,
        "y": 4460,
        "wires": [
            [
                "f74b79373b1d0ffa"
            ]
        ],
        "icon": "node-red/status.svg"
    },
    {
        "id": "f74b79373b1d0ffa",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "FormatedMessage",
        "func": "let machine = msg.status.machine;\nlet timestamp = new Date().getTime();\nlet currentStatus = context.get('currentStatus') || null; \nlet oldStatus = msg.status.currentStatus;\n\nif(!currentStatus || currentStatus !== oldStatus) {\n    currentStatus = oldStatus;\n    context.set('currentStatus', currentStatus);\n\n    msg.payload = {\n            timestamp: timestamp,\n            deviceSerialNumber: machine,\n            status: currentStatus\n    }\n    return msg;\n}\nreturn null;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1910,
        "y": 4460,
        "wires": [
            []
        ],
        "icon": "font-awesome/fa-envelope"
    },
    {
        "id": "70161af8a9fa7025",
        "type": "inject",
        "z": "dae82ca7554ded9f",
        "name": "RESET Shift1",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "conditions",
                "v": " {}",
                "vt": "json"
            },
            {
                "p": "data",
                "v": "{}",
                "vt": "json"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "reset",
        "payloadType": "str",
        "x": 1290,
        "y": 4320,
        "wires": [
            [
                "1d97bf2afeb735e3"
            ]
        ],
        "icon": "font-awesome/fa-rotate-right"
    },
    {
        "id": "d22e28961a2cf359",
        "type": "inject",
        "z": "dae82ca7554ded9f",
        "name": "SWITCH3 ON",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "ABC123",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch3\": {\"Action\": \"ON\"} }",
        "payloadType": "json",
        "x": 130,
        "y": 4960,
        "wires": [
            [
                "c8adbc2c57182d34"
            ]
        ]
    },
    {
        "id": "b2a32a8096d00f44",
        "type": "inject",
        "z": "dae82ca7554ded9f",
        "name": "SWITCH3 OFF",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "ABC123",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch3\": {\"Action\": \"OFF\"} }",
        "payloadType": "json",
        "x": 140,
        "y": 5000,
        "wires": [
            [
                "c8adbc2c57182d34"
            ]
        ]
    },
    {
        "id": "4944236f033f7c27",
        "type": "inject",
        "z": "dae82ca7554ded9f",
        "name": "SWITCH4 ON",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "ABC123",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch4\": {\"Action\": \"ON\"} }",
        "payloadType": "json",
        "x": 130,
        "y": 5060,
        "wires": [
            [
                "c8adbc2c57182d34"
            ]
        ]
    },
    {
        "id": "523983a5414b6823",
        "type": "inject",
        "z": "dae82ca7554ded9f",
        "name": "SWITCH4 OFF",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "ABC123",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch4\": {\"Action\": \"OFF\"} }",
        "payloadType": "json",
        "x": 140,
        "y": 5100,
        "wires": [
            [
                "c8adbc2c57182d34"
            ]
        ]
    },
    {
        "id": "c8adbc2c57182d34",
        "type": "switch",
        "z": "dae82ca7554ded9f",
        "name": "Machines",
        "property": "payload.serialNumber",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "ABC123",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 360,
        "y": 5020,
        "wires": [
            [
                "8321b218a87fca74"
            ]
        ],
        "icon": "font-awesome/fa-desktop"
    },
    {
        "id": "8321b218a87fca74",
        "type": "switch",
        "z": "dae82ca7554ded9f",
        "name": "OPTION SW",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "hask",
                "v": "Switch3",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "Switch4",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 530,
        "y": 5020,
        "wires": [
            [
                "3a3aebd1e49b2d31"
            ],
            [
                "3a3aebd1e49b2d31"
            ]
        ]
    },
    {
        "id": "3a3aebd1e49b2d31",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "Switches States",
        "func": "function handleSwitch(payload, context, switchName, startName, finishName, verifyName) {\n    let switchState = context.get(switchName) || null;\n    let startState = context.get(startName) || false;\n    let finishState = context.get(finishName) || false;\n    let verifyState = context.get(verifyName) || false;\n\n    if (payload[switchName] && payload[switchName].Action == \"ON\") {\n        switchState = \"ON\";\n        startState = true;\n    } else if (payload[switchName] && payload[switchName].Action == \"OFF\" && switchState == \"ON\" && startState == true) {\n        switchState = \"OFF\";\n        finishState = true;\n    }\n\n    if (startState == true && finishState == true) {\n        verifyState = true;\n        startState = false;\n        finishState = false;\n    }\n    context.set(switchName, switchState);\n    context.set(startName, startState);\n    context.set(finishName, finishState);\n    context.set(verifyName, verifyState);\n\n    return {\n        switchState: switchState,\n        startState: startState,\n        finishState: finishState,\n        verifyState: verifyState\n    };\n}\nlet payload = msg.payload;\nlet verifyDescent = handleSwitch(payload, context, 'Switch3', 'outsetSlowDescent', 'endSlowDescent', 'slowDescentComplete');\nlet verifyQuick = handleSwitch(payload, context, 'Switch4', 'outsetQuickAscent', 'endQuickAscent', 'quickAscentComplete');\n\nmsg.switches = {\n    switch3: verifyDescent.switchState,\n    switch4: verifyQuick.switchState,\n    outsetSlowDescent: verifyDescent.startState,\n    slowDescentComplete: verifyDescent.verifyState,\n    outsetQuickAscent: verifyQuick.startState,\n    quickAscentComplete: verifyQuick.verifyState,\n}\n\nif (verifyDescent.verifyState == true && verifyQuick.verifyState == true) {\n    verifyDescent.verifyState = false;\n    context.set('slowDescentComplete', verifyDescent.verifyState);\n\n    verifyQuick.verifyState = false;\n    context.set('quickAscentComplete', verifyQuick.verifyState);\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 5020,
        "wires": [
            [
                "b362c58e09304834"
            ]
        ],
        "icon": "node-red/swap.svg"
    },
    {
        "id": "b362c58e09304834",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "Conditions Machine",
        "func": "let { outsetSlowDescent, slowDescentComplete, outsetQuickAscent, quickAscentComplete } = msg.switches;\nlet startFold = outsetSlowDescent == true ? true : false;\nlet verifyFold = slowDescentComplete == true && quickAscentComplete == true ? true : false;\n\ncontext.set('startFold', startFold);\ncontext.set('verifyFold', verifyFold);\n\nmsg.conditions = {\n    startFold: startFold,\n    verifyFold: verifyFold,\n    serialNumber: msg.payload.serialNumber\n}\n\nverifyFold = false;\ncontext.set('verifyFold', verifyFold);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 970,
        "y": 5020,
        "wires": [
            [
                "f537a25d27cd4325"
            ]
        ],
        "icon": "font-awesome/fa-bars"
    },
    {
        "id": "0e18d5a4e31af5f4",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "DOBRADEIRA GASPARINI",
        "func": "let {verifyFold, fold, machine} = msg.data;\n\nmsg.payload = {\n    verifyFold: verifyFold,\n    dobras: fold,\n    deviceSerialNumber: machine\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1460,
        "y": 5000,
        "wires": [
            [
                "8de330c1cc5a683f"
            ]
        ],
        "icon": "font-awesome/fa-cogs"
    },
    {
        "id": "47c25912fa9c6162",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "verifyStatus",
        "func": "let { dateStartProduction, dateLastProduction, machine } = msg.data;\nlet [differenceTimedateStartProduction, differenceTimelastProduction] = ['differenceTimedateStartProduction', 'differenceTimelasProduction'].map(key => context.get(key) || 0);\nlet currentTimestamp = new Date();\nlet currentStatus = context.get('currentStatus') || null;\n\ndifferenceTimedateStartProduction = dateStartProduction !== null ? (currentTimestamp.getTime() - dateStartProduction.getTime()) / 1000 : null;\ndifferenceTimelastProduction = dateLastProduction !== null ? (currentTimestamp.getTime() - dateLastProduction.getTime()) / 1000 : null;\n\ncontext.set('differenceTimedateStartProduction', differenceTimedateStartProduction);\ncontext.set('differenceTimelastProduction', differenceTimelastProduction);\n\nif (dateStartProduction !== null) {\n    //Mapear status\n    const machineWorking = differenceTimedateStartProduction <= 299 || (differenceTimelastProduction !== null && differenceTimelastProduction <= 299);\n\n    const machineIdle = (differenceTimedateStartProduction >= 300 && differenceTimelastProduction >= 300 && differenceTimelastProduction <= 1799) ||\n        (differenceTimedateStartProduction >= 300 && differenceTimedateStartProduction <= 1799 && dateLastProduction === null);\n\n    const machineOff = ((differenceTimedateStartProduction >= 300 && differenceTimelastProduction >= 1800) || (differenceTimedateStartProduction >= 1800 && dateLastProduction === null));\n\n    const newStatus = machineWorking ? 'TRABALHANDO' : machineIdle ? 'PARADO' : machineOff ? 'DESLIGADO' : null;\n    if (newStatus) currentStatus = newStatus;\n}\n\nif (dateStartProduction == null) currentStatus = \"DESLIGADO\";\n\ncontext.set('currentStatus', currentStatus);\n\nmsg.status = {\n    timeCurrentProduction: differenceTimedateStartProduction,\n    timeLastProduction: differenceTimelastProduction,\n    machine: machine,\n    currentStatus: currentStatus\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1410,
        "y": 5040,
        "wires": [
            [
                "d8888fa3d8fb528e",
                "4608a10bd9c346c3"
            ]
        ],
        "icon": "node-red/status.svg"
    },
    {
        "id": "d8888fa3d8fb528e",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "FormatedMessage",
        "func": "let machine = msg.status.machine;\nlet timestamp = new Date().getTime();\nlet currentStatus = context.get('currentStatus') || null; \nlet oldStatus = msg.status.currentStatus;\n\nif(!currentStatus || currentStatus !== oldStatus) {\n    currentStatus = oldStatus;\n    context.set('currentStatus', currentStatus);\n\n    msg.payload = {\n            timestamp: timestamp,\n            deviceSerialNumber: machine,\n            status: currentStatus\n    }\n    return msg;\n}\nreturn null;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1790,
        "y": 5040,
        "wires": [
            []
        ],
        "icon": "font-awesome/fa-envelope"
    },
    {
        "id": "46226536fbab905c",
        "type": "inject",
        "z": "dae82ca7554ded9f",
        "name": "SWITCH1 ON",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF3C2D",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch1\": {\"Action\": \"ON\"} }",
        "payloadType": "json",
        "x": 150,
        "y": 5260,
        "wires": [
            [
                "c76b792bf7fa645e"
            ]
        ]
    },
    {
        "id": "761d3ca4ad0be3d9",
        "type": "inject",
        "z": "dae82ca7554ded9f",
        "name": "SWITCH1 OFF",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF3C2D",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch1\": {\"Action\": \"OFF\"} }",
        "payloadType": "json",
        "x": 160,
        "y": 5300,
        "wires": [
            [
                "c76b792bf7fa645e"
            ]
        ]
    },
    {
        "id": "cfb97e89336ede77",
        "type": "inject",
        "z": "dae82ca7554ded9f",
        "name": "SWITCH3 ON",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF3C2D",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch3\": {\"Action\": \"ON\"} }",
        "payloadType": "json",
        "x": 150,
        "y": 5500,
        "wires": [
            [
                "c76b792bf7fa645e"
            ]
        ]
    },
    {
        "id": "e87e62f85c896b71",
        "type": "inject",
        "z": "dae82ca7554ded9f",
        "name": "SWITCH3 OFF",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF3C2D",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch3\": {\"Action\": \"OFF\"} }",
        "payloadType": "json",
        "x": 160,
        "y": 5540,
        "wires": [
            [
                "c76b792bf7fa645e"
            ]
        ]
    },
    {
        "id": "4d8ae7a9f4ea2633",
        "type": "inject",
        "z": "dae82ca7554ded9f",
        "name": "SWITCH2 ON",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF3C2D",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch2\": {\"Action\": \"ON\"} }",
        "payloadType": "json",
        "x": 150,
        "y": 5360,
        "wires": [
            [
                "c76b792bf7fa645e"
            ]
        ]
    },
    {
        "id": "26a0216f77f6d144",
        "type": "inject",
        "z": "dae82ca7554ded9f",
        "name": "SWITCH2 OFF",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF3C2D",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch2\": {\"Action\": \"OFF\"} }",
        "payloadType": "json",
        "x": 160,
        "y": 5400,
        "wires": [
            [
                "c76b792bf7fa645e"
            ]
        ]
    },
    {
        "id": "c76b792bf7fa645e",
        "type": "switch",
        "z": "dae82ca7554ded9f",
        "name": "Machines",
        "property": "payload.serialNumber",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "DF3C2D",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 400,
        "y": 5380,
        "wires": [
            [
                "5fc9657103212300"
            ]
        ],
        "icon": "font-awesome/fa-desktop"
    },
    {
        "id": "5fc9657103212300",
        "type": "switch",
        "z": "dae82ca7554ded9f",
        "name": "OPTION SW",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "hask",
                "v": "Switch1",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "Switch2",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "Switch3",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 590,
        "y": 5380,
        "wires": [
            [
                "06db8a8b7d1145ce"
            ],
            [
                "06db8a8b7d1145ce"
            ],
            [
                "06db8a8b7d1145ce"
            ]
        ]
    },
    {
        "id": "06db8a8b7d1145ce",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "Switches States",
        "func": "function handleSwitch(payload, context, switchName, startName, finishName, verifyName) {\n  let switchKey = Object.keys(payload).find(key => key.startsWith(switchName)); // extrai o switch que chegou no payload\n  let startState = context.get(startName) || false;\n  let finishState = context.get(finishName) || false;\n  let verifyState = context.get(verifyName) || false;\n  let actionValue = payload[switchKey] ? payload[switchKey].Action : null;\n  let switchState = context.get(switchName) || null;\n\n  switchState = actionValue || switchState; // adquiri o estado do switch que chegou\n\n  if (switchState == \"ON\" && finishState == false) {\n    startState = true;\n\n  } else if (switchState == \"OFF\" && startState == true) {\n    finishState = true;\n  }\n  if (startState == true && finishState == true) {\n    verifyState = true;\n    startState = false;\n    finishState = false;\n  }\n  context.set(switchName, switchState);\n  context.set(startName, startState);\n  context.set(finishName, finishState);\n  context.set(verifyName, verifyState);\n\n  return {\n    switchState: switchState,\n    startState: startState,\n    finishState: finishState,\n    verifyState: verifyState\n  };\n}\nlet payload = msg.payload;\nlet manualPressed = handleSwitch(payload, context, 'Switch1', 'manualOutsetPressed', 'finishedPressedManual', 'verifyManualPress');\nlet quickDescent = handleSwitch(payload, context, 'Switch2', 'outsetQuickDescent', 'endQuickDescent', 'quickDescentComplete');\nlet pressBelow = handleSwitch(payload, context, 'Switch3', 'homePressBelow', 'finalPressBelow', 'pressCompleted');\n\nmsg.switches = {\n  switch1: manualPressed.switchState,\n  switch2: quickDescent.switchState,\n  switch3: pressBelow.switchState,\n  manualOutsetPressed: manualPressed.startState,\n  verifyManualPress: manualPressed.verifyState,\n  outsetQuickDescent: quickDescent.startState,\n  quickDescentComplete: quickDescent.verifyState,\n  homePressBelow: pressBelow.startState,\n  pressCompleted: pressBelow.verifyState\n}\nif (manualPressed.verifyState == true && quickDescent.verifyState == true && pressBelow.verifyState == true) {\n  manualPressed.verifyState = false;\n  context.set('verifyManualPress', manualPressed.verifyState);\n\n  quickDescent.verifyState = false;\n  context.set('quickDescentComplete', quickDescent.verifyState);\n\n  pressBelow.verifyState = false;\n  context.set('pressCompleted')\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 5380,
        "wires": [
            [
                "76c3c2dffa1a1696"
            ]
        ],
        "icon": "node-red/swap.svg"
    },
    {
        "id": "76c3c2dffa1a1696",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "Conditions Machine",
        "func": "let { manualOutsetPressed, verifyManualPress, outsetQuickDescent, quickDescentComplete, homePressBelow, pressCompleted} = msg.switches;\nlet startFold = manualOutsetPressed ? true : false;\nlet finishedFold = verifyManualPress && quickDescentComplete && pressCompleted ? true : false;\n\ncontext.set('startFold', startFold);\ncontext.set('finishedFold', finishedFold);\n\nmsg.conditions = {\n    startPress: startFold,\n    verifyPress: finishedFold,\n    serialNumber: msg.payload.serialNumber\n}\nfinishedFold = false;\ncontext.set('finishedFold', finishedFold);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1050,
        "y": 5380,
        "wires": [
            [
                "e2b5a5917664a0f8"
            ]
        ],
        "icon": "font-awesome/fa-bars"
    },
    {
        "id": "e2b5a5917664a0f8",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "Production Machine",
        "func": "let {startPress, verifyPress, serialNumber} = msg.conditions;\nlet [dateStartProduction, dateLastProduction, machine] = ['dateStartProduction', 'dateLastProduction', 'machine'].map(key => context.get(key) || null);\nlet pressCount = context.get('pressCount') || 0;\nlet resetShift = context.get('resetShift') || false;\nlet currentTimestamp = new Date();\n\nconst actions = {\n    resetShift: () => {pressCount = 0; resetShift = false }, \n    payloadReset: () => {resetShift = true },\n    startProduction: () => {dateStartProduction = currentTimestamp },\n    finishedProduction: () => {pressCount++, dateLastProduction = currentTimestamp },\n    machineNull: () => {machine = serialNumber }\n};\n\nconst conditions = {\n    resetShift: resetShift,\n    payloadReset: msg.payload === 'reset',\n    startProduction: startPress == true,\n    finishedProduction: verifyPress == true,\n    machineNull: serialNumber && machine == null,\n};\n\nObject.entries(conditions).forEach(([condition, isTrue]) => {\n    if (isTrue && actions[condition]) actions[condition](); \n});\ncontext.set('pressCount', pressCount);\ncontext.set('dateStartProduction', dateStartProduction);\ncontext.set('dateLastProduction', dateLastProduction);\ncontext.set('resetShift', resetShift);\ncontext.set('machine', machine);\n\nmsg.data = {\n    verifyPress: verifyPress,\n    press: pressCount,\n    dateStartProduction: dateStartProduction,\n    dateLastProduction: dateLastProduction,\n    machine: machine,\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1380,
        "y": 5360,
        "wires": [
            [
                "1bda6934a809f1d9",
                "45a6c8787879397d"
            ]
        ],
        "icon": "font-awesome/fa-book"
    },
    {
        "id": "1bda6934a809f1d9",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "PRENSA 600T",
        "func": "let {verifyPress, press, machine} = msg.data;\n\nmsg.payload = {\n    verifyPress,\n    golpes: press,\n    deviceSerialNumber: machine\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1600,
        "y": 5320,
        "wires": [
            [
                "fc6f40463850f71f"
            ]
        ],
        "icon": "font-awesome/fa-cogs"
    },
    {
        "id": "45a6c8787879397d",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "verifyStatus",
        "func": "let { dateStartProduction, dateLastProduction, machine } = msg.data;\nlet [differenceTimedateStartProduction, differenceTimelastProduction] = ['differenceTimedateStartProduction', 'differenceTimelasProduction'].map(key => context.get(key) || 0);\nlet currentTimestamp = new Date();\nlet currentStatus = context.get('currentStatus') || null;\n\ndifferenceTimedateStartProduction = dateStartProduction !== null ? (currentTimestamp.getTime() - dateStartProduction.getTime()) / 1000 : null;\ndifferenceTimelastProduction = dateLastProduction !== null ? (currentTimestamp.getTime() - dateLastProduction.getTime()) / 1000 : null;\n\ncontext.set('differenceTimedateStartProduction', differenceTimedateStartProduction);\ncontext.set('differenceTimelastProduction', differenceTimelastProduction);\n\nif (dateStartProduction !== null) {\n\n    //Mapear status\n    const machineWorking = differenceTimedateStartProduction <= 299 || (differenceTimelastProduction !== null && differenceTimelastProduction <= 299);\n\n    const machineIdle = (differenceTimedateStartProduction >= 300 && differenceTimelastProduction >= 300 && differenceTimelastProduction <= 1799) ||\n        (differenceTimedateStartProduction >= 300 && differenceTimedateStartProduction <= 1799 && dateLastProduction === null);\n\n    const machineOff = ((differenceTimedateStartProduction >= 300 && differenceTimelastProduction >= 1800) || (differenceTimedateStartProduction >= 1800 && dateLastProduction === null));\n\n    const newStatus = machineWorking ? 'TRABALHANDO' : machineIdle ? 'PARADO' : machineOff ? 'DESLIGADO' : null;\n    if (newStatus) currentStatus = newStatus;\n}\n\nif (dateStartProduction == null) currentStatus = \"DESLIGADO\";\n\ncontext.set('currentStatus', currentStatus);\n\nmsg.status = {\n    timeCurrentProduction: differenceTimedateStartProduction,\n    timeLastProduction: differenceTimelastProduction,\n    machine: machine,\n    currentStatus: currentStatus\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1610,
        "y": 5360,
        "wires": [
            [
                "795ead2398c2acb5",
                "d0317a639b6e757d"
            ]
        ],
        "icon": "node-red/status.svg"
    },
    {
        "id": "795ead2398c2acb5",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "FormatedMessage",
        "func": "let machine = msg.status.machine;\nlet timestamp = new Date().getTime();\nlet currentStatus = context.get('currentStatus') || null; \nlet oldStatus = msg.status.currentStatus;\n\nif(!currentStatus || currentStatus !== oldStatus) {\n    currentStatus = oldStatus;\n    context.set('currentStatus', currentStatus);\n\n    msg.payload = {\n            timestamp: timestamp,\n            deviceSerialNumber: machine,\n            status: currentStatus\n    }\n    return msg;\n}\nreturn null;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1850,
        "y": 5360,
        "wires": [
            []
        ],
        "icon": "font-awesome/fa-envelope"
    },
    {
        "id": "0458166e007d2c95",
        "type": "inject",
        "z": "dae82ca7554ded9f",
        "name": "RESET Shift1",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "conditions",
                "v": " {}",
                "vt": "json"
            },
            {
                "p": "data",
                "v": "{}",
                "vt": "json"
            }
        ],
        "repeat": "",
        "crontab": "20 17 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1080,
        "y": 5320,
        "wires": [
            [
                "e2b5a5917664a0f8"
            ]
        ],
        "icon": "font-awesome/fa-rotate-right"
    },
    {
        "id": "8b0ed174ca5cec70",
        "type": "inject",
        "z": "dae82ca7554ded9f",
        "name": "RESET Shift1",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "switches",
                "v": "{}",
                "vt": "json"
            },
            {
                "p": "conditions",
                "v": " {}",
                "vt": "json"
            },
            {
                "p": "data",
                "v": "{}",
                "vt": "json"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 970,
        "y": 4960,
        "wires": [
            [
                "f537a25d27cd4325"
            ]
        ],
        "icon": "font-awesome/fa-rotate-right"
    },
    {
        "id": "60798f9d27c217e0",
        "type": "inject",
        "z": "dae82ca7554ded9f",
        "name": "SWITCH1 ON",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF55AF",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch1\": {\"Action\": \"ON\"} }",
        "payloadType": "json",
        "x": 150,
        "y": 5640,
        "wires": [
            [
                "74cc60825f90b498"
            ]
        ]
    },
    {
        "id": "97d081d911c165d3",
        "type": "inject",
        "z": "dae82ca7554ded9f",
        "name": "SWITCH1 OFF",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF55AF",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch1\": {\"Action\": \"OFF\"} }",
        "payloadType": "json",
        "x": 160,
        "y": 5680,
        "wires": [
            [
                "74cc60825f90b498"
            ]
        ]
    },
    {
        "id": "597370c761bdc65c",
        "type": "inject",
        "z": "dae82ca7554ded9f",
        "name": "SWITCH3 ON",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF55AF",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch3\": {\"Action\": \"ON\"} }",
        "payloadType": "json",
        "x": 150,
        "y": 5740,
        "wires": [
            [
                "74cc60825f90b498"
            ]
        ]
    },
    {
        "id": "128b25fd3c41a911",
        "type": "inject",
        "z": "dae82ca7554ded9f",
        "name": "SWITCH3 OFF",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF55AF",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch3\": {\"Action\": \"OFF\"} }",
        "payloadType": "json",
        "x": 160,
        "y": 5780,
        "wires": [
            [
                "74cc60825f90b498"
            ]
        ]
    },
    {
        "id": "74cc60825f90b498",
        "type": "switch",
        "z": "dae82ca7554ded9f",
        "name": "Machines",
        "property": "payload.serialNumber",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "DF24F3",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "DF55AF",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 400,
        "y": 5720,
        "wires": [
            [
                "70a198db261e6dc2"
            ],
            [
                "0aeba35ad9015636"
            ]
        ],
        "icon": "font-awesome/fa-desktop"
    },
    {
        "id": "0590e2f10e3ba860",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "Switches States",
        "func": "function handleSwitch(payload, context, switchName, startName, finishName, verifyName) {\n    let switchState = context.get(switchName) || null;\n    let startState = context.get(startName) || false;\n    let finishState = context.get(finishName) || false;\n    let verifyState = context.get(verifyName) || false;\n\n    if (payload[switchName] && payload[switchName].Action == \"ON\") {\n        switchState = \"ON\";\n        startState = true;\n    } else if (payload[switchName] && payload[switchName].Action == \"OFF\" && switchState == \"ON\" && startState == true) {\n        switchState = \"OFF\";\n        finishState = true;\n    }\n    if (startState == true && finishState == true) {\n        verifyState = true;\n        startState = false;\n        finishState = false;\n    }\n    context.set(switchName, switchState);\n    context.set(startName, startState);\n    context.set(finishName, finishState);\n    context.set(verifyName, verifyState);\n\n    return {\n        switchState: switchState,\n        startState: startState,\n        finishState: finishState,\n        verifyState: verifyState\n    };\n}\nlet payload = msg.payload;\nlet verifyDescent = handleSwitch(payload, context, 'Switch1', 'outsetSlowDescent', 'endSlowDescent', 'slowDescentComplete');\nlet verifyQuick = handleSwitch(payload, context, 'Switch3', 'outsetQuickAscent', 'endQuickAscent', 'quickAscentComplete');\n\nmsg.switches = {\n    switch1: verifyDescent.switchState,\n    switch3: verifyQuick.switchState,\n    outsetSlowDescent: verifyDescent.startState,\n    slowDescentComplete: verifyDescent.verifyState,\n    outsetQuickAscent: verifyQuick.startState,\n    quickAscentComplete: verifyQuick.verifyState,\n}\nif (verifyDescent.verifyState == true && verifyQuick.verifyState == true ) {\n    verifyDescent.verifyState = false;\n    context.set('slowDescentComplete', verifyDescent.verifyState);\n\n    verifyQuick.verifyState = false;\n    context.set('quickAscentComplete', verifyQuick.verifyState);\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 5760,
        "wires": [
            [
                "1e425a3540d0ccc2",
                "7663d29d0dd62a79"
            ]
        ],
        "icon": "node-red/swap.svg"
    },
    {
        "id": "70a198db261e6dc2",
        "type": "switch",
        "z": "dae82ca7554ded9f",
        "name": "OPTION SW",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "hask",
                "v": "Switch1",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "Switch3",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 630,
        "y": 5680,
        "wires": [
            [
                "a8446822b94814dd"
            ],
            [
                "a8446822b94814dd"
            ]
        ]
    },
    {
        "id": "a8446822b94814dd",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "Switches States",
        "func": "function handleSwitch(payload, context, switchName, startName, finishName, verifyName) {\n    let switchState = context.get(switchName) || null;\n    let startState = context.get(startName) || false;\n    let finishState = context.get(finishName) || false;\n    let verifyState = context.get(verifyName) || false;\n\n    if (payload[switchName] && payload[switchName].Action == \"ON\") {\n        switchState = \"ON\";\n        startState = true;\n    } else if (payload[switchName] && payload[switchName].Action == \"OFF\" && switchState == \"ON\" && startState == true) {\n        switchState = \"OFF\";\n        finishState = true;\n    }\n    if (startState == true && finishState == true) {\n        verifyState = true;\n        startState = false;\n        finishState = false;\n    }\n    context.set(switchName, switchState);\n    context.set(startName, startState);\n    context.set(finishName, finishState);\n    context.set(verifyName, verifyState);\n\n    return {\n        switchState: switchState,\n        startState: startState,\n        finishState: finishState,\n        verifyState: verifyState\n    };\n}\nlet payload = msg.payload;\nlet verifyDescent = handleSwitch(payload, context, 'Switch1', 'outsetSlowDescent', 'endSlowDescent', 'slowDescentComplete');\nlet verifyQuick = handleSwitch(payload, context, 'Switch3', 'outsetQuickAscent', 'endQuickAscent', 'quickAscentComplete');\n\nmsg.switches = {\n    switch1: verifyDescent.switchState,\n    switch3: verifyQuick.switchState,\n    outsetSlowDescent: verifyDescent.startState,\n    slowDescentComplete: verifyDescent.verifyState,\n    outsetQuickAscent: verifyQuick.startState,\n    quickAscentComplete: verifyQuick.verifyState,\n}\nif (verifyDescent.verifyState == true && verifyQuick.verifyState == true) {\n    verifyDescent.verifyState = false;\n    context.set('slowDescentComplete', verifyDescent.verifyState);\n\n    verifyQuick.verifyState = false;\n    context.set('quickAscentComplete', verifyQuick.verifyState);\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 5680,
        "wires": [
            [
                "376ff286518294d3"
            ]
        ],
        "icon": "node-red/swap.svg"
    },
    {
        "id": "1e425a3540d0ccc2",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "Conditions Machine",
        "func": "let {outsetSlowDescent, outsetQuickAscent, slowDescentComplete, quickAscentComplete} = msg.switches;\nlet startFold = outsetSlowDescent == true ? true : false;\nlet verifyFold = slowDescentComplete == true && quickAscentComplete == true ? true : false;\n\ncontext.set('startFold', startFold);\ncontext.set('verifyFold', verifyFold);\n\nmsg.conditions = {\n    startFold: startFold,\n    verifyFold: verifyFold,\n    serialNumber: msg.payload.serialNumber,\n}\n\nverifyFold = false;\ncontext.set('verifyFold', verifyFold);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1050,
        "y": 5760,
        "wires": [
            [
                "3eda5223cc8a68af"
            ]
        ],
        "icon": "font-awesome/fa-bars"
    },
    {
        "id": "376ff286518294d3",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "Conditions Machine",
        "func": "let {outsetSlowDescent, outsetQuickAscent, slowDescentComplete, quickAscentComplete} = msg.switches;\nlet startFold = outsetSlowDescent == true ? true : false;\nlet verifyFold = slowDescentComplete == true && quickAscentComplete == true ? true : false;\n\ncontext.set('startFold', startFold);\ncontext.set('verifyFold', verifyFold);\n\nmsg.conditions = {\n    startFold: startFold,\n    verifyFold: verifyFold,\n    serialNumber: msg.payload.serialNumber,\n}\n\nverifyFold = false;\ncontext.set('verifyFold', verifyFold);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1050,
        "y": 5680,
        "wires": [
            [
                "4042b4dcce7a1738"
            ]
        ],
        "icon": "font-awesome/fa-bars"
    },
    {
        "id": "f537a25d27cd4325",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "Production Machine",
        "func": "let { startFold, verifyFold, serialNumber } = msg.conditions;\nlet [dateStartProduction, dateLastProduction, machine] = ['dateStartProduction', 'dateLastProduction', 'machine'].map(key => context.get(key) || null);\nlet foldCount = context.get('foldCount') || 0;\nlet resetShift = context.get('resetShift') || false;\nlet currentTimestamp = new Date();\n\nconst actions = {\n    resetShift: () => { foldCount = 0; resetShift = false },\n    payloadReset: () => { resetShift = true },\n    startProduction: () => { dateStartProduction = currentTimestamp },\n    finishedFold: () => { foldCount++; dateLastProduction = currentTimestamp },\n    machineNull: () => { machine = serialNumber }\n};\nconst conditions = {\n    resetShift: resetShift === true,\n    payloadReset: msg.payload == 'reset',\n    startProduction: startFold === true,\n    finishedFold: verifyFold == true,\n    machineNull: (serialNumber && machine == null) || (serialNumber && machine !== serialNumber && machine !== null),\n};\n\nObject.entries(conditions).forEach(([condition, isTrue]) => {\n    if (isTrue && actions[condition]) actions[condition]();\n});\ncontext.set('foldCount', foldCount);\ncontext.set('dateStartProduction', dateStartProduction);\ncontext.set('dateLastProduction', dateLastProduction);\ncontext.set('resetShift', resetShift);\ncontext.set('machine', machine);\n\nmsg.data = {\n    verifyFold: verifyFold,\n    fold: foldCount,\n    dateStartProduction: dateStartProduction,\n    dateLastProduction: dateLastProduction,\n    machine: machine,\n    reset: resetShift\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1200,
        "y": 5020,
        "wires": [
            [
                "0e18d5a4e31af5f4",
                "47c25912fa9c6162"
            ]
        ],
        "icon": "font-awesome/fa-book"
    },
    {
        "id": "3eda5223cc8a68af",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "Production Machine",
        "func": "let { startFold, verifyFold, serialNumber } = msg.conditions;\nlet [dateStartProduction, dateLastProduction, machine] = ['dateStartProduction', 'dateLastProduction', 'machine'].map(key => context.get(key) || null);\nlet foldCount = context.get('foldCount') || 0;\nlet resetShift = context.get('resetShift') || false;\nlet currentTimestamp = new Date();\n\nconst actions = {\n    resetShift: () => { foldCount = 0; resetShift = false },\n    payloadReset: () => { resetShift = false },\n    startProduction: () => { dateStartProduction = currentTimestamp },\n    finishedProduction: () => { foldCount++; dateLastProduction = currentTimestamp },\n    machineNull: () => { machine = serialNumber }\n};\nconst conditions = {\n    resetShift: resetShift == true,\n    payloadReset: msg.payload === 'reset',\n    startProduction: startFold == true,\n    finishedProduction: verifyFold == true,\n    machineNull: (serialNumber && machine == null) || (serialNumber && machine !== serialNumber && machine !== null)\n};\n\nObject.entries(conditions).forEach(([condition, isTrue]) => {\n    if (isTrue && actions[condition]) actions[condition]();\n});\ncontext.set('foldCount', foldCount);\ncontext.set('resetShift', resetShift);\ncontext.set('dateStartProduction', dateStartProduction);\ncontext.set('dateLastProduction', dateLastProduction);\ncontext.set('machine', machine);\n\nmsg.data = {\n    verifyFold: verifyFold,\n    fold: foldCount,\n    dateStartProduction: dateStartProduction,\n    dateLastProduction: dateLastProduction,\n    machine: machine,\n    reset: resetShift\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1280,
        "y": 5760,
        "wires": [
            [
                "bef1842b2e2bc8a4",
                "e272cac0ac192032"
            ]
        ],
        "icon": "font-awesome/fa-book"
    },
    {
        "id": "4042b4dcce7a1738",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "Production Machine",
        "func": "let {startFold, verifyFold, serialNumber} = msg.conditions;\nlet [dateStartProduction, dateLastProduction, machine] = ['dateStartProduction', 'dateLastProduction', 'machine'].map(key => context.get(key) || null);\nlet foldCount = context.get('foldCount') || 0;\nlet resetShift = context.get('resetShift') || false;\nlet currentTimestamp = new Date();\n\nconst actions = {\n    resetShift: () => {foldCount = 0; resetShift = false},\n    payloadReset: () => {resetShift = false},\n    startProduction: () => {dateStartProduction = currentTimestamp},\n    finishedProduction: () => {foldCount++;dateLastProduction = currentTimestamp},\n    machineNull: () => {machine = serialNumber}\n};\nconst conditions = {\n    resetShift: resetShift == true,\n    payloadReset: msg.payload === 'reset',\n    startProduction: startFold == true,\n    finishedProduction: verifyFold == true,\n    machineNull: (serialNumber && machine == null) || (serialNumber && machine !== serialNumber && machine !== null)\n};\n\nObject.entries(conditions).forEach(([condition, isTrue]) => {\n    if (isTrue && actions[condition]) actions[condition]();\n});\ncontext.set('foldCount', foldCount);\ncontext.set('resetShift', resetShift);\ncontext.set('dateStartProduction', dateStartProduction);\ncontext.set('dateLastProduction', dateLastProduction);\ncontext.set('machine', machine);\n\nmsg.data = {\n    verifyFold: verifyFold,\n    fold: foldCount,\n    dateStartProduction: dateStartProduction,\n    dateLastProduction: dateLastProduction,\n    machine: machine,\n    reset: resetShift\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1280,
        "y": 5680,
        "wires": [
            [
                "c65339063d868458",
                "c53a1200f319f013"
            ]
        ],
        "icon": "font-awesome/fa-book"
    },
    {
        "id": "c65339063d868458",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "DOBRADEIRA T25 1",
        "func": "let { verifyFold, fold, machine } = msg.data;\n\nmsg.payload = {\n    verifyFold: verifyFold,\n    dobras: fold,\n    deviceSerialNumber: machine\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1580,
        "y": 5640,
        "wires": [
            [
                "f2370a5f943d3446"
            ]
        ],
        "icon": "font-awesome/fa-cogs"
    },
    {
        "id": "c53a1200f319f013",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "verifyStatus",
        "func": "let { dateStartProduction, dateLastProduction, machine } = msg.data;\nlet [differenceTimedateStartProduction, differenceTimelastProduction] = ['differenceTimedateStartProduction', 'differenceTimelasProduction'].map(key => context.get(key) || 0);\nlet currentTimestamp = new Date();\nlet currentStatus = context.get('currentStatus') || null;\n\ndifferenceTimedateStartProduction = dateStartProduction !== null ? (currentTimestamp.getTime() - dateStartProduction.getTime()) / 1000 : null;\ndifferenceTimelastProduction = dateLastProduction !== null ? (currentTimestamp.getTime() - dateLastProduction.getTime()) / 1000 : null;\n\ncontext.set('differenceTimedateStartProduction', differenceTimedateStartProduction);\ncontext.set('differenceTimelastProduction', differenceTimelastProduction);\n\nif (dateStartProduction !== null) {\n\n    //Mapear status\n    const machineWorking = differenceTimedateStartProduction <= 299 || (differenceTimelastProduction !== null && differenceTimelastProduction <= 299);\n\n    const machineIdle = (differenceTimedateStartProduction >= 300 && differenceTimelastProduction >= 300 && differenceTimelastProduction <= 1799) ||\n        (differenceTimedateStartProduction >= 300 && differenceTimedateStartProduction <= 1799 && dateLastProduction === null);\n\n    const machineOff = ((differenceTimedateStartProduction >= 300 && differenceTimelastProduction >= 1800) || (differenceTimedateStartProduction >= 1800 && dateLastProduction === null));\n\n    const newStatus = machineWorking ? 'TRABALHANDO' : machineIdle ? 'PARADO' : machineOff ? 'DESLIGADO' : null;\n    if (newStatus) currentStatus = newStatus;\n}\n\nif (dateStartProduction == null) currentStatus = \"DESLIGADO\";\n\ncontext.set('currentStatus', currentStatus);\n\nmsg.status = {\n    timeCurrentProduction: differenceTimedateStartProduction,\n    timeLastProduction: differenceTimelastProduction,\n    machine: machine,\n    currentStatus: currentStatus\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1550,
        "y": 5680,
        "wires": [
            [
                "1a321b7e90fc1de7"
            ]
        ],
        "icon": "node-red/status.svg"
    },
    {
        "id": "1a321b7e90fc1de7",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "FormatedMessage",
        "func": "let machine = msg.status.machine;\nlet timestamp = new Date().getTime();\nlet currentStatus = context.get('currentStatus') || null; \nlet oldStatus = msg.status.currentStatus;\n\nif(!currentStatus || currentStatus !== oldStatus) {\n    currentStatus = oldStatus;\n    context.set('currentStatus', currentStatus);\n\n    msg.payload = {\n            timestamp: timestamp,\n            deviceSerialNumber: machine,\n            status: currentStatus\n    }\n    return msg;\n}\nreturn null;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1850,
        "y": 5680,
        "wires": [
            []
        ],
        "icon": "font-awesome/fa-envelope"
    },
    {
        "id": "bef1842b2e2bc8a4",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "DOBRADEIRA T25 2",
        "func": "let { verifyFold, fold, machine } = msg.data;\n\nmsg.payload = {\n    verifyFold: verifyFold,\n    dobras: fold,\n    deviceSerialNumber: machine\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1560,
        "y": 5740,
        "wires": [
            [
                "196ba88d63c75ea0"
            ]
        ],
        "icon": "font-awesome/fa-cogs"
    },
    {
        "id": "e272cac0ac192032",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "verifyStatus",
        "func": "let { dateStartProduction, dateLastProduction, machine } = msg.data;\nlet [differenceTimedateStartProduction, differenceTimelastProduction] = ['differenceTimedateStartProduction', 'differenceTimelasProduction'].map(key => context.get(key) || 0);\nlet currentTimestamp = new Date();\nlet currentStatus = context.get('currentStatus') || null;\n\ndifferenceTimedateStartProduction = dateStartProduction !== null ? (currentTimestamp.getTime() - dateStartProduction.getTime()) / 1000 : null;\ndifferenceTimelastProduction = dateLastProduction !== null ? (currentTimestamp.getTime() - dateLastProduction.getTime()) / 1000 : null;\n\ncontext.set('differenceTimedateStartProduction', differenceTimedateStartProduction);\ncontext.set('differenceTimelastProduction', differenceTimelastProduction);\n\nif (dateStartProduction !== null) {\n\n    //Mapear status\n    const machineWorking = differenceTimedateStartProduction <= 299 || (differenceTimelastProduction !== null && differenceTimelastProduction <= 299);\n\n    const machineIdle = (differenceTimedateStartProduction >= 300 && differenceTimelastProduction >= 300 && differenceTimelastProduction <= 1799) ||\n        (differenceTimedateStartProduction >= 300 && differenceTimedateStartProduction <= 1799 && dateLastProduction === null);\n\n    const machineOff = ((differenceTimedateStartProduction >= 300 && differenceTimelastProduction >= 1800) || (differenceTimedateStartProduction >= 1800 && dateLastProduction === null));\n\n    const newStatus = machineWorking ? 'TRABALHANDO' : machineIdle ? 'PARADO' : machineOff ? 'DESLIGADO' : null;\n    if (newStatus) currentStatus = newStatus;\n}\n\nif (dateStartProduction == null) currentStatus = \"DESLIGADO\";\n\ncontext.set('currentStatus', currentStatus);\n\nmsg.status = {\n    timeCurrentProduction: differenceTimedateStartProduction,\n    timeLastProduction: differenceTimelastProduction,\n    machine: machine,\n    currentStatus: currentStatus\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1530,
        "y": 5780,
        "wires": [
            [
                "dfb27b8182b54acf"
            ]
        ],
        "icon": "node-red/status.svg"
    },
    {
        "id": "dfb27b8182b54acf",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "FormatedMessage",
        "func": "let machine = msg.status.machine;\nlet timestamp = new Date().getTime();\nlet currentStatus = context.get('currentStatus') || null; \nlet oldStatus = msg.status.currentStatus;\n\nif(!currentStatus || currentStatus !== oldStatus) {\n    currentStatus = oldStatus;\n    context.set('currentStatus', currentStatus);\n\n    msg.payload = {\n            timestamp: timestamp,\n            deviceSerialNumber: machine,\n            status: currentStatus\n    }\n    return msg;\n}\nreturn null;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1850,
        "y": 5780,
        "wires": [
            []
        ],
        "icon": "font-awesome/fa-envelope"
    },
    {
        "id": "84f6f1c74f9e939e",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "Switch State",
        "func": "function handleSwitch(payload, context, switchName, startName, finishName, verifyName) {\n    let switchState = context.get(switchName) || null;\n    let startState = context.get(startName) || false;\n    let finishState = context.get(finishName) || false;\n    let verifyState = context.get(verifyName) || false;\n\n    if (payload[switchName] && payload[switchName].Action == \"ON\") {\n        switchState = \"ON\";\n        startState = true;\n    } else if (payload[switchName] && payload[switchName].Action == \"OFF\" && switchState == \"ON\" && startState == true) {\n        switchState = \"OFF\";\n        finishState = true;\n    }\n    if (startState == true && finishState == true) {\n        verifyState = true;\n        startState = false;\n        finishState = false;\n    }\n\n    context.set(switchName, switchState);\n    context.set(startName, startState);\n    context.set(finishName, finishState);\n    context.set(verifyName, verifyState);\n\n    return {\n        switchState: switchState,\n        startState: startState,\n        finishState: finishState,\n        verifyState: verifyState\n    };\n}\nlet verifyFold = handleSwitch(msg.payload, context, 'Switch1', 'startFold', 'finishedFold', 'verifyFold');\n\nmsg.switches = {\n    switch1: verifyFold.switchState,\n    startFold: verifyFold.startState,\n    verifyFold: verifyFold.verifyState,\n}\nverifyFold.verifyState = false;\ncontext.set('verifyFold', verifyFold.verifyState);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 5880,
        "wires": [
            [
                "91d445fd2910bf38"
            ]
        ],
        "icon": "node-red/swap.svg"
    },
    {
        "id": "56a5a157d9b05c76",
        "type": "switch",
        "z": "dae82ca7554ded9f",
        "name": "OPTION SW",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "hask",
                "v": "Switch1",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 530,
        "y": 5880,
        "wires": [
            [
                "84f6f1c74f9e939e"
            ]
        ]
    },
    {
        "id": "91d445fd2910bf38",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "Conditions Machine",
        "func": "let { startFold, verifyFold } = msg.switches;\n\nmsg.conditions = {\n    startFold: startFold,\n    verifyFold: verifyFold,\n    serialNumber: msg.payload.serialNumber\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 5880,
        "wires": [
            [
                "1db64a819f5d0483"
            ]
        ],
        "icon": "font-awesome/fa-bars"
    },
    {
        "id": "1db64a819f5d0483",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "Production Machine",
        "func": "let { startFold, verifyFold, serialNumber } = msg.conditions;\nlet [dateStartProduction, dateLastProduction, machine] = ['dateStartProduction', 'dateLastProduction', 'machine'].map(key => context.get(key) || null);\nlet foldCount = context.get('foldCount') || 0;\nlet resetShift = context.get('resetShift') || false;\nlet currentTimestamp = new Date();\n\nconst actions = {\n    resetShift: () => { foldCount = 0; resetShift = false },\n    payloadReset: () => { resetShift = true },\n    startProduction: () => { dateStartProduction = currentTimestamp },\n    finishedFold: () => { foldCount++; dateLastProduction = currentTimestamp },\n    machineNull: () => { machine = serialNumber }\n};\nconst conditions = {\n    resetShift: resetShift === true,\n    payloadReset: msg.payload == 'reset',\n    startProduction: startFold === true,\n    finishedFold: verifyFold == true,\n    machineNull: (serialNumber && machine == null) || (serialNumber && machine !== serialNumber && machine !== null),\n};\n\nObject.entries(conditions).forEach(([condition, isTrue]) => {\n    if (isTrue && actions[condition]) actions[condition]();\n});\ncontext.set('foldCount', foldCount);\ncontext.set('dateStartProduction', dateStartProduction);\ncontext.set('dateLastProduction', dateLastProduction);\ncontext.set('resetShift', resetShift);\ncontext.set('machine', machine);\n\nmsg.data = {\n    verifyFold: verifyFold,\n    fold: foldCount,\n    dateStartProduction: dateStartProduction,\n    dateLastProduction: dateLastProduction,\n    machine: machine,\n    reset: resetShift\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1260,
        "y": 5880,
        "wires": [
            [
                "8b952a425fda1da3",
                "6c5a9e21b7f4519f"
            ]
        ],
        "icon": "font-awesome/fa-book"
    },
    {
        "id": "8b952a425fda1da3",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "DOBRADEIRA SORG",
        "func": "let { verifyFold, fold, machine } = msg.data;\n\nmsg.payload = {\n    verifyFold: verifyFold,\n    dobras: fold,\n    deviceSerialNumber: machine\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1560,
        "y": 5840,
        "wires": [
            [
                "486edc7787bf0113"
            ]
        ],
        "icon": "font-awesome/fa-cogs"
    },
    {
        "id": "6c5a9e21b7f4519f",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "verifyStatus",
        "func": "let { dateStartProduction, dateLastProduction, machine } = msg.data;\nlet [differenceTimedateStartProduction, differenceTimelastProduction] = ['differenceTimedateStartProduction', 'differenceTimelasProduction'].map(key => context.get(key) || 0);\nlet currentTimestamp = new Date();\nlet currentStatus = context.get('currentStatus') || null;\n\ndifferenceTimedateStartProduction = dateStartProduction !== null ? (currentTimestamp.getTime() - dateStartProduction.getTime()) / 1000 : null;\ndifferenceTimelastProduction = dateLastProduction !== null ? (currentTimestamp.getTime() - dateLastProduction.getTime()) / 1000 : null;\n\ncontext.set('differenceTimedateStartProduction', differenceTimedateStartProduction);\ncontext.set('differenceTimelastProduction', differenceTimelastProduction);\n\nif (dateStartProduction !== null) {\n    //Mapear status\n    const machineWorking = differenceTimedateStartProduction <= 299 || (differenceTimelastProduction !== null && differenceTimelastProduction <= 299);\n\n    const machineIdle = (differenceTimedateStartProduction >= 300 && differenceTimelastProduction >= 300 && differenceTimelastProduction <= 1799) ||\n        (differenceTimedateStartProduction >= 300 && differenceTimedateStartProduction <= 1799 && dateLastProduction === null);\n\n    const machineOff = ((differenceTimedateStartProduction >= 300 && differenceTimelastProduction >= 1800) || (differenceTimedateStartProduction >= 1800 && dateLastProduction === null));\n\n    const newStatus = machineWorking ? 'TRABALHANDO' : machineIdle ? 'PARADO' : machineOff ? 'DESLIGADO' : null;\n    if (newStatus) currentStatus = newStatus;\n}\n\nif (dateStartProduction == null) currentStatus = \"DESLIGADO\";\n\ncontext.set('currentStatus', currentStatus);\n\nmsg.status = {\n    timeCurrentProduction: differenceTimedateStartProduction,\n    timeLastProduction: differenceTimelastProduction,\n    machine: machine,\n    currentStatus: currentStatus\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1530,
        "y": 5880,
        "wires": [
            [
                "c9c97d8d5387716f"
            ]
        ],
        "icon": "node-red/status.svg"
    },
    {
        "id": "c9c97d8d5387716f",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "FormatedMessage",
        "func": "let machine = msg.status.machine;\nlet timestamp = new Date().getTime();\nlet currentStatus = context.get('currentStatus') || null; \nlet oldStatus = msg.status.currentStatus;\n\nif(!currentStatus || currentStatus !== oldStatus) {\n    currentStatus = oldStatus;\n    context.set('currentStatus', currentStatus);\n\n    msg.payload = {\n            timestamp: timestamp,\n            deviceSerialNumber: machine,\n            status: currentStatus\n    }\n    return msg;\n}\nreturn null;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1850,
        "y": 5880,
        "wires": [
            []
        ],
        "icon": "font-awesome/fa-envelope"
    },
    {
        "id": "871f44c27bde10b7",
        "type": "inject",
        "z": "dae82ca7554ded9f",
        "name": "SWITCH1 ON",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF2A44",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch1\": {\"Action\": \"ON\"} }",
        "payloadType": "json",
        "x": 150,
        "y": 5860,
        "wires": [
            [
                "2505b120d6639db5"
            ]
        ]
    },
    {
        "id": "d192c8aaa4663fa8",
        "type": "inject",
        "z": "dae82ca7554ded9f",
        "name": "SWITCH1 OFF",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF2A44",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch1\": {\"Action\": \"OFF\"} }",
        "payloadType": "json",
        "x": 160,
        "y": 5900,
        "wires": [
            [
                "2505b120d6639db5"
            ]
        ]
    },
    {
        "id": "2505b120d6639db5",
        "type": "switch",
        "z": "dae82ca7554ded9f",
        "name": "Machines",
        "property": "payload.serialNumber",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "DF2A44",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 360,
        "y": 5880,
        "wires": [
            [
                "56a5a157d9b05c76"
            ]
        ],
        "icon": "font-awesome/fa-desktop"
    },
    {
        "id": "79c6bd07916e800a",
        "type": "inject",
        "z": "dae82ca7554ded9f",
        "name": "SWITCH1 ON",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF1860",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch1\": {\"Action\": \"ON\"} }",
        "payloadType": "json",
        "x": 170,
        "y": 2580,
        "wires": [
            [
                "f531d5febad0edec"
            ]
        ]
    },
    {
        "id": "5d77817bbc0acf92",
        "type": "inject",
        "z": "dae82ca7554ded9f",
        "name": "SWITCH1 OFF",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF1860",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch1\": {\"Action\": \"OFF\"} }",
        "payloadType": "json",
        "x": 180,
        "y": 2620,
        "wires": [
            [
                "f531d5febad0edec"
            ]
        ]
    },
    {
        "id": "95d39bd9a940961e",
        "type": "inject",
        "z": "dae82ca7554ded9f",
        "name": "SWITCH2 ON",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF1860",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch2\": {\"Action\": \"ON\"} }",
        "payloadType": "json",
        "x": 170,
        "y": 2760,
        "wires": [
            [
                "f531d5febad0edec"
            ]
        ]
    },
    {
        "id": "dec56798e763225a",
        "type": "inject",
        "z": "dae82ca7554ded9f",
        "name": "SWITCH2 OFF",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF1860",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch2\": {\"Action\": \"OFF\"} }",
        "payloadType": "json",
        "x": 180,
        "y": 2800,
        "wires": [
            [
                "f531d5febad0edec"
            ]
        ]
    },
    {
        "id": "e3a5557f4f02bc4f",
        "type": "inject",
        "z": "dae82ca7554ded9f",
        "name": "SWITCH3 ON ",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF1860",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch3\": {\"Action\": \"ON\"} }",
        "payloadType": "json",
        "x": 170,
        "y": 2860,
        "wires": [
            [
                "f531d5febad0edec"
            ]
        ]
    },
    {
        "id": "f9ab014dba76e3ca",
        "type": "inject",
        "z": "dae82ca7554ded9f",
        "name": "SWITCH3 OFF",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF1860",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch3\": {\"Action\": \"OFF\"} }",
        "payloadType": "json",
        "x": 180,
        "y": 2900,
        "wires": [
            [
                "f531d5febad0edec"
            ]
        ]
    },
    {
        "id": "f531d5febad0edec",
        "type": "switch",
        "z": "dae82ca7554ded9f",
        "name": "Machines",
        "property": "payload.serialNumber",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "DF0CB3",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "DF1860",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 420,
        "y": 2720,
        "wires": [
            [
                "b2fe1e051d09c2a3"
            ],
            [
                "1c79f5aee04cb303"
            ]
        ],
        "icon": "font-awesome/fa-desktop"
    },
    {
        "id": "1c79f5aee04cb303",
        "type": "switch",
        "z": "dae82ca7554ded9f",
        "name": "OPTION SW",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "hask",
                "v": "Switch1",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "Switch2",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "Switch3",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "Switch4",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "StatusSNS",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 5,
        "x": 590,
        "y": 2800,
        "wires": [
            [
                "d4491f9d1ca87e1f"
            ],
            [
                "d4491f9d1ca87e1f"
            ],
            [
                "d4491f9d1ca87e1f"
            ],
            [
                "d4491f9d1ca87e1f"
            ],
            [
                "d4491f9d1ca87e1f"
            ]
        ]
    },
    {
        "id": "6983ed2ef42ebacc",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "Switches States",
        "func": "function handleSwitch(payload, context, switchName, statusSNSName, startName, finishName, verifyName) {\n    let switchKey = Object.keys(payload).find(key => key.startsWith(switchName));\n    let switchState = context.get(switchName) || null;\n    let actionValue = payload[switchKey] ? payload[switchKey].Action : null;\n    let statusSNS = payload[statusSNSName] && payload[statusSNSName][switchName];\n    let startState = context.get(startName) || false;\n    let finishState = context.get(finishName) || false;\n    let verifyState = context.get(verifyName) || false;\n    switchState = actionValue || statusSNS || switchState;\n\n    if (switchState === \"ON\") {\n        startState = true;\n    }\n    else if (switchState === \"OFF\" && startState === true) {\n        finishState = true;\n    }\n\n    if (startState === true && finishState === true) { \n        startState = false;\n        finishState = false;\n        verifyState = true;\n\n    }\n    context.set(switchName, switchState);\n    context.set(startName, startState);\n    context.set(finishName, finishState);\n    context.set(verifyName, verifyState);\n\n    return {\n        switchState: switchState,\n        startState: startState,\n        finishState: finishState,\n        verifyState: verifyState\n    };\n}\nlet payload = msg.payload;\nlet readyMachine = handleSwitch(payload, context, 'Switch1', 'StatusSNS', 'readyMachine', 'idleMachine', 'verifyMachine');\nlet doorMachine = handleSwitch(payload, context, 'Switch2', 'StatusSNS', 'openDoor', 'closeDoor', 'verifyDoor');\nlet verifyProgram = handleSwitch(payload, context, 'Switch3', 'StatusSNS', 'startProgram', 'finishedProgram', 'verifyProgram');\nlet verifyAlarm = handleSwitch(payload, context, 'Switch4', 'StatusSNS', 'startAlarm', 'finishedAlarm', 'verifyAlarm');\n\nmsg.switches = {\n    switch1: readyMachine.switchState,\n    switch2: doorMachine.switchState,\n    switch3: verifyProgram.switchState,\n    switch4: verifyAlarm.switchState,\n    readyMachine: readyMachine.startState,\n    openMachine: doorMachine.startState,\n    closeDoor: doorMachine.verifyState,\n    startProgram: verifyProgram.startState,\n    finishedProgram: verifyProgram.verifyState,\n    alarm: verifyAlarm.verifyState\n}\nreadyMachine.verifyState = false;\ndoorMachine.verifyState = false;\nverifyProgram.verifyState = false;\nverifyAlarm.verifyState = false;\n\ncontext.set('verifyMachine', readyMachine.verifyState);\ncontext.set('verifyDoor', doorMachine.verifyState);\ncontext.set('verifyProgram', verifyProgram.verifyState);\ncontext.set('verifyAlarm', verifyAlarm.verifyState);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1080,
        "y": 2800,
        "wires": [
            [
                "419ced1aaf667d4e"
            ]
        ],
        "icon": "node-red/swap.svg"
    },
    {
        "id": "419ced1aaf667d4e",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "Conditions Machine",
        "func": "let {readyMachine, openMachine, closeDoor, startProgram, finishedProgram, alarm} = msg.switches;\nlet startWorking = context.get('startWorking') || false;\nlet runningProgram = context.get('runningProgram') || false;\nlet finishedWorking = context.get('finishedWorking') || false;\n\nif (readyMachine && startProgram && !runningProgram) {\n    startWorking = true;\n    runningProgram = true;\n}\nelse if (finishedProgram && runningProgram) {\n    finishedWorking = true;\n    runningProgram = false;\n}\ncontext.set('startWorking', startWorking);\ncontext.set('runningProgram', runningProgram);\ncontext.set('finishedWorking', finishedWorking);\n\nmsg.conditions = {\n    startProgram: startWorking,\n    runningProgram: runningProgram,\n    finishedProgram: finishedWorking,\n    verifyAlarm: alarm,\n    serialNumber: msg.payload.serialNumber\n}\nstartWorking = false;\nfinishedWorking = false;\n\ncontext.set('startWorking', startWorking);\ncontext.set('finishedWorking', finishedWorking)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1290,
        "y": 2800,
        "wires": [
            [
                "e94f0ef11441b44c",
                "9bf578835d101696"
            ]
        ],
        "icon": "font-awesome/fa-bars"
    },
    {
        "id": "9bf578835d101696",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "Production Machine",
        "func": "let {startProgram, runningProgram, finishedProgram, verifyAlarm, serialNumber} = msg.conditions;\nlet [dateStartProduction, dateLastProduction, machine] = ['dateStartProduction', 'dateLastProduction', 'machine'].map(key =>\ncontext.get(key) || null);\nlet programCount = context.get('programCount') || 0;\nlet alarmCount = context.get('alarmCount') || 0;\nlet resetShift = context.get('resetShift') || false;\nlet currentTimestamp = new Date(); \n\nconst actions = {\n    resetShift: () => {programCount = 0; resetShift = false},\n    payloadReset:  () => { resetShift = true},\n    startProduction: () => { dateStartProduction = currentTimestamp},\n    finishedProduction: () => { programCount++, dateLastProduction = currentTimestamp},\n    verifyAlarm: () => { alarmCount++},\n    machineNull: () => {machine = serialNumber}\n};\n\nconst conditions = {\n    resetShift: resetShift,\n    payload: msg.payload === 'reset',\n    startProduction: startProgram === true,\n    finishedProduction: finishedProgram === true,\n    verifyAlarm: verifyAlarm === true,\n    machineNull: (serialNumber && machine == null) || (serialNumber && machine !== null && machine !== serialNumber)\n};\n\nObject.entries(conditions).forEach(([condition, isTrue]) => {\n    if (isTrue && actions[condition]) actions[condition]();\n});\ncontext.set('programCount', programCount);\ncontext.set('alarmCount', alarmCount);\ncontext.set('dateStartProduction', dateStartProduction);\ncontext.set('dateLastProduction', dateLastProduction);\ncontext.set('resetShift', resetShift);\ncontext.set('machine', machine);\n\nmsg.data = {\n    finishedProgram: finishedProgram,\n    verifyAlarm: verifyAlarm,\n    programas: programCount,\n    alarmes: alarmCount,\n    dateStartProduction: dateStartProduction,\n    dateLastProduction: dateLastProduction,\n    machine: machine,\n    reset: resetShift\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1520,
        "y": 2800,
        "wires": [
            [
                "91586c74fb98eebd",
                "29e90a0ecef97605"
            ]
        ],
        "icon": "font-awesome/fa-book"
    },
    {
        "id": "91586c74fb98eebd",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "TORNO CNC",
        "func": "let { finishedProgram, verifyAlarm, programas, alarmes, machine } = msg.data;\n\nmsg.payload = {\n    finishedProgram: finishedProgram,\n    verifyAlarm: verifyAlarm,\n    programas: programas,\n    alarmes: alarmes,\n    deviceSerialNumber: machine,\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1760,
        "y": 2760,
        "wires": [
            [
                "bc87ce57263fa7fd"
            ]
        ],
        "icon": "font-awesome/fa-cogs"
    },
    {
        "id": "b2fe1e051d09c2a3",
        "type": "switch",
        "z": "dae82ca7554ded9f",
        "name": "OPTION SW",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "hask",
                "v": "Switch1",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "Switch2",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "Switch3",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 590,
        "y": 2640,
        "wires": [
            [
                "2c69b204a4d48936"
            ],
            [
                "2c69b204a4d48936"
            ],
            [
                "2c69b204a4d48936"
            ]
        ]
    },
    {
        "id": "2c69b204a4d48936",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "Switches States",
        "func": "function handleSwitch(payload,context, switchName,verifyName) {\n    let switchState = context.get(switchName) || null;\n    let verifyState = context.get(verifyName) || false;\n    if(payload[switchName] && payload[switchName].Action == \"ON\") {\n        switchState = \"ON\";\n        verifyState = true;\n\n    } else if (payload[switchName] && payload[switchName].Action == \"OFF\") {\n        switchState = \"OFF\";\n        verifyState = false;\n    }\n\n    context.set(switchName, switchState);\n    context.set(verifyName, verifyState);\n\n    return {\n        switchState: switchState,\n        verifyState: verifyState\n    };\n}\n\nlet payload = msg.payload;\nlet verifyCycle = handleSwitch(payload, context,'Switch1','verifyCycle');\nlet verifyStuckPart = handleSwitch(payload,context,'Switch2','verifyStuckPart');\nlet verifyAlarm =  handleSwitch(payload,context,'Switch3','verifyAlarm');\n\nmsg.switches = {\n    switch1: verifyCycle.switchState,\n    switch2: verifyStuckPart.switchState,\n    switch3: verifyAlarm.switchState,\n    verifyCycle: verifyCycle.verifyState,\n    verifyStuckPart: verifyStuckPart.verifyState,\n    verifyAlarm: verifyAlarm.verifyState\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 2640,
        "wires": [
            [
                "a5fb6e112838515d"
            ]
        ],
        "icon": "node-red/swap.svg"
    },
    {
        "id": "a5fb6e112838515d",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "Conditions Machine",
        "func": "// Extra√ß√£o de vari√°veis\nlet { serialNumber } = msg.payload;\nlet { verifyCycle, verifyStuckPart, verifyAlarm, switch1,switch2,switch3 } = msg.switches;\n\n// Recupera√ß√£o de estados do ciclo\nlet startCycle = context.get('startCycle') || false;\nlet cycleActive = context.get('cycleActive') || false;\nlet finishedCycle = context.get('endCycle') || false;\nlet startAlarm = context.get('startAlarm') || false;\nlet finishedAlarm = context.get('finishedAlarm') || false;\n\n// Verifica√ß√£o e atualiza√ß√£o de estados\nif (verifyCycle == true && startCycle == false && cycleActive == false && switch2 == \"OFF\" ) {\n    cycleActive = startCycle = true;\n    context.set('startCycle', startCycle);\n    context.set('cycleActive', cycleActive);\n} else if (verifyCycle == false && verifyStuckPart == true && cycleActive == true) {\n    finishedCycle = true;\n    context.set('finishedCycle', finishedCycle);\n}\n\nif (verifyAlarm == true && startAlarm == false) {\n    startAlarm = true;\n    context.set('startAlarm', startAlarm);\n} else if (verifyAlarm == false && startAlarm == true) {\n    finishedAlarm = true;\n    startAlarm = false\n\n    context.set('startAlarm', startAlarm);\n    context.set('finishedAlarm', finishedAlarm);\n}\n\n// Atualiza√ß√£o de condi√ß√µes\nmsg.conditions = { startCycle, cycleActive, finishedCycle, startAlarm, finishedAlarm, serialNumber };\n\n// Reset de estados\nif (verifyCycle == true && startCycle == true) {\n    startCycle = false;\n    context.set('startCycle', startCycle);\n}\n\nif (finishedCycle == true) {\n    finishedCycle = false;\n    context.set('finishedCycle', finishedCycle);\n\n    cycleActive = false;\n    context.set('cycleActive', cycleActive);\n}\n\nif (finishedAlarm == true) {\n    finishedAlarm = false;\n    context.set('finishedAlarm', finishedAlarm);\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 2640,
        "wires": [
            [
                "a754664f24ebe08e"
            ]
        ],
        "icon": "font-awesome/fa-bars"
    },
    {
        "id": "a754664f24ebe08e",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "Production Machine",
        "func": "let payload = msg.payload;\nlet startCycle = msg.conditions.startCycle;\nlet cycleActive = msg.conditions.cycleActive;\nlet finishedCycle = msg.conditions.finishedCycle;\nlet finishedAlarm = msg.conditions.finishedAlarm;\nlet serialNumber = msg.conditions.serialNumber;\nlet countExecutedPrograms = context.get('countExecutedPrograms') || 0;\nlet alarmCount = context.get('alarmCount') || 0;\nlet machine = context.get('machine') || null;\nlet startWorking = context.get('startWorking') || null\nlet lastTimestamp = context.get('lastTimestamp') || null;\nlet resetShift = context.get('resetShift') || false;\nlet currentStatus = context.get('currentStatus') || 'PARADA';\nlet currentTimestamp = new Date();\n\nconst actions = {\n    'payloadReset': () => {\n        resetShift = true;\n        context.set('resetShift', resetShift);\n    },\n    'resetShift': () => {\n        alarmCount = 0;\n        countExecutedPrograms = 0;\n        resetShift = false;\n\n        context.set('alarmCount', alarmCount);\n        context.set('countExecutedPrograms', countExecutedPrograms);\n        context.set('resetShift', resetShift);\n    },\n    'finishedProgram': () => {\n        countExecutedPrograms++;\n\n        lastTimestamp = currentTimestamp;\n        context.set('lastTimestamp',lastTimestamp);\n\n        currentStatus = \"PARADA\";\n        context.set('currentStatus', currentStatus);\n    },\n    'startProgram': () => {\n        startWorking = currentTimestamp;\n        context.set('startWorking', startWorking);\n    },\n    'cycleActive': () => {\n        currentStatus = \"TRABALHANDO\";\n        context.set('currentStatus', currentStatus);\n    },\n    'verifyAlarm': () => alarmCount++,\n    'machineNull': () => {\n        machine = serialNumber;\n        context.set('machine', machine);\n    }\n\n};\n\nif(resetShift == true) actions.resetShift();\nif (startCycle == true) actions.startProgram();\nif(startCycle == true || cycleActive == true) actions.cycleActive();\nif(finishedCycle == true) actions.finishedProgram();\nif(finishedAlarm == true) actions.verifyAlarm();\nif(payload == 'reset') actions.payloadReset();\nif(machine == null) actions.machineNull();\nif(resetShift == true) actions.resetShift();\n\ncontext.set('countExecutedPrograms', countExecutedPrograms);\ncontext.set('alarmCount', alarmCount);\n\nmsg.data = {\n    countProgram: countExecutedPrograms,\n    alarm: alarmCount,\n    workingTime: 0,\n    idleTime: 0,\n    machine: machine,\n    reset: resetShift,\n    status: currentStatus,\n    startWorking: startWorking,\n    lastTimestamp: lastTimestamp,\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1240,
        "y": 2640,
        "wires": [
            [
                "df9c4c6b32879eb6"
            ]
        ],
        "icon": "font-awesome/fa-book"
    },
    {
        "id": "df9c4c6b32879eb6",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "CNC USINAGEM",
        "func": "let workingTime = msg.data.workingTime;\nlet idleTime = msg.data.idleTime;\nlet countProgram = msg.data.countProgram;\nlet alarm = msg.data.alarm;\nlet status = msg.data.status;\nlet reset = msg.data.reset;\nlet machine = msg.data.machine;\nlet workingTimeMinutes = context.get('workingTimeMinutes') || 0;\nlet idleTimeMinutes = context.get('idleTimeMinutes') || 0;\n\nfunction minutesToHours(totalMinutes) {\n    var hours = String(Math.floor(totalMinutes / 60)).padStart(2, \"0\");\n    var minutes = String(totalMinutes % 60).padStart(2, \"0\");\n\n    return `${hours}:${minutes}`;\n}\n\nif (reset == true) {\n    workingTimeMinutes = 0;\n    idleTimeMinutes = 0;\n\n    context.set('workingTimeMinutes', workingTimeMinutes);\n    context.set('idleTimeMinutes', 0);\n}\n\nif (workingTime > 0 || idleTime > 0) {\n    workingTimeMinutes = workingTime / 60;\n    idleTimeMinutes = idleTime / 60;\n}\n\nmsg.payload = {\n    programas: countProgram,\n    alarmes: alarm,\n    workingTimeMinutes: minutesToHours(workingTimeMinutes.toFixed(0)),\n    idleTimeMinutes: minutesToHours(idleTimeMinutes.toFixed(0)),\n    status: status,\n    deviceSerialNumber: machine\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1450,
        "y": 2640,
        "wires": [
            []
        ],
        "icon": "font-awesome/fa-cogs"
    },
    {
        "id": "29e90a0ecef97605",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "verifyStatus",
        "func": "let { dateStartProduction, dateLastProduction, machine } = msg.data;\nlet [differenceTimedateStartProduction, differenceTimelastProduction] = ['differenceTimedateStartProduction', 'differenceTimelasProduction'].map(key => context.get(key) || 0);\nlet currentTimestamp = new Date();\nlet currentStatus = context.get('currentStatus') || null;\n\ndifferenceTimedateStartProduction = dateStartProduction !== null ? (currentTimestamp.getTime() - dateStartProduction.getTime()) / 1000 : null;\ndifferenceTimelastProduction = dateLastProduction !== null ? (currentTimestamp.getTime() - dateLastProduction.getTime()) / 1000 : null;\n\ncontext.set('differenceTimedateStartProduction', differenceTimedateStartProduction);\ncontext.set('differenceTimelastProduction', differenceTimelastProduction);\n\nif (dateStartProduction !== null) {\n\n    //Mapear status\n    const machineWorking = differenceTimedateStartProduction <= 299 || (differenceTimelastProduction !== null && differenceTimelastProduction <= 299);\n\n    const machineIdle = (differenceTimedateStartProduction >= 300 && differenceTimelastProduction >= 300 && differenceTimelastProduction <= 1799) ||\n        (differenceTimedateStartProduction >= 300 && differenceTimedateStartProduction <= 1799 && dateLastProduction === null);\n\n    const machineOff = ((differenceTimedateStartProduction >= 300 && differenceTimelastProduction >= 1800) || (differenceTimedateStartProduction >= 1800 && dateLastProduction === null));\n\n    const newStatus = machineWorking ? 'TRABALHANDO' : machineIdle ? 'PARADO' : machineOff ? 'DESLIGADO' : null;\n    if (newStatus) currentStatus = newStatus;\n}\n\nif (dateStartProduction == null) currentStatus = \"DESLIGADO\";\n\ncontext.set('currentStatus', currentStatus);\n\nmsg.status = {\n    timeCurrentProduction: differenceTimedateStartProduction,\n    timeLastProduction: differenceTimelastProduction,\n    machine: machine,\n    currentStatus: currentStatus\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1750,
        "y": 2800,
        "wires": [
            [
                "d1d89070b85fdf4e",
                "ae0e6d4f0d7eea46"
            ]
        ],
        "icon": "node-red/status.svg"
    },
    {
        "id": "d1d89070b85fdf4e",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "FormatedMessage",
        "func": "let machine = msg.status.machine;\nlet timestamp = new Date().getTime();\nlet currentStatus = context.get('currentStatus') || null; \nlet oldStatus = msg.status.currentStatus;\n\nif(!currentStatus || currentStatus !== oldStatus) {\n    currentStatus = oldStatus;\n    context.set('currentStatus', currentStatus);\n\n    msg.payload = {\n            timestamp: timestamp,\n            deviceSerialNumber: machine,\n            status: currentStatus\n    }\n    return msg;\n}\nreturn null;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1990,
        "y": 2800,
        "wires": [
            []
        ],
        "icon": "font-awesome/fa-envelope"
    },
    {
        "id": "8b1f3f6e411a5afc",
        "type": "inject",
        "z": "dae82ca7554ded9f",
        "name": "SWITCH1 ON",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF4685",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch1\": {\"Action\": \"ON\"} }",
        "payloadType": "json",
        "x": 150,
        "y": 7080,
        "wires": [
            [
                "fd902dddb172934a"
            ]
        ]
    },
    {
        "id": "053f9794cddfa5a5",
        "type": "inject",
        "z": "dae82ca7554ded9f",
        "name": "SWITCH1 OFF",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF4685",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch1\": {\"Action\": \"OFF\"} }",
        "payloadType": "json",
        "x": 160,
        "y": 7120,
        "wires": [
            [
                "fd902dddb172934a"
            ]
        ]
    },
    {
        "id": "fd902dddb172934a",
        "type": "switch",
        "z": "dae82ca7554ded9f",
        "name": "Machines",
        "property": "payload.serialNumber",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "DF591E",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "DF2E81",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "DF514E",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "DF2452",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "DF2D05",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "DF2A2A",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "DF4685",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 7,
        "x": 360,
        "y": 7120,
        "wires": [
            [
                "0a56968c342ce918"
            ],
            [
                "3ba05a2147f5b196"
            ],
            [
                "a15a527dcbcb47e5"
            ],
            [
                "1ac401feb2318962"
            ],
            [
                "f84e6f03e10446bb"
            ],
            [
                "753ff66ec7bbe9b0"
            ],
            [
                "fd96c9dc2e6d807d"
            ]
        ],
        "icon": "font-awesome/fa-desktop"
    },
    {
        "id": "0a56968c342ce918",
        "type": "switch",
        "z": "dae82ca7554ded9f",
        "name": "OPTION SW",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "hask",
                "v": "Switch1",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 590,
        "y": 7000,
        "wires": [
            [
                "4d2b8887a0d0d193"
            ]
        ]
    },
    {
        "id": "3ba05a2147f5b196",
        "type": "switch",
        "z": "dae82ca7554ded9f",
        "name": "OPTION SW",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "hask",
                "v": "Switch1",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 590,
        "y": 7040,
        "wires": [
            [
                "c5d10e0b687e4937"
            ]
        ]
    },
    {
        "id": "a15a527dcbcb47e5",
        "type": "switch",
        "z": "dae82ca7554ded9f",
        "name": "OPTION SW",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "hask",
                "v": "Switch1",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 590,
        "y": 7080,
        "wires": [
            [
                "baad251bb4d3be64"
            ]
        ]
    },
    {
        "id": "1ac401feb2318962",
        "type": "switch",
        "z": "dae82ca7554ded9f",
        "name": "OPTION SW",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "hask",
                "v": "Switch1",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 590,
        "y": 7120,
        "wires": [
            [
                "f03cf08bce9bdef5"
            ]
        ]
    },
    {
        "id": "f84e6f03e10446bb",
        "type": "switch",
        "z": "dae82ca7554ded9f",
        "name": "OPTION SW",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "hask",
                "v": "Switch1",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 590,
        "y": 7160,
        "wires": [
            [
                "06325f74f9b697ee"
            ]
        ]
    },
    {
        "id": "753ff66ec7bbe9b0",
        "type": "switch",
        "z": "dae82ca7554ded9f",
        "name": "OPTION SW",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "hask",
                "v": "Switch1",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 590,
        "y": 7200,
        "wires": [
            [
                "c81743117c9bb636"
            ]
        ]
    },
    {
        "id": "b81ddb45ccb39f0a",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "Production Machine",
        "func": "let { startOperation, finishedOperation, serialNumber } = msg.conditions;\nlet [sumWorkingTime, sumIdleTime] = ['sumWorkingTime', 'sumIdleTime'].map(key => context.get(key) || 0);\nlet [dateStartProduction, dateLastProduction, machine] = ['dateStartProduction', 'dateLastProduction', 'machine'].map(key => context.get(key) || null);\nlet resetShift = context.get('resetShift') || false;\nlet currentTimestamp = new Date();\n\nconst actions = {\n    resetShift: () => { sumWorkingTime = 0; sumIdleTime = 0, resetShift = false, dateLastProduction = null },\n    payloadReset: () => { resetShift = true },\n    startProduction: () => {\n        dateStartProduction = currentTimestamp\n        if (dateLastProduction !== null) {\n            let timeIdle = (currentTimestamp.getTime() - dateLastProduction.getTime()) / 1000;\n\n            if (timeIdle >= 300) sumIdleTime += timeIdle;\n            else sumWorkingTime += timeIdle;\n        };\n    },\n    finishedProduction: () => {\n        if (dateStartProduction !== null) {\n            let timeWorking = (currentTimestamp.getTime() - dateStartProduction.getTime()) / 1000;\n            sumWorkingTime += timeWorking;\n\n            dateStartProduction = null;\n            dateLastProduction = currentTimestamp;\n        };\n    },\n    machineNull: () => { machine = serialNumber }\n};\nconst conditions = {\n    resetShift: resetShift === true,\n    payloadReset: msg.payload == \"reset\",\n    startProduction: startOperation && !finishedOperation,\n    finishedProduction:  !startOperation && finishedOperation,\n    machineNull: (serialNumber && machine == null) || (serialNumber && machine !== serialNumber && machine !== null)\n};\n\nObject.entries(conditions).forEach(([condition, isTrue]) => {\n    if (isTrue && actions[condition]) actions[condition]();\n});\ncontext.set('sumWorkingTime', sumWorkingTime);\ncontext.set('sumIdleTime', sumIdleTime);\ncontext.set('resetShift', resetShift);\ncontext.set('dateStartProduction', dateStartProduction);\ncontext.set('dateLastProduction', dateLastProduction);\ncontext.set('machine', machine);\n\nmsg.data = {\n    workingTime: sumWorkingTime,\n    idleTime: sumIdleTime,\n    dateStartProduction: dateStartProduction,\n    dateLastProduction: dateLastProduction,\n    reset: resetShift,\n    machine: machine\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1260,
        "y": 7000,
        "wires": [
            [
                "e497bec910243781",
                "d653a19adfdb1f3d"
            ]
        ],
        "icon": "font-awesome/fa-book"
    },
    {
        "id": "09550bc4305268c2",
        "type": "inject",
        "z": "dae82ca7554ded9f",
        "name": "RESET Shift1",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "conditions",
                "v": " {}",
                "vt": "json"
            },
            {
                "p": "data",
                "v": "{}",
                "vt": "json"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "reset",
        "payloadType": "str",
        "x": 1030,
        "y": 3520,
        "wires": [
            [
                "6e9772a68c5ebb6b"
            ]
        ],
        "icon": "font-awesome/fa-rotate-right"
    },
    {
        "id": "d653a19adfdb1f3d",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "verifyStatus",
        "func": "let { dateStartProduction, dateLastProduction, machine } = msg.data;\nlet currentTimestamp = new Date();\nlet currentStatus = context.get('currentStatus') || null;\nlet timeCurrentProduction = dateStartProduction !== null ? (currentTimestamp.getTime() - dateStartProduction.getTime()) / 1000 : null;\nlet timeLastProduction = dateLastProduction !== null ? (currentTimestamp.getTime() - dateLastProduction.getTime()) / 1000 : null;\n\ncontext.set('timeCurrentProduction', timeCurrentProduction);\ncontext.set('timeLastProduction', timeLastProduction);\n\nif (dateStartProduction !== null && dateLastProduction == null) currentStatus = \"TRABALHANDO\";\n\nelse if (dateLastProduction !== null) {\n    //Mapeamento dos status\n    const machineWorking = (dateStartProduction !== null) || (timeLastProduction <= 299);\n    const machineIdle = (dateStartProduction == null && timeLastProduction >= 300 && timeLastProduction <= 1799);\n    const machineOff = (dateStartProduction == null && timeLastProduction >= 1800);\n\n    const newStatus = machineWorking ? \"TRABALHANDO\" : machineIdle ? \"PARADO\" : machineOff ? \"DESLIGADO\" : null;\n    if (newStatus) currentStatus = newStatus;\n}\nelse if (dateStartProduction == null && dateLastProduction == null) currentStatus = \"DESLIGADO\";\n\ncontext.set('currentStatus', currentStatus);\n\nmsg.status = {\n    timeCurrentProduction: timeCurrentProduction,\n    timeLastProduction: timeLastProduction,\n    machine: machine,\n    currentStatus: currentStatus\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1590,
        "y": 6920,
        "wires": [
            [
                "2861279e66bcf914"
            ]
        ],
        "icon": "node-red/status.svg"
    },
    {
        "id": "e497bec910243781",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "FRESADORA MANUAL",
        "func": "let {workingTime, idleTime, machine } = msg.data;\nlet workingTimeMinutes = workingTime > 0 ? workingTime/60 : 0;\nlet idleTimeMinutes = idleTime > 0 ? idleTime/60 : 0;\n\nfunction minutesToHours(totalMinutes) {\n    var hours = String(Math.floor(totalMinutes / 60)).padStart(2, \"0\");\n    var minutes = String(totalMinutes % 60).padStart(2, \"0\");\n\n    return `${hours}:${minutes}`;\n}\ncontext.set('workingTimeMinutes', workingTimeMinutes);\ncontext.set('idleTimeMinutes', idleTimeMinutes);\n\nmsg.payload = {\n    workingTimeMinutes: minutesToHours(workingTimeMinutes.toFixed(0)),\n    idleTimeMinutes: minutesToHours(idleTimeMinutes.toFixed(0)),\n    deviceSerialNumber: machine\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1630,
        "y": 6880,
        "wires": [
            []
        ],
        "icon": "font-awesome/fa-cogs"
    },
    {
        "id": "2861279e66bcf914",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "FormatedMessage",
        "func": "let machine = msg.status.machine;\nlet timestamp = new Date().getTime();\nlet currentStatus = context.get('currentStatus') || null; \nlet oldStatus = msg.status.currentStatus;\n\nif(!currentStatus || currentStatus !== oldStatus) {\n    currentStatus = oldStatus;\n    context.set('currentStatus', currentStatus);\n\n    msg.payload = {\n            timestamp: timestamp,\n            deviceSerialNumber: machine,\n            status: currentStatus\n    }\n    return msg;\n}\nreturn null;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1950,
        "y": 6920,
        "wires": [
            []
        ],
        "icon": "font-awesome/fa-envelope"
    },
    {
        "id": "c5d10e0b687e4937",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "Conditions Machine",
        "func": "let payload = msg.payload;\nlet serialNumber = msg.payload.serialNumber;\nlet switch1 = context.get('switch1') || null;\nlet verifyWorking = context.get('verifyWorking') || false;\n\nif (payload.Switch1 && payload.Switch1.Action == \"ON\") { // Caputura a a√ß√£o quando o SW1 liga\n    context.set('switch1', \"ON\");\n    verifyWorking = true;\n}\nelse if ((payload.Switch1 && payload.Switch1.Action == \"OFF\") && switch1 == \"ON\") { // Captura a mudan√ßa de SW1 ligado para desligado\n    context.set('switch1', \"OFF\");\n    verifyWorking = false;\n}\ncontext.set('verifyWorking', verifyWorking);\n\nmsg.conditions = {\n    switch1: context.get('switch1'),\n    verifyWorking: verifyWorking,\n    serialNumber: serialNumber\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 7040,
        "wires": [
            [
                "913f244c31f0a7ca"
            ]
        ],
        "icon": "font-awesome/fa-bars"
    },
    {
        "id": "913f244c31f0a7ca",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "Production Machine",
        "func": "let payload = msg.payload;\nlet conditions = {\n    verifyWorking: msg.conditions.verifyWorking,\n    serialNumber: msg.conditions.serialNumber\n}\nlet resetShift = context.get('resetShift') || false;\nlet sumWorkingTime = context.get('sumWorkingTime') || 0;\nlet sumIdleTime = context.get('sumIdleTime') || 0;\nlet startWorking = context.get('startWorking') || null;\nlet lastTimestamp = context.get('lastTimestamp') || null;\nlet machine = context.get('machine') || null;\nlet currentStatus = context.get('currentStatus') || \"PARADA\";\nlet activeMachine = context.get('activeMachine') || false;\nlet currentTimestamp = new Date();\n\nconst actions = {\n    'payloadReset': () => { // muda o valor de resetShift para resetar as vari√°veis\n        resetShift = true;\n        context.set('resetShift', resetShift);\n    },\n    'resetShift': () => { // fun√ß√£o de resetar as vari√°veis\n        [sumWorkingTime, sumIdleTime, startWorking, lastTimestamp, resetShift] =\n            [0, 0, null, null, false];\n        context.set('sumWorkingTime', sumWorkingTime);\n        context.set('sumIdleTime', sumWorkingTime);\n        context.set('startWorking', startWorking);\n        context.set('lastTimestamp', lastTimestamp);\n        context.set('resetShift', resetShift);\n    },\n    'startWorking': () => { // captura o in√≠cio do trabalho da m√°quina\n        startWorking = currentTimestamp;\n        context.set('startWorking', startWorking);\n\n        activeMachine = true;\n        context.set('activeMachine', activeMachine);\n\n        currentStatus = \"TRABALHANDO\";\n        context.set('currentStatus', currentStatus);\n\n    },\n    'machineFinishedWorking': () => { // captura o momento em que a m√°quina termina de trabalhar\n        if (startWorking !== null) {\n            let timeWorking = (currentTimestamp.getTime() - startWorking.getTime()) / 1000;\n            sumWorkingTime += timeWorking;\n            context.set('sumWorkingTime', sumWorkingTime);\n\n            activeMachine = false;\n            context.set('activeMachine', activeMachine);\n        }\n        currentStatus = \"PARADA\";\n        context.set('currentStatus', currentStatus);\n\n        lastTimestamp = currentTimestamp;\n        context.set('lastTimestamp', lastTimestamp);\n    },\n    'verifyLastTimestamp': () => { // armazena a √∫ltima vez em que a m√°quina trabalhou\n        let idleTime = (currentTimestamp.getTime() - lastTimestamp.getTime()) / 1000;\n\n        if (idleTime >= 300) {\n            sumIdleTime += idleTime;\n            context.set('sumIdleTime', sumIdleTime);\n        }\n        else {\n            sumWorkingTime += idleTime;\n            context.set('sumWorkingTime', sumWorkingTime);\n        }\n    },\n    'machineNull': () => {\n        machine = conditions.serialNumber;\n        context.set('machine', machine)\n    },\n}\n\nif (resetShift === true) actions.resetShift();\nif (machine == null && conditions.serialNumber) actions.machineNull(); // captura o n√∫mero de s√©rie do dispositivo\nif (payload === \"reset\") actions.payloadReset();\nif (conditions && conditions.verifyWorking == true && lastTimestamp == null) actions.startWorking(); // condi√ß√£o primeiro trabalho do turno da m√°quina\nif (conditions && conditions.verifyWorking == false && startWorking !== null) actions.machineFinishedWorking(); // condi√ß√£o do momento em que a m√°quina para de trabalhar\nif (conditions && conditions.verifyWorking == false && startWorking == null && currentStatus == \"TRABALHANDO\") actions.machineFinishedWorking();\nif (conditions && conditions.verifyWorking == true && lastTimestamp !== null) {\n    actions.startWorking();\n    actions.verifyLastTimestamp(); // condi√ß√£o dos demais trabalhos da m√°quina no turno\n}\n\nmsg.data = {\n    startWorking: startWorking,\n    workingTime: sumWorkingTime,\n    idleTime: sumIdleTime,\n    status: currentStatus,\n    activeMachine: activeMachine,\n    lastTimestamp: lastTimestamp,\n    reset: resetShift,\n    machine: machine\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1260,
        "y": 7040,
        "wires": [
            [
                "1f361f17ad8d82ee",
                "af3d179e88158277"
            ]
        ],
        "icon": "font-awesome/fa-book"
    },
    {
        "id": "1f361f17ad8d82ee",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "verifyStatus",
        "func": "let data = msg.data;\nlet serialNumber = data.machine;\nlet differenceInSeconds = context.get('differenceInSeconds') || 0;\nlet currentStatus = context.get('currentStatus') || 'PARADA';\nlet currentTimestamp = new Date();\n\nif (data.lastTimestamp !== null) {\n    differenceInSeconds = (currentTimestamp.getTime() - data.lastTimestamp.getTime()) / 1000;\n    context.set('differenceInSeconds', differenceInSeconds);\n\n    if (data.status == \"TRABALHANDO\" || differenceInSeconds <= 299) {\n        currentStatus = \"TRABALHANDO\";\n        context.set('currentStatus', currentStatus);\n    }\n    else if (data.status == \"PARADA\" && differenceInSeconds >= 300 && differenceInSeconds <= 1799) {\n        currentStatus = \"PARADO\";\n        context.set('currentStatus', currentStatus);\n    }\n    else if (data.status == \"PARADA\" && differenceInSeconds >= 1800) {\n        currentStatus = \"DESLIGADO\";\n        context.set('currentStatus', currentStatus);\n    }\n\n}\n\nelse if (data.lastTimestamp == null && data.status == \"PARADA\") {\n    currentStatus = \"DESLIGADO\";\n    context.set('currentStatus', currentStatus);\n}\n\nelse if (data.lastTimestamp == null && data.status == \"TRABALHANDO\") {\n    currentStatus = \"TRABALHANDO\";\n    context.set('currentStatus', currentStatus);\n}\n\nmsg.status = {\n    time: differenceInSeconds,\n    currentStatus: currentStatus,\n    machine: serialNumber\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1590,
        "y": 7020,
        "wires": [
            [
                "7871cec2bac30e53"
            ]
        ],
        "icon": "node-red/status.svg"
    },
    {
        "id": "af3d179e88158277",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "ROSQUEADEIRA MANUAL MANROD",
        "func": "let workingTime = msg.data.workingTime;\nlet idleTime = msg.data.idleTime;\nlet status = msg.data.status;\nlet reset = msg.data.reset;\nlet machine = msg.payload.serialNumber;\nlet workingTimeMinutes = context.get('workingTimeMinutes') || 0;\nlet idleTimeMinutes = context.get('idleTimeMinutes') || 0;\n\nfunction minutesToHours(totalMinutes) {\n    var hours = String(Math.floor(totalMinutes / 60)).padStart(2, \"0\");\n    var minutes = String(totalMinutes % 60).padStart(2, \"0\");\n\n    return `${hours}:${minutes}`;\n}\n\nif (reset == true) {\n    workingTimeMinutes = 0;\n    idleTimeMinutes = 0;\n\n    context.set('workingTimeMinutes', workingTimeMinutes);\n    context.set('idleTimeMinutes', 0);\n}\n\nif (workingTime > 0 || idleTime > 0) {\n    workingTimeMinutes = workingTime / 60;\n    idleTimeMinutes = idleTime / 60;\n}\n\nmsg.payload = {\n    workingTimeMinutes: minutesToHours(workingTimeMinutes.toFixed(0)),\n    idleTimeMinutes: minutesToHours(idleTimeMinutes.toFixed(0)),\n    status: status,\n    deviceSerialNumber: machine\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1670,
        "y": 6980,
        "wires": [
            []
        ],
        "icon": "font-awesome/fa-cogs"
    },
    {
        "id": "7871cec2bac30e53",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "FormatedMessage",
        "func": "let machine = msg.status.machine;\nlet timestamp = new Date().getTime();\nlet currentStatus = context.get('currentStatus') || null; \nlet oldStatus = msg.status.currentStatus;\n\nif(!currentStatus || currentStatus !== oldStatus) {\n    currentStatus = oldStatus;\n    context.set('currentStatus', currentStatus);\n\n    msg.payload = {\n            timestamp: timestamp,\n            deviceSerialNumber: machine,\n            status: currentStatus\n    }\n    return msg;\n}\nreturn null;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1950,
        "y": 7020,
        "wires": [
            []
        ],
        "icon": "font-awesome/fa-envelope"
    },
    {
        "id": "baad251bb4d3be64",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "Conditions Machine",
        "func": "let payload = msg.payload;\nlet serialNumber = msg.payload.serialNumber;\nlet switch1 = context.get('switch1') || null;\nlet verifyWorking = context.get('verifyWorking') || false;\n\nif (payload.Switch1 && payload.Switch1.Action == \"ON\") { // Caputura a a√ß√£o quando o SW1 liga\n    context.set('switch1', \"ON\");\n    verifyWorking = true;\n}\nelse if ((payload.Switch1 && payload.Switch1.Action == \"OFF\") && switch1 == \"ON\") { // Captura a mudan√ßa de SW1 ligado para desligado\n    context.set('switch1', \"OFF\");\n    verifyWorking = false;\n}\ncontext.set('verifyWorking', verifyWorking);\n\nmsg.conditions = {\n    switch1: context.get('switch1'),\n    verifyWorking: verifyWorking,\n    serialNumber: serialNumber\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 7080,
        "wires": [
            [
                "8af4cd9e9273479a"
            ]
        ],
        "icon": "font-awesome/fa-bars"
    },
    {
        "id": "8af4cd9e9273479a",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "Production Machine",
        "func": "let payload = msg.payload;\nlet conditions = {\n    verifyWorking: msg.conditions.verifyWorking,\n    serialNumber: msg.conditions.serialNumber\n}\nlet resetShift = context.get('resetShift') || false;\nlet sumWorkingTime = context.get('sumWorkingTime') || 0;\nlet sumIdleTime = context.get('sumIdleTime') || 0;\nlet startWorking = context.get('startWorking') || null;\nlet lastTimestamp = context.get('lastTimestamp') || null;\nlet machine = context.get('machine') || null;\nlet currentStatus = context.get('currentStatus') || \"PARADA\";\nlet activeMachine = context.get('activeMachine') || false;\nlet currentTimestamp = new Date();\n\nconst actions = {\n    'payloadReset': () => { // muda o valor de resetShift para resetar as vari√°veis\n        resetShift = true;\n        context.set('resetShift', resetShift);\n    },\n    'resetShift': () => { // fun√ß√£o de resetar as vari√°veis\n        [sumWorkingTime, sumIdleTime, startWorking, lastTimestamp, resetShift] =\n            [0, 0, null, null, false];\n        context.set('sumWorkingTime', sumWorkingTime);\n        context.set('sumIdleTime', sumWorkingTime);\n        context.set('startWorking', startWorking);\n        context.set('lastTimestamp', lastTimestamp);\n        context.set('resetShift', resetShift);\n    },\n    'startWorking': () => { // captura o in√≠cio do trabalho da m√°quina\n        startWorking = currentTimestamp;\n        context.set('startWorking', startWorking);\n\n        activeMachine = true;\n        context.set('activeMachine', activeMachine);\n\n        currentStatus = \"TRABALHANDO\";\n        context.set('currentStatus', currentStatus);\n\n    },\n    'machineFinishedWorking': () => { // captura o momento em que a m√°quina termina de trabalhar\n        if (startWorking !== null) {\n            let timeWorking = (currentTimestamp.getTime() - startWorking.getTime()) / 1000;\n            sumWorkingTime += timeWorking;\n            context.set('sumWorkingTime', sumWorkingTime);\n\n            activeMachine = false;\n            context.set('activeMachine', activeMachine);\n        }\n        currentStatus = \"PARADA\";\n        context.set('currentStatus', currentStatus);\n\n        lastTimestamp = currentTimestamp;\n        context.set('lastTimestamp', lastTimestamp);\n    },\n    'verifyLastTimestamp': () => { // armazena a √∫ltima vez em que a m√°quina trabalhou\n        let idleTime = (currentTimestamp.getTime() - lastTimestamp.getTime()) / 1000;\n\n        if (idleTime >= 300) {\n            sumIdleTime += idleTime;\n            context.set('sumIdleTime', sumIdleTime);\n        }\n        else {\n            sumWorkingTime += idleTime;\n            context.set('sumWorkingTime', sumWorkingTime);\n        }\n    },\n    'machineNull': () => {\n        machine = conditions.serialNumber;\n        context.set('machine', machine)\n    },\n}\n\nif (resetShift === true) actions.resetShift();\nif (machine == null && conditions.serialNumber) actions.machineNull(); // captura o n√∫mero de s√©rie do dispositivo\nif (payload === \"reset\") actions.payloadReset();\nif (conditions && conditions.verifyWorking == true && lastTimestamp == null) actions.startWorking(); // condi√ß√£o primeiro trabalho do turno da m√°quina\nif (conditions && conditions.verifyWorking == false && startWorking !== null) actions.machineFinishedWorking(); // condi√ß√£o do momento em que a m√°quina para de trabalhar\nif (conditions && conditions.verifyWorking == false && startWorking == null && currentStatus == \"TRABALHANDO\") actions.machineFinishedWorking();\nif (conditions && conditions.verifyWorking == true && lastTimestamp !== null) {\n    actions.startWorking();\n    actions.verifyLastTimestamp(); // condi√ß√£o dos demais trabalhos da m√°quina no turno\n}\n\nmsg.data = {\n    startWorking: startWorking,\n    workingTime: sumWorkingTime,\n    idleTime: sumIdleTime,\n    status: currentStatus,\n    activeMachine: activeMachine,\n    lastTimestamp: lastTimestamp,\n    reset: resetShift,\n    machine: machine\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1260,
        "y": 7080,
        "wires": [
            [
                "c6825e2f6f187dcd",
                "241ef6f5b23fac03"
            ]
        ],
        "icon": "font-awesome/fa-book"
    },
    {
        "id": "c6825e2f6f187dcd",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "verifyStatus",
        "func": "let data = msg.data;\nlet serialNumber = data.machine;\nlet differenceInSeconds = context.get('differenceInSeconds') || 0;\nlet currentStatus = context.get('currentStatus') || 'PARADA';\nlet currentTimestamp = new Date();\n\nif (data.lastTimestamp !== null) {\n    differenceInSeconds = (currentTimestamp.getTime() - data.lastTimestamp.getTime()) / 1000;\n    context.set('differenceInSeconds',differenceInSeconds);\n\n    if (data.status == \"TRABALHANDO\" || differenceInSeconds <= 299) {\n        currentStatus = \"TRABALHANDO\";\n        context.set('currentStatus',currentStatus);\n    }\n    else if (data.status == \"PARADA\" && differenceInSeconds >= 300 && differenceInSeconds <=1799) {\n        currentStatus = \"PARADO\";\n        context.set('currentStatus', currentStatus);\n    }\n    else if (data.status == \"PARADA\" && differenceInSeconds >= 1800) {\n        currentStatus = \"DESLIGADO\";\n        context.set('currentStatus', currentStatus);\n    }\n\n}\n\nelse if (data.lastTimestamp == null && data.status == \"PARADA\") {\n    currentStatus = \"DESLIGADO\";\n    context.set('currentStatus', currentStatus);\n}\n\nelse if (data.lastTimestamp == null && data.status == \"TRABALHANDO\") {\n    currentStatus = \"TRABALHANDO\";\n    context.set('currentStatus', currentStatus);\n}\n\nmsg.status = {\n    time: differenceInSeconds,\n    currentStatus: currentStatus,\n    machine: serialNumber\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1590,
        "y": 7120,
        "wires": [
            [
                "3ccd65adc7b6354e"
            ]
        ],
        "icon": "node-red/status.svg"
    },
    {
        "id": "241ef6f5b23fac03",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "FURADEIRA VEGA",
        "func": "let workingTime = msg.data.workingTime;\nlet idleTime = msg.data.idleTime;\nlet status = msg.data.status;\nlet reset = msg.data.reset;\nlet machine = msg.payload.serialNumber;\nlet workingTimeMinutes = context.get('workingTimeMinutes') || 0;\nlet idleTimeMinutes = context.get('idleTimeMinutes') || 0;\n\nfunction minutesToHours(totalMinutes) {\n    var hours = String(Math.floor(totalMinutes / 60)).padStart(2, \"0\");\n    var minutes = String(totalMinutes % 60).padStart(2, \"0\");\n\n    return `${hours}:${minutes}`;\n}\n\nif (reset == true) {\n    workingTimeMinutes = 0;\n    idleTimeMinutes = 0;\n\n    context.set('workingTimeMinutes', workingTimeMinutes);\n    context.set('idleTimeMinutes', 0);\n}\n\nif (workingTime > 0 || idleTime > 0) {\n    workingTimeMinutes = workingTime / 60;\n    idleTimeMinutes = idleTime / 60;\n}\n\nmsg.payload = {\n    workingTimeMinutes: minutesToHours(workingTimeMinutes.toFixed(0)),\n    idleTimeMinutes: minutesToHours(idleTimeMinutes.toFixed(0)),\n    status: status,\n    deviceSerialNumber: machine\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1610,
        "y": 7080,
        "wires": [
            []
        ],
        "icon": "font-awesome/fa-cogs"
    },
    {
        "id": "3ccd65adc7b6354e",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "FormatedMessage",
        "func": "let machine = msg.status.machine;\nlet timestamp = new Date().getTime();\nlet currentStatus = context.get('currentStatus') || null; \nlet oldStatus = msg.status.currentStatus;\n\nif(!currentStatus || currentStatus !== oldStatus) {\n    currentStatus = oldStatus;\n    context.set('currentStatus', currentStatus);\n\n    msg.payload = {\n            timestamp: timestamp,\n            deviceSerialNumber: machine,\n            status: currentStatus\n    }\n    return msg;\n}\nreturn null;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1950,
        "y": 7120,
        "wires": [
            []
        ],
        "icon": "font-awesome/fa-envelope"
    },
    {
        "id": "f03cf08bce9bdef5",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "Conditions Machine",
        "func": "let payload = msg.payload;\nlet serialNumber = msg.payload.serialNumber;\nlet switch1 = context.get('switch1') || null;\nlet verifyWorking = context.get('verifyWorking') || false;\n\nif (payload.Switch1 && payload.Switch1.Action == \"ON\") { // Caputura a a√ß√£o quando o SW1 liga\n    context.set('switch1', \"ON\");\n    verifyWorking = true;\n}\nelse if ((payload.Switch1 && payload.Switch1.Action == \"OFF\") && switch1 == \"ON\") { // Captura a mudan√ßa de SW1 ligado para desligado\n    context.set('switch1', \"OFF\");\n    verifyWorking = false;\n}\ncontext.set('verifyWorking', verifyWorking);\n\nmsg.conditions = {\n    switch1: context.get('switch1'),\n    verifyWorking: verifyWorking,\n    serialNumber: serialNumber\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 7120,
        "wires": [
            [
                "94b1cd4d7b44da6a"
            ]
        ],
        "icon": "font-awesome/fa-bars"
    },
    {
        "id": "94b1cd4d7b44da6a",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "Production Machine",
        "func": "let payload = msg.payload;\nlet conditions = {\n  verifyWorking: msg.conditions.verifyWorking,\n  serialNumber: msg.conditions.serialNumber\n}\nlet resetShift = context.get('resetShift') || false;\nlet sumWorkingTime = context.get('sumWorkingTime') || 0;\nlet sumIdleTime = context.get('sumIdleTime') || 0;\nlet startWorking = context.get('startWorking') || null;\nlet lastTimestamp = context.get('lastTimestamp') || null;\nlet machine = context.get('machine') || null;\nlet currentStatus = context.get('currentStatus') || \"PARADA\";\nlet activeMachine = context.get('activeMachine') || false;\nlet currentTimestamp = new Date();\n\nconst actions = {\n  'payloadReset': () => { // muda o valor de resetShift para resetar as vari√°veis\n    resetShift = true;\n    context.set('resetShift', resetShift);\n  },\n  'resetShift': () => { // fun√ß√£o de resetar as vari√°veis\n    [sumWorkingTime, sumIdleTime, startWorking, lastTimestamp, resetShift] =\n      [0, 0, null, null, false];\n    context.set('sumWorkingTime', sumWorkingTime);\n    context.set('sumIdleTime', sumWorkingTime);\n    context.set('startWorking', startWorking);\n    context.set('lastTimestamp', lastTimestamp);\n    context.set('resetShift', resetShift);\n  },\n  'startWorking': () => { // captura o in√≠cio do trabalho da m√°quina\n    startWorking = currentTimestamp;\n    context.set('startWorking', startWorking);\n\n    activeMachine = true;\n    context.set('activeMachine', activeMachine);\n\n    currentStatus = \"TRABALHANDO\";\n    context.set('currentStatus', currentStatus);\n\n  },\n  'machineFinishedWorking': () => { // captura o momento em que a m√°quina termina de trabalhar\n    if (startWorking !== null) {\n      let timeWorking = (currentTimestamp.getTime() - startWorking.getTime()) / 1000;\n      sumWorkingTime += timeWorking;\n      context.set('sumWorkingTime', sumWorkingTime);\n\n      activeMachine = false;\n      context.set('activeMachine', activeMachine);\n    }\n    currentStatus = \"PARADA\";\n    context.set('currentStatus', currentStatus);\n\n    lastTimestamp = currentTimestamp;\n    context.set('lastTimestamp', lastTimestamp);\n  },\n  'verifyLastTimestamp': () => { // armazena a √∫ltima vez em que a m√°quina trabalhou\n    let idleTime = (currentTimestamp.getTime() - lastTimestamp.getTime()) / 1000;\n\n    if (idleTime >= 300) {\n      sumIdleTime += idleTime;\n      context.set('sumIdleTime', sumIdleTime);\n    }\n    else {\n      sumWorkingTime += idleTime;\n      context.set('sumWorkingTime', sumWorkingTime);\n    }\n  },\n  'machineNull': () => {\n    machine = conditions.serialNumber;\n    context.set('machine', machine)\n  },\n}\n\nif (resetShift === true) actions.resetShift();\nif (machine == null && conditions.serialNumber) actions.machineNull(); // captura o n√∫mero de s√©rie do dispositivo\nif (payload === \"reset\") actions.payloadReset();\nif (conditions && conditions.verifyWorking == true && lastTimestamp == null) actions.startWorking(); // condi√ß√£o primeiro trabalho do turno da m√°quina\nif (conditions && conditions.verifyWorking == false && startWorking !== null) actions.machineFinishedWorking(); // condi√ß√£o do momento em que a m√°quina para de trabalhar\nif (conditions && conditions.verifyWorking == false && startWorking == null && currentStatus == \"TRABALHANDO\") actions.machineFinishedWorking();\nif (conditions && conditions.verifyWorking == true && lastTimestamp !== null) {\n  actions.startWorking();\n  actions.verifyLastTimestamp(); // condi√ß√£o dos demais trabalhos da m√°quina no turno\n}\n\nmsg.data = {\n  startWorking: startWorking,\n  workingTime: sumWorkingTime,\n  idleTime: sumIdleTime,\n  status: currentStatus,\n  activeMachine: activeMachine,\n  lastTimestamp: lastTimestamp,\n  reset: resetShift,\n  machine: machine\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1260,
        "y": 7120,
        "wires": [
            [
                "f34c6341dc28a99d",
                "791c8a5ac9cbd694"
            ]
        ],
        "icon": "font-awesome/fa-book"
    },
    {
        "id": "f34c6341dc28a99d",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "verifyStatus",
        "func": "let data = msg.data;\nlet serialNumber = data.machine;\nlet differenceInSeconds = context.get('differenceInSeconds') || 0;\nlet currentStatus = context.get('currentStatus') || 'PARADA';\nlet currentTimestamp = new Date();\n\nif (data.lastTimestamp !== null) {\n    differenceInSeconds = (currentTimestamp.getTime() - data.lastTimestamp.getTime()) / 1000;\n    context.set('differenceInSeconds', differenceInSeconds);\n\n    if (data.status == \"TRABALHANDO\" || differenceInSeconds <= 299) {\n        currentStatus = \"TRABALHANDO\";\n        context.set('currentStatus', currentStatus);\n    }\n    else if (data.status == \"PARADA\" && differenceInSeconds >= 300 && differenceInSeconds <= 1799) {\n        currentStatus = \"PARADO\";\n        context.set('currentStatus', currentStatus);\n    }\n    else if (data.status == \"PARADA\" && differenceInSeconds >= 1800) {\n        currentStatus = \"DESLIGADO\";\n        context.set('currentStatus', currentStatus);\n    }\n\n}\n\nelse if (data.lastTimestamp == null && data.status == \"PARADA\") {\n    currentStatus = \"DESLIGADO\";\n    context.set('currentStatus', currentStatus);\n}\n\nelse if (data.lastTimestamp == null && data.status == \"TRABALHANDO\") {\n    currentStatus = \"TRABALHANDO\";\n    context.set('currentStatus', currentStatus);\n}\n\nmsg.status = {\n    time: differenceInSeconds,\n    currentStatus: currentStatus,\n    machine: serialNumber\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1590,
        "y": 7220,
        "wires": [
            [
                "e3d6a6470d21e8c3"
            ]
        ],
        "icon": "node-red/status.svg"
    },
    {
        "id": "791c8a5ac9cbd694",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "CALANDRA GRANDE",
        "func": "let workingTime = msg.data.workingTime;\nlet idleTime = msg.data.idleTime;\nlet status = msg.data.status;\nlet reset = msg.data.reset;\nlet machine = msg.payload.serialNumber;\nlet workingTimeMinutes = context.get('workingTimeMinutes') || 0;\nlet idleTimeMinutes = context.get('idleTimeMinutes') || 0;\n\nfunction minutesToHours(totalMinutes) {\n    var hours = String(Math.floor(totalMinutes / 60)).padStart(2, \"0\");\n    var minutes = String(totalMinutes % 60).padStart(2, \"0\");\n\n    return `${hours}:${minutes}`;\n}\n\nif (reset == true) {\n    workingTimeMinutes = 0;\n    idleTimeMinutes = 0;\n\n    context.set('workingTimeMinutes', workingTimeMinutes);\n    context.set('idleTimeMinutes', 0);\n}\n\nif (workingTime > 0 || idleTime > 0) {\n    workingTimeMinutes = workingTime / 60;\n    idleTimeMinutes = idleTime / 60;\n}\n\nmsg.payload = {\n    workingTimeMinutes: minutesToHours(workingTimeMinutes.toFixed(0)),\n    idleTimeMinutes: minutesToHours(idleTimeMinutes.toFixed(0)),\n    status: status,\n    deviceSerialNumber: machine\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1620,
        "y": 7180,
        "wires": [
            []
        ],
        "icon": "font-awesome/fa-cogs"
    },
    {
        "id": "e3d6a6470d21e8c3",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "FormatedMessage",
        "func": "let machine = msg.status.machine;\nlet timestamp = new Date().getTime();\nlet currentStatus = context.get('currentStatus') || null; \nlet oldStatus = msg.status.currentStatus;\n\nif(!currentStatus || currentStatus !== oldStatus) {\n    currentStatus = oldStatus;\n    context.set('currentStatus', currentStatus);\n\n    msg.payload = {\n            timestamp: timestamp,\n            deviceSerialNumber: machine,\n            status: currentStatus\n    }\n    return msg;\n}\nreturn null;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1950,
        "y": 7220,
        "wires": [
            []
        ],
        "icon": "font-awesome/fa-envelope"
    },
    {
        "id": "06325f74f9b697ee",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "Conditions Machine",
        "func": "let payload = msg.payload;\nlet serialNumber = msg.payload.serialNumber;\nlet switch1 = context.get('switch1') || null;\nlet verifyWorking = context.get('verifyWorking') || false;\n\nif (payload.Switch1 && payload.Switch1.Action == \"ON\") { // Caputura a a√ß√£o quando o SW1 liga\n    context.set('switch1', \"ON\");\n    verifyWorking = true;\n}\nelse if ((payload.Switch1 && payload.Switch1.Action == \"OFF\") && switch1 == \"ON\") { // Captura a mudan√ßa de SW1 ligado para desligado\n    context.set('switch1', \"OFF\");\n    verifyWorking = false;\n}\ncontext.set('verifyWorking', verifyWorking);\n\nmsg.conditions = {\n    switch1: context.get('switch1'),\n    verifyWorking: verifyWorking,\n    serialNumber: serialNumber\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 7160,
        "wires": [
            [
                "ee1dcc2ffe17431d"
            ]
        ],
        "icon": "font-awesome/fa-bars"
    },
    {
        "id": "ee1dcc2ffe17431d",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "Production Machine",
        "func": "let payload = msg.payload;\nlet conditions = { \n    verifyWorking: msg.conditions.verifyWorking,\n    serialNumber: msg.conditions.serialNumber\n} \nlet resetShift = context.get('resetShift') || false;\nlet sumWorkingTime = context.get('sumWorkingTime') || 0;\nlet sumIdleTime = context.get('sumIdleTime') || 0;\nlet startWorking = context.get('startWorking') || null;\nlet lastTimestamp = context.get('lastTimestamp') || null;\nlet machine = context.get('machine') || null;\nlet currentStatus = context.get('currentStatus') || \"PARADA\";\nlet activeMachine = context.get('activeMachine') || false;\nlet currentTimestamp = new Date();\n\nconst actions = {\n    'payloadReset': () => { // muda o valor de resetShift para resetar as vari√°veis\n        resetShift = true;\n        context.set('resetShift',resetShift);\n    },\n    'resetShift': () => { // fun√ß√£o de resetar as vari√°veis\n        [sumWorkingTime, sumIdleTime, startWorking, lastTimestamp, resetShift] =\n        [0, 0, null, null, false];\n        context.set('sumWorkingTime', sumWorkingTime);\n        context.set('sumIdleTime', sumWorkingTime);\n        context.set('startWorking', startWorking) ;\n        context.set('lastTimestamp', lastTimestamp);\n        context.set('resetShift', resetShift);\n    },\n    'startWorking': () =>{ // captura o in√≠cio do trabalho da m√°quina\n        startWorking = currentTimestamp;\n        context.set('startWorking', startWorking);\n\n        activeMachine = true;\n        context.set('activeMachine',activeMachine);\n\n        currentStatus = \"TRABALHANDO\";\n        context.set('currentStatus', currentStatus);\n\n    },\n    'machineFinishedWorking': () => { // captura o momento em que a m√°quina termina de trabalhar\n        if (startWorking !== null) {\n            let timeWorking = (currentTimestamp.getTime() - startWorking.getTime()) / 1000;\n            sumWorkingTime += timeWorking;\n            context.set('sumWorkingTime',sumWorkingTime);\n\n            activeMachine = false;\n            context.set('activeMachine', activeMachine);\n        }\n            currentStatus = \"PARADA\";\n            context.set('currentStatus', currentStatus);\n\n            lastTimestamp = currentTimestamp;\n            context.set('lastTimestamp',lastTimestamp);\n    },\n    'verifyLastTimestamp': () => { // armazena a √∫ltima vez em que a m√°quina trabalhou\n        let idleTime = (currentTimestamp.getTime() - lastTimestamp.getTime()) / 1000;\n\n        if (idleTime >= 300) {\n            sumIdleTime += idleTime;\n            context.set('sumIdleTime',sumIdleTime);\n        }\n        else {\n            sumWorkingTime += idleTime;\n            context.set('sumWorkingTime',sumWorkingTime);\n        }\n    },\n    'machineNull': () => {\n        machine = conditions.serialNumber;\n        context.set('machine', machine)\n    },\n}\n\nif (resetShift === true) actions.resetShift();\nif (machine == null && conditions.serialNumber) actions.machineNull(); // captura o n√∫mero de s√©rie do dispositivo\nif (payload === \"reset\") actions.payloadReset();\nif (conditions && conditions.verifyWorking == true && lastTimestamp == null) actions.startWorking(); // condi√ß√£o primeiro trabalho do turno da m√°quina\nif (conditions && conditions.verifyWorking == false && startWorking !==null) actions.machineFinishedWorking(); // condi√ß√£o do momento em que a m√°quina para de trabalhar\nif(conditions && conditions.verifyWorking == false && startWorking == null && currentStatus == \"TRABALHANDO\") actions.machineFinishedWorking();\nif (conditions && conditions.verifyWorking == true && lastTimestamp !== null) {\n    actions.startWorking();\n    actions.verifyLastTimestamp(); // condi√ß√£o dos demais trabalhos da m√°quina no turno\n} \n\nmsg.data = {\n    startWorking: startWorking,\n    workingTime: sumWorkingTime,\n    idleTime: sumIdleTime,\n    status: currentStatus,\n    activeMachine: activeMachine,\n    lastTimestamp: lastTimestamp,\n    reset: resetShift,\n    machine: machine\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1260,
        "y": 7160,
        "wires": [
            [
                "a3f56132d13427eb",
                "929c6e9bc2e55d72"
            ]
        ],
        "icon": "font-awesome/fa-book"
    },
    {
        "id": "a3f56132d13427eb",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "verifyStatus",
        "func": "let data = msg.data;\nlet serialNumber = data.machine;\nlet differenceInSeconds = context.get('differenceInSeconds') || 0;\nlet currentStatus = context.get('currentStatus') || 'PARADA';\nlet currentTimestamp = new Date();\n\nif (data.lastTimestamp !== null) {\n    differenceInSeconds = (currentTimestamp.getTime() - data.lastTimestamp.getTime()) / 1000;\n    context.set('differenceInSeconds', differenceInSeconds);\n\n    if (data.status == \"TRABALHANDO\" || differenceInSeconds <= 299) {\n        currentStatus = \"TRABALHANDO\";\n        context.set('currentStatus', currentStatus);\n    }\n    else if (data.status == \"PARADA\" && differenceInSeconds >= 300 && differenceInSeconds <= 1799) {\n        currentStatus = \"PARADO\";\n        context.set('currentStatus', currentStatus);\n    }\n    else if (data.status == \"PARADA\" && differenceInSeconds >= 1800) {\n        currentStatus = \"DESLIGADO\";\n        context.set('currentStatus', currentStatus);\n    }\n\n}\n\nelse if (data.lastTimestamp == null && data.status == \"PARADA\") {\n    currentStatus = \"DESLIGADO\";\n    context.set('currentStatus', currentStatus);\n}\n\nelse if (data.lastTimestamp == null && data.status == \"TRABALHANDO\") {\n    currentStatus = \"TRABALHANDO\";\n    context.set('currentStatus', currentStatus);\n}\n\nmsg.status = {\n    time: differenceInSeconds,\n    currentStatus: currentStatus,\n    machine: serialNumber\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1590,
        "y": 7320,
        "wires": [
            [
                "7f549e3b5b003768"
            ]
        ],
        "icon": "node-red/status.svg"
    },
    {
        "id": "929c6e9bc2e55d72",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "CURVADORA AMOB",
        "func": "let workingTime = msg.data.workingTime;\nlet idleTime = msg.data.idleTime;\nlet status = msg.data.status;\nlet reset = msg.data.reset;\nlet machine = msg.payload.serialNumber;\nlet workingTimeMinutes = context.get('workingTimeMinutes') || 0;\nlet idleTimeMinutes = context.get('idleTimeMinutes') || 0;\n\nfunction minutesToHours(totalMinutes) {\n    var hours = String(Math.floor(totalMinutes / 60)).padStart(2, \"0\");\n    var minutes = String(totalMinutes % 60).padStart(2, \"0\");\n\n    return `${hours}:${minutes}`;\n}\n\nif (reset == true) {\n    workingTimeMinutes = 0;\n    idleTimeMinutes = 0;\n\n    context.set('workingTimeMinutes', workingTimeMinutes);\n    context.set('idleTimeMinutes', 0);\n}\n\nif (workingTime > 0 || idleTime > 0) {\n    workingTimeMinutes = workingTime / 60;\n    idleTimeMinutes = idleTime / 60;\n}\n\nmsg.payload = {\n    workingTimeMinutes: minutesToHours(workingTimeMinutes.toFixed(0)),\n    idleTimeMinutes: minutesToHours(idleTimeMinutes.toFixed(0)),\n    status: status,\n    deviceSerialNumber: machine\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1620,
        "y": 7280,
        "wires": [
            []
        ],
        "icon": "font-awesome/fa-cogs"
    },
    {
        "id": "7f549e3b5b003768",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "FormatedMessage",
        "func": "let machine = msg.status.machine;\nlet timestamp = new Date().getTime();\nlet currentStatus = context.get('currentStatus') || null; \nlet oldStatus = msg.status.currentStatus;\n\nif(!currentStatus || currentStatus !== oldStatus) {\n    currentStatus = oldStatus;\n    context.set('currentStatus', currentStatus);\n\n    msg.payload = {\n            timestamp: timestamp,\n            deviceSerialNumber: machine,\n            status: currentStatus\n    }\n    return msg;\n}\nreturn null;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1950,
        "y": 7320,
        "wires": [
            []
        ],
        "icon": "font-awesome/fa-envelope"
    },
    {
        "id": "c81743117c9bb636",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "Conditions Machine",
        "func": "let payload = msg.payload;\nlet serialNumber = msg.payload.serialNumber;\nlet switch1 = context.get('switch1') || null;\nlet verifyWorking = context.get('verifyWorking') || false;\n\nif (payload.Switch1 && payload.Switch1.Action == \"ON\") { // Caputura a a√ß√£o quando o SW1 liga\n    context.set('switch1', \"ON\");\n    verifyWorking = true;\n}\nelse if ((payload.Switch1 && payload.Switch1.Action == \"OFF\") && switch1 == \"ON\") { // Captura a mudan√ßa de SW1 ligado para desligado\n    context.set('switch1', \"OFF\");\n    verifyWorking = false;\n}\ncontext.set('verifyWorking', verifyWorking);\n\nmsg.conditions = {\n    switch1: context.get('switch1'),\n    verifyWorking: verifyWorking,\n    serialNumber: serialNumber\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 7200,
        "wires": [
            [
                "4425482749929477"
            ]
        ],
        "icon": "font-awesome/fa-bars"
    },
    {
        "id": "4425482749929477",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "Production Machine",
        "func": "let payload = msg.payload;\nlet conditions = {\n    verifyWorking: msg.conditions.verifyWorking,\n    serialNumber: msg.conditions.serialNumber\n}\nlet resetShift = context.get('resetShift') || false;\nlet sumWorkingTime = context.get('sumWorkingTime') || 0;\nlet sumIdleTime = context.get('sumIdleTime') || 0;\nlet startWorking = context.get('startWorking') || null;\nlet lastTimestamp = context.get('lastTimestamp') || null;\nlet machine = context.get('machine') || null;\nlet currentStatus = context.get('currentStatus') || \"PARADA\";\nlet activeMachine = context.get('activeMachine') || false;\nlet currentTimestamp = new Date();\n\nconst actions = {\n    'payloadReset': () => { // muda o valor de resetShift para resetar as vari√°veis\n        resetShift = true;\n        context.set('resetShift', resetShift);\n    },\n    'resetShift': () => { // fun√ß√£o de resetar as vari√°veis\n        [sumWorkingTime, sumIdleTime, startWorking, lastTimestamp, resetShift] =\n            [0, 0, null, null, false];\n        context.set('sumWorkingTime', sumWorkingTime);\n        context.set('sumIdleTime', sumWorkingTime);\n        context.set('startWorking', startWorking);\n        context.set('lastTimestamp', lastTimestamp);\n        context.set('resetShift', resetShift);\n    },\n    'startWorking': () => { // captura o in√≠cio do trabalho da m√°quina\n        startWorking = currentTimestamp;\n        context.set('startWorking', startWorking);\n\n        activeMachine = true;\n        context.set('activeMachine', activeMachine);\n\n        currentStatus = \"TRABALHANDO\";\n        context.set('currentStatus', currentStatus);\n\n    },\n    'machineFinishedWorking': () => { // captura o momento em que a m√°quina termina de trabalhar\n        if (startWorking !== null) {\n            let timeWorking = (currentTimestamp.getTime() - startWorking.getTime()) / 1000;\n            sumWorkingTime += timeWorking;\n            context.set('sumWorkingTime', sumWorkingTime);\n\n            activeMachine = false;\n            context.set('activeMachine', activeMachine);\n        }\n        currentStatus = \"PARADA\";\n        context.set('currentStatus', currentStatus);\n\n        lastTimestamp = currentTimestamp;\n        context.set('lastTimestamp', lastTimestamp);\n    },\n    'verifyLastTimestamp': () => { // armazena a √∫ltima vez em que a m√°quina trabalhou\n        let idleTime = (currentTimestamp.getTime() - lastTimestamp.getTime()) / 1000;\n\n        if (idleTime >= 300) {\n            sumIdleTime += idleTime;\n            context.set('sumIdleTime', sumIdleTime);\n        }\n        else {\n            sumWorkingTime += idleTime;\n            context.set('sumWorkingTime', sumWorkingTime);\n        }\n    },\n    'machineNull': () => {\n        machine = conditions.serialNumber;\n        context.set('machine', machine)\n    },\n}\n\nif (resetShift === true) actions.resetShift();\nif (machine == null && conditions.serialNumber) actions.machineNull(); // captura o n√∫mero de s√©rie do dispositivo\nif (payload === \"reset\") actions.payloadReset();\nif (conditions && conditions.verifyWorking == true && lastTimestamp == null) actions.startWorking(); // condi√ß√£o primeiro trabalho do turno da m√°quina\nif (conditions && conditions.verifyWorking == false && startWorking !== null) actions.machineFinishedWorking(); // condi√ß√£o do momento em que a m√°quina para de trabalhar\nif (conditions && conditions.verifyWorking == false && startWorking == null && currentStatus == \"TRABALHANDO\") actions.machineFinishedWorking();\nif (conditions && conditions.verifyWorking == true && lastTimestamp !== null) {\n    actions.startWorking();\n    actions.verifyLastTimestamp(); // condi√ß√£o dos demais trabalhos da m√°quina no turno\n}\n\nmsg.data = {\n    startWorking: startWorking,\n    workingTime: sumWorkingTime,\n    idleTime: sumIdleTime,\n    status: currentStatus,\n    activeMachine: activeMachine,\n    lastTimestamp: lastTimestamp,\n    reset: resetShift,\n    machine: machine\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1260,
        "y": 7200,
        "wires": [
            [
                "69bde825561ca350",
                "606101ad3705847c"
            ]
        ],
        "icon": "font-awesome/fa-book"
    },
    {
        "id": "69bde825561ca350",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "verifyStatus",
        "func": "let data = msg.data;\nlet serialNumber = data.machine;\nlet differenceInSeconds = context.get('differenceInSeconds') || 0;\nlet currentStatus = context.get('currentStatus') || 'PARADA';\nlet currentTimestamp = new Date();\n\nif (data.lastTimestamp !== null) {\n    differenceInSeconds = (currentTimestamp.getTime() - data.lastTimestamp.getTime()) / 1000;\n    context.set('differenceInSeconds', differenceInSeconds);\n\n    if (data.status == \"TRABALHANDO\" || differenceInSeconds <= 299) {\n        currentStatus = \"TRABALHANDO\";\n        context.set('currentStatus', currentStatus);\n    }\n    else if (data.status == \"PARADA\" && differenceInSeconds >= 300 && differenceInSeconds <= 1799) {\n        currentStatus = \"PARADO\";\n        context.set('currentStatus', currentStatus);\n    }\n    else if (data.status == \"PARADA\" && differenceInSeconds >= 1800) {\n        currentStatus = \"DESLIGADO\";\n        context.set('currentStatus', currentStatus);\n    }\n\n}\n\nelse if (data.lastTimestamp == null && data.status == \"PARADA\") {\n    currentStatus = \"DESLIGADO\";\n    context.set('currentStatus', currentStatus);\n}\n\nelse if (data.lastTimestamp == null && data.status == \"TRABALHANDO\") {\n    currentStatus = \"TRABALHANDO\";\n    context.set('currentStatus', currentStatus);\n}\n\nmsg.status = {\n    time: differenceInSeconds,\n    currentStatus: currentStatus,\n    machine: serialNumber\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1590,
        "y": 7420,
        "wires": [
            [
                "92b97840339ea46e"
            ]
        ],
        "icon": "node-red/status.svg"
    },
    {
        "id": "606101ad3705847c",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "SERRA MANROD",
        "func": "let workingTime = msg.data.workingTime;\nlet idleTime = msg.data.idleTime;\nlet status = msg.data.status;\nlet reset = msg.data.reset;\nlet machine = msg.payload.serialNumber;\nlet workingTimeMinutes = context.get('workingTimeMinutes') || 0;\nlet idleTimeMinutes = context.get('idleTimeMinutes') || 0;\n\nfunction minutesToHours(totalMinutes) {\n    var hours = String(Math.floor(totalMinutes / 60)).padStart(2, \"0\");\n    var minutes = String(totalMinutes % 60).padStart(2, \"0\");\n\n    return `${hours}:${minutes}`;\n}\n\nif (reset == true) {\n    workingTimeMinutes = 0;\n    idleTimeMinutes = 0;\n\n    context.set('workingTimeMinutes', workingTimeMinutes);\n    context.set('idleTimeMinutes', 0);\n}\n\nif (workingTime > 0 || idleTime > 0) {\n    workingTimeMinutes = workingTime / 60;\n    idleTimeMinutes = idleTime / 60;\n}\n\nmsg.payload = {\n    workingTimeMinutes: minutesToHours(workingTimeMinutes.toFixed(0)),\n    idleTimeMinutes: minutesToHours(idleTimeMinutes.toFixed(0)),\n    status: status,\n    deviceSerialNumber: machine\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1610,
        "y": 7380,
        "wires": [
            []
        ],
        "icon": "font-awesome/fa-cogs"
    },
    {
        "id": "92b97840339ea46e",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "FormatedMessage",
        "func": "let machine = msg.status.machine;\nlet timestamp = new Date().getTime();\nlet currentStatus = context.get('currentStatus') || null; \nlet oldStatus = msg.status.currentStatus;\n\nif(!currentStatus || currentStatus !== oldStatus) {\n    currentStatus = oldStatus;\n    context.set('currentStatus', currentStatus);\n\n    msg.payload = {\n            timestamp: timestamp,\n            deviceSerialNumber: machine,\n            status: currentStatus\n    }\n    return msg;\n}\nreturn null;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1950,
        "y": 7420,
        "wires": [
            []
        ],
        "icon": "font-awesome/fa-envelope"
    },
    {
        "id": "ad7676d667168421",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "Switches States",
        "func": "function handleSwitch(payload, context, switchName, startName , verifyName) { // captura se o estado do SW1 e SW2\n    let switchKey = Object.keys(payload).find(key => key.startsWith(switchName));\n    let actionValue = payload[switchKey] ? payload[switchKey].Action : null\n    let switchState = context.get(switchName) || null;\n    let startState = context.get(startName) || false;\n    let verifyState = context.get(verifyName) || false;\n\n    switchState = actionValue || switchState;\n\n    if (switchState == \"ON\") { // momento em que a m√°quina est√° ligada\n        startState = true;\n        verifyState = false;\n    } else if (switchState == \"OFF\") { // momento em que a m√°quina est√° desligada\n        startState = false;\n        verifyState = true;\n    }\n    context.set(startName, startState);\n    context.set(switchName, switchState);\n    context.set(verifyName,verifyState);\n\n    return {\n        switchState: switchState,\n        startState: startState,\n        verifyState: verifyState\n    };\n}\nlet payload = msg.payload;\nlet verifySpinReverse = handleSwitch(payload, context, 'Switch1', 'startReverse', 'verifySpinReverse'); // SW1 indica que a m√°quina est√° em giro reverso\nlet verifySpinDirect = handleSwitch(payload, context, 'Switch2', 'startDirect', 'verifySpinDirect'); // SW2 indica que a m√°quina est√° em giro direto\n\nmsg.switches = {\n    switch1: verifySpinReverse.switchState,\n    switch2: verifySpinDirect.switchState,\n    startReverse: verifySpinReverse.startState,\n    startDirect: verifySpinDirect.startState,\n    verifySpinReverse: verifySpinReverse.verifyState,\n    verifySpinDirect: verifySpinDirect.verifyState,\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 7240,
        "wires": [
            [
                "b0aec4a954ece1bf"
            ]
        ],
        "icon": "node-red/swap.svg"
    },
    {
        "id": "e77ebc516d154e5b",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "Production Machine",
        "func": "let { startOperation, finishedOperation, serialNumber } = msg.conditions;\nlet [sumWorkingTime, sumIdleTime] = ['sumWorkingTime', 'sumIdleTime'].map(key => context.get(key) || 0);\nlet [dateStartProduction, dateLastProduction, machine] = ['dateStartProduction', 'dateLastProduction', 'machine'].map(key => context.get(key) || null);\nlet resetShift = context.get('resetShift') || false;\nlet currentTimestamp = new Date();\n\nconst actions = {\n    resetShift: () => { sumWorkingTime = 0; sumIdleTime = 0, resetShift = false, dateLastProduction = null },\n    payloadReset: () => { resetShift = true },\n    startProduction: () => {\n        dateStartProduction = currentTimestamp\n        if (dateLastProduction !== null) {\n            let timeIdle = (currentTimestamp.getTime() - dateLastProduction.getTime()) / 1000;\n\n            if (timeIdle >= 300) sumIdleTime += timeIdle;\n            else sumWorkingTime += timeIdle;\n        };\n    },\n    finishedProduction: () => {\n        if (dateStartProduction !== null) {\n            let timeWorking = (currentTimestamp.getTime() - dateStartProduction.getTime()) / 1000;\n            sumWorkingTime += timeWorking;\n\n            dateStartProduction = null;\n            dateLastProduction = currentTimestamp;\n        };\n    },\n    machineNull: () => { machine = serialNumber }\n};\nconst conditions = {\n    resetShift: resetShift === true,\n    payloadReset: msg.payload == \"reset\",\n    startProduction: startOperation && !finishedOperation,\n    finishedProduction: !startOperation && finishedOperation,\n    machineNull: (serialNumber && machine == null) || (serialNumber && machine !== serialNumber && machine !== null)\n};\n\nObject.entries(conditions).forEach(([condition, isTrue]) => {\n    if (isTrue && actions[condition]) actions[condition]();\n});\ncontext.set('sumWorkingTime', sumWorkingTime);\ncontext.set('sumIdleTime', sumIdleTime);\ncontext.set('resetShift', resetShift);\ncontext.set('dateStartProduction', dateStartProduction);\ncontext.set('dateLastProduction', dateLastProduction);\ncontext.set('machine', machine);\n\nmsg.data = {\n    workingTime: sumWorkingTime,\n    idleTime: sumIdleTime,\n    dateStartProduction: dateStartProduction,\n    dateLastProduction: dateLastProduction,\n    reset: resetShift,\n    machine: machine\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1260,
        "y": 7240,
        "wires": [
            [
                "4d6b4b3121f22f84",
                "21a5d880b80fc8ad"
            ]
        ],
        "icon": "font-awesome/fa-book"
    },
    {
        "id": "4d6b4b3121f22f84",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "verifyStatus",
        "func": "let { dateStartProduction, dateLastProduction, machine } = msg.data;\nlet currentTimestamp = new Date();\nlet currentStatus = context.get('currentStatus') || null;\nlet timeCurrentProduction = dateStartProduction !== null ? (currentTimestamp.getTime() - dateStartProduction.getTime()) / 1000 : null;\nlet timeLastProduction = dateLastProduction !== null ? (currentTimestamp.getTime() - dateLastProduction.getTime()) / 1000 : null;\n\ncontext.set('timeCurrentProduction', timeCurrentProduction);\ncontext.set('timeLastProduction', timeLastProduction);\n\nif (dateStartProduction !== null && dateLastProduction == null) currentStatus = \"TRABALHANDO\";\n\nelse if (dateLastProduction !== null) {\n    //Mapeamento dos status\n    const machineWorking = (dateStartProduction !== null) || (timeLastProduction <= 299);\n    const machineIdle = (dateStartProduction == null && timeLastProduction >= 300 && timeLastProduction <= 1799);\n    const machineOff = (dateStartProduction == null && timeLastProduction >= 1800);\n\n    const newStatus = machineWorking ? \"TRABALHANDO\" : machineIdle ? \"PARADO\" : machineOff ? \"DESLIGADO\" : null;\n    if (newStatus) currentStatus = newStatus;\n}\nelse if (dateStartProduction == null && dateLastProduction == null) currentStatus = \"DESLIGADO\";\n\ncontext.set('currentStatus', currentStatus);\n\nmsg.status = {\n    timeCurrentProduction: timeCurrentProduction,\n    timeLastProduction: timeLastProduction,\n    machine: machine,\n    currentStatus: currentStatus\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1590,
        "y": 7520,
        "wires": [
            [
                "6159067bcd5bf1a8"
            ]
        ],
        "icon": "node-red/status.svg"
    },
    {
        "id": "21a5d880b80fc8ad",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "CALANDRA PEQUENA",
        "func": "let { workingTime, idleTime, machine } = msg.data;\nlet workingTimeMinutes = workingTime > 0 ? workingTime / 60 : 0;\nlet idleTimeMinutes = idleTime > 0 ? idleTime / 60 : 0;\n\nfunction minutesToHours(totalMinutes) {\n    var hours = String(Math.floor(totalMinutes / 60)).padStart(2, \"0\");\n    var minutes = String(totalMinutes % 60).padStart(2, \"0\");\n\n    return `${hours}:${minutes}`;\n}\ncontext.set('workingTimeMinutes', workingTimeMinutes);\ncontext.set('idleTimeMinutes', idleTimeMinutes);\n\nmsg.payload = {\n    workingTimeMinutes: minutesToHours(workingTimeMinutes.toFixed(0)),\n    idleTimeMinutes: minutesToHours(idleTimeMinutes.toFixed(0)),\n    deviceSerialNumber: machine\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1630,
        "y": 7480,
        "wires": [
            []
        ],
        "icon": "font-awesome/fa-cogs"
    },
    {
        "id": "6159067bcd5bf1a8",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "FormatedMessage",
        "func": "let machine = msg.status.machine;\nlet timestamp = new Date().getTime();\nlet currentStatus = context.get('currentStatus') || null; \nlet oldStatus = msg.status.currentStatus;\n\nif(!currentStatus || currentStatus !== oldStatus) {\n    currentStatus = oldStatus;\n    context.set('currentStatus', currentStatus);\n\n    msg.payload = {\n            timestamp: timestamp,\n            deviceSerialNumber: machine,\n            status: currentStatus\n    }\n    return msg;\n}\nreturn null;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1950,
        "y": 7520,
        "wires": [
            []
        ],
        "icon": "font-awesome/fa-envelope"
    },
    {
        "id": "fd96c9dc2e6d807d",
        "type": "switch",
        "z": "dae82ca7554ded9f",
        "name": "OPTION SW",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "hask",
                "v": "Switch1",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "Switch2",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 590,
        "y": 7240,
        "wires": [
            [
                "ad7676d667168421"
            ],
            [
                "ad7676d667168421"
            ]
        ]
    },
    {
        "id": "c49cd449a7efd692",
        "type": "inject",
        "z": "dae82ca7554ded9f",
        "name": "SWITCH2 ON",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF4685",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch2\": {\"Action\": \"ON\"} }",
        "payloadType": "json",
        "x": 150,
        "y": 7180,
        "wires": [
            [
                "fd902dddb172934a"
            ]
        ]
    },
    {
        "id": "6d86ec7f2ed4ee85",
        "type": "inject",
        "z": "dae82ca7554ded9f",
        "name": "SWITCH2 OFF",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF4685",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch2\": {\"Action\": \"OFF\"} }",
        "payloadType": "json",
        "x": 160,
        "y": 7220,
        "wires": [
            [
                "fd902dddb172934a"
            ]
        ]
    },
    {
        "id": "7d28a04c612b30da",
        "type": "inject",
        "z": "dae82ca7554ded9f",
        "name": "SWITCH1 ON",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF54E4",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch1\": {\"Action\": \"ON\"} }",
        "payloadType": "json",
        "x": 170,
        "y": 2120,
        "wires": [
            [
                "89c477950395c5d6"
            ]
        ]
    },
    {
        "id": "efdd7d444d844cfc",
        "type": "inject",
        "z": "dae82ca7554ded9f",
        "name": "SWITCH1 OFF",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF54E4",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch1\": {\"Action\": \"OFF\"} }",
        "payloadType": "json",
        "x": 180,
        "y": 2160,
        "wires": [
            [
                "89c477950395c5d6"
            ]
        ]
    },
    {
        "id": "3f5efa0cea5fb1f7",
        "type": "inject",
        "z": "dae82ca7554ded9f",
        "name": "SWITCH2 ON",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF54E4",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch2\": {\"Action\": \"ON\"} }",
        "payloadType": "json",
        "x": 170,
        "y": 2240,
        "wires": [
            [
                "89c477950395c5d6"
            ]
        ]
    },
    {
        "id": "c9e9ca0e98ae09e9",
        "type": "inject",
        "z": "dae82ca7554ded9f",
        "name": "SWITCH2 OFF",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF54E4",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch2\": {\"Action\": \"OFF\"} }",
        "payloadType": "json",
        "x": 180,
        "y": 2280,
        "wires": [
            [
                "89c477950395c5d6"
            ]
        ]
    },
    {
        "id": "0dce4248681126bd",
        "type": "inject",
        "z": "dae82ca7554ded9f",
        "name": "SWITCH3 ON",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF54E4",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch3\": {\"Action\": \"ON\"} }",
        "payloadType": "json",
        "x": 170,
        "y": 2440,
        "wires": [
            [
                "89c477950395c5d6"
            ]
        ]
    },
    {
        "id": "756a2aa7f7347c81",
        "type": "inject",
        "z": "dae82ca7554ded9f",
        "name": "SWITCH3 OFF",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF54E4",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch3\": {\"Action\": \"OFF\"} }",
        "payloadType": "json",
        "x": 180,
        "y": 2480,
        "wires": [
            [
                "89c477950395c5d6"
            ]
        ]
    },
    {
        "id": "0e36756a7adf9f98",
        "type": "inject",
        "z": "dae82ca7554ded9f",
        "name": "STATUS8",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF54E4",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"StatusSNS\": {  \"Switch2\": \"ON\" } }",
        "payloadType": "json",
        "x": 160,
        "y": 2320,
        "wires": [
            [
                "89c477950395c5d6"
            ]
        ]
    },
    {
        "id": "d6b73d9c89af469f",
        "type": "inject",
        "z": "dae82ca7554ded9f",
        "name": "STATUS8",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF54E4",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"StatusSNS\": {  \"Switch2\": \"OFF\" } }",
        "payloadType": "json",
        "x": 160,
        "y": 2360,
        "wires": [
            [
                "89c477950395c5d6"
            ]
        ]
    },
    {
        "id": "89c477950395c5d6",
        "type": "switch",
        "z": "dae82ca7554ded9f",
        "name": "Machine",
        "property": "payload.serialNumber",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "DF54E4",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 420,
        "y": 2280,
        "wires": [
            [
                "1182e841017da581"
            ]
        ],
        "icon": "font-awesome/fa-desktop"
    },
    {
        "id": "1182e841017da581",
        "type": "switch",
        "z": "dae82ca7554ded9f",
        "name": "OPTION SW",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "hask",
                "v": "Switch1",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "Switch2",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "Switch3",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "StatusSNS",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 4,
        "x": 590,
        "y": 2280,
        "wires": [
            [
                "09cd89b5ebbdc451"
            ],
            [
                "09cd89b5ebbdc451"
            ],
            [
                "09cd89b5ebbdc451"
            ],
            [
                "09cd89b5ebbdc451"
            ]
        ]
    },
    {
        "id": "09cd89b5ebbdc451",
        "type": "change",
        "z": "dae82ca7554ded9f",
        "name": "delete time",
        "rules": [
            {
                "t": "delete",
                "p": "payload.timestamp",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.StatusSNS.Time",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.StatusSNS.Switch1",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.StatusSNS.Switch3",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.StatusSNS.Switch4",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 770,
        "y": 2280,
        "wires": [
            [
                "2792978c9909d982"
            ]
        ],
        "icon": "font-awesome/fa-times-circle"
    },
    {
        "id": "41037bd8affeb16a",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "Switches States",
        "func": "function handleSwitch(payload, context, switchName, statusSNSName ,verifyName) {\n    let switchKey = Object.keys(payload).find(key => key.startsWith(switchName)) // extrai o switch que no payload\n    let actionValue = payload[switchKey] ? payload[switchKey].Action : null; // extrai o estado do switch que chegou\n    let statusSNS = payload[statusSNSName] && payload[statusSNSName][switchName];\n    let switchState = context.get(switchName) || null;\n    let verifyState = context.get(verifyName) || false;\n\n    switchState = actionValue || statusSNS || switchState; // adquire o estado do switch que chegou\n    \n    if (switchState == \"ON\") {  // captura o valor \"ON\" dos Switches\n        verifyState = true;\n    } else if (switchState == \"OFF\") { // captura o valor \"OFF\" dos Switches\n        verifyState = false;\n    }\n    context.set(switchName, switchState);\n    context.set(verifyName, verifyState);\n\n    return {\n        switchState: switchState,\n        verifyState: verifyState\n    };\n}\nlet payload = msg.payload;\nlet startCycle = handleSwitch(payload, context,'Switch1','StatusSNS','verifyStartCycle'); // Verifica√ß√£o do in√≠cio do ciclo\nlet readyMachine = handleSwitch(payload, context,'Switch2', 'StatusSNS', 'readyMachine')\nlet interruptedCycle = handleSwitch(payload, context, 'Switch3','StatusSNS', 'verifyCycleInterrupt'); // Verifica√ß√£o do final do ciclo\n\nmsg.switches = {\n    switch1: startCycle.switchState,\n    switch2: readyMachine.switchState,\n    switch3: interruptedCycle.switchState,\n    readyMachine: readyMachine.verifyState,\n    startCycle: startCycle.verifyState,\n    interruptedCycle: interruptedCycle.verifyState\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1080,
        "y": 2280,
        "wires": [
            [
                "8b19883f272228ea"
            ]
        ],
        "icon": "node-red/swap.svg"
    },
    {
        "id": "8b19883f272228ea",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "Conditions Machine",
        "func": "let { readyMachine, startCycle, interruptedCycle } = msg.switches;\nlet [verifyStartCycle, verifyIsCycle, verifyInterruptedCycle, finishedCycle] = \n    ['verifyStartCycle', 'verifyIsCycle', 'verifyInterruptedCycle', 'finishedCycle'].map(key => context.get(key) || false);\nlet currentTimestamp = new Date();\n\nconst actions = {\n    existsCycle: () => { verifyStartCycle = true; verifyIsCycle = true},\n    finishedCycle: () => {verifyIsCycle = false; finishedCycle = true},\n    interruptedCycle: () => { verifyInterruptedCycle = true},\n};\n\nconst conditions = {\n    existsCycle: readyMachine  && startCycle  && !verifyIsCycle,\n    finishedCycle: readyMachine && !interruptedCycle && !startCycle && verifyIsCycle,\n    interruptedCycle: readyMachine && interruptedCycle && !startCycle\n};\n\nObject.entries(conditions).forEach(([condition, isTrue]) => {\n    if (isTrue && actions[condition]) actions[condition] ();\n});\n\ncontext.set('verifyStartCycle', verifyStartCycle);\ncontext.set('verifyIsCycle', verifyIsCycle);\ncontext.set('verifyInterruptedCycle', verifyInterruptedCycle);\ncontext.set('finishedCycle', finishedCycle);\n\nmsg.conditions = {\n    verifyStartCycle: verifyStartCycle,\n    verifyIsCycle: verifyIsCycle,\n    verifyInterruptedCycle: verifyInterruptedCycle,\n    finishedCycle: finishedCycle,\n    serialNumber: msg.payload.serialNumber\n}\n\nverifyStartCycle = false;\nfinishedCycle = false;\nverifyInterruptedCycle = false;\n\ncontext.set('verifyStartCycle', verifyStartCycle);\ncontext.set('finishedCycle', finishedCycle);\ncontext.set('verifyInterruptedCycle', verifyInterruptedCycle);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1290,
        "y": 2280,
        "wires": [
            [
                "26628ad531f0db59"
            ]
        ],
        "icon": "font-awesome/fa-bars"
    },
    {
        "id": "26628ad531f0db59",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "Production Machine",
        "func": "let { verifyIsCycle, verifyStartCycle, finishedCycle, verifyInterruptedCycle, serialNumber } = msg.conditions;\nlet [cycleCount, cycleInterruptedCount] = ['cycleCount', 'cycleInterruptedCount'].map(key => context.get(key) || 0);\nlet [dateStartProduction, dateLastProduction, machine] = \n    ['dateStartProduction', 'dateLastProduction', 'machine'].map(key => context.get(key) || null);\nlet resetShift = context.get('resetShift') || false;\nlet currentTimestamp = new Date();\n\nconst actions = {\n    resetShift: () => {cycleCount = 0; cycleInterruptedCount = 0; resetShift = false},\n    payloadReset: () => {resetShift = true},\n    startProduction: () => {dateStartProduction = currentTimestamp},\n    finishedProduction: () => {cycleCount++; dateLastProduction = currentTimestamp, dateStartProduction = null},\n    interruptedCycle: () => {cycleInterruptedCount++},\n    machineNull: () => {machine = serialNumber}\n};\nconst conditions = {\n    resetShift: resetShift === true,\n    payloadReset: msg.payload == \"reset\",\n    startProduction: verifyStartCycle == true,\n    finishedProduction: finishedCycle == true,\n    interruptedCycle: verifyInterruptedCycle == true,\n    machineNull: (serialNumber && machine == null) || (serialNumber && machine !== serialNumber && machine !== null)\n};\n\nObject.entries(conditions).forEach(([condition, isTrue]) => {\n    if (isTrue && actions[condition]) actions[condition] ();\n});\n\ncontext.set('cycleCount', cycleCount);\ncontext.set('cycleInterruptedCount', cycleInterruptedCount);\ncontext.set('dateStartProduction', dateStartProduction);\ncontext.set('dateLastProduction', dateLastProduction);\ncontext.set('resetShift', resetShift);\ncontext.set('machine', machine);\n\nmsg.data = {\n    cycles: cycleCount,\n    interruptedCycles: cycleInterruptedCount,\n    finishedCycle: finishedCycle,\n    finishedInterruptedCycle: verifyInterruptedCycle,\n    dateStartProduction: dateStartProduction,\n    dateLastProduction: dateLastProduction,\n    machine: machine,\n    reset: resetShift\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1520,
        "y": 2280,
        "wires": [
            [
                "0f2df25956dd8d07",
                "5368c12604e9c275"
            ]
        ],
        "icon": "font-awesome/fa-book"
    },
    {
        "id": "87f1ebc9575fc419",
        "type": "inject",
        "z": "dae82ca7554ded9f",
        "name": "TIMESTAMP (STATUS)",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "switches",
                "v": "{}",
                "vt": "json"
            },
            {
                "p": "conditions",
                "v": "{}",
                "vt": "json"
            },
            {
                "p": "data",
                "v": "{}",
                "vt": "json"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1200,
        "y": 2160,
        "wires": [
            [
                "26628ad531f0db59"
            ]
        ],
        "icon": "font-awesome/fa-hourglass-1"
    },
    {
        "id": "ae44ca483e4d8120",
        "type": "inject",
        "z": "dae82ca7554ded9f",
        "name": "TIMESTAMP ",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1130,
        "y": 1720,
        "wires": [
            [
                "49151e42e3561d3e"
            ]
        ],
        "icon": "font-awesome/fa-hourglass-1"
    },
    {
        "id": "0f2df25956dd8d07",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "PUNCIONADEIRA MURATA",
        "func": "let { cycles, interruptedCycles, finishedCycle, finishedInterruptedCycle, machine} = msg.data;\n\nmsg.payload = {\n    ciclos: cycles,\n    cicloInterrompido: interruptedCycles,\n    finishedCycle: finishedCycle,\n    finishedInterruptedCycle: finishedInterruptedCycle,\n    deviceSerialNumber: machine\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1800,
        "y": 2280,
        "wires": [
            [
                "94374fb0a0122fb7"
            ]
        ],
        "icon": "font-awesome/fa-cogs"
    },
    {
        "id": "5368c12604e9c275",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "verifyStatus",
        "func": "let { dateStartProduction, dateLastProduction, machine } = msg.data;\nlet currentTimestamp = new Date();\nlet currentStatus = context.get('currentStatus') || null;\nlet timeCurrentProduction = dateStartProduction !== null ? (currentTimestamp.getTime() - dateStartProduction.getTime()) / 1000 : null;\nlet timeLastProduction = dateLastProduction !== null ? (currentTimestamp.getTime() - dateLastProduction.getTime()) / 1000 : null;\n\ncontext.set('timeCurrentProduction', timeCurrentProduction);\ncontext.set('timeLastProduction', timeLastProduction);\n\nif (dateStartProduction !== null && dateLastProduction == null) currentStatus = \"TRABALHANDO\";\n\nelse if (dateLastProduction !== null) {\n    //Mapeamento dos status\n    const machineWorking = (dateStartProduction !== null) || (timeLastProduction <= 299);\n    const machineIdle = (dateStartProduction == null && timeLastProduction >= 300 && timeLastProduction <= 1799);\n    const machineOff = (dateStartProduction == null && timeLastProduction >= 1800);\n\n    const newStatus = machineWorking ? \"TRABALHANDO\" : machineIdle ? \"PARADO\" : machineOff ? \"DESLIGADO\" : null;\n    if (newStatus) currentStatus = newStatus;\n}\nelse if (dateStartProduction == null && dateLastProduction == null) currentStatus = \"DESLIGADO\";\n\ncontext.set('currentStatus', currentStatus);\n\nmsg.status = {\n    timeCurrentProduction: timeCurrentProduction,\n    timeLastProduction: timeLastProduction,\n    machine: machine,\n    currentStatus: currentStatus\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1750,
        "y": 2320,
        "wires": [
            [
                "50a010d686b1e26a"
            ]
        ],
        "icon": "node-red/status.svg"
    },
    {
        "id": "50a010d686b1e26a",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "FormatedMessage",
        "func": "let machine = msg.status.machine;\nlet timestamp = new Date().getTime();\nlet currentStatus = context.get('currentStatus') || null; \nlet oldStatus = msg.status.currentStatus;\n\nif(!currentStatus || currentStatus !== oldStatus) {\n    currentStatus = oldStatus;\n    context.set('currentStatus', currentStatus);\n\n    msg.payload = {\n            timestamp: timestamp,\n            deviceSerialNumber: machine,\n            status: currentStatus\n    }\n    return msg;\n}\nreturn null;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1770,
        "y": 2360,
        "wires": [
            []
        ],
        "icon": "font-awesome/fa-envelope"
    },
    {
        "id": "b0aec4a954ece1bf",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "Conditions Machine",
        "func": "let {startReverse, startDirect, verifySpinReverse, verifySpinDirect} = msg.switches;\nlet startOperation = startReverse || startDirect ? true : false;\nlet finishedOperation = verifySpinReverse || verifySpinDirect ? true : false;\n\ncontext.set('startOperation', startOperation);\ncontext.set('finishedOperation', finishedOperation);\n\nmsg.conditions = {\n    startOperation: startOperation,\n    finishedOperation: finishedOperation,\n    serialNumber: msg.payload.serialNumber\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1010,
        "y": 7240,
        "wires": [
            [
                "e77ebc516d154e5b"
            ]
        ],
        "icon": "font-awesome/fa-bars"
    },
    {
        "id": "0254aeab8ee9c643",
        "type": "debug",
        "z": "dae82ca7554ded9f",
        "name": "debug 224",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 570,
        "y": 1200,
        "wires": []
    },
    {
        "id": "e2cf970cd83ec67c",
        "type": "switch",
        "z": "dae82ca7554ded9f",
        "name": "OPTION SW",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "hask",
                "v": "StatusSNS",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 370,
        "y": 1200,
        "wires": [
            [
                "0254aeab8ee9c643"
            ]
        ]
    },
    {
        "id": "2792978c9909d982",
        "type": "rbe",
        "z": "dae82ca7554ded9f",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 910,
        "y": 2280,
        "wires": [
            [
                "41037bd8affeb16a"
            ]
        ]
    },
    {
        "id": "ccd5954bb011f797",
        "type": "inject",
        "z": "dae82ca7554ded9f",
        "name": "TIMESTAMP RESET",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "switches",
                "v": "{}",
                "vt": "json"
            },
            {
                "p": "conditions",
                "v": "{}",
                "vt": "json"
            },
            {
                "p": "data",
                "v": "{}",
                "vt": "json"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "reset",
        "payloadType": "str",
        "x": 1220,
        "y": 2220,
        "wires": [
            [
                "26628ad531f0db59"
            ]
        ],
        "icon": "font-awesome/fa-hourglass-1"
    },
    {
        "id": "e695cb3cbf477d45",
        "type": "switch",
        "z": "dae82ca7554ded9f",
        "name": "Machines",
        "property": "payload.serialNumber",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "DF24F6",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 380,
        "y": 3580,
        "wires": [
            [
                "f159e2da6146f1a0"
            ]
        ],
        "icon": "font-awesome/fa-desktop"
    },
    {
        "id": "fa4639ef5cf0b7fa",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "Switches States",
        "func": "function handleSwitch(payload, context, switchName, startName, finishName, verifyName) {\n    let switchKey = Object.keys(payload).find(key => key.startsWith(switchName)); // extrai o switch que chegou no payload\n    let startState = context.get(startName) || false;\n    let finishState = context.get(finishName) || false;\n    let verifyState = context.get(verifyName) || false;\n    let actionValue = payload[switchKey] ? payload[switchKey].Action : null;\n    let switchState = context.get(switchName) || null;\n    \n    switchState = actionValue || switchState; // adquiri o estado do switch que chegou\n\n    if (switchState == \"ON\" && finishState == false) { // Condi√ß√£o que caracteriza o in√≠cio do estado do switch adquirido\n        startState = true;\n    \n    } else if (switchState == \"OFF\" && startState == true) { // Condi√ß√£o que caracteriza o final do estado do switch adquirido\n        finishState = true;\n    }\n    verifyState = startState == true && finishState == true ? true : false;\n\n    if (verifyState) {\n        startState = false;\n        finishState = false;\n    }\n    context.set(switchName, switchState);\n    context.set(startName, startState);\n    context.set(finishName, finishState);\n    context.set(verifyName, verifyState);\n\n    return {\n        switchState: switchState,\n        startState: startState,\n        finishState: finishState,\n        verifyState: verifyState\n    };\n}\nlet payload = msg.payload;\nlet laser = handleSwitch(payload, context, 'Switch1', 'startLaser', 'finishedLaser', 'verifyUseLaser');\nlet tableEnginerBreak = handleSwitch(payload, context, 'Switch2', 'breakStart', 'breakFinished', 'verifyBreakEngine');\nlet collisionPart = handleSwitch(payload, context, 'Switch3', 'startCollison', 'finishedCollison', 'verifyCollison');\n\nmsg.switches = {\n    switch1: laser.switchState,\n    switch2: tableEnginerBreak.switchState,\n    switch3: collisionPart.switchState,\n    startLaser: laser.startState,\n    laserActive: laser.verifyState,\n    verifyCollison: collisionPart.verifyState,\n    verifyBreakEngine: tableEnginerBreak.verifyState,\n}\nlaser.verifyState = false;\ncontext.set('verifyUseLaser', laser.verifyState);\n\ntableEnginerBreak.verifyState = false;\ncontext.set('verifyCollison', tableEnginerBreak.verifyState);\n\ncollisionPart.verifyState = false;\ncontext.set('verifyBreakEngine', collisionPart.verifyState);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 3580,
        "wires": [
            [
                "0f61931fa303fc9f"
            ]
        ],
        "icon": "node-red/swap.svg"
    },
    {
        "id": "0f61931fa303fc9f",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "Conditions Machine",
        "func": "let { laserActive, verifyCollison ,verifyBreakEngine } = msg.switches;\nlet [existsPlateCutting, plateCutStarting, finishedPlateCutting, existsCollison] =\n    ['existsPlateCutting', 'plateCutStarting', 'finishedPlateCutting', 'existsCollison'].map(key => context.get(key) || false);\nlet timestampStartWorking = context.get('timestampStartWorking') || null;\nlet currentTimestamp = new Date();\n\nconst actions = {\n    existsPlateCutting: () => { plateCutStarting = true; existsPlateCutting = true; timestampStartWorking = currentTimestamp },\n    openDoor: () => {\n         if (timestampStartWorking !== null) {\n            let plateCutDuration = (currentTimestamp.getTime() - timestampStartWorking.getTime()) / 1000;\n            if (plateCutDuration >= 60) {\n                existsPlateCutting = false;\n                finishedPlateCutting = true;\n                timestampStartWorking = null;\n            }\n        }   \n    },\n    collison: () => {existsCollison = true }\n}\nconst conditions = {\n    existsPlateCutting: laserActive && !existsPlateCutting,\n    openDoor: !laserActive && existsPlateCutting && verifyBreakEngine,\n    collison: verifyCollison\n}\n\nObject.entries(conditions).forEach(([condition, isTrue]) => {\n    if (isTrue && actions[condition]) actions[condition]();\n \n});\ncontext.set('plateCutStarting', plateCutStarting);\ncontext.set('existsPlateCutting', existsPlateCutting);\ncontext.set('timestampStartWorking', timestampStartWorking);\ncontext.set('finishedPlateCutting', finishedPlateCutting);\ncontext.set('existsCollison', existsCollison);\n\nmsg.conditions = {\n    timestampStartWorking: timestampStartWorking,\n    plateCutStarting: plateCutStarting,\n    existsPlateCutting: existsPlateCutting,\n    finishedPlateCutting: finishedPlateCutting,\n    existsCollison: existsCollison,\n    serialNumber: msg.payload.serialNumber\n}\n\nif (finishedPlateCutting) {\n    finishedPlateCutting = false;\n}\nplateCutStarting = false;\nexistsCollison = false;\n\ncontext.set('plateCutStarting', plateCutStarting);\ncontext.set('existsCollison', existsCollison);\ncontext.set('finishedPlateCutting', finishedPlateCutting);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 3580,
        "wires": [
            [
                "6e9772a68c5ebb6b"
            ]
        ],
        "icon": "font-awesome/fa-bars"
    },
    {
        "id": "6e9772a68c5ebb6b",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "Production Machine",
        "func": "let {plateCutStarting, existsPlateCutting, finishedPlateCutting, existsCollison, serialNumber} = msg.conditions;\nlet [plateSteelCount, collisonCount, durationCutPlan] = ['plateSteelCount', 'collisonCount','durationCutPlan'].map(key => context.get(key) || 0);\nlet [startProduction, dateLastProduction, machine] = ['startProduction', 'dateLastProduction', 'machine'].map(key => context.get(key) || null);\nlet resetShift = context.get('resetShift') || false;\nlet currentTimestamp = new Date();\n\nconst actions = {\n    resetShift: () => { plateSteelCount = 0; collisonCount = 0; resetShift = false; },\n    payloadReset: () => {resetShift = true; },\n    startProduction: () => {startProduction = currentTimestamp },\n    finishedProduction: () => {durationCutPlan = (currentTimestamp.getTime() - startProduction.getTime())/1000; plateSteelCount++; \n    startProduction = null; dateLastProduction = currentTimestamp},\n    machineNull: () => {machine = serialNumber},\n    verifyCollison: () => collisonCount++\n};\n\nconst conditions = {\n    resetShift: resetShift === true,\n    payloadReset: msg.payload === 'reset',\n    startProduction: plateCutStarting === true,\n    finishedProduction: finishedPlateCutting === true,\n    machineNull: serialNumber && machine == null,\n    verifyCollison: existsCollison === true\n};\n\nObject.entries(conditions).forEach(([condition, isTrue]) => {\n    if(isTrue && actions[condition]) actions[condition] ();\n});\ncontext.set('startProduction', startProduction);\ncontext.set('dateLastProduction', dateLastProduction);\ncontext.set('machine', machine); \ncontext.set('plateSteelCount', plateSteelCount);\ncontext.set('collisonCount', collisonCount);\ncontext.set('durationCutPlan', durationCutPlan);\ncontext.set('resetShift', resetShift);\n\nmsg.data = {\n    chapas: plateSteelCount,\n    finishedPlateCutting: finishedPlateCutting,\n    existsCollison: existsCollison,\n    colisao: collisonCount,\n    durationLastCutPlan: durationCutPlan,\n    dateStartProduction: startProduction,\n    dateLastProduction: dateLastProduction,\n    machine: machine,\n    reset: resetShift\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1180,
        "y": 3580,
        "wires": [
            [
                "36d107a9cf6406ba",
                "3b8c85841be63052"
            ]
        ],
        "icon": "font-awesome/fa-book"
    },
    {
        "id": "36d107a9cf6406ba",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "LASER TRUMPF",
        "func": "let { chapas, finishedPlateCutting, existsCollison, colisao, durationLastCutPlan, machine} = msg.data;\nlet workingMinutes = durationLastCutPlan ? durationLastCutPlan / 60 : 0;\n\nfunction minutesToHours(totalMinutes) {\n    var hours = String(Math.floor(totalMinutes / 60)).padStart(2, \"0\");\n    var minutes = String(totalMinutes % 60).padStart(2, \"0\");\n\n    return `${hours}:${minutes}`;\n}\n\nmsg.payload = {\n    chapas: chapas,\n    colisao: colisao,\n    finishedPlateCutting: finishedPlateCutting,\n    existsCollison: existsCollison,\n    durationLastCutPlan: minutesToHours(workingMinutes.toFixed(0)),\n    deviceSerialNumber: machine\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1430,
        "y": 3640,
        "wires": [
            [
                "e5610135a1a91dd3"
            ]
        ],
        "icon": "font-awesome/fa-cogs"
    },
    {
        "id": "3b8c85841be63052",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "verifyStatus",
        "func": "let {dateStartProduction, dateLastProduction, machine} = msg.data;\nlet currentTimestamp = new Date();\nlet currentStatus = context.get('currentStatus') || null;\nlet timeCurrentProduction = dateStartProduction !== null ? (currentTimestamp.getTime() - dateStartProduction.getTime()) / 1000 : null;\nlet timeLastProduction = dateLastProduction !== null ? (currentTimestamp.getTime() - dateLastProduction.getTime()) / 1000 : null;\n\ncontext.set('timeCurrentProduction', timeCurrentProduction);\ncontext.set('timeLastProduction', timeLastProduction);\n\nif (dateStartProduction !== null && dateLastProduction == null) currentStatus = \"TRABALHANDO\";\n\nelse if (dateLastProduction !== null) {\n    //Mapeamento dos status\n    const machineWorking = (dateStartProduction !== null) || (timeLastProduction <= 299);\n    const machineIdle = (dateStartProduction == null && timeLastProduction >= 300 && timeLastProduction <= 1799);\n    const machineOff = (dateStartProduction == null && timeLastProduction >= 1800);\n\n    const newStatus = machineWorking ? \"TRABALHANDO\" : machineIdle ? \"PARADO\" : machineOff ? \"DESLIGADO\" : null;\n    if (newStatus) currentStatus = newStatus;\n}\nelse if (dateStartProduction == null && dateLastProduction == null) currentStatus = \"DESLIGADO\";\n\ncontext.set('currentStatus', currentStatus);\n\n\nmsg.status = {\n    timeCurrentProduction: timeCurrentProduction,\n    timeLastProduction: timeLastProduction,\n    machine: machine,\n    currentStatus: currentStatus\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1410,
        "y": 3680,
        "wires": [
            [
                "c6ca1eb274f0db78"
            ]
        ],
        "icon": "node-red/status.svg"
    },
    {
        "id": "c6ca1eb274f0db78",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "FormatedMessage",
        "func": "let machine = msg.status.machine;\nlet timestamp = new Date().getTime();\nlet currentStatus = context.get('currentStatus') || null; \nlet oldStatus = msg.status.currentStatus;\n\nif(!currentStatus || currentStatus !== oldStatus) {\n    currentStatus = oldStatus;\n    context.set('currentStatus', currentStatus);\n\n    msg.payload = {\n            timestamp: timestamp,\n            deviceSerialNumber: machine,\n            status: currentStatus\n    }\n    return msg;\n}\nreturn null;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1430,
        "y": 3720,
        "wires": [
            []
        ],
        "icon": "font-awesome/fa-envelope"
    },
    {
        "id": "f159e2da6146f1a0",
        "type": "switch",
        "z": "dae82ca7554ded9f",
        "name": "OPTION SW",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "hask",
                "v": "Switch1",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "Switch2",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "Switch3",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 550,
        "y": 3580,
        "wires": [
            [
                "fa4639ef5cf0b7fa"
            ],
            [
                "fa4639ef5cf0b7fa"
            ],
            [
                "fa4639ef5cf0b7fa"
            ]
        ]
    },
    {
        "id": "89b4a872054e3576",
        "type": "debug",
        "z": "dae82ca7554ded9f",
        "name": "debug 247",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 370,
        "y": 1280,
        "wires": []
    },
    {
        "id": "f394488b75c81c33",
        "type": "inject",
        "z": "dae82ca7554ded9f",
        "name": "SWITCH1 ON",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF5A52",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch1\": {\"Action\": \"ON\"} }",
        "payloadType": "json",
        "x": 110,
        "y": 100,
        "wires": [
            [
                "2f5e396dddc737bf"
            ]
        ]
    },
    {
        "id": "bfd17bb7612af507",
        "type": "inject",
        "z": "dae82ca7554ded9f",
        "name": "SWITCH1 OFF",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF5A52",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch1\": {\"Action\": \"OFF\"} }",
        "payloadType": "json",
        "x": 120,
        "y": 140,
        "wires": [
            [
                "2f5e396dddc737bf"
            ]
        ]
    },
    {
        "id": "cf0276bd868a445a",
        "type": "debug",
        "z": "dae82ca7554ded9f",
        "name": "debug 255",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 1960,
        "wires": []
    },
    {
        "id": "b7145243c80e8b89",
        "type": "inject",
        "z": "dae82ca7554ded9f",
        "name": "SWITCH1 ON",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF24F6",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch1\": {\"Action\": \"ON\"} }",
        "payloadType": "json",
        "x": 150,
        "y": 3460,
        "wires": [
            [
                "e695cb3cbf477d45"
            ]
        ]
    },
    {
        "id": "09cc98212fc0cb99",
        "type": "inject",
        "z": "dae82ca7554ded9f",
        "name": "SWITCH1 OFF",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF24F6",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch1\": {\"Action\": \"OFF\"} }",
        "payloadType": "json",
        "x": 160,
        "y": 3500,
        "wires": [
            [
                "e695cb3cbf477d45"
            ]
        ]
    },
    {
        "id": "90a2cb51ad8e903d",
        "type": "inject",
        "z": "dae82ca7554ded9f",
        "name": "SWITCH2 ON",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF24F6",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch2\": {\"Action\": \"ON\"} }",
        "payloadType": "json",
        "x": 150,
        "y": 3560,
        "wires": [
            [
                "e695cb3cbf477d45"
            ]
        ]
    },
    {
        "id": "4ba643c0f943d56b",
        "type": "inject",
        "z": "dae82ca7554ded9f",
        "name": "SWITCH2 OFF",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF24F6",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch2\": {\"Action\": \"OFF\"} }",
        "payloadType": "json",
        "x": 160,
        "y": 3600,
        "wires": [
            [
                "e695cb3cbf477d45"
            ]
        ]
    },
    {
        "id": "85fa37d3a09e0b82",
        "type": "inject",
        "z": "dae82ca7554ded9f",
        "name": "SWITCH3 ON ",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF24F6",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch3\": {\"Action\": \"ON\"} }",
        "payloadType": "json",
        "x": 150,
        "y": 3660,
        "wires": [
            [
                "e695cb3cbf477d45"
            ]
        ]
    },
    {
        "id": "c4f61a48c8ffc229",
        "type": "inject",
        "z": "dae82ca7554ded9f",
        "name": "SWITCH3 OFF",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF24F6",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch3\": {\"Action\": \"OFF\"} }",
        "payloadType": "json",
        "x": 160,
        "y": 3700,
        "wires": [
            [
                "e695cb3cbf477d45"
            ]
        ]
    },
    {
        "id": "d0317a639b6e757d",
        "type": "debug",
        "z": "dae82ca7554ded9f",
        "name": "debug 257",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1990,
        "y": 5480,
        "wires": []
    },
    {
        "id": "4608a10bd9c346c3",
        "type": "debug",
        "z": "dae82ca7554ded9f",
        "name": "debug 258",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1650,
        "y": 5160,
        "wires": []
    },
    {
        "id": "4d2b8887a0d0d193",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "Switches States",
        "func": "function handleSwitch(payload, context, switchName,startName, verifyName) { // captura se o estado do SW1 e SW2\n    let switchKey = Object.keys(payload).find(key => key.startsWith(switchName)); // extrai o switch que chegou\n    let actionValue = payload[switchKey] ? payload[switchKey].Action : null; // captura o valor do switch\n    let switchState = context.get(switchName) || null;\n    let startState = context.get(startName);\n    let verifyState = context.get(verifyName) || false;\n\n    switchState = actionValue || switchState;\n\n    if (switchState == \"ON\") { // momento em que a m√°quina est√° ligada\n         startState = true;\n         verifyState = false;\n    } else if (switchState == \"OFF\") { // momento em que a m√°quina est√° desligada\n        startState = false;\n        verifyState = true;\n    }\n    context.set(startName, startState);\n    context.set(switchName, switchState);\n    context.set(verifyName,verifyState);\n\n    return {\n        switchState: switchState,\n        startState: startState,\n        verifyState: verifyState\n    };\n}\nlet payload = msg.payload;\nlet verifyOperation = handleSwitch(payload, context, 'Switch1','startProduction','finishedOperation'); // aloca√ß√£o do momento atual da m√°quina\n\nmsg.switches = {\n    switch1: verifyOperation.switchState,\n    startOperation: verifyOperation.startState,\n    finishedOperation: verifyOperation.verifyState,\n    serialNumber: msg.payload.serialNumber\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 7000,
        "wires": [
            [
                "0937af0d44eb6a07"
            ]
        ],
        "icon": "node-red/swap.svg"
    },
    {
        "id": "99b7f83c81c8a877",
        "type": "inject",
        "z": "dae82ca7554ded9f",
        "name": "RESET Shift1",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "switches",
                "v": "{}",
                "vt": "json"
            },
            {
                "p": "conditions",
                "v": "{}",
                "vt": "json"
            },
            {
                "p": "data",
                "v": "{}",
                "vt": "json"
            }
        ],
        "repeat": "",
        "crontab": "20 17 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1060,
        "y": 6960,
        "wires": [
            [
                "b81ddb45ccb39f0a",
                "e77ebc516d154e5b"
            ]
        ],
        "icon": "font-awesome/fa-rotate-right"
    },
    {
        "id": "0937af0d44eb6a07",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "Conditions Machine",
        "func": "let {startOperation, finishedOperation} = msg.switches;\n\nmsg.conditions = {\n    startOperation: startOperation,\n    finishedOperation: finishedOperation,\n    serialNumber: msg.payload.serialNumber\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1010,
        "y": 7000,
        "wires": [
            [
                "b81ddb45ccb39f0a"
            ]
        ],
        "icon": "font-awesome/fa-bars"
    },
    {
        "id": "108fe214c655a50a",
        "type": "inject",
        "z": "dae82ca7554ded9f",
        "name": "RESET Shift1",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "switches",
                "v": "{}",
                "vt": "json"
            },
            {
                "p": "conditions",
                "v": "{}",
                "vt": "json"
            },
            {
                "p": "data",
                "v": "{}",
                "vt": "json"
            }
        ],
        "repeat": "",
        "crontab": "20 17 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "reset",
        "payloadType": "str",
        "x": 1040,
        "y": 6920,
        "wires": [
            [
                "b81ddb45ccb39f0a"
            ]
        ],
        "icon": "font-awesome/fa-rotate-right"
    },
    {
        "id": "8604f7858ddf3a3b",
        "type": "rbe",
        "z": "dae82ca7554ded9f",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 790,
        "y": 300,
        "wires": [
            [
                "1a4e6e1950cdb984"
            ]
        ]
    },
    {
        "id": "5e33e07ff7824cca",
        "type": "rbe",
        "z": "dae82ca7554ded9f",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 790,
        "y": 260,
        "wires": [
            [
                "501dc1676d76a5cd"
            ]
        ]
    },
    {
        "id": "078c0abe304553d5",
        "type": "rbe",
        "z": "dae82ca7554ded9f",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 790,
        "y": 220,
        "wires": [
            [
                "bf7cba4c68bd55a1"
            ]
        ]
    },
    {
        "id": "8db353340aea0990",
        "type": "change",
        "z": "dae82ca7554ded9f",
        "name": "delete time",
        "rules": [
            {
                "t": "delete",
                "p": "payload.timestamp",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.StatusSNS.Time",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.StatusSNS.Switch2",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.StatusSNS.Switch3",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.StatusSNS.Switch4",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 630,
        "y": 300,
        "wires": [
            [
                "8604f7858ddf3a3b"
            ]
        ],
        "icon": "font-awesome/fa-times-circle"
    },
    {
        "id": "7699c8dae55f787d",
        "type": "change",
        "z": "dae82ca7554ded9f",
        "name": "delete time",
        "rules": [
            {
                "t": "delete",
                "p": "payload.timestamp",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.StatusSNS.Time",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.StatusSNS.Switch2",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.StatusSNS.Switch3",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.StatusSNS.Switch4",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 630,
        "y": 260,
        "wires": [
            [
                "5e33e07ff7824cca"
            ]
        ],
        "icon": "font-awesome/fa-times-circle"
    },
    {
        "id": "742d99ee310549d9",
        "type": "change",
        "z": "dae82ca7554ded9f",
        "name": "delete time",
        "rules": [
            {
                "t": "delete",
                "p": "payload.timestamp",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.StatusSNS.Time",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.StatusSNS.Switch2",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.StatusSNS.Switch3",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.StatusSNS.Switch4",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 630,
        "y": 220,
        "wires": [
            [
                "078c0abe304553d5"
            ]
        ],
        "icon": "font-awesome/fa-times-circle"
    },
    {
        "id": "2dd0b799f6a1ddf4",
        "type": "switch",
        "z": "dae82ca7554ded9f",
        "name": "OPTION SW",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "hask",
                "v": "Switch1",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "StatusSNS",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 450,
        "y": 300,
        "wires": [
            [
                "8db353340aea0990"
            ],
            [
                "8db353340aea0990"
            ]
        ]
    },
    {
        "id": "849889aafa671487",
        "type": "switch",
        "z": "dae82ca7554ded9f",
        "name": "OPTION SW",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "hask",
                "v": "Switch1",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "StatusSNS",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 450,
        "y": 260,
        "wires": [
            [
                "7699c8dae55f787d"
            ],
            [
                "7699c8dae55f787d"
            ]
        ]
    },
    {
        "id": "b8e06074d12115e8",
        "type": "switch",
        "z": "dae82ca7554ded9f",
        "name": "OPTION SW",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "hask",
                "v": "Switch1",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "StatusSNS",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 450,
        "y": 220,
        "wires": [
            [
                "742d99ee310549d9"
            ],
            [
                "742d99ee310549d9"
            ]
        ]
    },
    {
        "id": "0aeba35ad9015636",
        "type": "switch",
        "z": "dae82ca7554ded9f",
        "name": "OPTION SW",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "hask",
                "v": "Switch1",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "Switch3",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 630,
        "y": 5760,
        "wires": [
            [
                "0590e2f10e3ba860"
            ],
            [
                "0590e2f10e3ba860"
            ]
        ]
    },
    {
        "id": "67052982bfeedb4b",
        "type": "inject",
        "z": "dae82ca7554ded9f",
        "name": "SWITCH4 ON ",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF1860",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch4\": {\"Action\": \"ON\"} }",
        "payloadType": "json",
        "x": 170,
        "y": 2960,
        "wires": [
            [
                "f531d5febad0edec"
            ]
        ]
    },
    {
        "id": "20302b6833ca9888",
        "type": "inject",
        "z": "dae82ca7554ded9f",
        "name": "SWITCH4 OFF",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF1860",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch4\": {\"Action\": \"OFF\"} }",
        "payloadType": "json",
        "x": 180,
        "y": 3000,
        "wires": [
            [
                "f531d5febad0edec"
            ]
        ]
    },
    {
        "id": "4d191aad4083f420",
        "type": "inject",
        "z": "dae82ca7554ded9f",
        "name": "STATUS8",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF1860",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"StatusSNS\": {  \"Switch1\": \"ON\" } }",
        "payloadType": "json",
        "x": 160,
        "y": 2660,
        "wires": [
            [
                "f531d5febad0edec"
            ]
        ]
    },
    {
        "id": "b9290bfbe8e1e726",
        "type": "inject",
        "z": "dae82ca7554ded9f",
        "name": "STATUS8",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF1860",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"StatusSNS\": {  \"Switch1\": \"OFF\" } }",
        "payloadType": "json",
        "x": 160,
        "y": 2700,
        "wires": [
            [
                "f531d5febad0edec"
            ]
        ]
    },
    {
        "id": "d4491f9d1ca87e1f",
        "type": "change",
        "z": "dae82ca7554ded9f",
        "name": "delete time",
        "rules": [
            {
                "t": "delete",
                "p": "payload.timestamp",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.StatusSNS.Time",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.StatusSNS.Switch2",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.StatusSNS.Switch3",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.StatusSNS.Switch4",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 770,
        "y": 2800,
        "wires": [
            [
                "609b8928a7cf0b60"
            ]
        ],
        "icon": "font-awesome/fa-times-circle"
    },
    {
        "id": "85c629da8c3a3cb3",
        "type": "debug",
        "z": "dae82ca7554ded9f",
        "name": "debug 274",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2250,
        "y": 2780,
        "wires": []
    },
    {
        "id": "609b8928a7cf0b60",
        "type": "rbe",
        "z": "dae82ca7554ded9f",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 910,
        "y": 2800,
        "wires": [
            [
                "6983ed2ef42ebacc"
            ]
        ]
    },
    {
        "id": "3b710da24298c662",
        "type": "inject",
        "z": "dae82ca7554ded9f",
        "name": "SWITCH1 ON",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "ABC123",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch1\": {\"Action\": \"ON\"} }",
        "payloadType": "json",
        "x": 130,
        "y": 7660,
        "wires": [
            [
                "dfea934c14d68cb9"
            ]
        ]
    },
    {
        "id": "505d7492d1634326",
        "type": "inject",
        "z": "dae82ca7554ded9f",
        "name": "SWITCH1 OFF",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "ABC123",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch1\": {\"Action\": \"OFF\"} }",
        "payloadType": "json",
        "x": 140,
        "y": 7700,
        "wires": [
            [
                "dfea934c14d68cb9"
            ]
        ]
    },
    {
        "id": "1ca7d4adc74ef70a",
        "type": "inject",
        "z": "dae82ca7554ded9f",
        "name": "STATUS8",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "ABC123",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"StatusSNS\": {  \"Switch1\": \"ON\" } }",
        "payloadType": "json",
        "x": 120,
        "y": 7740,
        "wires": [
            [
                "dfea934c14d68cb9"
            ]
        ]
    },
    {
        "id": "20b333b92a5b8a8c",
        "type": "inject",
        "z": "dae82ca7554ded9f",
        "name": "STATUS8",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "ABC123",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"StatusSNS\": {  \"Switch1\": \"OFF\" } }",
        "payloadType": "json",
        "x": 120,
        "y": 7780,
        "wires": [
            [
                "dfea934c14d68cb9"
            ]
        ]
    },
    {
        "id": "dfea934c14d68cb9",
        "type": "switch",
        "z": "dae82ca7554ded9f",
        "name": "Machines",
        "property": "payload.serialNumber",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "DF2D26",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "DF2E84",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "C939E9",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "DF4FFE",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "DF1591",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "DF0694",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "DF5A52",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "DF0C9A",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "DF3E20",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "DF2010",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 10,
        "x": 360,
        "y": 7720,
        "wires": [
            [
                "a66bfc1508b1cc20"
            ],
            [
                "a66bfc1508b1cc20"
            ],
            [
                "a66bfc1508b1cc20"
            ],
            [
                "a66bfc1508b1cc20"
            ],
            [
                "a66bfc1508b1cc20"
            ],
            [
                "a66bfc1508b1cc20"
            ],
            [
                "a66bfc1508b1cc20"
            ],
            [
                "a66bfc1508b1cc20"
            ],
            [
                "a66bfc1508b1cc20"
            ],
            [
                "a66bfc1508b1cc20"
            ]
        ],
        "icon": "font-awesome/fa-desktop"
    },
    {
        "id": "a66bfc1508b1cc20",
        "type": "switch",
        "z": "dae82ca7554ded9f",
        "name": "OPTION SW",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "hask",
                "v": "Switch1",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "StatusSNS",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 550,
        "y": 7720,
        "wires": [
            [
                "666f7a4f47d30ba5"
            ],
            [
                "666f7a4f47d30ba5"
            ]
        ]
    },
    {
        "id": "666f7a4f47d30ba5",
        "type": "change",
        "z": "dae82ca7554ded9f",
        "name": "delete time",
        "rules": [
            {
                "t": "delete",
                "p": "payload.timestamp",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.StatusSNS.Time",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.StatusSNS.Switch2",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.StatusSNS.Switch3",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.StatusSNS.Switch4",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 730,
        "y": 7720,
        "wires": [
            [
                "ab51772af786d9c4"
            ]
        ],
        "icon": "font-awesome/fa-minus-circle"
    },
    {
        "id": "24ad8432bca373ad",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "Solder object main",
        "func": "let solderProperties = flow.get('solderProperties') || {};\nlet serialNumber = msg.payload.serialNumber;\n\nif  (msg.payload.Switch1 && ((msg.payload.Switch1.Action === \"ON\" || msg.payload.Switch1.Action === \"OFF\"))\n    || (msg.payload.StatusSNS && (msg.payload.StatusSNS.Switch1 === \"ON\" || msg.payload.StatusSNS.Switch1 === \"OFF\"))) {\n        if(!solderProperties[serialNumber]) {\n            solderProperties[serialNumber] = {\n                \"switch1\": null,\n                \"startSolder\": false,\n                \"finishedSolder\": false,\n                \"pulses\": 0,\n                \"timestampLastAction\": null,\n                \"timestampLastProduction\": null,\n                \"unit\": null,\n                \"status\": null,\n            };\n        }\n}\nflow.set('solderProperties', solderProperties);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 7720,
        "wires": [
            [
                "487cc416ce7ddc42"
            ]
        ],
        "icon": "font-awesome/fa-save"
    },
    {
        "id": "487cc416ce7ddc42",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "Counter",
        "func": "let serialNumber = msg.payload.serialNumber;\nlet solderProperties = flow.get('solderProperties');\nlet currentTimestamp = new Date();\n\nif ((msg.payload.Switch1 && msg.payload.Switch1.Action === \"ON\") || (msg.payload.StatusSNS && msg.payload.StatusSNS.Switch1 === \"ON\")) {\n\n    solderProperties[serialNumber].switch1 = \"ON\";\n    solderProperties[serialNumber].startSolder = true;\n    solderProperties[serialNumber].timestampLastAction = currentTimestamp;\n}\nelse if (((msg.payload.Switch1 && msg.payload.Switch1.Action === \"OFF\") ||\n        (msg.payload.StatusSNS && msg.payload.StatusSNS.Switch1 === \"OFF\"))\n    && solderProperties[serialNumber].startSolder === true && solderProperties[serialNumber].finishedSolder === false) {\n\n    solderProperties[serialNumber].switch1 = \"OFF\";\n    solderProperties[serialNumber].finishedSolder = true;\n\n    if (solderProperties[serialNumber].startSolder && solderProperties[serialNumber].finishedSolder) {\n        solderProperties[serialNumber].startSolder = false;\n        solderProperties[serialNumber].finishedSolder = false;\n        solderProperties[serialNumber].pulses += 1;\n        solderProperties[serialNumber].timestampLastProduction = currentTimestamp;\n        solderProperties[serialNumber].unit = \"Pulsos\";\n    }\n}\nflow.set('solderProperties', solderProperties);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1280,
        "y": 7720,
        "wires": [
            [
                "ea351cd2fdb91711",
                "0db2f5d61410f69e"
            ]
        ],
        "icon": "node-red/file.svg"
    },
    {
        "id": "03a30d7630fd6b98",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "Get Count (Pulses)",
        "func": "let serialNumber = msg.payload.serialNumber;\nlet solderProperties = flow.get('solderProperties');\n\nif (solderProperties[serialNumber] && solderProperties[serialNumber].unit !== null) {\n    let unit = solderProperties[serialNumber].unit;\n\n    msg.payload = {\n        timestamp: new Date().getTime(),\n        deviceSerialNumber: serialNumber,\n        unit: unit,\n        count: 1\n    }\n    solderProperties[serialNumber].unit = null;\n    flow.set('solderProperties', solderProperties);\n\n    return msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1750,
        "y": 7680,
        "wires": [
            []
        ],
        "icon": "node-red-dashboard/ui_numeric.png"
    },
    {
        "id": "0db2f5d61410f69e",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "Update Status Machine",
        "func": "let solderProperties = flow.get('solderProperties');\nlet currentTimestamp = new Date();\nlet messages = [];\n\nif (solderProperties !== \"empty\"){\n    Object.keys(solderProperties).forEach(key => {\n        if(solderProperties[key].hasOwnProperty('timestampLastAction') && solderProperties[key].hasOwnProperty('timestampLastProduction')) {\n            let timestampLastAction = solderProperties[key]['timestampLastAction'];\n            let timestampLastProduction = solderProperties[key]['timestampLastProduction'];\n\n            let differenceLastTimeAction = timestampLastAction ? (currentTimestamp.getTime() - timestampLastAction.getTime()) / 1000 : null;\n            let differenceLastProductionTime = timestampLastProduction ? (currentTimestamp.getTime() - timestampLastProduction.getTime()) / 1000 : null;\n            let oldState = solderProperties[key]['status'];\n\n            const isWorking = (differenceLastTimeAction !== null && differenceLastTimeAction <= 299) || (differenceLastProductionTime <= 299 && differenceLastProductionTime !== null);\n\n            const isStopped =   (differenceLastTimeAction >= 300 && differenceLastProductionTime >= 300 && differenceLastProductionTime <= 1799) ||\n                                (differenceLastTimeAction >= 300 && differenceLastTimeAction <= 1799 && differenceLastProductionTime === null);\n\n            const isTurnedOff = differenceLastTimeAction >= 1800 || differenceLastProductionTime >= 1800 || differenceLastTimeAction === null;\n\n            const newState = isWorking ? \"TRABALHANDO\" : isStopped ? \"PARADO\" : isTurnedOff ? \"DESLIGADO\" : null;\n\n            if (newState !== null && oldState !== newState) {\n                solderProperties[key]['status'] = newState;\n\n                messages.push(({\n                    serialNumber: key,\n                    currentStatus: newState\n                }));\n            }\n        }\n    });\n    flow.set('solderProperties', solderProperties);\n\n    messages.forEach(msg => {\n        node.send({ payload: msg});\n\n        return msg;\n    });\n    node.warn(solderProperties);\n    return msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1490,
        "y": 7740,
        "wires": [
            [
                "e641b05793a955bb"
            ]
        ],
        "icon": "font-awesome/fa-exchange"
    },
    {
        "id": "e641b05793a955bb",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "Get changed Status (Solders)",
        "func": "let { serialNumber, currentStatus } = msg.payload;\nlet timestamp = new Date().getTime();\n\nif(serialNumber && currentStatus !== null) {\n    msg.payload ={\n        timestamp: timestamp,\n        deviceSerialNumber: serialNumber,\n        status: currentStatus\n    }\n    return msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1790,
        "y": 7740,
        "wires": [
            []
        ]
    },
    {
        "id": "ab51772af786d9c4",
        "type": "rbe",
        "z": "dae82ca7554ded9f",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 890,
        "y": 7720,
        "wires": [
            [
                "24ad8432bca373ad"
            ]
        ]
    },
    {
        "id": "e5610135a1a91dd3",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "Increment Chapas",
        "func": "let {finishedPlateCutting, existsCollison, deviceSerialNumber } = msg.payload;\nlet unit = context.get('unit') || null;\nlet count = context.get('count') || 0;\nlet currentTimestamp = new Date();\n\nif (finishedPlateCutting === true) {\n    unit = \"Chapas\";\n    count = 1;\n    context.set('unit', unit);\n    context.set('count', count);\n\n    msg.payload = {\n        timestamp: currentTimestamp.getTime(),\n        deviceSerialNumber: deviceSerialNumber,\n        unit: unit,\n        count: count\n    }\n    return msg;\n}\n\nif (existsCollison === true) {\n    unit = \"Colis√µes\";\n    count = 1;\n    context.set('unit', unit);\n    context.set('count', count);\n\n    msg.payload = {\n        timestamp: currentTimestamp.getTime(),\n        deviceSerialNumber: deviceSerialNumber,\n        unit: unit,\n        count: count\n    }\n    return msg;\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1650,
        "y": 3640,
        "wires": [
            [
                "21d0487f1f60d805"
            ]
        ],
        "icon": "node-red/arrow-in.svg"
    },
    {
        "id": "21d0487f1f60d805",
        "type": "debug",
        "z": "dae82ca7554ded9f",
        "name": "debug 275",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1850,
        "y": 3620,
        "wires": []
    },
    {
        "id": "94374fb0a0122fb7",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "Increment Count Puncio",
        "func": "let { finishedCycle, finishedInterruptedCycle, deviceSerialNumber} = msg.payload;\nlet unit = context.get('unit') || null;\nlet count = context.get('count') || 0;\nlet currentTimestamp = new Date();\n\nif (finishedCycle === true) {\n    unit = \"Ciclos\";\n    count = 1;\n    context.set('unit', unit);\n    context.set('count', count);\n\n    msg.payload = {\n        timestamp: currentTimestamp.getTime(),\n        deviceSerialNumber: deviceSerialNumber,\n        unit: unit,\n        count: count\n    };\n    return msg;\n}\n\nif (finishedInterruptedCycle === true) {\n    unit = \"Interrup√ß√µes\";\n    count = 1;\n    context.set('unit', unit);\n    context.set('count', count);\n\n    msg.payload = {\n        timestamp: currentTimestamp.getTime(),\n        deviceSerialNumber: deviceSerialNumber,\n        unit: unit,\n        count: count\n    };\n    return msg;\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1970,
        "y": 2320,
        "wires": [
            [
                "18e64b0e6e9f3685"
            ]
        ],
        "icon": "node-red/arrow-in.svg"
    },
    {
        "id": "18e64b0e6e9f3685",
        "type": "debug",
        "z": "dae82ca7554ded9f",
        "name": "debug 276",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1970,
        "y": 2360,
        "wires": []
    },
    {
        "id": "7f7959a8cf358fd5",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "Increment Pulses",
        "func": "let {verifyPulse, deviceSerialNumber} = msg.payload;\nlet unit = context.get('unit') || null;\nlet count = context.get('count') || 0;\nlet currentTimestamp = new Date();\n\nif (verifyPulse === true) {\n    unit = \"Pulsos\";\n    count = 1;\n    context.set('unit', unit);\n    context.set('count', count);\n\n    msg.payload = {\n        timestamp: currentTimestamp.getTime(),\n        unit: unit,\n        count: count,\n        deviceSerialNumber: deviceSerialNumber\n    }\n    return msg;\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1910,
        "y": 4420,
        "wires": [
            [
                "114755683a92c745"
            ]
        ],
        "icon": "node-red/arrow-in.svg"
    },
    {
        "id": "5bc87310136c06a1",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "Increment Count (Solder)",
        "func": "let { verifyPulse, deviceSerialNumber } = msg.payload;\nlet unit = context.get('unit') || null;\nlet count = context.get('count') || 0;\nlet currentTimestamp = new Date();\n\nif (verifyPulse === true) {\n    unit = \"Pulsos\";\n    count = 1;\n    context.set('unit', unit);\n    context.set('count', count);\n\n    msg.payload = {\n        timestamp: currentTimestamp.getTime(),\n        unit: unit,\n        count: count,\n        deviceSerialNumber: deviceSerialNumber\n    }\n    return msg;\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1910,
        "y": 240,
        "wires": [
            []
        ],
        "icon": "node-red/arrow-in.svg"
    },
    {
        "id": "650b6985affcfba4",
        "type": "debug",
        "z": "dae82ca7554ded9f",
        "name": "debug 277",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1950,
        "y": 400,
        "wires": []
    },
    {
        "id": "b9854072c44ae7d0",
        "type": "inject",
        "z": "dae82ca7554ded9f",
        "name": "TIMESTAMP (STATUS)",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "switches",
                "v": "{}",
                "vt": "json"
            },
            {
                "p": "conditions",
                "v": "{}",
                "vt": "json"
            },
            {
                "p": "data",
                "v": "{}",
                "vt": "json"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1100,
        "y": 80,
        "wires": [
            [
                "44692dbdf02e6fad"
            ]
        ],
        "icon": "font-awesome/fa-hourglass-1"
    },
    {
        "id": "7a6d56d3b337d4ae",
        "type": "inject",
        "z": "dae82ca7554ded9f",
        "name": "TIMESTAMP RESET",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "switches",
                "v": "{}",
                "vt": "json"
            },
            {
                "p": "conditions",
                "v": "{}",
                "vt": "json"
            },
            {
                "p": "data",
                "v": "{}",
                "vt": "json"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "reset",
        "payloadType": "str",
        "x": 1120,
        "y": 140,
        "wires": [
            [
                "44692dbdf02e6fad"
            ]
        ],
        "icon": "font-awesome/fa-hourglass-1"
    },
    {
        "id": "14cb141dafad1b99",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "Increment Count Chapas",
        "func": "let { finishedCutPlan, deviceSerialNumber } = msg.payload;\nlet unit = context.get('unit') || null;\nlet count = context.get('count') || 0;\nlet currentTimestamp = new Date();\n\nif (finishedCutPlan === true) {\n    unit = \"Chapas\";\n    count = 1;\n    context.set('unit', unit);\n    context.set('count', count);\n\n    msg.payload = {\n        timestamp: currentTimestamp.getTime(),\n        deviceSerialNumber: deviceSerialNumber,\n        unit: unit,\n        count: count\n    }\n    return msg;\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1950,
        "y": 1760,
        "wires": [
            []
        ],
        "icon": "node-red/arrow-in.svg"
    },
    {
        "id": "97d3b621175aa7ad",
        "type": "debug",
        "z": "dae82ca7554ded9f",
        "name": "debug 285",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1630,
        "y": 1940,
        "wires": []
    },
    {
        "id": "8de330c1cc5a683f",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "Increment Fold",
        "func": "let {verifyFold, deviceSerialNumber} = msg.payload;\nlet unit = context.get('unit') || null;\nlet count = context.get('count') || 0;\nlet currentTimestamp = new Date();\n\nif (verifyFold === true) {\n    unit = \"Dobras\";\n    count = 1;\n    context.set('unit', unit);\n    context.set('count', count);\n\n    msg.payload = {\n        timestamp: currentTimestamp.getTime(),\n        unit: unit,\n        count: count,\n        deviceSerialNumber: deviceSerialNumber\n    }\n    return msg;\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1780,
        "y": 5000,
        "wires": [
            [
                "1280a2cfb3ad65db"
            ]
        ],
        "icon": "node-red/arrow-in.svg"
    },
    {
        "id": "1280a2cfb3ad65db",
        "type": "debug",
        "z": "dae82ca7554ded9f",
        "name": "debug 286",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2010,
        "y": 5000,
        "wires": []
    },
    {
        "id": "486edc7787bf0113",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "Increment Fold",
        "func": "let {verifyFold, deviceSerialNumber} = msg.payload;\nlet unit = context.get('unit') || null;\nlet count = context.get('count') || 0;\nlet currentTimestamp = new Date();\n\nif (verifyFold === true) {\n    unit = \"Dobras\";\n    count = 1;\n    context.set('unit', unit);\n    context.set('count', count);\n\n    msg.payload = {\n        timestamp: currentTimestamp.getTime(),\n        unit: unit,\n        count: count,\n        deviceSerialNumber: deviceSerialNumber\n    }\n    return msg;\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1840,
        "y": 5840,
        "wires": [
            []
        ],
        "icon": "node-red/arrow-in.svg"
    },
    {
        "id": "f2370a5f943d3446",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "Increment Fold",
        "func": "let {verifyFold, deviceSerialNumber} = msg.payload;\nlet unit = context.get('unit') || null;\nlet count = context.get('count') || 0;\nlet currentTimestamp = new Date();\n\nif (verifyFold === true) {\n    unit = \"Dobras\";\n    count = 1;\n    context.set('unit', unit);\n    context.set('count', count);\n\n    msg.payload = {\n        timestamp: currentTimestamp.getTime(),\n        deviceSerialNumber: deviceSerialNumber,\n        unit: unit,\n        count: count,\n    }\n    return msg;\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1840,
        "y": 5640,
        "wires": [
            [
                "1bf25025907f91c2"
            ]
        ],
        "icon": "node-red/arrow-in.svg"
    },
    {
        "id": "196ba88d63c75ea0",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "Increment Fold",
        "func": "let {verifyFold, deviceSerialNumber} = msg.payload;\nlet unit = context.get('unit') || null;\nlet count = context.get('count') || 0;\nlet currentTimestamp = new Date();\n\nif (verifyFold === true) {\n    unit = \"Dobras\";\n    count = 1;\n    context.set('unit', unit);\n    context.set('count', count);\n\n    msg.payload = {\n        timestamp: currentTimestamp.getTime(),\n        unit: unit,\n        count: count,\n        deviceSerialNumber: deviceSerialNumber\n    }\n    return msg;\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1840,
        "y": 5740,
        "wires": [
            [
                "e81d3d5ad2146970"
            ]
        ],
        "icon": "node-red/arrow-in.svg"
    },
    {
        "id": "1bf25025907f91c2",
        "type": "debug",
        "z": "dae82ca7554ded9f",
        "name": "debug 287",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2050,
        "y": 5640,
        "wires": []
    },
    {
        "id": "e81d3d5ad2146970",
        "type": "debug",
        "z": "dae82ca7554ded9f",
        "name": "debug 288",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2050,
        "y": 5740,
        "wires": []
    },
    {
        "id": "b863494f1fa89ce9",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "Switches States",
        "func": "function handleSwitch(payload, context, switchName, startName, finishName, verifyName) {\n    let switchKey = Object.keys(payload).find(key => key.startsWith(switchName)); // extrai o switch que chegou no payload\n    let startState = context.get(startName) || false;\n    let finishState = context.get(finishName) || false;\n    let verifyState = context.get(verifyName) || false;\n    let actionValue = payload[switchKey] ? payload[switchKey].Action : null;\n    let switchState = context.get(switchName) || null;\n\n    switchState = actionValue || switchState; // adquiri o estado do switch que chegou\n\n    if (switchState == \"ON\" && finishState == false) {\n        startState = true;\n\n    } else if (switchState == \"OFF\" && startState == true) {\n        finishState = true;\n    }\n    verifyState = startState == true && finishState == true ? true : false;\n\n    if (verifyState) {\n        startState = false;\n        finishState = false;\n    }\n    context.set(switchName, switchState);\n    context.set(startName, startState);\n    context.set(finishName, finishState);\n    context.set(verifyName, verifyState);\n\n    return {\n        switchState: switchState,\n        startState: startState,\n        finishState: finishState,\n        verifyState: verifyState\n    };\n}\nlet verifyPress = handleSwitch(msg.payload, context, 'Switch1', 'startPress', 'finishedPress', 'verifyPress'); // verifica√ß√£o andamento da dobra\n\nmsg.switches = {\n    switch1: verifyPress.switchState,\n    startPress: verifyPress.startState,\n    verifyPress: verifyPress.verifyState,\n}\nverifyPress.verifyState = false;\ncontext.set('verifyPress', verifyPress.verifyState);\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 4040,
        "wires": [
            [
                "af28913b3829ad69"
            ]
        ],
        "icon": "node-red/swap.svg"
    },
    {
        "id": "f28f991baf016911",
        "type": "switch",
        "z": "dae82ca7554ded9f",
        "name": "OPTION SW",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "hask",
                "v": "Switch1",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 570,
        "y": 4040,
        "wires": [
            [
                "b863494f1fa89ce9"
            ]
        ]
    },
    {
        "id": "af28913b3829ad69",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "Conditions Machine",
        "func": "let { startPress, verifyPress } = msg.switches;\n\nmsg.conditions = {\n    startPress: startPress,\n    verifyPress: verifyPress,\n    serialNumber: msg.payload.serialNumber\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 4040,
        "wires": [
            [
                "08c2204b25587331"
            ]
        ],
        "icon": "font-awesome/fa-bars"
    },
    {
        "id": "08c2204b25587331",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "Production Machine",
        "func": "let { startPress, verifyPress, serialNumber } = msg.conditions;\nlet [dateStartProduction, dateLastProduction, machine] = ['dateStartProduction', 'dateLastProduction', 'machine'].map(key => context.get(key) || null);\nlet pressCount = context.get('pressCount') || 0;\nlet resetShift = context.get('resetShift') || false;\nlet currentTimestamp = new Date();\n\nconst actions = {\n    resetShift: () => { pressCount = 0; resetShift = false },\n    payloadReset: () => { resetShift = true },\n    startProduction: () => { dateStartProduction = currentTimestamp },\n    finishedProduction: () => { pressCount++, dateLastProduction = currentTimestamp },\n    machineNull: () => { machine = serialNumber }\n};\n\nconst conditions = {\n    resetShift: resetShift,\n    payloadReset: msg.payload === 'reset',\n    startProduction: startPress == true,\n    finishedProduction: verifyPress == true,\n    machineNull: serialNumber && machine == null,\n};\n\nObject.entries(conditions).forEach(([condition, isTrue]) => {\n    if (isTrue && actions[condition]) actions[condition]();\n});\ncontext.set('pressCount', pressCount);\ncontext.set('dateStartProduction', dateStartProduction);\ncontext.set('dateLastProduction', dateLastProduction);\ncontext.set('resetShift', resetShift);\ncontext.set('machine', machine);\n\nmsg.data = {\n    verifyPress: verifyPress,\n    press: pressCount,\n    dateStartProduction: dateStartProduction,\n    dateLastProduction: dateLastProduction,\n    machine: machine,\n}\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1480,
        "y": 4040,
        "wires": [
            [
                "cd3fb71ab41a0ce9",
                "743639368565ed65"
            ]
        ],
        "icon": "font-awesome/fa-book"
    },
    {
        "id": "743639368565ed65",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "PRENSA 110T",
        "func": "let { verifyPress, press, machine } = msg.data;\n\nmsg.payload = {\n    verifyPress: verifyPress,\n    golpes: press,\n    deviceSerialNumber: machine\n}\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1820,
        "y": 4000,
        "wires": [
            [
                "4c66fd7af190de5b"
            ]
        ],
        "icon": "font-awesome/fa-cogs"
    },
    {
        "id": "cd3fb71ab41a0ce9",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "verifyStatus",
        "func": "let { dateStartProduction, dateLastProduction, machine } = msg.data;\nlet [differenceTimedateStartProduction, differenceTimelastProduction] = ['differenceTimedateStartProduction', 'differenceTimelasProduction'].map(key => context.get(key) || 0);\nlet currentTimestamp = new Date();\nlet currentStatus = context.get('currentStatus') || null;\n\ndifferenceTimedateStartProduction = dateStartProduction !== null ? (currentTimestamp.getTime() - dateStartProduction.getTime()) / 1000 : null;\ndifferenceTimelastProduction = dateLastProduction !== null ? (currentTimestamp.getTime() - dateLastProduction.getTime()) / 1000 : null;\n\ncontext.set('differenceTimedateStartProduction', differenceTimedateStartProduction);\ncontext.set('differenceTimelastProduction', differenceTimelastProduction);\n\nif (dateStartProduction !== null) {\n\n    //Mapear status\n    const machineWorking = differenceTimedateStartProduction <= 299 || (differenceTimelastProduction !== null && differenceTimelastProduction <= 299);\n\n    const machineIdle = (differenceTimedateStartProduction >= 300 && differenceTimelastProduction >= 300 && differenceTimelastProduction <= 1799) ||\n        (differenceTimedateStartProduction >= 300 && differenceTimedateStartProduction <= 1799 && dateLastProduction === null);\n\n    const machineOff = ((differenceTimedateStartProduction >= 300 && differenceTimelastProduction >= 1800) || (differenceTimedateStartProduction >= 1800 && dateLastProduction === null));\n\n    const newStatus = machineWorking ? 'TRABALHANDO' : machineIdle ? 'PARADO' : machineOff ? 'DESLIGADO' : null;\n    if (newStatus) currentStatus = newStatus;\n}\n\nif (dateStartProduction == null) currentStatus = \"DESLIGADO\";\n\ncontext.set('currentStatus', currentStatus);\n\nmsg.status = {\n    timeCurrentProduction: differenceTimedateStartProduction,\n    timeLastProduction: differenceTimelastProduction,\n    machine: machine,\n    currentStatus: currentStatus\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1810,
        "y": 4040,
        "wires": [
            [
                "f881e4504331dc88"
            ]
        ],
        "icon": "node-red/status.svg"
    },
    {
        "id": "f881e4504331dc88",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "FormatedMessage",
        "func": "let machine = msg.status.machine;\nlet timestamp = new Date().getTime();\nlet currentStatus = context.get('currentStatus') || null; \nlet oldStatus = msg.status.currentStatus;\n\nif(!currentStatus || currentStatus !== oldStatus) {\n    currentStatus = oldStatus;\n    context.set('currentStatus', currentStatus);\n\n    msg.payload = {\n            timestamp: timestamp,\n            deviceSerialNumber: machine,\n            status: currentStatus\n    }\n    return msg;\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2050,
        "y": 4040,
        "wires": [
            []
        ],
        "icon": "font-awesome/fa-envelope"
    },
    {
        "id": "4c66fd7af190de5b",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "Increment Press",
        "func": "let {verifyPress, deviceSerialNumber} = msg.payload;\nlet unit = context.get('unit') || null;\nlet count = context.get('count') || 0;\nlet currentTimestamp = new Date();\n\nif (verifyPress === true) {\n    unit = \"Golpes\";\n    count = 1;\n    context.set('unit', unit);\n    context.set('count', count);\n\n    msg.payload = {\n        timestamp: currentTimestamp.getTime(),\n        unit: unit,\n        count: count,\n        deviceSerialNumber: deviceSerialNumber\n    }\n    return msg;\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2040,
        "y": 4000,
        "wires": [
            [
                "c97bcf14250eac1c"
            ]
        ],
        "icon": "node-red/arrow-in.svg"
    },
    {
        "id": "358825ca7e1d2de7",
        "type": "inject",
        "z": "dae82ca7554ded9f",
        "name": "SWITCH1 ON",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF32CC",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch1\": {\"Action\": \"ON\"} }",
        "payloadType": "json",
        "x": 270,
        "y": 4020,
        "wires": [
            [
                "f28f991baf016911"
            ]
        ]
    },
    {
        "id": "93b2c0174a6ca97a",
        "type": "inject",
        "z": "dae82ca7554ded9f",
        "name": "SWITCH1 OFF",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF32CC",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch1\": {\"Action\": \"OFF\"} }",
        "payloadType": "json",
        "x": 280,
        "y": 4060,
        "wires": [
            [
                "f28f991baf016911"
            ]
        ]
    },
    {
        "id": "c97bcf14250eac1c",
        "type": "debug",
        "z": "dae82ca7554ded9f",
        "name": "debug 289",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2270,
        "y": 4000,
        "wires": []
    },
    {
        "id": "fc6f40463850f71f",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "Increment Press",
        "func": "let {verifyPress, deviceSerialNumber} = msg.payload;\nlet unit = context.get('unit') || null;\nlet count = context.get('count') || 0;\nlet currentTimestamp = new Date();\n\nif (verifyPress === true) {\n    unit = \"Golpes\";\n    count = 1;\n    context.set('unit', unit);\n    context.set('count', count);\n\n    msg.payload = {\n        timestamp: currentTimestamp.getTime(),\n        unit: unit,\n        count: count,\n        deviceSerialNumber: deviceSerialNumber\n    }\n    return msg;\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1840,
        "y": 5320,
        "wires": [
            [
                "a32ec0dc9fb55c34"
            ]
        ],
        "icon": "node-red/arrow-in.svg"
    },
    {
        "id": "a32ec0dc9fb55c34",
        "type": "debug",
        "z": "dae82ca7554ded9f",
        "name": "debug 290",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2090,
        "y": 5260,
        "wires": []
    },
    {
        "id": "bc87ce57263fa7fd",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "Increment Count TORNO",
        "func": "let { finishedProgram, verifyAlarm, deviceSerialNumber} = msg.payload;\nlet unit = context.get('unit') || null;\nlet count = context.get('count') || 0;\nlet currentTimestamp = new Date();\n\nif (finishedProgram === true) {\n    unit = \"Programas\";\n    count = 1;\n    context.set('unit', unit);\n    context.set('count', count);\n\n    msg.payload = {\n        timestamp: currentTimestamp.getTime(),\n        deviceSerialNumber: deviceSerialNumber,\n        unit: unit,\n        count: count\n    };\n    return msg;\n}\n\nif (verifyAlarm === true) {\n    unit = \"Alarmes\";\n    count = 1;\n    context.set('unit', unit);\n    context.set('count', count);\n\n    msg.payload = {\n        timestamp: currentTimestamp.getTime(),\n        deviceSerialNumber: deviceSerialNumber,\n        unit: unit,\n        count: count\n    };\n    return msg;\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2010,
        "y": 2760,
        "wires": [
            [
                "85c629da8c3a3cb3"
            ]
        ],
        "icon": "node-red/arrow-in.svg"
    },
    {
        "id": "ae0e6d4f0d7eea46",
        "type": "debug",
        "z": "dae82ca7554ded9f",
        "name": "debug 291",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2170,
        "y": 2880,
        "wires": []
    },
    {
        "id": "e94f0ef11441b44c",
        "type": "debug",
        "z": "dae82ca7554ded9f",
        "name": "debug 295",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1490,
        "y": 2840,
        "wires": []
    },
    {
        "id": "cedcef2d041053a2",
        "type": "inject",
        "z": "dae82ca7554ded9f",
        "name": "SWITCH1 ON",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF158B",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch1\": {\"Action\": \"ON\"} }",
        "payloadType": "json",
        "x": 2310,
        "y": 60,
        "wires": [
            [
                "65e16a1c9cae2a59"
            ]
        ]
    },
    {
        "id": "35f55a382d1b1a1b",
        "type": "inject",
        "z": "dae82ca7554ded9f",
        "name": "SWITCH1 OFF",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF158B",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch1\": {\"Action\": \"OFF\"} }",
        "payloadType": "json",
        "x": 2320,
        "y": 100,
        "wires": [
            [
                "65e16a1c9cae2a59"
            ]
        ]
    },
    {
        "id": "7f3a9ba7e8d09f1f",
        "type": "inject",
        "z": "dae82ca7554ded9f",
        "name": "SWITCH2 ON",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF158B",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch2\": {\"Action\": \"ON\"} }",
        "payloadType": "json",
        "x": 2310,
        "y": 160,
        "wires": [
            [
                "65e16a1c9cae2a59"
            ]
        ]
    },
    {
        "id": "9ce57511877ce4d4",
        "type": "inject",
        "z": "dae82ca7554ded9f",
        "name": "SWITCH2 OFF",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF158B",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch2\": {\"Action\": \"OFF\"} }",
        "payloadType": "json",
        "x": 2320,
        "y": 200,
        "wires": [
            [
                "65e16a1c9cae2a59"
            ]
        ]
    },
    {
        "id": "50014393973d3708",
        "type": "inject",
        "z": "dae82ca7554ded9f",
        "name": "SWITCH3 ON ",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF158B",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch3\": {\"Action\": \"ON\"} }",
        "payloadType": "json",
        "x": 2310,
        "y": 340,
        "wires": [
            [
                "65e16a1c9cae2a59"
            ]
        ]
    },
    {
        "id": "cb9810252f29881b",
        "type": "inject",
        "z": "dae82ca7554ded9f",
        "name": "SWITCH3 OFF",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF158B",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch3\": {\"Action\": \"OFF\"} }",
        "payloadType": "json",
        "x": 2320,
        "y": 380,
        "wires": [
            [
                "65e16a1c9cae2a59"
            ]
        ]
    },
    {
        "id": "d1d769eac101b0b2",
        "type": "inject",
        "z": "dae82ca7554ded9f",
        "name": "STATUS8",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF158B",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"StatusSNS\": {  \"Switch2\": \"ON\" } }",
        "payloadType": "json",
        "x": 2300,
        "y": 240,
        "wires": [
            [
                "65e16a1c9cae2a59"
            ]
        ]
    },
    {
        "id": "4968b40f535e9784",
        "type": "inject",
        "z": "dae82ca7554ded9f",
        "name": "STATUS8",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF158B",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"StatusSNS\": {  \"Switch2\": \"OFF\" } }",
        "payloadType": "json",
        "x": 2300,
        "y": 280,
        "wires": [
            [
                "65e16a1c9cae2a59"
            ]
        ]
    },
    {
        "id": "65e16a1c9cae2a59",
        "type": "switch",
        "z": "dae82ca7554ded9f",
        "name": "Machine",
        "property": "payload.serialNumber",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "DF158B",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 2540,
        "y": 200,
        "wires": [
            [
                "06a1898beedbb745"
            ]
        ],
        "icon": "font-awesome/fa-desktop"
    },
    {
        "id": "06a1898beedbb745",
        "type": "switch",
        "z": "dae82ca7554ded9f",
        "name": "OPTION SW",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "hask",
                "v": "Switch1",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "Switch2",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "Switch3",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "StatusSNS",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 4,
        "x": 2690,
        "y": 200,
        "wires": [
            [
                "024507acc36b5bcb"
            ],
            [
                "024507acc36b5bcb"
            ],
            [
                "024507acc36b5bcb"
            ],
            [
                "024507acc36b5bcb"
            ]
        ]
    },
    {
        "id": "024507acc36b5bcb",
        "type": "change",
        "z": "dae82ca7554ded9f",
        "name": "delete time",
        "rules": [
            {
                "t": "delete",
                "p": "payload.timestamp",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.StatusSNS.Time",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.StatusSNS.Switch1",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.StatusSNS.Switch3",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.StatusSNS.Switch4",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2870,
        "y": 200,
        "wires": [
            [
                "57637bf047a2cdd7"
            ]
        ],
        "icon": "font-awesome/fa-times-circle"
    },
    {
        "id": "57637bf047a2cdd7",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "Bystronic object main",
        "func": "let bystronicProperties = flow.get('bystronicProperties') || {};\nlet serialNumber = msg.payload.serialNumber;\n\nif ((msg.payload.Switch2 && (msg.payload.Switch2.Action === \"ON\" || msg.payload.Switch2.Action === \"OFF\" ))\n    || (msg.payload.StatusSNS && (msg.payload.StatusSNS.Switch2 === \"ON\" || msg.payload.StatusSNS.Switch2 === \"OFF\"))) {\n\n    if (!bystronicProperties[serialNumber]) {\n        bystronicProperties[serialNumber] = {\n            \"readyMachine\": false,\n            \"noReadyMachine\": false,\n            \"laserON\": false,\n            \"laserOFF\": false,\n            \"openDoor\": false,\n            \"closedDoor\": false,\n            \"existsCutPlan\": false,\n            \"dateStartProduction\": null,\n            \"dateLastProduction\": null,\n            \"plateSteel\": 0,\n            \"unit\": null,\n            \"status\": null,\n            \"timeDurationLastPlanCut\": 0,\n        }\n    }\n}\nflow.set('bystronicProperties', bystronicProperties);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3080,
        "y": 200,
        "wires": [
            [
                "fcada093058e9a68"
            ]
        ],
        "icon": "font-awesome/fa-save"
    },
    {
        "id": "fcada093058e9a68",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "Handle switches",
        "func": "let handleSwitch = function(payload, context, switchName, statusSNSName, startName, finishName) {\n    let switchKey = Object.keys(payload).find(key => key.startsWith(switchName)) // extrai o switch que chegou no payload\n    let switchState = context.get(switchName) || null;\n    let actionValue = payload[switchKey] ? payload[switchKey].Action : null; // extrai o estado do switch que chegou\n    let statusSNS = payload[statusSNSName] && payload[statusSNSName][switchName];\n    let startState = context.get(startName) || false;\n    let finishState = context.get(finishName) || false;\n\n    switchState = actionValue || statusSNS || switchState; // adquiri o estado do switch que chegou\n\n    if (switchState == \"ON\") { // Condi√ß√£o que caracteriza o in√≠cio da produ√ß√£o\n        startState = true;\n        finishState = false;\n    }\n    else if (switchState == \"OFF\" && startState == true) { // condi√ß√£o que caracteriza o final da produ√ß√£o \n        startState = false;\n        finishState = true;\n    }\n    context.set(switchName, switchState);\n    context.set(startName, startState);\n    context.set(finishName, finishState);\n\n    return {\n        switchState: switchState,\n        startState: startState,\n        finishState: finishState,\n    };\n}\nlet payload = msg.payload;\nlet bystronicProperties = flow.get('bystronicProperties') || {};\nlet serialNumber = msg.payload.serialNumber;\n\nlet verifyLaser = handleSwitch(payload, context, 'Switch1', 'StatusSNS', 'laserON', 'laserOFF');\nlet verifyMachine = handleSwitch(payload, context, 'Switch2', 'StatusSNS', 'readyMachine','noReadyMachine');\nlet verifyTableDoor = handleSwitch(payload, context, 'Switch3', 'StatusSNS', 'openDoor', 'closedDoor');\n\nbystronicProperties[serialNumber].laserON = verifyLaser.startState;\nbystronicProperties[serialNumber].laserOFF = verifyLaser.finishState;\nbystronicProperties[serialNumber].readyMachine = verifyMachine.startState;\nbystronicProperties[serialNumber].noReadyMachine = verifyMachine.finishState;\nbystronicProperties[serialNumber].openDoor = verifyTableDoor.startState;\nbystronicProperties[serialNumber].closedDoor = verifyTableDoor.finishState;\n\nflow.set('bystronicProperties', bystronicProperties);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3300,
        "y": 200,
        "wires": [
            [
                "ab5f521a21a758e7"
            ]
        ],
        "icon": "node-red/switch.svg"
    },
    {
        "id": "ab5f521a21a758e7",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "Update object values",
        "func": "let bystronicProperties = flow.get('bystronicProperties') || {};\nlet serialNumber = msg.payload.serialNumber;\nlet currentTimestamp = new Date();\n\nif (bystronicProperties[serialNumber].readyMachine && bystronicProperties[serialNumber].laserON \n    && !bystronicProperties[serialNumber].openDoor && !bystronicProperties[serialNumber].existsCutPlan) {\n        \n        bystronicProperties[serialNumber].existsCutPlan = true;\n        bystronicProperties[serialNumber].dateStartProduction = currentTimestamp;\n}\nelse if (bystronicProperties[serialNumber].noReadyMachine && bystronicProperties[serialNumber].laserOFF\n    && bystronicProperties[serialNumber].openDoor && bystronicProperties[serialNumber].existsCutPlan) {\n        \n        bystronicProperties[serialNumber].existsCutPlan = false;\n        bystronicProperties[serialNumber].dateLastProduction = currentTimestamp;\n        bystronicProperties[serialNumber].timeDurationLastPlanCut = (currentTimestamp.getTime() - bystronicProperties[serialNumber].dateStartProduction)/1000;\n        bystronicProperties[serialNumber].plateSteel += 1;\n        bystronicProperties[serialNumber].unit = \"Chapas\";\n        bystronicProperties[serialNumber].dateStartProduction = null;\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3520,
        "y": 200,
        "wires": [
            [
                "4ea3b824468aaca3",
                "c925689c5fc246b4"
            ]
        ],
        "icon": "font-awesome/fa-bars"
    },
    {
        "id": "4ea3b824468aaca3",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "Update status machine",
        "func": "let bystronicProperties = flow.get('bystronicProperties') || {};\nlet currentTimestamp = new Date();\nlet messages = [];\n\nif (bystronicProperties !== \"empty\") {\n    Object.keys(bystronicProperties).forEach(key => {\n        if (bystronicProperties[key].hasOwnProperty('dateStartProduction') && bystronicProperties[key].hasOwnProperty('dateLastProduction')) {\n            let dateStartProduction = bystronicProperties[key]['dateStartProduction'];\n            let dateLastProduction = bystronicProperties[key]['dateLastProduction'];\n\n            let differenceStartProduction = dateStartProduction ? (currentTimestamp.getTime() - dateStartProduction.getTime()) / 1000 : null;\n            let differenceLastProduction = dateLastProduction ? (currentTimestamp.getTime() - dateLastProduction.getTime()) / 1000 : null;\n            let oldState = bystronicProperties[key]['status'];\n\n            const isWorking = (dateStartProduction !== null && differenceStartProduction <= 10799)|| \n                              (dateStartProduction === null && differenceLastProduction <= 299 && differenceLastProduction !== null);\n\n            const isStopped = (dateStartProduction === null && differenceLastProduction >= 300 && differenceLastProduction <= 1799);\n\n            const isTurnedOff = ((dateStartProduction === null && dateLastProduction === null) ||\n                                (dateStartProduction === null && differenceLastProduction >= 1800) || (differenceStartProduction >= 10800));\n        \n        \n            const newState = isWorking ? \"TRABALHANDO\" : isStopped ? \"PARADO\" : isTurnedOff ? \"DESLIGADO\" : null;\n\n            if (newState !== null && oldState !== newState) {\n                bystronicProperties[key]['status'] = newState;\n\n                messages.push(({\n                    serialNumber: key,\n                    currentStatus: newState\n                }));\n            }\n        }\n    });\n    flow.set('bystronicProperties', bystronicProperties);\n\n    messages.forEach(msg => {\n        node.send(({ payload: msg }));\n\n        return msg;\n    });\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3800,
        "y": 220,
        "wires": [
            [
                "b7ed2a3eb22e2045"
            ]
        ],
        "icon": "font-awesome/fa-exchange"
    },
    {
        "id": "a0b1d40b69d1d8a8",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "Get count (Chapas)",
        "func": "let serialNumber = msg.payload.serialNumber;\nlet bystronicProperties = flow.get('bystronicProperties');\n\nif (bystronicProperties[serialNumber] && bystronicProperties[serialNumber].unit !== null) {\n    let unit = bystronicProperties[serialNumber].unit;\n\n    msg.payload = {\n        timestamp: new Date().getTime(),\n        deviceSerialNumber: serialNumber,\n        unit: unit,\n        count: 1\n    }\n    bystronicProperties[serialNumber].unit = null;\n    flow.set('bystronicProperties', bystronicProperties);\n\n    return msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4090,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "b7ed2a3eb22e2045",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "Get changed Status (Cable)",
        "func": "let {serialNumber, currentStatus} = msg.payload;\nlet timestamp = new Date().getTime();\n\nif (serialNumber && currentStatus !== null) {\n    msg.payload = {\n        timestamp: timestamp,\n        deviceSerialNumber: serialNumber,\n        status: currentStatus\n    }\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4120,
        "y": 220,
        "wires": [
            []
        ],
        "icon": "node-red/status.svg"
    },
    {
        "id": "7b94758d2dbe4836",
        "type": "inject",
        "z": "dae82ca7554ded9f",
        "name": "SWITCH1 ON",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF24F6",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch1\": {\"Action\": \"ON\"} }",
        "payloadType": "json",
        "x": 150,
        "y": 3120,
        "wires": [
            [
                "b743f2a9b699154c"
            ]
        ]
    },
    {
        "id": "368d14d95f28f6c9",
        "type": "inject",
        "z": "dae82ca7554ded9f",
        "name": "SWITCH1 OFF",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF24F6",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch1\": {\"Action\": \"OFF\"} }",
        "payloadType": "json",
        "x": 160,
        "y": 3160,
        "wires": [
            [
                "b743f2a9b699154c"
            ]
        ]
    },
    {
        "id": "62aecf17728e2dde",
        "type": "inject",
        "z": "dae82ca7554ded9f",
        "name": "SWITCH2 ON",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF24F6",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch2\": {\"Action\": \"ON\"} }",
        "payloadType": "json",
        "x": 150,
        "y": 3220,
        "wires": [
            [
                "b743f2a9b699154c"
            ]
        ]
    },
    {
        "id": "ff70156109e286d5",
        "type": "inject",
        "z": "dae82ca7554ded9f",
        "name": "SWITCH2 OFF",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF24F6",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch2\": {\"Action\": \"OFF\"} }",
        "payloadType": "json",
        "x": 160,
        "y": 3260,
        "wires": [
            [
                "b743f2a9b699154c"
            ]
        ]
    },
    {
        "id": "70e554f2e1beca18",
        "type": "inject",
        "z": "dae82ca7554ded9f",
        "name": "SWITCH3 ON ",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF24F6",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch3\": {\"Action\": \"ON\"} }",
        "payloadType": "json",
        "x": 150,
        "y": 3320,
        "wires": [
            [
                "b743f2a9b699154c"
            ]
        ]
    },
    {
        "id": "42a85b434b8cc0f7",
        "type": "inject",
        "z": "dae82ca7554ded9f",
        "name": "SWITCH3 OFF",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF24F6",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch3\": {\"Action\": \"OFF\"} }",
        "payloadType": "json",
        "x": 160,
        "y": 3360,
        "wires": [
            [
                "b743f2a9b699154c"
            ]
        ]
    },
    {
        "id": "c64ca6f68cef5ff0",
        "type": "switch",
        "z": "dae82ca7554ded9f",
        "name": "Machines",
        "property": "payload.serialNumber",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "DF24F6",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 600,
        "y": 3240,
        "wires": [
            [
                "ea7a3cab07bc4423"
            ]
        ],
        "icon": "font-awesome/fa-desktop"
    },
    {
        "id": "b743f2a9b699154c",
        "type": "switch",
        "z": "dae82ca7554ded9f",
        "name": "OPTION SW",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "hask",
                "v": "Switch1",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "Switch2",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "Switch3",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 410,
        "y": 3240,
        "wires": [
            [
                "c64ca6f68cef5ff0"
            ],
            [
                "c64ca6f68cef5ff0"
            ],
            [
                "c64ca6f68cef5ff0"
            ]
        ]
    },
    {
        "id": "ea7a3cab07bc4423",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "TRUMPF",
        "func": "let trumpfProperties = flow.get('trumpfProperties') || {};\nlet serialNumber = msg.payload.serialNumber;\n\nif (msg.payload.Switch1 && (msg.payload.Switch1.Action === \"ON\" || msg.payload.Switch1.Action === \"OFF\")) {\n    if (!trumpfProperties[serialNumber]) {\n        trumpfProperties[serialNumber] = {\n            \"laserON\": false,\n            \"laserOFF\": false,\n            \"breakStart\": false,\n            \"verifyBreakEngine\": false,\n            \"startCollison\": false,\n            \"finishedCollision\": false,\n            \"existsCutPlan\": false,\n            \"dateStartProduction\": null,\n            \"dateLastProduction\": null,\n            \"plateSteel\": 0,\n            \"colisao\": 0,\n            \"unit\": null,\n            \"status\": null,\n            \"timeDurationLastPlanCut\": 0,\n        }\n    }\n}\nflow.set('trumpfProperties', trumpfProperties);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 3240,
        "wires": [
            [
                "4b97d405c12811b0"
            ]
        ],
        "icon": "font-awesome/fa-save"
    },
    {
        "id": "4b97d405c12811b0",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "Handle switches",
        "func": "let handleSwitch = function (payload, context, switchName, startName, finishName, verifyName) {\n    let switchKey = Object.keys(payload).find(key => key.startsWith(switchName));\n    let switchState = context.get(switchName) || null;\n    let actionValue = payload[switchKey] ? payload[switchKey].Action : null;\n    let startState = context.get(startName) || false;\n    let finishState = context.get(finishName) || false;\n    let verifyState = context.get(verifyName) || false;\n\n    switchState = actionValue || switchState;\n\n    if (switchState === \"ON\" && !finishState) {\n        startState = true;\n    }\n    else if (switchState === \"OFF\" && startState) {\n        finishState = true;\n    }\n\n    if (startState && finishState) {\n        startState = false;\n        finishState = false;\n        verifyState = true;\n    }\n    context.set(switchName, switchState);\n    context.set(startName, startState);\n    context.set(finishName, finishState);\n    context.set(verifyName, verifyState);\n\n    return {\n        switchState: switchState,\n        startState: startState,\n        finishState: finishState,\n        verifyState: verifyState\n    };\n}\nlet payload = msg.payload;\nlet trumpfProperties = flow.get('trumpfProperties') || {};\nlet serialNumber = msg.payload.serialNumber;\n\nlet verifyLaser = handleSwitch(payload, context, 'Switch1', 'laserON', 'laserOFF', 'verifyLaser');\nlet tableEnginerBreak = handleSwitch(payload, context, 'Switch2', 'breakStart', 'breakFinished', 'verifyBreakEngine');\nlet collisionPart = handleSwitch(payload, context, 'Switch3', 'startCollison', 'finishedCollision', 'verifyCollision');\n\ntrumpfProperties[serialNumber].laserON = verifyLaser.startState;\ntrumpfProperties[serialNumber].laserOFF = verifyLaser.verifyState;\ntrumpfProperties[serialNumber].breakStart = tableEnginerBreak.startState;\ntrumpfProperties[serialNumber].verifyBreakEngine = tableEnginerBreak.verifyState;\ntrumpfProperties[serialNumber].finishedCollision = collisionPart.verifyState;\n\nflow.set('trumpfProperties', trumpfProperties);\nverifyLaser.verifyState = false;\ntableEnginerBreak.verifyState = false;\ncollisionPart.verifyState = false;\ncontext.set('verifyLaser', verifyLaser.verifyState);\ncontext.set('verifyBreakEngine', tableEnginerBreak.verifyState);\ncontext.set('verifyCollision', collisionPart.verifyState);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 3240,
        "wires": [
            [
                "5e90573ca112b29a"
            ]
        ],
        "icon": "node-red/switch.svg"
    },
    {
        "id": "5e90573ca112b29a",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "Machine conditions",
        "func": "let trumpfProperties = flow.get('trumpfProperties') || {};\nlet serialNumber = msg.payload.serialNumber;\nlet currentTimestamp = new Date();\n\nif (trumpfProperties && trumpfProperties[serialNumber]) {\n    if (trumpfProperties[serialNumber].laserON  && !trumpfProperties[serialNumber].existsCutPlan) {\n        trumpfProperties[serialNumber].existsCutPlan = true;\n        trumpfProperties[serialNumber].dateStartProduction = currentTimestamp;\n    }\n    else if (!trumpfProperties[serialNumber].laserON && trumpfProperties[serialNumber].verifyBreakEngine \n    && trumpfProperties[serialNumber].existsCutPlan) {\n        let plateCutDuration = (currentTimestamp.getTime() - trumpfProperties[serialNumber].dateStartProduction.getTime()) / 1000;\n\n        if (plateCutDuration >= 60) {\n            trumpfProperties[serialNumber].existsCutPlan = false;\n            trumpfProperties[serialNumber].dateLastProduction = currentTimestamp;\n            trumpfProperties[serialNumber].timeDurationLastPlanCut =\n                (currentTimestamp.getTime() - trumpfProperties[serialNumber].dateStartProduction) / 1000;\n            trumpfProperties[serialNumber].plateSteel += 1;\n            trumpfProperties[serialNumber].unit = \"Chapas\";\n            trumpfProperties[serialNumber].dateStartProduction = null;\n        }\n    }\n\n    if (trumpfProperties[serialNumber].finishedCollision) {\n        \n        trumpfProperties[serialNumber].colisao += 1;\n        trumpfProperties[serialNumber].unit = \"Colis√µes\";\n    }\n    flow.set('trumpfProperties', trumpfProperties);\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1170,
        "y": 3240,
        "wires": [
            [
                "4364d7734b844af4",
                "4e436697fccb982b"
            ]
        ],
        "icon": "font-awesome/fa-bars"
    },
    {
        "id": "ca75d67d0a15744b",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "Update status machine",
        "func": "let bystronicProperties = flow.get('bystronicProperties') || {};\nlet currentTimestamp = new Date();\nlet messages = [];\n\nif (bystronicProperties !== \"empty\") {\n    Object.keys(bystronicProperties).forEach(key => {\n        if (bystronicProperties[key].hasOwnProperty('dateStartProduction') && bystronicProperties[key].hasOwnProperty('dateLastProduction')) {\n            let dateStartProduction = bystronicProperties[key]['dateStartProduction'];\n            let dateLastProduction = bystronicProperties[key]['dateLastProduction'];\n\n            let differenceStartProduction = dateStartProduction ? (currentTimestamp.getTime() - dateStartProduction.getTime()) / 1000 : null;\n            let differenceLastProduction = dateLastProduction ? (currentTimestamp.getTime() - dateLastProduction.getTime()) / 1000 : null;\n            let oldState = bystronicProperties[key]['status'];\n\n            const isWorking = (dateStartProduction !== null && differenceStartProduction <= 10799)|| \n                              (dateStartProduction === null && differenceLastProduction <= 299 && differenceLastProduction !== null);\n\n            const isStopped = (dateStartProduction === null && dateLastProduction >= 300 && differenceLastProduction <= 1799);\n\n            const isTurnedOff = ((dateStartProduction === null && dateLastProduction === null) ||\n                                (dateStartProduction === null && differenceLastProduction >= 1800) || (differenceStartProduction >= 10800));\n        \n        \n            const newState = isWorking ? \"TRABALHANDO\" : isStopped ? \"PARADO\" : isTurnedOff ? \"DESLIGADO\" : null;\n\n            if (newState !== null && oldState !== newState) {\n                bystronicProperties[key]['status'] = newState;\n\n                messages.push(({\n                    serialNumber: key,\n                    currentStatus: newState\n                }));\n            }\n        }\n    });\n    flow.set('bystronicProperties', bystronicProperties);\n\n    messages.forEach(msg => {\n        node.send(({ payload: msg }));\n\n        return msg;\n    });\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1220,
        "y": 3020,
        "wires": [
            [
                "0b12ebc64c0b101a"
            ]
        ],
        "icon": "font-awesome/fa-exchange"
    },
    {
        "id": "13bfbdf0d6b29950",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "Get count (Chapas)",
        "func": "let serialNumber = msg.payload.serialNumber;\nlet bystronicProperties = flow.get('bystronicProperties');\n\nif (bystronicProperties[serialNumber] && bystronicProperties[serialNumber].unit !== null) {\n    let unit = bystronicProperties[serialNumber].unit;\n\n    msg.payload = {\n        timestamp: new Date().getTime(),\n        deviceSerialNumber: serialNumber,\n        unit: unit,\n        count: 1\n    }\n    bystronicProperties[serialNumber].unit = null;\n    flow.set('bystronicProperties', bystronicProperties);\n\n    return msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1510,
        "y": 2960,
        "wires": [
            []
        ]
    },
    {
        "id": "0b12ebc64c0b101a",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "Get changed Status (Cable)",
        "func": "let {serialNumber, currentStatus} = msg.payload;\nlet timestamp = new Date().getTime();\n\nif (serialNumber && currentStatus !== null) {\n    msg.payload = {\n        timestamp: timestamp,\n        deviceSerialNumber: serialNumber,\n        status: currentStatus\n    }\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1540,
        "y": 3020,
        "wires": [
            []
        ],
        "icon": "node-red/status.svg"
    },
    {
        "id": "4364d7734b844af4",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "Update status machine",
        "func": "let trumpfProperties = flow.get('trumpfProperties') || {};\nlet currentTimestamp = new Date();\nlet messages = [];\n\nif (trumpfProperties) {\n    Object.keys(trumpfProperties).forEach(key => {\n        if (trumpfProperties[key].hasOwnProperty('dateStartProduction') && trumpfProperties[key].hasOwnProperty('dateLastProduction')) {\n            let dateStartProduction = trumpfProperties[key]['dateStartProduction'];\n            let dateLastProduction = trumpfProperties[key]['dateLastProduction'];\n            let oldState = trumpfProperties[key]['status'];\n\n            let differenceStartProduction = dateStartProduction ? (currentTimestamp.getTime() - dateStartProduction.getTime()) / 1000 : null;\n            let differenceLastProduction = dateLastProduction ? (currentTimestamp.getTime() - dateLastProduction.getTime()) / 1000 : null;\n\n            const isWorking = (dateStartProduction !== null && differenceStartProduction <= 10799) ||\n            (dateStartProduction === null && differenceLastProduction <= 299 && differenceLastProduction !== null);\n\n            const isStopped = (dateStartProduction === null && differenceLastProduction >= 300 && differenceLastProduction <= 1799);\n\n            const isTurnedOff = ((dateStartProduction === null && dateLastProduction === null) ||\n            (dateStartProduction === null && differenceLastProduction >= 10800) || (differenceStartProduction >= 10800));\n\n            const newState = isWorking ? \"TRABALHANDO\" : isStopped ? \"PARADO\" : isTurnedOff ? \"DESLIGADO\" : null;\n\n            if (newState !== null && oldState !== newState) {\n                trumpfProperties[key]['status'] = newState;\n\n                messages.push(({\n                    serialNumber: key,\n                    currentStatus: newState\n                }));\n            }\n         }\n    });\n    flow.set('trumpfProperties', trumpfProperties);\n\n    messages.forEach(msg => {\n        node.send(({ payload: msg }));\n\n        return msg;\n    });\n}\nnode.warn(trumpfProperties);",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1400,
        "y": 3240,
        "wires": [
            [
                "8fac438fb109e4f5"
            ]
        ],
        "icon": "font-awesome/fa-exchange"
    },
    {
        "id": "8140b85d1dfb0b46",
        "type": "inject",
        "z": "dae82ca7554ded9f",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 980,
        "y": 3160,
        "wires": [
            [
                "5e90573ca112b29a"
            ]
        ]
    },
    {
        "id": "2d84c65cccbce9db",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "Get Count (Chapas)",
        "func": "let serialNumber = msg.payload.serialNumber;\nlet trumpfProperties = flow.get('trumpfProperties') || {};\n\nif (trumpfProperties) {\n    if (trumpfProperties[serialNumber] && trumpfProperties[serialNumber].unit !== null) {\n        let unit = trumpfProperties[serialNumber].unit;\n\n        msg.payload = {\n            timestamp: new Date().getTime(),\n            deviceSerialNumber: serialNumber,\n            unit: unit,\n            count: 1\n        }\n        trumpfProperties[serialNumber].unit = null;\n        flow.set('trumpfProperties', trumpfProperties);\n\n        return msg;\n    }\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1620,
        "y": 3200,
        "wires": [
            []
        ],
        "icon": "font-awesome/fa-plus"
    },
    {
        "id": "8fac438fb109e4f5",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "Get changed Status (Chapas)",
        "func": "let {serialNumber, currentStatus} = msg.payload;\nlet timestamp = new Date().getTime();\n\nif (serialNumber && currentStatus !== null) {\n    msg.payload = {\n        timestamp: timestamp,\n        deviceSerialNumber: serialNumber,\n        status: currentStatus\n    }\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1650,
        "y": 3240,
        "wires": [
            []
        ],
        "icon": "node-red/status.svg"
    },
    {
        "id": "1f1e41178ecbc141",
        "type": "inject",
        "z": "dae82ca7554ded9f",
        "name": "SWITCH1 ON",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "ABC123",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch1\": {\"Action\": \"ON\"} }",
        "payloadType": "json",
        "x": 2290,
        "y": 460,
        "wires": [
            [
                "aa401e14390fa612"
            ]
        ]
    },
    {
        "id": "a078b519f7ca516b",
        "type": "inject",
        "z": "dae82ca7554ded9f",
        "name": "SWITCH1 OFF",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "ABC123",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch1\": {\"Action\": \"OFF\"} }",
        "payloadType": "json",
        "x": 2300,
        "y": 500,
        "wires": [
            [
                "aa401e14390fa612"
            ]
        ]
    },
    {
        "id": "aa401e14390fa612",
        "type": "switch",
        "z": "dae82ca7554ded9f",
        "name": "Machines",
        "property": "payload.serialNumber",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "ABC123",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 2500,
        "y": 480,
        "wires": [
            [
                "1511680d3df80686"
            ]
        ],
        "icon": "font-awesome/fa-desktop"
    },
    {
        "id": "1511680d3df80686",
        "type": "switch",
        "z": "dae82ca7554ded9f",
        "name": "OPTION SW",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "hask",
                "v": "Switch1",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 2670,
        "y": 480,
        "wires": [
            [
                "afbb7d7e0eeaec11"
            ]
        ]
    },
    {
        "id": "afbb7d7e0eeaec11",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "g": "a294c877d7b97aa7",
        "name": "Motors object main",
        "func": "let motorProperties = flow.get('motorProperties') || {};\nlet serialNumber = msg.payload.serialNumber;\nif (msg.payload.Switch1 && (msg.payload.Switch1.Action === \"ON\" || msg.payload.Switch1.Action === \"OFF\")) {\n    if (!motorProperties[serialNumber]) {\n        motorProperties[serialNumber] = {\n            \"switch1\": null,\n            \"startProduction\": false,\n            \"finishedProduction\": false,\n            \"dateStartProduction\": null,\n            \"dateLastProduction\": null,\n            \"machineTimeWorking\": 0,\n            \"machineTimeIdle\": 0,\n            \"status\": null,\n        }\n    }\n}\nflow.set('motorProperties', motorProperties);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2890,
        "y": 480,
        "wires": [
            [
                "8287664ce5f49fc0"
            ]
        ],
        "icon": "font-awesome/fa-save"
    },
    {
        "id": "8287664ce5f49fc0",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "g": "a294c877d7b97aa7",
        "name": "Machine conditions",
        "func": "let motorProperties = flow.get('motorProperties') || {};\nlet serialNumber = msg.payload.serialNumber;\nlet switch1 = msg.payload.Switch1.Action;\nlet currentTimestamp = new Date();\n\nif (motorProperties[serialNumber]) {\n    if (switch1 === \"ON\" && !motorProperties[serialNumber].startProduction) {\n        motorProperties[serialNumber].switch1 = \"ON\";\n        motorProperties[serialNumber].dateStartProduction = currentTimestamp;\n        motorProperties[serialNumber].startProduction = true;\n        \n        if (motorProperties[serialNumber].dateLastProduction !== null) {\n            let idleTime = (currentTimestamp.getTime() - motorProperties[serialNumber].dateLastProduction.getTime()) / 1000;\n\n            if (idleTime >= 300) {\n                motorProperties[serialNumber].machineTimeIdle += idleTime;\n            }\n            else {\n                motorProperties[serialNumber].machineTimeWorking += idleTime;\n            }\n        }\n    }\n    else if (switch1 === \"OFF\" && motorProperties[serialNumber].startProduction) {\n        motorProperties[serialNumber].switch1 = \"OFF\";\n        motorProperties[serialNumber].dateLastProduction = currentTimestamp;\n        motorProperties[serialNumber].startProduction = false;\n        motorProperties[serialNumber].finishedProduction = true;\n\n        if (motorProperties[serialNumber].dateStartProduction !== null) {\n            let workingTime = (currentTimestamp.getTime() - motorProperties[serialNumber].dateStartProduction.getTime()) / 1000;\n            motorProperties[serialNumber].machineTimeWorking += workingTime;\n            motorProperties[serialNumber].dateStartProduction = null;\n        }\n    }\n}\nflow.set('motorProperties', motorProperties);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3110,
        "y": 480,
        "wires": [
            [
                "2b8795a58f6c76e6"
            ]
        ],
        "icon": "font-awesome/fa-bars"
    },
    {
        "id": "2b8795a58f6c76e6",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "g": "a294c877d7b97aa7",
        "name": "Update status machine",
        "func": "let motorProperties = flow.get('motorProperties') || {};\nlet currentTimestamp = new Date();\nlet messages = [];\n\nif (motorProperties) {\n    Object.keys(motorProperties).forEach(key => {\n        if (motorProperties[key].hasOwnProperty('dateStartProduction') && motorProperties[key].hasOwnProperty('dateLastProduction')) {\n            let dateStartProduction = motorProperties[key]['dateStartProduction'];\n            let dateLastProduction = motorProperties[key]['dateLastProduction'];\n            let oldState = motorProperties[key]['status']\n\n            let timeCurrentProduction = dateStartProduction ? (currentTimestamp.getTime() - dateStartProduction.getTime()) / 1000 : null;\n            let timeLastProduction = dateLastProduction ? (currentTimestamp.getTime() - dateLastProduction.getTime()) / 1000 : null;\n\n            let isWorking = (dateStartProduction !== null) || \n            (dateStartProduction === null && timeLastProduction <= 299 && dateLastProduction !== null);\n\n            let isStopped = (dateStartProduction === null && timeLastProduction >= 300 && timeLastProduction <= 1799);\n\n            let isTurnedOff = (dateStartProduction === null && dateLastProduction === null) || \n            (dateStartProduction === null && dateLastProduction >= 1800);\n\n            const newState = isWorking ? \"TRABALHANDO\" : isStopped ? \"PARADO\" : isTurnedOff ? \"DESLIGADO\" : null;\n\n            if (newState !== null && oldState !== newState) {\n                motorProperties[key]['status'] = newState;\n\n                messages.push(({\n                    serialNumber: key,\n                    currentStatus: newState\n                }));\n            }\n        }\n        node.warn(motorProperties);\n    });\n    flow.set('motorProperties', motorProperties);\n\n    messages.forEach(msg => {\n        node.send({ payload: msg });\n\n        return msg;\n    });\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3360,
        "y": 480,
        "wires": [
            [
                "f73d3e2f4c95a063"
            ]
        ],
        "icon": "node-red/status.svg"
    },
    {
        "id": "f73d3e2f4c95a063",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "g": "a294c877d7b97aa7",
        "name": "Get changed Status (Cable)",
        "func": "let {serialNumber, currentStatus} = msg.payload;\nlet timestamp = new Date().getTime();\n\nif (serialNumber && currentStatus !== null) {\n    msg.payload = {\n        timestamp: timestamp,\n        deviceSerialNumber: serialNumber,\n        status: currentStatus\n    }\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3640,
        "y": 480,
        "wires": [
            []
        ],
        "icon": "node-red/status.svg"
    },
    {
        "id": "acad990562a6c976",
        "type": "switch",
        "z": "dae82ca7554ded9f",
        "g": "edb435885b485c1b",
        "name": "Machines",
        "property": "payload.serialNumber",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "DF24F6",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 2500,
        "y": 740,
        "wires": [
            [
                "a2389853d4a5a64f"
            ]
        ],
        "icon": "font-awesome/fa-desktop"
    },
    {
        "id": "7ecce1edb433222f",
        "type": "switch",
        "z": "dae82ca7554ded9f",
        "g": "edb435885b485c1b",
        "name": "OPTION SW",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "hask",
                "v": "Switch1",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "Switch2",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "Switch3",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 2310,
        "y": 740,
        "wires": [
            [
                "acad990562a6c976"
            ],
            [
                "acad990562a6c976"
            ],
            [
                "acad990562a6c976"
            ]
        ]
    },
    {
        "id": "a2389853d4a5a64f",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "g": "edb435885b485c1b",
        "name": "TRUMPF",
        "func": "let trumpfProperties = flow.get('trumpfProperties') || {};\nlet serialNumber = msg.payload.serialNumber;\n\nif (msg.payload.Switch1 && (msg.payload.Switch1.Action === \"ON\" || msg.payload.Switch1.Action === \"OFF\")) {\n    if (!trumpfProperties[serialNumber]) {\n        trumpfProperties[serialNumber] = {\n            \"laserON\": false,\n            \"laserOFF\": false,\n            \"breakStart\": false,\n            \"verifyBreakEngine\": false,\n            \"startCollison\": false,\n            \"finishedCollision\": false,\n            \"existsCutPlan\": false,\n            \"dateStartProduction\": null,\n            \"dateLastProduction\": null,\n            \"plateSteel\": 0,\n            \"colisao\": 0,\n            \"unit\": null,\n            \"status\": null,\n            \"timeDurationLastPlanCut\": 0,\n        }\n    }\n}\nflow.set('trumpfProperties', trumpfProperties);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2680,
        "y": 740,
        "wires": [
            [
                "6e6aed97e9528f0a"
            ]
        ],
        "icon": "font-awesome/fa-save"
    },
    {
        "id": "6e6aed97e9528f0a",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "g": "edb435885b485c1b",
        "name": "Handle switches",
        "func": "let handleSwitch = function (payload, context, switchName, startName, finishName, verifyName) {\n    let switchKey = Object.keys(payload).find(key => key.startsWith(switchName));\n    let switchState = context.get(switchName) || null;\n    let actionValue = payload[switchKey] ? payload[switchKey].Action : null;\n    let startState = context.get(startName) || false;\n    let finishState = context.get(finishName) || false;\n    let verifyState = context.get(verifyName) || false;\n\n    switchState = actionValue || switchState;\n\n    if (switchState === \"ON\" && !finishState) {\n        startState = true;\n    }\n    else if (switchState === \"OFF\" && startState) {\n        finishState = true;\n    }\n\n    if (startState && finishState) {\n        startState = false;\n        finishState = false;\n        verifyState = true;\n    }\n    context.set(switchName, switchState);\n    context.set(startName, startState);\n    context.set(finishName, finishState);\n    context.set(verifyName, verifyState);\n\n    return {\n        switchState: switchState,\n        startState: startState,\n        finishState: finishState,\n        verifyState: verifyState\n    };\n}\nlet payload = msg.payload;\nlet trumpfProperties = flow.get('trumpfProperties') || {};\nlet serialNumber = msg.payload.serialNumber;\n\nlet verifyLaser = handleSwitch(payload, context, 'Switch1', 'laserON', 'laserOFF', 'verifyLaser');\nlet collisionPart = handleSwitch(payload, context, 'Switch2', 'startCollison', 'finishedCollision', 'verifyCollision');\nlet tableEnginerBreak = handleSwitch(payload, context, 'Switch3', 'breakStart', 'breakFinished', 'verifyBreakEngine');\n\ntrumpfProperties[serialNumber].laserON = verifyLaser.startState;\ntrumpfProperties[serialNumber].laserOFF = verifyLaser.verifyState;\ntrumpfProperties[serialNumber].breakStart = tableEnginerBreak.startState;\ntrumpfProperties[serialNumber].verifyBreakEngine = tableEnginerBreak.verifyState;\ntrumpfProperties[serialNumber].finishedCollision = collisionPart.verifyState;\n\nflow.set('trumpfProperties', trumpfProperties);\nverifyLaser.verifyState = false;\ntableEnginerBreak.verifyState = false;\ncollisionPart.verifyState = false;\ncontext.set('verifyLaser', verifyLaser.verifyState);\ncontext.set('verifyBreakEngine', tableEnginerBreak.verifyState);\ncontext.set('verifyCollision', collisionPart.verifyState);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2860,
        "y": 740,
        "wires": [
            [
                "90eb652fbba5bc42"
            ]
        ],
        "icon": "node-red/switch.svg"
    },
    {
        "id": "90eb652fbba5bc42",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "g": "edb435885b485c1b",
        "name": "Machine conditions",
        "func": "let trumpfProperties = flow.get('trumpfProperties') || {};\nlet serialNumber = msg.payload.serialNumber;\nlet currentTimestamp = new Date();\n\nif (trumpfProperties && trumpfProperties[serialNumber]) {\n    if (trumpfProperties[serialNumber].laserON && !trumpfProperties[serialNumber].existsCutPlan) {\n        trumpfProperties[serialNumber].existsCutPlan = true;\n        trumpfProperties[serialNumber].dateStartProduction = currentTimestamp;\n    }\n    else if (!trumpfProperties[serialNumber].laserON && trumpfProperties[serialNumber].verifyBreakEngine\n        && trumpfProperties[serialNumber].existsCutPlan) {\n        let plateCutDuration = (currentTimestamp.getTime() - trumpfProperties[serialNumber].dateStartProduction.getTime()) / 1000;\n\n        if (plateCutDuration >= 60) {\n            trumpfProperties[serialNumber].existsCutPlan = false;\n            trumpfProperties[serialNumber].dateLastProduction = currentTimestamp;\n            trumpfProperties[serialNumber].timeDurationLastPlanCut =\n                (currentTimestamp.getTime() - trumpfProperties[serialNumber].dateStartProduction) / 1000;\n            trumpfProperties[serialNumber].plateSteel += 1;\n            trumpfProperties[serialNumber].unit = \"Chapas\";\n            trumpfProperties[serialNumber].dateStartProduction = null;\n        }\n    }\n\n    if (trumpfProperties[serialNumber].finishedCollision === true) {\n\n        trumpfProperties[serialNumber].colisao += 1;\n        trumpfProperties[serialNumber].unit = \"Colis√µes\";\n        trumpfProperties[serialNumber].finishedCollision = false;\n    }\n    flow.set('trumpfProperties', trumpfProperties);\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3130,
        "y": 740,
        "wires": [
            [
                "1ee314371cb56c1c",
                "153ff338219f3494",
                "a998276a6798e165"
            ]
        ],
        "icon": "font-awesome/fa-bars"
    },
    {
        "id": "1ee314371cb56c1c",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "g": "edb435885b485c1b",
        "name": "Update status machine",
        "func": "let trumpfProperties = flow.get('trumpfProperties') || {};\nlet currentTimestamp = new Date();\nlet messages = [];\n\nif (trumpfProperties) {\n    Object.keys(trumpfProperties).forEach(key => {\n        if (trumpfProperties[key].hasOwnProperty('dateStartProduction') && trumpfProperties[key].hasOwnProperty('dateLastProduction')) {\n            let dateStartProduction = trumpfProperties[key]['dateStartProduction'];\n            let dateLastProduction = trumpfProperties[key]['dateLastProduction'];\n            let oldState = trumpfProperties[key]['status'];\n\n            let differenceStartProduction = dateStartProduction ? (currentTimestamp.getTime() - dateStartProduction.getTime()) / 1000 : null;\n            let differenceLastProduction = dateLastProduction ? (currentTimestamp.getTime() - dateLastProduction.getTime()) / 1000 : null;\n\n            const isWorking = (dateStartProduction !== null && differenceStartProduction <= 10799) ||\n            (dateStartProduction === null && differenceLastProduction <= 299 && differenceLastProduction !== null);\n\n            const isStopped = (dateStartProduction === null && differenceLastProduction >= 300 && differenceLastProduction <= 1799);\n\n            const isTurnedOff = ((dateStartProduction === null && dateLastProduction === null) ||\n            (dateStartProduction === null && differenceLastProduction >= 1800) || (differenceStartProduction >= 10800));\n\n            const newState = isWorking ? \"TRABALHANDO\" : isStopped ? \"PARADO\" : isTurnedOff ? \"DESLIGADO\" : null;\n\n            if (newState !== null && oldState !== newState) {\n                trumpfProperties[key]['status'] = newState;\n\n                messages.push(({\n                    serialNumber: key,\n                    currentStatus: newState\n                }));\n            }\n         }\n    });\n    flow.set('trumpfProperties', trumpfProperties);\n\n    messages.forEach(msg => {\n        node.send(({ payload: msg }));\n\n        return msg;\n    });\n}\n// node.warn(trumpfProperties);",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3420,
        "y": 740,
        "wires": [
            [
                "d7c876326fa322be"
            ]
        ],
        "icon": "font-awesome/fa-exchange"
    },
    {
        "id": "37c27966cf6e8024",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "g": "edb435885b485c1b",
        "name": "Get Count (Chapas)",
        "func": "let serialNumber = msg.payload.serialNumber;\nlet trumpfProperties = flow.get('trumpfProperties') || {};\n\nif (trumpfProperties) {\n    if (trumpfProperties[serialNumber] && trumpfProperties[serialNumber].unit !== null) {\n        let unit = trumpfProperties[serialNumber].unit;\n\n        msg.payload = {\n            timestamp: new Date().getTime(),\n            deviceSerialNumber: serialNumber,\n            unit: unit,\n            count: 1\n        }\n        trumpfProperties[serialNumber].unit = null;\n        flow.set('trumpfProperties', trumpfProperties);\n\n        return msg;\n    }\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3760,
        "y": 700,
        "wires": [
            []
        ],
        "icon": "font-awesome/fa-plus"
    },
    {
        "id": "d7c876326fa322be",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "g": "edb435885b485c1b",
        "name": "Get changed Status (Chapas)",
        "func": "let {serialNumber, currentStatus} = msg.payload;\nlet timestamp = new Date().getTime();\n\nif (serialNumber && currentStatus !== null) {\n    msg.payload = {\n        timestamp: timestamp,\n        deviceSerialNumber: serialNumber,\n        status: currentStatus\n    }\n    return msg;\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3790,
        "y": 740,
        "wires": [
            []
        ],
        "icon": "node-red/status.svg"
    },
    {
        "id": "ce48c90b08b472ba",
        "type": "link in",
        "z": "dae82ca7554ded9f",
        "g": "edb435885b485c1b",
        "name": "STATUS",
        "links": [
            "ed0b1d0f559753f5",
            "d5a507637c3884a8"
        ],
        "x": 2925,
        "y": 700,
        "wires": [
            [
                "90eb652fbba5bc42"
            ]
        ],
        "icon": "font-awesome/fa-flash"
    },
    {
        "id": "a998276a6798e165",
        "type": "link out",
        "z": "dae82ca7554ded9f",
        "g": "edb435885b485c1b",
        "name": "DASHBOARD MARTIA√áO",
        "mode": "link",
        "links": [
            "0625d3a798a1fe29",
            "97fef43e0dd0d190"
        ],
        "x": 3345,
        "y": 660,
        "wires": [],
        "icon": "node-red-dashboard/ui_dropdown.png"
    },
    {
        "id": "399cfb9b84c722f9",
        "type": "switch",
        "z": "dae82ca7554ded9f",
        "name": "Machines",
        "property": "payload.serialNumber",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "ABC123",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "DEF123",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 2500,
        "y": 1020,
        "wires": [
            [
                "942a874c7d327dc2"
            ],
            [
                "942a874c7d327dc2"
            ]
        ],
        "icon": "font-awesome/fa-desktop"
    },
    {
        "id": "942a874c7d327dc2",
        "type": "switch",
        "z": "dae82ca7554ded9f",
        "name": "OPTION SW",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "hask",
                "v": "Switch1",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "Switch3",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 2670,
        "y": 1020,
        "wires": [
            [
                "4398f2dd35113ef8"
            ],
            [
                "4398f2dd35113ef8"
            ]
        ]
    },
    {
        "id": "d132636a28e3a3b2",
        "type": "inject",
        "z": "dae82ca7554ded9f",
        "name": "SWITCH1 ON",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "ABC123",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch1\": {\"Action\": \"ON\"} }",
        "payloadType": "json",
        "x": 2290,
        "y": 840,
        "wires": [
            [
                "399cfb9b84c722f9"
            ]
        ]
    },
    {
        "id": "1d97a126ac1515e2",
        "type": "inject",
        "z": "dae82ca7554ded9f",
        "name": "SWITCH1 OFF",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "ABC123",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch1\": {\"Action\": \"OFF\"} }",
        "payloadType": "json",
        "x": 2300,
        "y": 880,
        "wires": [
            [
                "399cfb9b84c722f9"
            ]
        ]
    },
    {
        "id": "e852b5cb0a8db1a4",
        "type": "inject",
        "z": "dae82ca7554ded9f",
        "name": "SWITCH3 ON ",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "ABC123",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch3\": {\"Action\": \"ON\"} }",
        "payloadType": "json",
        "x": 2290,
        "y": 920,
        "wires": [
            [
                "399cfb9b84c722f9"
            ]
        ]
    },
    {
        "id": "93b0911a9be72205",
        "type": "inject",
        "z": "dae82ca7554ded9f",
        "name": "SWITCH3 OFF",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "ABC123",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch3\": {\"Action\": \"OFF\"} }",
        "payloadType": "json",
        "x": 2300,
        "y": 960,
        "wires": [
            [
                "399cfb9b84c722f9"
            ]
        ]
    },
    {
        "id": "569ed4a1c288d2da",
        "type": "inject",
        "z": "dae82ca7554ded9f",
        "name": "SWITCH1 ON",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "ABC123",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch1\": {\"Action\": \"ON\"} }",
        "payloadType": "json",
        "x": 2330,
        "y": 1120,
        "wires": [
            [
                "68716042dbe6a028"
            ]
        ]
    },
    {
        "id": "dbcc053008aa30f2",
        "type": "inject",
        "z": "dae82ca7554ded9f",
        "name": "SWITCH1 OFF",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "ABC123",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch1\": {\"Action\": \"OFF\"} }",
        "payloadType": "json",
        "x": 2340,
        "y": 1160,
        "wires": [
            [
                "68716042dbe6a028"
            ]
        ]
    },
    {
        "id": "2ad1a18d7acdeeab",
        "type": "inject",
        "z": "dae82ca7554ded9f",
        "name": "SWITCH3 ON ",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "ABC123",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch3\": {\"Action\": \"ON\"} }",
        "payloadType": "json",
        "x": 2330,
        "y": 1200,
        "wires": [
            [
                "68716042dbe6a028"
            ]
        ]
    },
    {
        "id": "a20a01730b485ba9",
        "type": "inject",
        "z": "dae82ca7554ded9f",
        "name": "SWITCH3 OFF",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "ABC123",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch3\": {\"Action\": \"OFF\"} }",
        "payloadType": "json",
        "x": 2340,
        "y": 1240,
        "wires": [
            [
                "68716042dbe6a028"
            ]
        ]
    },
    {
        "id": "7663d29d0dd62a79",
        "type": "debug",
        "z": "dae82ca7554ded9f",
        "name": "debug 308",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 5620,
        "wires": []
    },
    {
        "id": "32c235dad2e8bc23",
        "type": "inject",
        "z": "dae82ca7554ded9f",
        "name": "SWITCH3 ON ",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "ABC123",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch3\": {\"Action\": \"ON\"} }",
        "payloadType": "json",
        "x": 2290,
        "y": 1300,
        "wires": [
            [
                "0648bac9d04041ff"
            ]
        ]
    },
    {
        "id": "d192c440fc72b0e5",
        "type": "inject",
        "z": "dae82ca7554ded9f",
        "name": "SWITCH3 OFF",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "ABC123",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch3\": {\"Action\": \"OFF\"} }",
        "payloadType": "json",
        "x": 2300,
        "y": 1340,
        "wires": [
            [
                "0648bac9d04041ff"
            ]
        ]
    },
    {
        "id": "ffe887935e00aefb",
        "type": "inject",
        "z": "dae82ca7554ded9f",
        "name": "SWITCH4 ON ",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "ABC123",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch4\": {\"Action\": \"ON\"} }",
        "payloadType": "json",
        "x": 2290,
        "y": 1400,
        "wires": [
            [
                "0648bac9d04041ff"
            ]
        ]
    },
    {
        "id": "a5256fcda417537c",
        "type": "inject",
        "z": "dae82ca7554ded9f",
        "name": "SWITCH4 OFF",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "ABC123",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch4\": {\"Action\": \"OFF\"} }",
        "payloadType": "json",
        "x": 2300,
        "y": 1440,
        "wires": [
            [
                "0648bac9d04041ff"
            ]
        ]
    },
    {
        "id": "0648bac9d04041ff",
        "type": "switch",
        "z": "dae82ca7554ded9f",
        "name": "Machines",
        "property": "payload.serialNumber",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "ABC123",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "DEF123",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "ACD123",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 2520,
        "y": 1360,
        "wires": [
            [
                "c709cd5a11ce6f64"
            ],
            [
                "c709cd5a11ce6f64"
            ],
            [
                "c709cd5a11ce6f64"
            ]
        ],
        "icon": "font-awesome/fa-desktop"
    },
    {
        "id": "c709cd5a11ce6f64",
        "type": "switch",
        "z": "dae82ca7554ded9f",
        "name": "OPTION SW",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "hask",
                "v": "Switch3",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "Switch4",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 2670,
        "y": 1360,
        "wires": [
            [
                "95bbbc898fecc315"
            ],
            [
                "95bbbc898fecc315"
            ]
        ]
    },
    {
        "id": "95bbbc898fecc315",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "g": "a8c9be450c8ed0a2",
        "name": "Dobra Gasparini object main",
        "func": "let dobraGaspariniProperties = flow.get('dobraGaspariniProperties') || {};\nlet serialNumber = msg.payload.serialNumber;\nlet getSwitch = Object.keys(msg.payload).find(key => key.startsWith('Switch'));\n\n// delete dobraGaspariniProperties[serialNumber];\nif (getSwitch) {\n    if (!dobraGaspariniProperties[serialNumber]) {\n        dobraGaspariniProperties[serialNumber] = {\n            \"outsetSlowDescent\": false,\n            \"endSlowDescent\": false,\n            \"slowDescentComplete\": false,\n            \"outsetQuickAscent\": false,\n            \"endQuickAscent\": false,\n            \"quickAscentComplete\": false,\n            \"startFold\": false,\n            \"dobras\": 0,\n            \"timestampLastAction\": null,\n            \"timestampLastProduction\": null,\n            \"unit\": null,\n            \"status\": null,\n        }\n    }\n}\nflow.set('dobraGaspariniProperties', dobraGaspariniProperties);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2920,
        "y": 1360,
        "wires": [
            [
                "2928747db6078971"
            ]
        ],
        "icon": "font-awesome/fa-save"
    },
    {
        "id": "2928747db6078971",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "g": "a8c9be450c8ed0a2",
        "name": "Get switches status",
        "func": "let handleSwitch = function(payload, context, machineProperties, switchName, startName, finishName, verifyName) {\n    let switchKey = Object.keys(payload).find(key => key.startsWith(switchName));\n    let switchState = context.get(switchName) || null;\n    let actionValue = payload[switchKey] ? payload[switchKey].Action : null;\n    let startState = machineProperties[startName] || false;\n    let finishState = machineProperties[finishName] || false;\n    let verifyState = machineProperties[verifyName] || false;\n\n    switchState = actionValue || switchState;\n\n    if (switchState === \"ON\") {\n        startState = true;\n    } else if (switchState === \"OFF\" && startState === true) {\n        finishState = true;\n    }\n\n    if (startState === true && finishState === true) {\n        verifyState = true;\n        startState = false;\n        finishState = false;\n    }\n\n    machineProperties[startName] = startState;\n    machineProperties[finishName] = finishState;\n    machineProperties[verifyName] = verifyState;\n\n    return {\n        switchState: switchState,\n        startState: startState,\n        finishState: finishState,\n        verifyState: verifyState\n    };\n}\n\nlet payload = msg.payload;\nlet serialNumber = payload.serialNumber;\nlet dobraGaspariniProperties = flow.get('dobraGaspariniProperties') || {};\nlet machineProperties = dobraGaspariniProperties[serialNumber] || {};\n\nlet slowDescent = handleSwitch(payload, context, machineProperties, 'Switch3', 'outsetSlowDescent', 'endSlowDescent', 'slowDescentComplete');\nlet quickAscent = handleSwitch(payload, context, machineProperties, 'Switch4', 'outsetQuickAscent', 'endQuickAscent', 'quickAscentComplete');\n\ndobraGaspariniProperties[serialNumber] = {\n    ...machineProperties,\n    outsetSlowDescent: slowDescent.startState,\n    endSlowDescent: slowDescent.finishState,\n    slowDescentComplete: slowDescent.verifyState,\n    outsetQuickAscent: quickAscent.startState,\n    endQuickAscent: quickAscent.finishState,\n    quickAscentComplete: quickAscent.verifyState\n};\n\nflow.set('dobraGaspariniProperties', dobraGaspariniProperties);\n\nif (slowDescent.verifyState || quickAscent.verifyState) {\n    slowDescent.verifyState = false;\n    quickAscent.verifyState = false;\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3190,
        "y": 1360,
        "wires": [
            [
                "d3e528e94a71a65f"
            ]
        ],
        "icon": "node-red/switch.svg"
    },
    {
        "id": "d3e528e94a71a65f",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "g": "a8c9be450c8ed0a2",
        "name": "Machine conditions",
        "func": "let dobraGaspariniProperties = flow.get('dobraGaspariniProperties') || {};\nlet serialNumber = msg.payload.serialNumber;\nlet currentTimestamp = new Date();\n\nif (dobraGaspariniProperties[serialNumber].slowDescentComplete && !dobraGaspariniProperties[serialNumber].startFold) {\n    dobraGaspariniProperties[serialNumber].startFold = true;\n    dobraGaspariniProperties[serialNumber].timestampLastAction = currentTimestamp;\n}\nelse if (dobraGaspariniProperties[serialNumber].slowDescentComplete && dobraGaspariniProperties[serialNumber].quickAscentComplete &&\ndobraGaspariniProperties[serialNumber].startFold) {\n    dobraGaspariniProperties[serialNumber].dobras += 1;\n    dobraGaspariniProperties[serialNumber].unit = \"Dobras\";\n    dobraGaspariniProperties[serialNumber].timestampLastProduction = currentTimestamp;\n    dobraGaspariniProperties[serialNumber].startFold = false;\n    dobraGaspariniProperties[serialNumber].slowDescentComplete = false;\n    dobraGaspariniProperties[serialNumber].quickAscentComplete = false;\n}\nflow.set('dobraGaspariniProperties', dobraGaspariniProperties);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3410,
        "y": 1360,
        "wires": [
            [
                "1b367fa786dad70d",
                "61e70b31740bd500"
            ]
        ],
        "icon": "font-awesome/fa-bars"
    },
    {
        "id": "1b367fa786dad70d",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "g": "a8c9be450c8ed0a2",
        "name": "Update machine status",
        "func": "let dobraGaspariniProperties = flow.get('dobraGaspariniProperties');\nlet currentTimestamp = new Date();\nlet messages = [];\n\nif (dobraGaspariniProperties) {\n    Object.keys(dobraGaspariniProperties).forEach(key => {\n        if (dobraGaspariniProperties[key].hasOwnProperty('timestampLastAction') && \n        dobraGaspariniProperties[key].hasOwnProperty('timestampLastProduction')) {\n            let timestampLastAction = dobraGaspariniProperties[key]['timestampLastAction'];\n            let timestampLastProduction = dobraGaspariniProperties[key]['timestampLastProduction'];\n            let oldState = dobraGaspariniProperties[key]['status'];\n\n            let differenceTimeLastAction = timestampLastAction ? (currentTimestamp.getTime() - timestampLastAction.getTime()) / 1000 : null;\n            let differenceTimeLastProduction = timestampLastProduction ? (currentTimestamp.getTime() - timestampLastProduction.getTime()) / 1000 : null;\n\n            const isWorking = (differenceTimeLastAction !== null && differenceTimeLastAction <= 299) || \n            (differenceTimeLastProduction !== null && differenceTimeLastProduction <= 299);\n\n            const isStopped = (differenceTimeLastAction >= 300 && differenceTimeLastAction >= 300 && differenceTimeLastProduction <= 1799) ||\n            (differenceTimeLastAction >= 300 && differenceTimeLastProduction === null && differenceTimeLastAction <= 1799);\n\n            const isTurnedOff = (differenceTimeLastAction >= 1800 && differenceTimeLastProduction === null) ||\n                (differenceTimeLastAction >= 1800 && differenceTimeLastProduction >= 1800) || differenceTimeLastAction === null;\n       \n            const newState = isWorking ? \"TRABALHANDO\" : isStopped ? \"PARADO\" : isTurnedOff ? \"DESLIGADO\" : null;\n\n            if (newState !== null && oldState !== newState) {\n                dobraGaspariniProperties[key]['status'] = newState;\n\n                messages.push(({\n                    serialNumber: key,\n                    currentStatus: newState\n                }));\n            }\n        }\n    });\n    flow.set('dobraGaspariniProperties', dobraGaspariniProperties);\n\n    messages.forEach(msg => {\n        node.send({ paylod: msg });\n\n        return msg;\n    });\n}\nnode.warn(dobraGaspariniProperties);",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3640,
        "y": 1380,
        "wires": [
            [
                "1545eab98142b977"
            ]
        ],
        "icon": "font-awesome/fa-exchange"
    },
    {
        "id": "01aa7482b11081d6",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "g": "a8c9be450c8ed0a2",
        "name": "Get count (DOBRAS)",
        "func": "let dobraGaspariniProperties = flow.get('dobraGaspariniProperties') || {};\nlet serialNumber = msg.payload.serialNumber;\n\nif (dobraGaspariniProperties) {\n    if (dobraGaspariniProperties[serialNumber] && dobraGaspariniProperties[serialNumber].unit !== null) {\n        let unit = dobraGaspariniProperties[serialNumber].unit;\n\n        msg.payload = {\n            timestamp: new Date().getTime(),\n            deviceSerialNumber: serialNumber,\n            unit: unit,\n            count: 1,\n        }\n        dobraGaspariniProperties[serialNumber].unit = null;\n        flow.set('dobraGaspariniProperties', dobraGaspariniProperties);\n        return msg;\n    }\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4060,
        "y": 1340,
        "wires": [
            []
        ],
        "icon": "font-awesome/fa-plus"
    },
    {
        "id": "1545eab98142b977",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "g": "a8c9be450c8ed0a2",
        "name": "Get changed Status (DOBRAS)",
        "func": "let {serialNumber, currentStatus} = msg.payload;\nlet timestamp = new Date().getTime();\n\nif (serialNumber && currentStatus !== null) {\n    msg.payload = {\n        timestamp: timestamp,\n        deviceSerialNumber: serialNumber,\n        status: currentStatus\n    }\n    return msg;\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4090,
        "y": 1380,
        "wires": [
            []
        ],
        "icon": "node-red/status.svg"
    },
    {
        "id": "be524311b0a1ac75",
        "type": "inject",
        "z": "dae82ca7554ded9f",
        "name": "SWITCH1 ON",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF4BE8",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch1\": {\"Action\": \"ON\"} }",
        "payloadType": "json",
        "x": 2290,
        "y": 1720,
        "wires": [
            [
                "5db56cb2a88a26e1"
            ]
        ]
    },
    {
        "id": "aeced5d76e5abd77",
        "type": "inject",
        "z": "dae82ca7554ded9f",
        "name": "SWITCH1 OFF",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "ABC123",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch1\": {\"Action\": \"OFF\"} }",
        "payloadType": "json",
        "x": 2300,
        "y": 1760,
        "wires": [
            [
                "5db56cb2a88a26e1"
            ]
        ]
    },
    {
        "id": "5db56cb2a88a26e1",
        "type": "switch",
        "z": "dae82ca7554ded9f",
        "name": "Machines",
        "property": "payload.serialNumber",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "ABC123",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 2500,
        "y": 1780,
        "wires": [
            [
                "58b5b9f9085120f1"
            ]
        ],
        "icon": "font-awesome/fa-desktop"
    },
    {
        "id": "58b5b9f9085120f1",
        "type": "switch",
        "z": "dae82ca7554ded9f",
        "name": "OPTION SW",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "hask",
                "v": "Switch1",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "Switch2",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 2670,
        "y": 1780,
        "wires": [
            [
                "bd3bc53b4918150f"
            ],
            [
                "bd3bc53b4918150f"
            ]
        ]
    },
    {
        "id": "bd3bc53b4918150f",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "Calandra object main",
        "func": "let calandraProperties = flow.get('calandraProperties') || {};\nlet serialNumber = msg.payload.serialNumber;\n\nif ((msg.payload.Switch1 && (msg.payload.Switch1.Action === \"ON\" || msg.payload.Switch1.Action === \"OFF\")) || \n    (msg.payload.Switch2 && (msg.payload.Switch2.Action === \"ON\" || msg.payload.Switch2.Action === \"OFF\"))) {\n\n    if (!calandraProperties[serialNumber]) {\n            calandraProperties[serialNumber] = {\n                \"startOperation\": false,\n                \"stoppedOperation\": false,\n                \"dateStartOperation\": null,\n                \"dateLastOperation\": null,\n                \"machineTimeWorking\": 0,\n                \"machineIdleTime\": 0,\n                \"status\": null\n            }\n    }\n}\nflow.set('calandraProperties', calandraProperties);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2880,
        "y": 1780,
        "wires": [
            [
                "1f9eb5c56ffa5d16"
            ]
        ],
        "icon": "font-awesome/fa-save"
    },
    {
        "id": "ebc29b7e21205bfa",
        "type": "inject",
        "z": "dae82ca7554ded9f",
        "name": "SWITCH2 ON",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "ABC123",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch2\": {\"Action\": \"ON\"} }",
        "payloadType": "json",
        "x": 2290,
        "y": 1860,
        "wires": [
            [
                "5db56cb2a88a26e1"
            ]
        ]
    },
    {
        "id": "506a0743e15a1306",
        "type": "inject",
        "z": "dae82ca7554ded9f",
        "name": "SWITCH2 OFF",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "ABC123",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch2\": {\"Action\": \"OFF\"} }",
        "payloadType": "json",
        "x": 2300,
        "y": 1900,
        "wires": [
            [
                "5db56cb2a88a26e1"
            ]
        ]
    },
    {
        "id": "1f9eb5c56ffa5d16",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "Machine conditions",
        "func": "let calandraProperties = flow.get('calandraProperties');\nlet serialNumber = msg.payload.serialNumber;\nlet currentTimestamp = new Date();\n\nif ((msg.payload.Switch1 && msg.payload.Switch1.Action === \"ON\" && !calandraProperties[serialNumber].startOperation) ||\n    (msg.payload.Switch2 && msg.payload.Switch2.Action === \"ON\" && !calandraProperties[serialNumber].startOperation)) {\n        calandraProperties[serialNumber].dateStartOperation = currentTimestamp;\n        calandraProperties[serialNumber].startOperation = true;\n        calandraProperties[serialNumber].stoppedOperation = false;\n\n        if (calandraProperties[serialNumber].dateLastOperation !== null) {\n            let idleTime = (currentTimestamp.getTime() - calandraProperties[serialNumber].dateLastOperation.getTime()) / 1000;\n\n            if (idleTime >= 300) {\n                calandraProperties[serialNumber].machineIdleTime += idleTime;\n            }\n            else {\n                calandraProperties[serialNumber].machineTimeWorking += idleTime;\n            }\n        }\n}\nelse if ((msg.payload.Switch1 && msg.payload.Switch1.Action === \"OFF\" && calandraProperties[serialNumber].startOperation === true)||\n    (msg.payload.Switch2 && msg.payload.Switch2.Action === \"OFF\" && calandraProperties[serialNumber].startOperation !== null)){\n    calandraProperties[serialNumber].dateLastOperation = currentTimestamp;\n    calandraProperties[serialNumber].startOperation = false;\n    calandraProperties[serialNumber].stoppedOperation = true;\n\n    if (calandraProperties[serialNumber].dateStartOperation !== null) {\n        let workingTime = (currentTimestamp.getTime() - calandraProperties[serialNumber].dateStartOperation.getTime()) / 1000;\n        calandraProperties[serialNumber].machineTimeWorking += workingTime;\n        calandraProperties[serialNumber].dateStartOperation = null;\n    }\n}\nflow.set('calandraProperties', calandraProperties);\nnode.warn(calandraProperties);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3130,
        "y": 1780,
        "wires": [
            [
                "e18d0d3b7533a1e2"
            ]
        ],
        "icon": "font-awesome/fa-bars"
    },
    {
        "id": "e18d0d3b7533a1e2",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "Update status machine",
        "func": "let calandraProperties = flow.get('calandraProperties') || {};\nlet currentTimestamp = new Date();\nlet messages = [];\n\nif (calandraProperties) {\n    Object.keys(calandraProperties).forEach(key => {\n        if (calandraProperties[key].hasOwnProperty('dateStartOperation') && calandraProperties[key].hasOwnProperty('dateLastProduction')) {\n            let dateStartOperation = calandraProperties[key]['dateStartOperation'];\n            let dateLastProduction = calandraProperties[key]['dateLastProduction'];\n            let oldState = calandraProperties[key]['status']\n\n            let timeCurrentProduction = dateStartOperation ? (currentTimestamp.getTime() - dateStartOperation.getTime()) / 1000 : null;\n            let timeLastProduction = dateLastProduction ? (currentTimestamp.getTime() - dateLastProduction.getTime()) / 1000 : null;\n\n            let isWorking = (dateStartOperation !== null) ||\n                (dateStartOperation === null && timeLastProduction <= 299 && dateLastProduction !== null);\n\n            let isStopped = (dateStartOperation === null && timeLastProduction >= 300 && timeLastProduction <= 1799);\n\n            let isTurnedOff = (dateStartOperation === null && dateLastProduction === null) ||\n                (dateStartOperation === null && dateLastProduction >= 1800);\n\n            const newState = isWorking ? \"TRABALHANDO\" : isStopped ? \"PARADO\" : isTurnedOff ? \"DESLIGADO\" : null;\n\n            if (newState !== null && oldState !== newState) {\n                calandraProperties[key]['status'] = newState;\n\n                messages.push(({\n                    serialNumber: key,\n                    currentStatus: newState\n                }));\n            }\n        }\n    });\n    flow.set('calandraProperties', calandraProperties);\n\n    messages.forEach(msg => {\n        node.send({ payload: msg });\n\n        return msg;\n    });\n}\n// node.warn(calandraProperties);",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3380,
        "y": 1780,
        "wires": [
            [
                "37e938a1a4c62e48"
            ]
        ],
        "icon": "font-awesome/fa-exchange"
    },
    {
        "id": "37e938a1a4c62e48",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "Get changed Status (Calandra)",
        "func": "let { serialNumber, currentStatus } = msg.payload;\nlet timestamp = new Date().getTime();\n\nif (serialNumber && currentStatus !== null) {\n    msg.payload = {\n        timestamp: timestamp,\n        deviceSerialNumber: serialNumber,\n        status: currentStatus\n    }\n    return msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3730,
        "y": 1780,
        "wires": [
            []
        ],
        "icon": "node-red/status.svg"
    },
    {
        "id": "7c1f56143133beda",
        "type": "switch",
        "z": "dae82ca7554ded9f",
        "name": "Machines",
        "property": "payload.serialNumber",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "ABC123",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "DEF123",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 2560,
        "y": 2160,
        "wires": [
            [
                "84c910431985f4c8"
            ],
            [
                "84c910431985f4c8"
            ]
        ],
        "icon": "font-awesome/fa-desktop"
    },
    {
        "id": "c303ddb1658f8af1",
        "type": "inject",
        "z": "dae82ca7554ded9f",
        "name": "SWITCH1 ON",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "ABC123",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch1\": {\"Action\": \"ON\"} }",
        "payloadType": "json",
        "x": 2270,
        "y": 2060,
        "wires": [
            [
                "7c1f56143133beda"
            ]
        ]
    },
    {
        "id": "43377c924163c38d",
        "type": "inject",
        "z": "dae82ca7554ded9f",
        "name": "SWITCH1 OFF",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "ABC123",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch1\": {\"Action\": \"OFF\"} }",
        "payloadType": "json",
        "x": 2280,
        "y": 2100,
        "wires": [
            [
                "7c1f56143133beda"
            ]
        ]
    },
    {
        "id": "ed66a818d7adb0ef",
        "type": "inject",
        "z": "dae82ca7554ded9f",
        "name": "SWITCH3 ON",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "ABC123",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch3\": {\"Action\": \"ON\"} }",
        "payloadType": "json",
        "x": 2270,
        "y": 2160,
        "wires": [
            [
                "7c1f56143133beda"
            ]
        ]
    },
    {
        "id": "d521fff5475fed40",
        "type": "inject",
        "z": "dae82ca7554ded9f",
        "name": "SWITCH3 OFF",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "ABC123",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch3\": {\"Action\": \"OFF\"} }",
        "payloadType": "json",
        "x": 2280,
        "y": 2200,
        "wires": [
            [
                "7c1f56143133beda"
            ]
        ]
    },
    {
        "id": "84c910431985f4c8",
        "type": "switch",
        "z": "dae82ca7554ded9f",
        "name": "OPTION SW",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "hask",
                "v": "Switch1",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "Switch3",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 2730,
        "y": 2160,
        "wires": [
            [
                "0d9fa676aa0ffc45"
            ],
            [
                "0d9fa676aa0ffc45"
            ]
        ]
    },
    {
        "id": "a355854eb3861f75",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "Rob√¥ object main",
        "func": "let roboProperties = flow.get('roboProperties') || {};\nlet serialNumber = msg.payload.serialNumber;\nlet payload = msg.payload;\nlet switchKey = Object.keys(msg.payload).find(key => key.startsWith('Switch'));\n\nif (switchKey !== null) {\n    if (!roboProperties[serialNumber]) {\n        roboProperties[serialNumber] = {\n            \"conditionForUse\": false,\n            \"useFinished\": false,\n            \"verifyUse\": false,\n            \"stableSolderArc\": false,\n            \"solderArcFinished\": false,\n            \"verifySolderArcle\": false,\n            \"dateLastProduction\": null,\n            \"startPulse\": false,\n            \"pulses\": 0,\n            \"unit\": null,\n            \"status\": null\n        }\n    }\n}\nflow.set('roboProperties', roboProperties);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3050,
        "y": 2020,
        "wires": [
            [
                "29a69f8d47710c72"
            ]
        ],
        "icon": "font-awesome/fa-save"
    },
    {
        "id": "29a69f8d47710c72",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "Get switches status",
        "func": "    let roboProperties = flow.get('roboProperties') || {};\n    let serialNumber = msg.payload.serialNumber;\n    let switchKey = Object.keys(msg.payload).find(key => key.startsWith('Switch'));\n    let actionValue = msg.payload[switchKey] ? msg.payload[switchKey].Action : null;\n\n    if (serialNumber && roboProperties[serialNumber]) {\n        if (switchKey === \"Switch1\") {\n            if (actionValue === \"ON\") {\n                roboProperties[serialNumber].conditionForUse = true;\n            } else if (actionValue === \"OFF\") {\n                roboProperties[serialNumber].useFinished = true;\n            }\n        } else if (switchKey === \"Switch3\") {\n            if (actionValue === \"ON\") {\n                roboProperties[serialNumber].stableSolderArc = true;\n            } else if (actionValue === \"OFF\") {\n                roboProperties[serialNumber].solderArcFinished = true;\n            }\n        }\n    }\n    flow.set('roboProperties', roboProperties);\n    return msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3270,
        "y": 2020,
        "wires": [
            [
                "b9a354358ab87183"
            ]
        ],
        "icon": "node-red/switch.svg"
    },
    {
        "id": "b9a354358ab87183",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "Machine conditions",
        "func": "let roboProperties = flow.get('roboProperties');\nlet currentTimestamp = new Date();\nlet serialNumber = msg.payload.serialNumber;\n\nif (roboProperties[serialNumber].conditionForUse && roboProperties[serialNumber].useFinished) {\n    roboProperties[serialNumber].verifyUse = true;\n    roboProperties[serialNumber].conditionForUse = false;\n    roboProperties[serialNumber].useFinished = false;\n\n}\n\nif (roboProperties[serialNumber].stableSolderArc && roboProperties[serialNumber].solderArcFinished) {\n    roboProperties[serialNumber].verifyAolderArcle = true;\n    roboProperties[serialNumber].stableSolderArc = false;\n    roboProperties[serialNumber].solderArcFinished = false;\n}\nflow.set('roboProperties', roboProperties);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3510,
        "y": 2020,
        "wires": [
            [
                "9df934313b1fa07c",
                "04331f295bdfef80"
            ]
        ],
        "icon": "font-awesome/fa-bars"
    },
    {
        "id": "9df934313b1fa07c",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "Update machine status",
        "func": "let roboProperties = flow.get('roboProperties');\nlet currentTimestamp = new Date();\nlet messages = [];\n\nif (roboProperties) {\n    Object.keys(roboProperties).forEach(key => {\n        if (roboProperties[key].hasOwnProperty('dateLastProduction')) {\n            let dateLastProduction = roboProperties[key]['dateLastProduction'];\n            let oldState = roboProperties[key]['status'];\n\n            let differenceLastProduction = dateLastProduction ? (currentTimestamp.getTime() - dateLastProduction.getTime()) / 1000 : null;\n\n            const isWorking = (differenceLastProduction !== null && differenceLastProduction <= 299);\n            const isStopped = (differenceLastProduction >= 300 && differenceLastProduction <= 1799);\n            const isTurnedOff = (differenceLastProduction >= 1800) || (differenceLastProduction === null);\n\n            const newState = isWorking ? \"TRABALHANDO\" : isStopped ? \"PARADO\" : isTurnedOff ? \"DESLIGADO\" : null;\n\n            if (newState !== null && oldState !== newState) {\n                roboProperties[key]['status'] = newState;\n\n                messages.push(({\n                    serialNumber: key,\n                    currentStatus: newState\n                }));\n            }\n        }\n    });\n    flow.set('roboProperties', roboProperties);\n\n    messages.forEach(msg => {\n        node.send({ payload: msg});\n\n        return msg;\n    });\n}\n// node.warn(roboProperties);",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3860,
        "y": 2060,
        "wires": [
            [
                "9c8f9f1f4b055407"
            ]
        ],
        "icon": "font-awesome/fa-exchange"
    },
    {
        "id": "33dc3c6f35f9cb98",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "Get count (PULSOS)",
        "func": "let serialNumber = msg.payload.serialNumber;\nlet roboProperties = flow.get('roboProperties');\n\nif (roboProperties) {\n    if (roboProperties[serialNumber] && roboProperties[serialNumber].unit !== null) {\n        let unit = roboProperties[serialNumber].unit;\n\n        msg.payload = {\n            timestamp: new Date().getTime(),\n            deviceSerialNumber: serialNumber,\n            unit: unit,\n            count: 1\n        }\n        roboProperties[serialNumber].unit = null;\n        flow.set('roboProperties', roboProperties);\n\n        return msg;\n    }\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4160,
        "y": 2020,
        "wires": [
            []
        ],
        "icon": "font-awesome/fa-plus"
    },
    {
        "id": "9c8f9f1f4b055407",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "Get changed Status (PULSOS)",
        "func": "let {serialNumber, currentStatus} = msg.payload;\nlet timestamp = new Date().getTime();\n\nif (serialNumber && currentStatus !== null) {\n    msg.payload = {\n        timestamp: timestamp,\n        deviceSerialNumber: serialNumber,\n        status: currentStatus\n    }\n    return msg;\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4190,
        "y": 2060,
        "wires": [
            []
        ],
        "icon": "node-red/status.svg"
    },
    {
        "id": "509bddab4ae22563",
        "type": "inject",
        "z": "dae82ca7554ded9f",
        "name": "SWITCH1 ON",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DEF123",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch1\": {\"Action\": \"ON\"} }",
        "payloadType": "json",
        "x": 2490,
        "y": 1940,
        "wires": [
            [
                "7c1f56143133beda"
            ]
        ]
    },
    {
        "id": "7c97f3f93947bd51",
        "type": "inject",
        "z": "dae82ca7554ded9f",
        "name": "SWITCH1 OFF",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DEF123",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch1\": {\"Action\": \"OFF\"} }",
        "payloadType": "json",
        "x": 2500,
        "y": 1980,
        "wires": [
            [
                "7c1f56143133beda"
            ]
        ]
    },
    {
        "id": "04331f295bdfef80",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "Verify finished's states",
        "func": "let roboProperties = flow.get('roboProperties');\nlet serialNumber = msg.payload.serialNumber;\nlet currentTimestamp = new Date();\n\nif (roboProperties[serialNumber].verifyUse && roboProperties[serialNumber].verifySolderArcle) {\n    roboProperties[serialNumber].dateLastProduction = currentTimestamp;\n    roboProperties[serialNumber].pulses += 1;\n    roboProperties[serialNumber].unit = \"Pulsos\";\n    roboProperties[serialNumber].verifyUse = false;\n    roboProperties[serialNumber].verifySolderArcle = false;\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3860,
        "y": 2020,
        "wires": [
            [
                "33dc3c6f35f9cb98"
            ]
        ],
        "icon": "font-awesome/fa-cogs"
    },
    {
        "id": "0d9fa676aa0ffc45",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "Rob√¥ object main",
        "func": "let roboProperties = flow.get('roboProperties') || {};\nlet serialNumber = msg.payload.serialNumber;\nlet payload = msg.payload;\nlet switchKey = Object.keys(msg.payload).find(key => key.startsWith('Switch'));\n\nif (switchKey !== null) {\n    if (!roboProperties[serialNumber]) {\n        roboProperties[serialNumber] = {\n            \"conditionForUse\": false,\n            \"useFinished\": false,\n            \"verifyUse\": false,\n            \"stableSolderArc\": false,\n            \"solderArcFinished\": false,\n            \"verifySolderArcle\": false,\n            \"dateLastProduction\": null,\n            \"startPulse\": false,\n            \"pulses\": 0,\n            \"unit\": null,\n            \"status\": null\n        }\n    }\n}\nflow.set('roboProperties', roboProperties);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2950,
        "y": 2160,
        "wires": [
            [
                "e5a63bba8dfad5e3"
            ]
        ],
        "icon": "font-awesome/fa-save"
    },
    {
        "id": "e5a63bba8dfad5e3",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "Get switches status",
        "func": "let handleSwitch = function (payload, context, machineProperties, switchName, startName, finishName, verifyName) {\n    let switchKey = Object.keys(payload).find(key => key.startsWith(switchName));\n    let switchState = context.get(switchName) || null;\n    let actionValue = payload[switchKey] ? payload[switchKey].Action : null;\n    let startState = machineProperties[startName] || false;\n    let finishState = machineProperties[finishName] || false;\n    let verifyState = machineProperties[verifyName] || false;\n\n    switchState = actionValue || switchState;\n\n    if (switchState === \"ON\" && finishState === false) {\n        startState = true;\n    }\n    else if (switchState === \"OFF\" && startState === true) {\n        finishState = true;\n    } \n    if (startState && finishState) {\n        verifyState = true;\n    }\n    \n    machineProperties[startName] = startState;\n    machineProperties[finishName] = finishState;\n    machineProperties[verifyName] = verifyState;\n    return {\n        switchState: switchState,\n        startState: startState,\n        finishState: finishState,\n        verifyState: verifyState\n    };\n}\nlet payload = msg.payload;\nlet serialNumber = msg.payload.serialNumber;\nlet roboProperties = flow.get('roboProperties') || {};\nlet machineProperties = roboProperties[serialNumber] || {};\n\nlet verifyUse = handleSwitch(payload, context, machineProperties, 'Switch1', 'conditionForUse', 'useFinished','verifyUse');\nlet verifyArc = handleSwitch(payload, context, machineProperties, 'Switch3', 'stableSolderArc', 'solderArcFinished', 'verifySolderArcle');\n\nflow.set('roboProperties', roboProperties);\nroboProperties[serialNumber].conditionForUse = verifyUse.startState;\nroboProperties[serialNumber].useFinished = verifyUse.finishState;\nroboProperties[serialNumber].verifyUse = verifyUse.verifyState;\nroboProperties[serialNumber].stableSolderArc = verifyArc.startState;\nroboProperties[serialNumber].solderArcFinished = verifyArc.finishState;\nroboProperties[serialNumber].verifySolderArcle = verifyArc.verifyState\n\nif (verifyUse.verifyState && verifyArc.verifyState) {\n    verifyUse.verifyState = false;\n}\nverifyArc.verifyState = false;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3170,
        "y": 2160,
        "wires": [
            [
                "15b48c375521a7f3"
            ]
        ],
        "icon": "node-red/switch.svg"
    },
    {
        "id": "15b48c375521a7f3",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "Machine conditions",
        "func": "let roboProperties = flow.get('roboProperties');\nlet currentTimestamp = new Date();\nlet serialNumber = msg.payload.serialNumber;\n\nif (roboProperties && roboProperties[serialNumber]) {\n    if (roboProperties[serialNumber].useFinished && roboProperties[serialNumber].stableSolderArc && \n    !roboProperties[serialNumber].startPulse) {\n        roboProperties[serialNumber].startPulse = true;\n    }\n    else if (roboProperties[serialNumber].useFinished && roboProperties[serialNumber].solderArcFinished \n    && roboProperties[serialNumber].startPulse) {\n        roboProperties[serialNumber].dateLastProduction = currentTimestamp;\n        roboProperties[serialNumber].pulses += 1;\n        roboProperties[serialNumber].unit = \"Pulsos\";\n        roboProperties[serialNumber].startPulse = false;\n    }\n}\nflow.set('roboProperties', roboProperties);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3410,
        "y": 2160,
        "wires": [
            [
                "a98644f1841d0f11",
                "3cb198afcc4c3da7"
            ]
        ],
        "icon": "font-awesome/fa-bars"
    },
    {
        "id": "a98644f1841d0f11",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "Update machine status",
        "func": "let roboProperties = flow.get('roboProperties');\nlet currentTimestamp = new Date();\nlet messages = [];\n\nif (roboProperties) {\n    Object.keys(roboProperties).forEach(key => {\n        if (roboProperties[key].hasOwnProperty('dateLastProduction')) {\n            let dateLastProduction = roboProperties[key]['dateLastProduction'];\n            let oldState = roboProperties[key]['status'];\n\n            let differenceLastProduction = dateLastProduction ? (currentTimestamp.getTime() - dateLastProduction.getTime()) / 1000 : null;\n\n            const isWorking = (differenceLastProduction !== null && differenceLastProduction <= 299);\n            const isStopped = (differenceLastProduction >= 300 && differenceLastProduction <= 1799);\n            const isTurnedOff = (differenceLastProduction >= 1800) || (differenceLastProduction === null);\n\n            const newState = isWorking ? \"TRABALHANDO\" : isStopped ? \"PARADO\" : isTurnedOff ? \"DESLIGADO\" : null;\n\n            if (newState !== null && oldState !== newState) {\n                roboProperties[key]['status'] = newState;\n\n                messages.push(({\n                    serialNumber: key,\n                    currentStatus: newState\n                }));\n            }\n        }\n    });\n    flow.set('roboProperties', roboProperties);\n\n    messages.forEach(msg => {\n        node.send({ payload: msg});\n\n        return msg;\n    });\n}\nnode.warn(roboProperties);",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3760,
        "y": 2200,
        "wires": [
            [
                "941bb1a42bf2f226"
            ]
        ],
        "icon": "font-awesome/fa-exchange"
    },
    {
        "id": "924ffa927be3291e",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "Get count (PULSOS)",
        "func": "let serialNumber = msg.payload.serialNumber;\nlet roboProperties = flow.get('roboProperties');\n\nif (roboProperties) {\n    if (roboProperties[serialNumber] && roboProperties[serialNumber].unit !== null) {\n        let unit = roboProperties[serialNumber].unit;\n\n        msg.payload = {\n            timestamp: new Date().getTime(),\n            deviceSerialNumber: serialNumber,\n            unit: unit,\n            count: 1\n        }\n        roboProperties[serialNumber].unit = null;\n        flow.set('roboProperties', roboProperties);\n\n        return msg;\n    }\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4060,
        "y": 2160,
        "wires": [
            []
        ],
        "icon": "font-awesome/fa-plus"
    },
    {
        "id": "941bb1a42bf2f226",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "Get changed Status (PULSOS)",
        "func": "let {serialNumber, currentStatus} = msg.payload;\nlet timestamp = new Date().getTime();\n\nif (serialNumber && currentStatus !== null) {\n    msg.payload = {\n        timestamp: timestamp,\n        deviceSerialNumber: serialNumber,\n        status: currentStatus\n    }\n    return msg;\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4090,
        "y": 2200,
        "wires": [
            []
        ],
        "icon": "node-red/status.svg"
    },
    {
        "id": "c6ccc20b2754c605",
        "type": "inject",
        "z": "dae82ca7554ded9f",
        "name": "SWITCH1 ON",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "ABC123",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch1\": {\"Action\": \"ON\"} }",
        "payloadType": "json",
        "x": 2510,
        "y": 2440,
        "wires": [
            [
                "a1140d5796c3c001"
            ]
        ]
    },
    {
        "id": "8335a50d1a71042b",
        "type": "inject",
        "z": "dae82ca7554ded9f",
        "name": "SWITCH1 OFF",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "ABC123",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch1\": {\"Action\": \"OFF\"} }",
        "payloadType": "json",
        "x": 2520,
        "y": 2480,
        "wires": [
            [
                "a1140d5796c3c001"
            ]
        ]
    },
    {
        "id": "a1140d5796c3c001",
        "type": "switch",
        "z": "dae82ca7554ded9f",
        "name": "Machines",
        "property": "payload.serialNumber",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "ABC123",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 2720,
        "y": 2460,
        "wires": [
            [
                "5c45c6648c0b7cfa"
            ]
        ],
        "icon": "font-awesome/fa-desktop"
    },
    {
        "id": "5c45c6648c0b7cfa",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "Prensa object main",
        "func": "let prensaProperties = flow.get('prensaProperties') || {};\nlet serialNumber = msg.payload.serialNumber;\nlet switchKey = Object.keys(msg.payload).find(key => key.startsWith('Switch')) || null;\n\nif (switchKey !== null) {\n    if (!prensaProperties[serialNumber]) {\n            prensaProperties[serialNumber] = {\n                \"switch1\": null,\n                \"startPress\": false,\n                \"dateStartProduction\": null,\n                \"dateLastProduction\": null,\n                \"press\": 0,\n                \"unit\": null,\n                \"status\": null,\n            };\n    }\n}\nflow.set('prensaProperties', prensaProperties);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2910,
        "y": 2460,
        "wires": [
            [
                "9417625ee52f6d4e"
            ]
        ],
        "icon": "font-awesome/fa-save"
    },
    {
        "id": "9417625ee52f6d4e",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "Handle switches",
        "func": "let prensaProperties = flow.get('prensaProperties');\nlet switchKey = Object.keys(msg.payload).find(key => key.startsWith('Switch1'));\nlet actionValue = msg.payload[switchKey]?.Action;\nlet serialNumber = msg.payload.serialNumber;\nlet currentTimestamp = new Date();\n\nif (switchKey === \"Switch1\") {\n    if (actionValue === \"ON\") {\n    prensaProperties[serialNumber].switch1 = \"ON\";\n    prensaProperties[serialNumber].startPress = true;\n    prensaProperties[serialNumber].dateStartProduction = currentTimestamp;\n    }\n    else if (actionValue === \"OFF\" && prensaProperties[serialNumber].startPress) {\n        prensaProperties[serialNumber].switch1 = \"OFF\";\n        prensaProperties[serialNumber].startPress = false;\n        prensaProperties[serialNumber].dateLastProduction = currentTimestamp;\n        prensaProperties[serialNumber].press += 1;\n        prensaProperties[serialNumber].unit = \"Golpes\";\n    }\n}\nflow.set('prensaProperties', prensaProperties)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3140,
        "y": 2460,
        "wires": [
            [
                "d3f0823e753cd736",
                "b1466c264ceef184"
            ]
        ],
        "icon": "node-red/switch.svg"
    },
    {
        "id": "d3f0823e753cd736",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "Update machine status",
        "func": "let prensaProperties = flow.get('prensaProperties');\nlet currentTimestamp = new Date();\nlet messages = [];\n\nif (prensaProperties) {\n    Object.keys(prensaProperties).forEach(key => {\n        if (prensaProperties[key].hasOwnProperty('dateStartProduction') && prensaProperties[key].hasOwnProperty('dateLastProduction')) {\n            let dateStartProduction = prensaProperties[key]['dateStartProduction'];\n            let dateLastProduction = prensaProperties[key]['dateLastProduction'];\n            let oldState = prensaProperties[key]['status'];\n\n            let differenceLastAction = dateStartProduction ? (currentTimestamp.getTime() - dateStartProduction.getTime()) / 1000 : null;\n            let differenceLastProduction = dateLastProduction ? (currentTimestamp.getTime() - dateLastProduction.getTime()) / 1000 : null\n\n            const isWorking = (dateStartProduction !== null && differenceLastAction <= 299) ||\n            (differenceLastProduction <= 299 && differenceLastProduction !== null);\n\n            const isStopped = (differenceLastAction >= 300 && differenceLastProduction >= 300 && differenceLastProduction <= 1799) ||\n            (differenceLastAction >= 300 && differenceLastAction <= 1799 && differenceLastProduction === null);\n\n            const isTurnedOff = (dateStartProduction >= 1800 && dateLastProduction === null) ||\n            (differenceLastAction >= 1800 && differenceLastProduction >= 1800 ) || differenceLastAction === null;\n\n            const newState = isWorking ? \"TRABALHANDO\" : isStopped ? \"PARADO\" : isTurnedOff ? \"DESLIGADO\" : null;\n\n            if (newState !== null && oldState !== newState) {\n                prensaProperties[key]['status'] = newState;\n\n                messages.push(({\n                    serialNumber: key, \n                    currentStatus: newState\n                }));\n            }\n        }\n    });\n    flow.set('prensaProperties', prensaProperties);\n\n    messages.forEach(msg => {\n        node.send({payload: msg });\n\n        return msg;\n    });\n}\nnode.warn(prensaProperties);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3400,
        "y": 2480,
        "wires": [
            [
                "b7c655253b8eda15"
            ]
        ],
        "icon": "font-awesome/fa-exchange"
    },
    {
        "id": "47846f0a28fc78df",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "Get count (Golpes)",
        "func": "let prensaProperties = flow.get('prensaProperties');\nlet serialNumber = msg.payload.serialNumber;\n\nif (prensaProperties) {\n    if (prensaProperties[serialNumber] && prensaProperties[serialNumber].unit !== null) {\n        let unit = prensaProperties[serialNumber].unit;\n\n        msg.payload = {\n            timestamp: new Date().getTime(),\n            deviceSerialNumber: serialNumber,\n            unit: unit,\n            count: 1,\n        }\n        prensaProperties[serialNumber].unit = null;\n        flow.set('prensaProperties', prensaProperties);\n        return msg;\n    }\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3650,
        "y": 2440,
        "wires": [
            []
        ],
        "icon": "font-awesome/fa-plus"
    },
    {
        "id": "b7c655253b8eda15",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "Get changed Status (PULSOS)",
        "func": "let {serialNumber, currentStatus} = msg.payload;\nlet timestamp = new Date().getTime();\n\nif (serialNumber && currentStatus !== null) {\n    msg.payload = {\n        timestamp: timestamp,\n        deviceSerialNumber: serialNumber,\n        status: currentStatus\n    }\n    return msg;\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3690,
        "y": 2480,
        "wires": [
            []
        ],
        "icon": "node-red/status.svg"
    },
    {
        "id": "3ce08d9b90a885fa",
        "type": "inject",
        "z": "dae82ca7554ded9f",
        "name": "SWITCH1 ON",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "ABC123",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch1\": {\"Action\": \"ON\"} }",
        "payloadType": "json",
        "x": 2510,
        "y": 2560,
        "wires": [
            [
                "69cbff0feed8a5cf"
            ]
        ]
    },
    {
        "id": "5ba6d719cdb5dd06",
        "type": "inject",
        "z": "dae82ca7554ded9f",
        "name": "SWITCH1 OFF",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "ABC123",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch1\": {\"Action\": \"OFF\"} }",
        "payloadType": "json",
        "x": 2520,
        "y": 2600,
        "wires": [
            [
                "69cbff0feed8a5cf"
            ]
        ]
    },
    {
        "id": "d870acb878eb6093",
        "type": "inject",
        "z": "dae82ca7554ded9f",
        "name": "SWITCH2 ON",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "ABC123",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch2\": {\"Action\": \"ON\"} }",
        "payloadType": "json",
        "x": 2510,
        "y": 2660,
        "wires": [
            [
                "69cbff0feed8a5cf"
            ]
        ]
    },
    {
        "id": "7e0d17101e3b57dc",
        "type": "inject",
        "z": "dae82ca7554ded9f",
        "name": "SWITCH2 OFF",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "ABC123",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch2\": {\"Action\": \"OFF\"} }",
        "payloadType": "json",
        "x": 2520,
        "y": 2700,
        "wires": [
            [
                "69cbff0feed8a5cf"
            ]
        ]
    },
    {
        "id": "c483e7652c9304b7",
        "type": "inject",
        "z": "dae82ca7554ded9f",
        "name": "SWITCH3 ON",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "ABC123",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch3\": {\"Action\": \"ON\"} }",
        "payloadType": "json",
        "x": 2510,
        "y": 2760,
        "wires": [
            [
                "69cbff0feed8a5cf"
            ]
        ]
    },
    {
        "id": "362af04596796a01",
        "type": "inject",
        "z": "dae82ca7554ded9f",
        "name": "SWITCH3 OFF",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "ABC123",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch3\": {\"Action\": \"OFF\"} }",
        "payloadType": "json",
        "x": 2520,
        "y": 2800,
        "wires": [
            [
                "69cbff0feed8a5cf"
            ]
        ]
    },
    {
        "id": "69cbff0feed8a5cf",
        "type": "switch",
        "z": "dae82ca7554ded9f",
        "name": "Machines",
        "property": "payload.serialNumber",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "ABC123",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 2740,
        "y": 2660,
        "wires": [
            [
                "9b2ff79fcc3077d2"
            ]
        ],
        "icon": "font-awesome/fa-desktop"
    },
    {
        "id": "9b2ff79fcc3077d2",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "Prensa600T object main",
        "func": "let prensa600Properties = flow.get('prensa600Properties') || {};\nlet serialNumber = msg.payload.serialNumber;\nlet swichKey = Object.keys(msg.payload).find(key => key.startsWith('Switch')) || null;\n\nif (swichKey !== null) {\n    if (!prensa600Properties[serialNumber]) {\n        prensa600Properties[serialNumber] = {\n            \"pressedManual\": false,\n            \"quickDescent\": false,\n            \"pressedBelow\": false,\n            \"noManual\": false,\n            \"noQuickDescent\": false,\n            \"noPressed\": false,\n            \"startPress\": false,\n            \"press\": 0,\n            \"dateStartProduction\": null,\n            \"dateLastProduction\": null,\n            \"unit\": null,\n            \"status\": null,\n        };\n    }\n}\nflow.set('prensa600Properties', prensa600Properties);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2950,
        "y": 2660,
        "wires": [
            [
                "7dfa759d1dc95bc4"
            ]
        ],
        "icon": "font-awesome/fa-save"
    },
    {
        "id": "7dfa759d1dc95bc4",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "Handle switches",
        "func": "let handleSwitch = function (payload, context, machineProperties, switchName, startName, finishName) {\n    let switchKey = Object.keys(payload).find(key => key.startsWith(switchName));\n    let switchState = context.get(switchName) || null;\n    let actionValue = payload[switchKey] ? payload[switchKey].Action : null;\n    let startState = machineProperties[startName] || false;\n    let finishState = machineProperties[finishName] || false;\n\n    switchState = actionValue || switchState;\n\n    if (switchState === \"ON\") {\n        startState = true;\n        finishState = false;\n    \n    } else if (switchState === \"OFF\" && startState) {\n        finishState = true;\n        startState = false;\n    }\n    machineProperties[startName] = startState;\n    machineProperties[finishName] = finishState;\n    return {\n        switchState: switchState,\n        startState: startState,\n        finishState: finishState,\n    };\n}\nlet payload = msg.payload;\nlet serialNumber = msg.payload.serialNumber;\nlet prensa600Properties = flow.get('prensa600Properties') || {};\nlet machineProperties = prensa600Properties[serialNumber] || {};\n\nlet pressedManual = handleSwitch(payload, context, machineProperties, 'Switch1', 'pressedManual', 'noManual');\nlet quickDescent = handleSwitch(payload, context, machineProperties, 'Switch2' ,'quickDescent', 'noQuickDescent');\nlet pressedBelow = handleSwitch(payload, context, machineProperties, 'Switch3', 'pressedBelow', 'noPressed');\n\nflow.set('prensa600Properties', prensa600Properties);\nprensa600Properties[serialNumber].pressedManual = pressedManual.startState;\nprensa600Properties[serialNumber].noManual = pressedManual.finishState;\nprensa600Properties[serialNumber].quickDescent = quickDescent.startState;\nprensa600Properties[serialNumber].noQuickDescent = quickDescent.finishState;\nprensa600Properties[serialNumber].pressedBelow = pressedBelow.startState;\nprensa600Properties[serialNumber].noPressed = pressedBelow.finishState;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3180,
        "y": 2660,
        "wires": [
            [
                "33749ebfa0ff5cc2"
            ]
        ],
        "icon": "node-red/switch.svg"
    },
    {
        "id": "33749ebfa0ff5cc2",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "Machine conditions",
        "func": "let prensa600Properties = flow.get('prensa600Properties');\nlet serialNumber = msg.payload.serialNumber;\nlet currentTimestamp = new Date();\n\nif (prensa600Properties[serialNumber].pressedManual && prensa600Properties[serialNumber].quickDescent && !prensa600Properties[serialNumber].startPress) {\n    prensa600Properties[serialNumber].startPress = true;\n    prensa600Properties[serialNumber].dateStartProduction = currentTimestamp;\n}\nelse if(prensa600Properties[serialNumber].pressedManual && prensa600Properties[serialNumber].quickDescent && \nprensa600Properties[serialNumber].pressedBelow && prensa600Properties[serialNumber].startPress) {\n    prensa600Properties[serialNumber].startPress = false;\n    prensa600Properties[serialNumber].dateLastProduction = currentTimestamp;\n    prensa600Properties[serialNumber].unit = \"Golpes\";\n    prensa600Properties[serialNumber].press += 1;\n}\nflow.set('prensa600Properties',prensa600Properties);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3390,
        "y": 2660,
        "wires": [
            [
                "2be85693c1f0ad07",
                "35d9993d0c50a4e8"
            ]
        ],
        "icon": "font-awesome/fa-bars"
    },
    {
        "id": "2be85693c1f0ad07",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "Update machine status",
        "func": "let prensa600Properties = flow.get('prensa600Properties');\nlet currentTimestamp =  new Date();\nlet messages = [];\n\nif (prensa600Properties) {\n    Object.keys(prensa600Properties).forEach(key => {\n        if (prensa600Properties[key].hasOwnProperty('dateStartProduction') && prensa600Properties[key].hasOwnProperty('dateLastProduction')) {\n            let dateStartProduction = prensa600Properties[key]['dateStartProduction'];\n            let dateLastProduction = prensa600Properties[key]['dateLastProduction'];\n            let oldState = prensa600Properties[key]['status'];\n\n            let differenceLastTimeAction = dateStartProduction ? (currentTimestamp.getTime() - dateStartProduction.getTime()) / 1000 : null;\n            let differenceLastProduction = dateLastProduction ? (currentTimestamp.getTime() - dateLastProduction.getTime()) / 1000 : null;\n        \n            const isWorking = (differenceLastTimeAction !== null && differenceLastTimeAction <= 299 ) || \n            (differenceLastProduction <= 299 && differenceLastProduction !== null);\n\n            const isStopped = (differenceLastTimeAction >= 300 && differenceLastProduction >= 300 && differenceLastProduction <= 1799) ||\n            (differenceLastTimeAction >= 300 && differenceLastTimeAction <= 1799 && differenceLastProduction === null);\n\n            const isTurnedOff = (differenceLastTimeAction >= 1800 && differenceLastProduction === null) ||\n            (differenceLastTimeAction >= 1800 && differenceLastProduction >= 1800) || differenceLastTimeAction === null;\n\n            const newState = isWorking ? \"TRABALHANDO\" : isStopped ? \"PARADO\" : isTurnedOff ? \"DESLIGADO\" : null;\n\n            if (newState !== null && oldState !== newState) {\n                prensa600Properties[key]['status'] = newState;\n\n                messages.push(({\n                    serialNumber: key,\n                    currentStatus: newState\n                }));\n            }\n        }\n    });\n    flow.set('prensa600Properties', prensa600Properties);\n\n    messages.forEach(msg => {\n        node.send({ payload: msg});\n\n        return msg;\n    });\n}\nnode.warn(prensa600Properties);",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3640,
        "y": 2680,
        "wires": [
            [
                "643e0ad3966f2ca1"
            ]
        ],
        "icon": "font-awesome/fa-exchange"
    },
    {
        "id": "347dc620eb05d3e5",
        "type": "inject",
        "z": "dae82ca7554ded9f",
        "name": "SWITCH1 ON",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "ABC123",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch1\": {\"Action\": \"ON\"} }",
        "payloadType": "json",
        "x": 2510,
        "y": 2900,
        "wires": [
            [
                "8a3c42cb66cc153c"
            ]
        ]
    },
    {
        "id": "2f3839ae52f0bd70",
        "type": "inject",
        "z": "dae82ca7554ded9f",
        "name": "SWITCH1 OFF",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "ABC123",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch1\": {\"Action\": \"OFF\"} }",
        "payloadType": "json",
        "x": 2520,
        "y": 2940,
        "wires": [
            [
                "8a3c42cb66cc153c"
            ]
        ]
    },
    {
        "id": "6a574fbce3fa2e2f",
        "type": "inject",
        "z": "dae82ca7554ded9f",
        "name": "SWITCH2 ON",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "ABC123",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch2\": {\"Action\": \"ON\"} }",
        "payloadType": "json",
        "x": 2510,
        "y": 3000,
        "wires": [
            [
                "8a3c42cb66cc153c"
            ]
        ]
    },
    {
        "id": "57f02f5ffa565f36",
        "type": "inject",
        "z": "dae82ca7554ded9f",
        "name": "SWITCH2 OFF",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "ABC123",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch2\": {\"Action\": \"OFF\"} }",
        "payloadType": "json",
        "x": 2520,
        "y": 3040,
        "wires": [
            [
                "8a3c42cb66cc153c"
            ]
        ]
    },
    {
        "id": "24239b3793b7b6ec",
        "type": "inject",
        "z": "dae82ca7554ded9f",
        "name": "SWITCH3 ON",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "ABC123",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch3\": {\"Action\": \"ON\"} }",
        "payloadType": "json",
        "x": 2510,
        "y": 3200,
        "wires": [
            [
                "8a3c42cb66cc153c"
            ]
        ]
    },
    {
        "id": "8d548065b6821052",
        "type": "inject",
        "z": "dae82ca7554ded9f",
        "name": "SWITCH3 OFF",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "ABC123",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch3\": {\"Action\": \"OFF\"} }",
        "payloadType": "json",
        "x": 2520,
        "y": 3240,
        "wires": [
            [
                "8a3c42cb66cc153c"
            ]
        ]
    },
    {
        "id": "fdd5f435328851a7",
        "type": "inject",
        "z": "dae82ca7554ded9f",
        "name": "STATUS8",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "ABC123",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"StatusSNS\": {  \"Switch2\": \"ON\" } }",
        "payloadType": "json",
        "x": 2500,
        "y": 3080,
        "wires": [
            [
                "8a3c42cb66cc153c"
            ]
        ]
    },
    {
        "id": "b3919b244dc0f3b9",
        "type": "inject",
        "z": "dae82ca7554ded9f",
        "name": "STATUS8",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "ABC123",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"StatusSNS\": {  \"Switch2\": \"OFF\" } }",
        "payloadType": "json",
        "x": 2500,
        "y": 3120,
        "wires": [
            [
                "8a3c42cb66cc153c"
            ]
        ]
    },
    {
        "id": "8a3c42cb66cc153c",
        "type": "switch",
        "z": "dae82ca7554ded9f",
        "name": "Machines",
        "property": "payload.serialNumber",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "ABC123",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 2720,
        "y": 3060,
        "wires": [
            [
                "27edc96b3f9037b1"
            ]
        ],
        "icon": "font-awesome/fa-desktop"
    },
    {
        "id": "27edc96b3f9037b1",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "g": "26bc699e753da8b8",
        "name": "Bystronic object main",
        "func": "let bystronicProperties = flow.get('bystronicProperties') || {};\nlet serialNumber = msg.payload.serialNumber;\nlet getSwitch = Object.keys(msg.payload).find(key => key.startsWith('Switch')) || null;\nlet getStatusSNS = Object.keys(msg.payload).find(key => key.startsWith('StatusSNS')) || null;\n\nif (getSwitch !== null || getStatusSNS !== null) {\n    if (!bystronicProperties[serialNumber]) {\n        bystronicProperties[serialNumber] = {\n            \"startLaser\": false,\n            \"finishedLaser\": false,\n            \"readyMachine\": false,\n            \"noReadyMachine\": false,\n            \"openDoor\": false,\n            \"closedDoor\": false,\n            \"existsCutPlan\": false,\n            \"dateStartProduction\": null,\n            \"dateLastProduction\": null,\n            \"plateSteel\": 0,\n            \"unit\": null,\n            \"status\": null,\n            \"timeDurationLastPlanCut\": 0,\n        }\n    }\n}\nflow.set('bystronicProperties', bystronicProperties);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2940,
        "y": 3060,
        "wires": [
            []
        ],
        "icon": "font-awesome/fa-save"
    },
    {
        "id": "affb936954c5199a",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "g": "26bc699e753da8b8",
        "name": "Handle switches",
        "func": "let handleSwitch = function (payload, context, machineProperties, statusSNSName, switchName, startName, finishName) {\n    let switchKey = Object.keys(payload).find(key => key.startsWith(switchName));\n    let switchState = context.get(switchName) || null;\n    let actionValue = payload[switchKey] ? payload[switchKey].Action : null;\n    let statusSNS = payload[statusSNSName] && payload[statusSNSName][switchName];\n    let startState = machineProperties[startName] || false;\n    let finishState = machineProperties[finishName] || false;\n\n    switchState = actionValue || statusSNS || switchState;\n\n    if (switchState === \"ON\") {\n        startState = true;\n        finishState = false;\n\n    } else if (switchState === \"OFF\" && startState === true) {\n        startState = false;\n        finishState = true;\n    }\n    machineProperties[startName] = startState;\n    machineProperties[finishName] = finishState;\n    return {\n        switchState: switchState,\n        startState: startState,\n        finishState: finishState,\n    };\n}\nlet payload = msg.payload;\nlet serialNumber = msg.payload.serialNumber;\nlet bystronicProperties = flow.get('bystronicProperties') || {};\nlet machineProperties = bystronicProperties[serialNumber] || {};\n\nlet laser = handleSwitch(payload, context, machineProperties, 'StatusSNS', 'Switch1', 'startLaser', 'finishedLaser');\nlet verifyMachine = handleSwitch(payload, context, machineProperties, 'StatusSNS', 'Switch2', 'readyMachine', 'noReadyMachine');\nlet verifyDoor = handleSwitch(payload, context, machineProperties, 'StatusSNS', 'Switch3', 'openDoor', 'closedDoor');\n\nflow.set('bystronicProperties', bystronicProperties);\nbystronicProperties[serialNumber].startLaser = laser.startState;\nbystronicProperties[serialNumber].finishedLaser = laser.finishState;\nbystronicProperties[serialNumber].readyMachine = verifyMachine.startState;\nbystronicProperties[serialNumber].noReadyMachine = verifyMachine.finishState;\nbystronicProperties[serialNumber].openDoor = verifyDoor.startState;\nbystronicProperties[serialNumber].closedDoor = verifyDoor.finishState;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3160,
        "y": 3060,
        "wires": [
            [
                "122d95c6460ea164"
            ]
        ],
        "icon": "font-awesome/fa-clone"
    },
    {
        "id": "122d95c6460ea164",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "g": "26bc699e753da8b8",
        "name": "Machine conditions",
        "func": "let bystronicProperties = flow.get('bystronicProperties') || {};\nlet serialNumber = msg.payload.serialNumber;\nlet currentTimestamp = new Date();\n\nif (bystronicProperties && bystronicProperties[serialNumber]) {\n    if (bystronicProperties[serialNumber].startLaser && bystronicProperties[serialNumber].readyMachine && \n        !bystronicProperties[serialNumber].openDoor && !bystronicProperties[serialNumber].existsCutPlan) {\n\n        bystronicProperties[serialNumber].existsCutPlan = true;\n        bystronicProperties[serialNumber].dateStartProduction = currentTimestamp;\n    }\n    else if (bystronicProperties[serialNumber].finishedLaser && bystronicProperties[serialNumber].noReadyMachine &&\n        bystronicProperties[serialNumber].openDoor && bystronicProperties[serialNumber].existsCutPlan) {\n\n        bystronicProperties[serialNumber].existsCutPlan = false;\n        bystronicProperties[serialNumber].plateSteel += 1;\n        bystronicProperties[serialNumber].timeDurationLastPlanCut = \n            (currentTimestamp.getTime() - bystronicProperties[serialNumber].dateStartProduction.getTime()) / 1000;\n        bystronicProperties[serialNumber].dateStartProduction = null;\n        bystronicProperties[serialNumber].dateLastProduction = currentTimestamp;\n        bystronicProperties[serialNumber].unit = \"Chapas\";\n    }\n}\nflow.set('bystronicProperties', bystronicProperties);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3370,
        "y": 3060,
        "wires": [
            [
                "30b18d0b8235bccc",
                "7c05f735d5fb1fe1"
            ]
        ],
        "icon": "font-awesome/fa-bars"
    },
    {
        "id": "30b18d0b8235bccc",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "g": "26bc699e753da8b8",
        "name": "Update status machine",
        "func": "let bystronicProperties = flow.get('bystronicProperties') || {};\nlet currentTimestamp = new Date();\nlet messages = [];\n\nif (bystronicProperties) {\n    Object.keys(bystronicProperties).forEach(key => {\n        if (bystronicProperties[key].hasOwnProperty('dateStartProduction') && bystronicProperties[key].hasOwnProperty('dateLastProduction')) {\n            let dateStartProduction = bystronicProperties[key]['dateStartProduction'];\n            let dateLastProduction = bystronicProperties[key]['dateLastProduction'];\n            let oldState = bystronicProperties[key]['status'];\n\n            let timeCurrentProduction = dateStartProduction ? (currentTimestamp.getTime() - dateStartProduction.getTime()) / 1000 : null;\n            let timeLastProduction = dateLastProduction ? (currentTimestamp.getTime() - dateLastProduction.getTime()) / 1000 : null;\n\n            const isWorking = (dateStartProduction !== null && timeCurrentProduction <= 10799) ||\n            (dateStartProduction === null && timeLastProduction <= 299 && timeLastProduction !== null);\n\n            const isStopped = (dateStartProduction === null && timeLastProduction >= 300 && timeLastProduction <= 1799);\n        \n            const isTurnedOff = ((dateStartProduction === null && dateLastProduction === null) ||\n            (dateStartProduction === null && timeLastProduction >= 1800) || (timeCurrentProduction >= 10800));\n\n            const newState = isWorking ? \"TRABALHANDO\" : isStopped ? \"PARADO\" : isTurnedOff ? \"DESLIGADO\" : null;\n\n            if (newState !== null && oldState !== newState) {\n                bystronicProperties[key]['status'] = newState;\n\n                messages.push(({\n                    serialNumber: key,\n                    currentStatus: newState\n                }));\n            }\n        }\n    });\nflow.set('bystronicProperties', bystronicProperties);\n\nmessages.forEach(msg => {\n    node.send(({ payload: msg}));\n\n    return msg;\n});\n}\nnode.warn(bystronicProperties);",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3620,
        "y": 3080,
        "wires": [
            [
                "a40f583b08908b42"
            ]
        ],
        "icon": "font-awesome/fa-exchange"
    },
    {
        "id": "bca3fdcf3ab3b559",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "g": "26bc699e753da8b8",
        "name": "Get count (Chapas)",
        "func": "let serialNumber = msg.payload.serialNumber;\nlet bystronicProperties = flow.get('bystronicProperties') || {};\n\nif (bystronicProperties) {\n    if (bystronicProperties[serialNumber] && bystronicProperties[serialNumber]. unit) {\n        let unit = bystronicProperties[serialNumber].unit;\n\n        msg.payload = {\n            timestamp: new Date().getTime(),\n            deviceSerialNumber: serialNumber,\n            unit: unit, \n            count: 1\n        }\n        bystronicProperties[serialNumber].unit = null;\n        flow.set('bystronicProperties', bystronicProperties);\n        return msg;\n    }\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3850,
        "y": 3040,
        "wires": [
            []
        ],
        "icon": "font-awesome/fa-plus"
    },
    {
        "id": "a40f583b08908b42",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "g": "26bc699e753da8b8",
        "name": "Get changed status",
        "func": "let {serialNumber, currentStatus } = msg.payload;\nlet timestamp = new Date().getTime();\n\nif (serialNumber && currentStatus !== null) {\n    msg.payload = {\n        timestamp: timestamp,\n        deviceSerialNumber: serialNumber,\n        status: currentStatus\n    }\n    return msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3850,
        "y": 3080,
        "wires": [
            []
        ],
        "icon": "node-red/status.svg"
    },
    {
        "id": "643e0ad3966f2ca1",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "Get changed status (Golpes)",
        "func": "let { serialNumber, currentStatus } = msg.payload;\nlet timestamp = new Date().getTime();\n\nif (serialNumber && currentStatus !== null) {\n    msg.payload = {\n        timestamp: timestamp,\n        deviceSerialNumber: serialNumber,\n        status: currentStatus\n    }\n    return msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3900,
        "y": 2680,
        "wires": [
            []
        ],
        "icon": "node-red/status.svg"
    },
    {
        "id": "8e1dc091d734185d",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "Get count (Golpes)",
        "func": "let serialNumber = msg.payload.serialNumber;\nlet prensa600Properties = flow.get('prensa600Properties');\n\nif (prensa600Properties) {\n    if (prensa600Properties[serialNumber] && prensa600Properties[serialNumber].unit !== null) {\n        let unit = prensa600Properties[serialNumber].unit;\n\n        msg.payload = {\n            timestamp: new Date().getTime(),\n            deviceSerialNumber: serialNumber,\n            unit: unit,\n            count: 1\n        };\n        prensa600Properties[serialNumber].unit = null;\n        flow.set('prensa600Properties', prensa600Properties);\n        return msg;\n    }\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3870,
        "y": 2640,
        "wires": [
            []
        ],
        "icon": "font-awesome/fa-plus"
    },
    {
        "id": "e145dadbffb73316",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "Puncio object main",
        "func": "let puncioProperties = flow.get('puncioProperties') || {};\nlet serialNumber = msg.payload.serialNumber;\nlet getSwitch = Object.keys(msg.payload).find(key => key.startsWith('Switch'));\nlet getStatusSNS = Object.keys(msg.payload).find(key => key.startsWith('StatusSNS'));\n\nif (getSwitch !== null && getStatusSNS !== null) {\n    if (!puncioProperties[serialNumber]) {\n        puncioProperties[serialNumber] = {\n            \"readyMachine\": false,\n            \"startCycle\": false,\n            \"interruptedCycle\": false,\n            \"existsCycle\": false,\n            \"dateStartProduction\": null,\n            \"dateLastProduction\": null,\n            \"cycleCount\": 0,\n            \"interruptedCount\": 0,\n            \"unit\": null,\n            \"status\": null\n        }\n    }\n    flow.set('puncioProperties', puncioProperties);\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3190,
        "y": 3520,
        "wires": [
            [
                "f59e19c4ba9c66b7"
            ]
        ],
        "icon": "font-awesome/fa-save"
    },
    {
        "id": "7687f6c32352d8e8",
        "type": "inject",
        "z": "dae82ca7554ded9f",
        "name": "SWITCH1 ON",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "ABC123",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch1\": {\"Action\": \"ON\"} }",
        "payloadType": "json",
        "x": 2510,
        "y": 3340,
        "wires": [
            [
                "3a6e573186aa942a"
            ]
        ]
    },
    {
        "id": "bae9c3a8d4f67c85",
        "type": "inject",
        "z": "dae82ca7554ded9f",
        "name": "SWITCH1 OFF",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "ABC123",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch1\": {\"Action\": \"OFF\"} }",
        "payloadType": "json",
        "x": 2520,
        "y": 3380,
        "wires": [
            [
                "3a6e573186aa942a"
            ]
        ]
    },
    {
        "id": "78048931ae6d0c54",
        "type": "inject",
        "z": "dae82ca7554ded9f",
        "name": "SWITCH2 ON",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "ABC123",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch2\": {\"Action\": \"ON\"} }",
        "payloadType": "json",
        "x": 2510,
        "y": 3480,
        "wires": [
            [
                "3a6e573186aa942a"
            ]
        ]
    },
    {
        "id": "85ceb789d2ddb160",
        "type": "inject",
        "z": "dae82ca7554ded9f",
        "name": "SWITCH2 OFF",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "ABC123",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch2\": {\"Action\": \"OFF\"} }",
        "payloadType": "json",
        "x": 2520,
        "y": 3520,
        "wires": [
            [
                "3a6e573186aa942a"
            ]
        ]
    },
    {
        "id": "603af14abdd5ade4",
        "type": "inject",
        "z": "dae82ca7554ded9f",
        "name": "SWITCH3 ON",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "ABC123",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch3\": {\"Action\": \"ON\"} }",
        "payloadType": "json",
        "x": 2510,
        "y": 3680,
        "wires": [
            [
                "3a6e573186aa942a"
            ]
        ]
    },
    {
        "id": "9b8fcc0c1fa9eff3",
        "type": "inject",
        "z": "dae82ca7554ded9f",
        "name": "SWITCH3 OFF",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "ABC123",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch3\": {\"Action\": \"OFF\"} }",
        "payloadType": "json",
        "x": 2520,
        "y": 3720,
        "wires": [
            [
                "3a6e573186aa942a"
            ]
        ]
    },
    {
        "id": "3a6e573186aa942a",
        "type": "switch",
        "z": "dae82ca7554ded9f",
        "name": "Machines",
        "property": "payload.serialNumber",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "ABC123",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 2780,
        "y": 3520,
        "wires": [
            [
                "772dde514355f9aa"
            ]
        ],
        "icon": "font-awesome/fa-desktop"
    },
    {
        "id": "772dde514355f9aa",
        "type": "change",
        "z": "dae82ca7554ded9f",
        "name": "delete time",
        "rules": [
            {
                "t": "delete",
                "p": "payload.timestamp",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.StatusSNS.Time",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.StatusSNS.Switch1",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.StatusSNS.Switch3",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.StatusSNS.Switch4",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2970,
        "y": 3520,
        "wires": [
            [
                "e145dadbffb73316"
            ]
        ],
        "icon": "font-awesome/fa-times-circle"
    },
    {
        "id": "595bd29115bbc292",
        "type": "inject",
        "z": "dae82ca7554ded9f",
        "name": "STATUS8",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "ABC123",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"StatusSNS\": {  \"Switch2\": \"ON\" } }",
        "payloadType": "json",
        "x": 2500,
        "y": 3560,
        "wires": [
            [
                "3a6e573186aa942a"
            ]
        ]
    },
    {
        "id": "9bed66e80aeda8ab",
        "type": "inject",
        "z": "dae82ca7554ded9f",
        "name": "STATUS8",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "ABC123",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"StatusSNS\": {  \"Switch2\": \"OFF\" } }",
        "payloadType": "json",
        "x": 2500,
        "y": 3600,
        "wires": [
            [
                "3a6e573186aa942a"
            ]
        ]
    },
    {
        "id": "8745550d488ff664",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "Handle switches",
        "func": "let handleSwitch = function(payload, context, machineProperties, switchName, statusSNSName, verifyName ) {\n    let switchKey = Object.keys(payload).find(key => key.startsWith(switchName));\n    let switchState = context.get(switchName) || null;\n    let actionValue = payload[switchKey] ? payload[switchKey].Action : null;\n    let statusSNS = payload[statusSNSName] && payload[statusSNSName][switchName];\n    let verifyState = machineProperties[verifyName] || false;\n\n    switchState = actionValue || statusSNS || switchState;\n\n    if (switchState === \"ON\") {\n        verifyState = true;\n    \n    } else if (switchState === \"OFF\") {\n        verifyState = false;\n    }\n    machineProperties[verifyName] = verifyState;\n    return {\n        verifyState: verifyState\n    };\n}\nlet payload = msg.payload;\nlet serialNumber = msg.payload.serialNumber;\nlet puncioProperties = flow.get('puncioProperties') || {};\nlet machineProperties = puncioProperties[serialNumber] || {};\n\nlet startCycle = handleSwitch(payload, context, machineProperties, 'Switch1', 'StatusSNS', 'startCycle');\nlet readyMachine = handleSwitch(payload, context, machineProperties, 'Switch2', 'StatusSNS', 'readyMachine');\nlet interruptedCycle = handleSwitch(payload, context, machineProperties, 'Switch3', 'StatusSNS', 'interruptedCycle');\n\nflow.set('puncioProperties', puncioProperties);\npuncioProperties[serialNumber].startCycle = startCycle.verifyState;\npuncioProperties[serialNumber].readyMachine = readyMachine.verifyState;\npuncioProperties[serialNumber].interruptedCycle = interruptedCycle.verifyState;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3400,
        "y": 3480,
        "wires": [
            []
        ],
        "icon": "font-awesome/fa-clone"
    },
    {
        "id": "cdfa8c0e1dcfb16a",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "Machine conditions",
        "func": "let puncioProperties = flow.get('puncioProperties');\nlet serialNumber = msg.payload.serialNumber;\nlet currentTimestamp = new Date();\n\nif (puncioProperties[serialNumber].readyMachine && puncioProperties[serialNumber].startCycle \n&& !puncioProperties[serialNumber].existsCycle) {\n    \n    puncioProperties[serialNumber].existsCycle = true;\n    puncioProperties[serialNumber].dateStartProduction = currentTimestamp;\n}\nelse if (puncioProperties[serialNumber].readyMachine && !puncioProperties[serialNumber].startCycle && \n!puncioProperties[serialNumber].interruptedCycle && puncioProperties[serialNumber].existsCycle) {\n\n    puncioProperties[serialNumber].existsCycle = false;\n    puncioProperties[serialNumber].dateLastProduction = currentTimestamp;\n    puncioProperties[serialNumber].dateStartProduction = null;\n    puncioProperties[serialNumber].cycleCount += 1;\n    puncioProperties[serialNumber].unit = \"Ciclos\";\n}\n\nif (puncioProperties[serialNumber].readyMachine && puncioProperties[serialNumber].interruptedCycle &&\n!puncioProperties[serialNumber].startCycle) {\n    puncioProperties[serialNumber].interruptedCount += 1;\n    puncioProperties[serialNumber].unit = \"Interrup√ß√µes\";\n}\nflow.set('puncioProperties', puncioProperties);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3630,
        "y": 3520,
        "wires": [
            [
                "305443ed24a4de14",
                "2298dc7c5a25dd5e"
            ]
        ],
        "icon": "font-awesome/fa-bars"
    },
    {
        "id": "305443ed24a4de14",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "Update status machine",
        "func": "let puncioProperties = flow.get('puncioProperties') || {};\nlet currentTimestamp = new Date();\nlet messages = [];\n\nif (puncioProperties) {\n    Object.keys(puncioProperties).forEach(key => {\n        if (puncioProperties[key].hasOwnProperty('dateStartProduction') && puncioProperties[key].hasOwnProperty('dateLastProduction')) {\n\n            let dateStartProduction = puncioProperties[key]['dateStartProduction'];\n            let dateLastProduction = puncioProperties[key]['dateLastProduction'];\n            let oldState = puncioProperties[key]['status'];\n\n            let timeCurrentProduction = dateStartProduction ? (currentTimestamp.getTime() - dateStartProduction.getTime()) / 1000 : null;\n            let timeLastProduction = dateLastProduction ? (currentTimestamp.getTime() - dateLastProduction.getTime()) / 1000 : null;\n\n            const isWorking = (dateStartProduction !== null || (timeLastProduction <= 299 && timeLastProduction !== null) );\n\n            const isStopped = (dateStartProduction === null && timeLastProduction >= 300 && timeLastProduction <= 1799);\n\n            const isTurnedOff = (dateStartProduction === null && timeLastProduction >= 1800) \n            || (dateStartProduction === null && dateLastProduction === null);\n\n            const newState = isWorking ? \"TRABALHANDO\" : isStopped ? \"PARADO\" : isTurnedOff ? \"DESLIGADO\" : null;\n\n            if (newState !== null && oldState !== newState) {\n                    puncioProperties[key]['status'] = newState;\n\n                    messages.push(({\n                        serialNumber: key,\n                        currentStatus: newState\n                    }));            \n            }  \n        }\n    });\nflow.set('puncioProperties', puncioProperties);\n\nmessages.forEach(msg => {\n    node.send(({ payload: msg}));\n\n    return msg;\n});\n}\nnode.warn(puncioProperties);",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3880,
        "y": 3540,
        "wires": [
            [
                "0f1c9368e0c1bf27"
            ]
        ],
        "icon": "font-awesome/fa-exchange"
    },
    {
        "id": "df22aba88215e1e5",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "Get count (Puncio)",
        "func": "let puncioProperties = flow.get('puncioProperties') || {};\nlet serialNumber = msg.payload.serialNumber;\n\nif (puncioProperties) {\n    if (puncioProperties[serialNumber] && puncioProperties[serialNumber].unit !== null) {\n        let unit = puncioProperties[serialNumber].unit;\n        \n        msg.payload = {\n            timestamp: new Date().getTime(),\n            deviceSerialNumber: serialNumber,\n            unit: unit,\n            count: 1\n        }\n        puncioProperties[serialNumber].unit = null;\n        flow.set('puncioProperties', puncioProperties);\n        return msg;\n    }\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4130,
        "y": 3500,
        "wires": [
            []
        ],
        "icon": "font-awesome/fa-plus"
    },
    {
        "id": "0f1c9368e0c1bf27",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "Get changed status",
        "func": "let {serialNumber, currentStatus } = msg.payload;\nlet timestamp = new Date().getTime();\n\nif (serialNumber && currentStatus !== null) {\n    msg.payload = {\n        timestamp: timestamp,\n        deviceSerialNumber: serialNumber,\n        status: currentStatus\n    }\n    return msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4130,
        "y": 3540,
        "wires": [
            []
        ],
        "icon": "node-red/status.svg"
    },
    {
        "id": "43ed02060b98a36f",
        "type": "switch",
        "z": "dae82ca7554ded9f",
        "name": "Machines",
        "property": "payload.serialNumber",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "ABC123",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "DEF123",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 4620,
        "y": 220,
        "wires": [
            [
                "195ece254d05c633"
            ],
            [
                "195ece254d05c633"
            ]
        ],
        "icon": "font-awesome/fa-desktop"
    },
    {
        "id": "195ece254d05c633",
        "type": "switch",
        "z": "dae82ca7554ded9f",
        "name": "OPTION SW",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "hask",
                "v": "Switch1",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "Switch3",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 4790,
        "y": 220,
        "wires": [
            [
                "6ced33bea1dc276e"
            ],
            [
                "6ced33bea1dc276e"
            ]
        ]
    },
    {
        "id": "93e0d28948058137",
        "type": "inject",
        "z": "dae82ca7554ded9f",
        "name": "SWITCH1 ON",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "ABC123",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch1\": {\"Action\": \"ON\"} }",
        "payloadType": "json",
        "x": 4410,
        "y": 40,
        "wires": [
            [
                "43ed02060b98a36f"
            ]
        ]
    },
    {
        "id": "777959e0af2ff9a2",
        "type": "inject",
        "z": "dae82ca7554ded9f",
        "name": "SWITCH1 OFF",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "ABC123",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch1\": {\"Action\": \"OFF\"} }",
        "payloadType": "json",
        "x": 4420,
        "y": 80,
        "wires": [
            [
                "43ed02060b98a36f"
            ]
        ]
    },
    {
        "id": "360d9eae6df89757",
        "type": "inject",
        "z": "dae82ca7554ded9f",
        "name": "SWITCH3 ON ",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "ABC123",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch3\": {\"Action\": \"ON\"} }",
        "payloadType": "json",
        "x": 4410,
        "y": 120,
        "wires": [
            [
                "43ed02060b98a36f"
            ]
        ]
    },
    {
        "id": "affe939aa77b5b77",
        "type": "inject",
        "z": "dae82ca7554ded9f",
        "name": "SWITCH3 OFF",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "ABC123",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch3\": {\"Action\": \"OFF\"} }",
        "payloadType": "json",
        "x": 4420,
        "y": 160,
        "wires": [
            [
                "43ed02060b98a36f"
            ]
        ]
    },
    {
        "id": "6ced33bea1dc276e",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "Dobra T25 NOVO",
        "func": "let dobraT25Test = flow.get('dobraT25Test') || {};\nlet serialNumber = msg.payload.serialNumber;\nlet getSwitch = Object.keys(msg.payload).find(key => key.startsWith('Switch')) || null;\n\nif (getSwitch !== null) {\n    if (!dobraT25Test[serialNumber]) {\n        dobraT25Test[serialNumber] = {\n            \"startSlowDescent\": false,\n            \"endSlowDescent\": false,\n            \"startQuickAscent\": false,\n            \"endQuickAscent\": false,\n            \"slowDescentComplete\": false,\n            \"quickAscentComplete\": false,\n            \"startFold\": false,\n            \"dobras\": 0,\n            \"differenceTimeFold\": null,\n            \"timestampLastAction\": null,\n            \"timestampLastProduction\": null,\n            \"unit\": null,\n            \"status\": null\n        };\n    }\n}\nflow.set('dobraT25Test', dobraT25Test);\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 5010,
        "y": 220,
        "wires": [
            [
                "4c64b5f76aaf7576"
            ]
        ],
        "icon": "font-awesome/fa-save"
    },
    {
        "id": "4c64b5f76aaf7576",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "Get switches status",
        "func": "let handleSwitch = function(payload, context, machineProperties, switchName, startName, finishName,verifyName) {\n    let switchKey = Object.keys(payload).find(key => key.startsWith(switchName));\n    let switchState = context.get(switchName) || null;\n    let actionValue = payload[switchKey] ? payload[switchKey].Action : null;\n    let starState = machineProperties[startName] || false;\n    let finishState = machineProperties[finishName] || false;\n    let verifyState = machineProperties[verifyName] || false;\n\n    switchState = actionValue || switchState;\n\n    if (switchState === \"ON\") {\n        starState = true;\n    \n    } else if (switchState === \"OFF\" && starState) {\n        finishState = true;\n    }\n    if (starState && finishState) {\n        verifyState = true;\n        starState = false;\n        finishState = false;\n    }\n    machineProperties[startName] = starState;\n    machineProperties[finishName] = finishState;\n    machineProperties[verifyName] = verifyState\n    return {\n        switchState: switchState,\n        starState: starState,\n        finishState: finishState,\n        verifyState: verifyState\n    };\n}\nlet payload = msg.payload;\nlet serialNumber = msg.payload.serialNumber;\nlet dobraT25Test = flow.get('dobraT25Test');\nlet machineProperties = dobraT25Test[serialNumber] || {};\n\nlet slowDescent = handleSwitch(payload, context, machineProperties, 'Switch1', 'startSlowDescent', 'endSlowDescent', 'slowDescentComplete');\nlet quickAscent = handleSwitch(payload,context,machineProperties,'Switch3', 'startQuickAscent', 'endQuickAscent', 'quickAscentComplete');\n\ndobraT25Test[serialNumber].startSlowDescent = slowDescent.starState;\ndobraT25Test[serialNumber].endSlowDescent = slowDescent.finishState;\ndobraT25Test[serialNumber].slowDescentComplete = slowDescent.verifyState;\ndobraT25Test[serialNumber].startQuickAscent = quickAscent.starState;\ndobraT25Test[serialNumber].endQuickAscent = quickAscent.finishState;\ndobraT25Test[serialNumber].quickAscentComplete = quickAscent.verifyState;\n\nflow.set('dobraT25Test', dobraT25Test);\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 5250,
        "y": 220,
        "wires": [
            [
                "459da62b490405a9"
            ]
        ],
        "icon": "node-red/switch.svg"
    },
    {
        "id": "459da62b490405a9",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "Machine conditions",
        "func": "let dobraT25Test = flow.get('dobraT25Test');\nlet serialNumber = msg.payload.serialNumber;\nlet currentTimestamp = new Date();\n\nif (dobraT25Test[serialNumber].startSlowDescent && dobraT25Test[serialNumber].startQuickAscent &&\n!dobraT25Test[serialNumber].startFold) {\n    dobraT25Test[serialNumber].startFold = true;\n    dobraT25Test[serialNumber].timestampLastAction = currentTimestamp;\n    dobraT25Test[serialNumber].differenceTimeFold = currentTimestamp;\n}\nelse if (dobraT25Test[serialNumber].endSlowDescent && dobraT25Test[serialNumber].endQuickAscent &&\ndobraT25Test[serialNumber].startFold) {\n    \n    let timeFold = dobraT25Test[serialNumber].differenceTimeFold ? \n    (currentTimestamp.getTime() - dobraT25Test[serialNumber].differenceTimeFold.getTime()) / 1000 : null;\n\n    dobraT25Test[serialNumber].startFold = false;\n\n    if (timeFold >= 2) {\n        dobraT25Test[serialNumber].dobras += 1;\n        dobraT25Test[serialNumber].unit = \"Dobras\";\n        dobraT25Test[serialNumber].timestampLastProduction = currentTimestamp;\n    }\n    dobraT25Test[serialNumber].differenceTimeFold = null;\n}\nflow.set('dobraT25Test', dobraT25Test);\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 5470,
        "y": 220,
        "wires": [
            [
                "a81385fabc3b7c65",
                "16f5e3c5bfcdcfe6"
            ]
        ],
        "icon": "font-awesome/fa-bars"
    },
    {
        "id": "16f5e3c5bfcdcfe6",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "Get count (DOBRAS)",
        "func": "let dobraT25Test = flow.get('dobraT25Test');\nlet serialNumber = msg.payload.serialNumber;\n\nif (dobraT25Test) {\n    if (dobraT25Test[serialNumber] && dobraT25Test[serialNumber].unit !== null) {\n        let unit = dobraT25Test[serialNumber].unit;\n\n        msg.payload = {\n            timestamp: new Date().getTime(),\n            deviceSerialNumber: serialNumber,\n            unit: unit,\n            count: 1\n        }\n        dobraT25Test[serialNumber].unit = null;\n        flow.set('dobraT25Test', dobraT25Test);\n        return msg;\n    }\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 5940,
        "y": 220,
        "wires": [
            []
        ],
        "icon": "font-awesome/fa-plus"
    },
    {
        "id": "a81385fabc3b7c65",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "Update status machine",
        "func": "let dobraT25Test = flow.get('dobraT25Test') || {};\nlet currentTimestamp = new Date();\nlet messages = [];\n\nif (dobraT25Test) {\n    Object.keys(dobraT25Test).forEach(key => {\n        if (dobraT25Test[key].hasOwnProperty('timestampLastAction') && dobraT25Test[key].hasOwnProperty('timestampLastProduction')) {\n            \n            let timestampLastAction = dobraT25Test[key]['timestampLastAction'];\n            let timestampLastProduction = dobraT25Test[key]['timestampLastProduction'];\n            let oldStatus = dobraT25Test[key]['status'];\n\n            let differenceTimeLastAction = timestampLastAction ? (currentTimestamp.getTime() - timestampLastAction.getTime()) / 1000 : null;\n            let differenceTimeLastProduction = timestampLastProduction ? (currentTimestamp.getTime() - timestampLastProduction.getTime()) / 1000 : null;\n\n            const isWorking = (differenceTimeLastAction <= 299 && differenceTimeLastAction !== null) ||\n            (differenceTimeLastProduction <= 299 && differenceTimeLastProduction !== null);\n\n            const isStopped = (differenceTimeLastAction >= 300 && differenceTimeLastProduction >= 300 && differenceTimeLastAction <= 1799) ||\n            (differenceTimeLastAction >= 300 && differenceTimeLastAction <= 1799 && differenceTimeLastProduction === null);\n\n            const isTurnedOff = (differenceTimeLastAction >= 1800 && differenceTimeLastProduction === null) ||\n            (differenceTimeLastAction >= 1800 && differenceTimeLastProduction >= 1800) || differenceTimeLastAction === null;\n\n            const newState = isWorking ? \"TRABALHANDO\" : isStopped ? \"PARADO\" : isTurnedOff ? \"DESLIGADO\" : null;\n\n            if (newState !== null && oldStatus !== newState) {\n                dobraT25Test[key]['status'] = newState;\n\n                messages.push({\n                    serialNumber: key,\n                    currentStatus: newState\n                });\n            }\n        \n        }\n    });\nflow.set('dobraT25Test', dobraT25Test);\n\nmessages.forEach( msg => {\n    node.send({ payload: msg });\n});\n}\nnode.warn(dobraT25Test);",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 5700,
        "y": 260,
        "wires": [
            [
                "cf3b0d5a818db3f2"
            ]
        ],
        "icon": "font-awesome/fa-exchange"
    },
    {
        "id": "cf3b0d5a818db3f2",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "Get changed Status (Dobras)",
        "func": "let {serialNumber, currentStatus} = msg.payload;\nlet timestamp = new Date().getTime();\n\nif (serialNumber && currentStatus !== null) {\n    msg.payload = {\n        timestamp: timestamp,\n        deviceSerialNumber: serialNumber,\n        status: currentStatus\n    }\n    return msg;\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 5960,
        "y": 260,
        "wires": [
            []
        ],
        "icon": "node-red/status.svg"
    },
    {
        "id": "8b48d9ce0e4c90e9",
        "type": "inject",
        "z": "dae82ca7554ded9f",
        "name": "SWITCH1 ON",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DEF123",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch1\": {\"Action\": \"ON\"} }",
        "payloadType": "json",
        "x": 4410,
        "y": 280,
        "wires": [
            [
                "43ed02060b98a36f"
            ]
        ]
    },
    {
        "id": "69d53480eb408c67",
        "type": "inject",
        "z": "dae82ca7554ded9f",
        "name": "SWITCH1 OFF",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DEF123",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch1\": {\"Action\": \"OFF\"} }",
        "payloadType": "json",
        "x": 4420,
        "y": 320,
        "wires": [
            [
                "43ed02060b98a36f"
            ]
        ]
    },
    {
        "id": "1808a07f6758280b",
        "type": "inject",
        "z": "dae82ca7554ded9f",
        "name": "SWITCH3 ON ",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DEF123",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch3\": {\"Action\": \"ON\"} }",
        "payloadType": "json",
        "x": 4410,
        "y": 360,
        "wires": [
            [
                "43ed02060b98a36f"
            ]
        ]
    },
    {
        "id": "395b8ea85bea619e",
        "type": "inject",
        "z": "dae82ca7554ded9f",
        "name": "SWITCH3 OFF",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DEF123",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch3\": {\"Action\": \"OFF\"} }",
        "payloadType": "json",
        "x": 4420,
        "y": 400,
        "wires": [
            [
                "43ed02060b98a36f"
            ]
        ]
    },
    {
        "id": "268da08dea0da599",
        "type": "inject",
        "z": "dae82ca7554ded9f",
        "name": "SWITCH3 ON",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "ABC123",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch3\": {\"Action\": \"ON\"} }",
        "payloadType": "json",
        "x": 4410,
        "y": 560,
        "wires": [
            [
                "a8a2ea8f48fbf639"
            ]
        ]
    },
    {
        "id": "b22776cca6ff01d6",
        "type": "inject",
        "z": "dae82ca7554ded9f",
        "name": "SWITCH3 OFF",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "ABC123",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch3\": {\"Action\": \"OFF\"} }",
        "payloadType": "json",
        "x": 4420,
        "y": 600,
        "wires": [
            [
                "a8a2ea8f48fbf639"
            ]
        ]
    },
    {
        "id": "ee484259f1974e22",
        "type": "inject",
        "z": "dae82ca7554ded9f",
        "name": "SWITCH4 ON",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "ABC123",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch4\": {\"Action\": \"ON\"} }",
        "payloadType": "json",
        "x": 4410,
        "y": 660,
        "wires": [
            [
                "a8a2ea8f48fbf639"
            ]
        ]
    },
    {
        "id": "c72441dcd016507a",
        "type": "inject",
        "z": "dae82ca7554ded9f",
        "name": "SWITCH4 OFF",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "ABC123",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch4\": {\"Action\": \"OFF\"} }",
        "payloadType": "json",
        "x": 4420,
        "y": 700,
        "wires": [
            [
                "a8a2ea8f48fbf639"
            ]
        ]
    },
    {
        "id": "a8a2ea8f48fbf639",
        "type": "switch",
        "z": "dae82ca7554ded9f",
        "name": "Machines",
        "property": "payload.serialNumber",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "ABC123",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "DEF123",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 4620,
        "y": 620,
        "wires": [
            [
                "33396bcba331d730"
            ],
            [
                "33396bcba331d730"
            ]
        ],
        "icon": "font-awesome/fa-desktop"
    },
    {
        "id": "33396bcba331d730",
        "type": "switch",
        "z": "dae82ca7554ded9f",
        "name": "OPTION SW",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "hask",
                "v": "Switch3",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "Switch4",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 4810,
        "y": 620,
        "wires": [
            [
                "17f87a1511b19709"
            ],
            [
                "17f87a1511b19709"
            ]
        ]
    },
    {
        "id": "17f87a1511b19709",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "Dobra gaspa TEST",
        "func": "let gaspariniNew = flow.get('gaspariniNew') || {};\nlet serialNumber = msg.payload.serialNumber;\nlet getSwitch = Object.keys(msg.payload).find(key => key.startsWith('Switch'));\n\nif (getSwitch) {\n    if (!gaspariniNew[serialNumber]) {\n        gaspariniNew[serialNumber] = {\n            \"startSlowDescent\": false,\n            \"endSlowDescent\": false,\n            \"startQuickAscent\": false,\n            \"endQuickAscent\": false,\n            \"startFold\": false,\n            \"dobras\": 0,\n            \"unit\": null,\n            \"timestampLastAction\": null,\n            \"timestampLastProduction\": null,\n            \"status\": null,\n        }\n    }\n}\nflow.set('gaspariniNew', gaspariniNew);\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 5010,
        "y": 620,
        "wires": [
            [
                "befd50e63a8493ea"
            ]
        ],
        "icon": "font-awesome/fa-save"
    },
    {
        "id": "befd50e63a8493ea",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "Get switches status",
        "func": "let handleSwitch = function (payload, context, machineProperties, switchName, startName, finishName) {\n    let switchKey = Object.keys(payload).find(key => key.startsWith(switchName));\n    let switchState = context.get(switchName) || null;\n    let actionValue = payload[switchKey] ? payload[switchKey].Action : null;\n    let startState = machineProperties[startName] || false;\n    let finishState = machineProperties[finishName] ||false;\n\n    switchState = actionValue || switchState;\n\n    if (switchState === \"ON\") {\n        startState = true;\n        finishState = false;\n    }\n    else if (switchState === \"OFF\" && startState) {\n        finishState = true;\n        startState = false;\n    }\n    machineProperties[startName] = startState;\n    machineProperties[finishName] = finishState;\n    return {\n        switchState: switchState,\n        startState: startState,\n        finishState: finishState,\n    };\n}\nlet payload = msg.payload;\nlet serialNumber = msg.payload.serialNumber;\nlet gaspariniNew = flow.get('gaspariniNew');\nlet machineProperties = gaspariniNew[serialNumber] || {};\n\nlet slowDescent = handleSwitch(payload, context,machineProperties, 'Switch3', 'startSlowDescent', 'endSlowDescent');\nlet quickAscent = handleSwitch(payload, context, machineProperties, 'Switch4', 'startQuickAscent', 'endQuickAscent');\n\ngaspariniNew[serialNumber].startSlowDescent = slowDescent.startState;\ngaspariniNew[serialNumber].endSlowDescent = slowDescent.finishState;\ngaspariniNew[serialNumber].startQuickAscent = quickAscent.startState;\ngaspariniNew[serialNumber].endQuickAscent = quickAscent.finishState;\n\nflow.set('gaspariniNew', gaspariniNew);\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 5230,
        "y": 620,
        "wires": [
            [
                "e16b1dd02ffec0d9"
            ]
        ],
        "icon": "node-red/switch.svg"
    },
    {
        "id": "e16b1dd02ffec0d9",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "Machine conditions",
        "func": "let gaspariniNew = flow.get('gaspariniNew');\nlet serialNumber = msg.payload.serialNumber;\nlet currentTimestamp = new Date();\n\n\nif (gaspariniNew[serialNumber].endSlowDescent && gaspariniNew[serialNumber].startQuickAscent && !gaspariniNew[serialNumber].startFold) {\n    gaspariniNew[serialNumber].startFold = true;\n    gaspariniNew[serialNumber].timestampLastAction = currentTimestamp;\n}\nelse if (gaspariniNew[serialNumber].endQuickAscent && gaspariniNew[serialNumber].startFold) {\n    gaspariniNew[serialNumber].startFold = false;\n    gaspariniNew[serialNumber].dobras += 1;\n    gaspariniNew[serialNumber].unit = \"Dobras\";\n    gaspariniNew[serialNumber].timestampLastProduction = currentTimestamp;\n}\nflow.set('gaspariniNew', gaspariniNew);\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 5450,
        "y": 620,
        "wires": [
            [
                "a0ec3e60e92fd352",
                "ecc495ba88642346"
            ]
        ],
        "icon": "font-awesome/fa-bars"
    },
    {
        "id": "3005b8b38870111d",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "Get count (DOBRAS)",
        "func": "let gaspariniNew = flow.get('gaspariniNew') || {};\nlet serialNumber = msg.payload.serialNumber;\n\nif (gaspariniNew) {\n    if (gaspariniNew[serialNumber] && gaspariniNew[serialNumber].unit !== null) {\n        let unit = gaspariniNew[serialNumber].unit;\n\n        msg.payload = {\n            timestamp: new Date().getTime(),\n            deviceSerialNumber: serialNumber,\n            unit: unit,\n            count: 1,\n        }\n        gaspariniNew[serialNumber].unit = null;\n        flow.set('gaspariniNew', gaspariniNew);\n        return msg;\n    }\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 6160,
        "y": 600,
        "wires": [
            []
        ],
        "icon": "font-awesome/fa-plus"
    },
    {
        "id": "a0ec3e60e92fd352",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "Update status machine",
        "func": "let gaspariniNew = flow.get('gaspariniNew') || {};\nlet currentTimestamp = new Date();\nlet messages = [];\n\nif (gaspariniNew) {\n    Object.keys(gaspariniNew).forEach(key => {\n        if (gaspariniNew[key].hasOwnProperty('timestampLastAction') && gaspariniNew[key].hasOwnProperty('timestampLastProduction')) {\n            let timestampLastAction = gaspariniNew[key]['timestampLastAction'];\n            let timestampLastProduction = gaspariniNew[key]['timestampLastProduction'];\n            let oldState = gaspariniNew[key]['status']; \n\n            let differenceTimeLastAction = timestampLastAction ? (currentTimestamp.getTime() - timestampLastAction.getTime()) / 1000 : null;\n            let differenceTimeLastProduction = timestampLastProduction ? (currentTimestamp.getTime() - timestampLastProduction.getTime()) / 1000 : null;\n\n            const isWorking = (differenceTimeLastAction <= 299 && differenceTimeLastAction !== null) ||\n            (differenceTimeLastProduction <= 299 && differenceTimeLastProduction !== null);\n\n            const isStopped = (differenceTimeLastAction >= 300 && differenceTimeLastProduction >= 300 && differenceTimeLastProduction <= 1799) ||\n            (differenceTimeLastAction >= 300 && differenceTimeLastAction <= 1799 && differenceTimeLastProduction === null);\n\n            const isTurnedOff = differenceTimeLastAction >= 1800 || differenceTimeLastProduction >= 1800 || differenceTimeLastAction === null;\n\n            const newState = isWorking ? 'TRABALHANDO' : isStopped ? 'PARADO' : isTurnedOff ? 'DESLIGADO' : null;\n\n            if ( newState !== null && oldState !== newState) {\n                gaspariniNew[key]['status'] = newState;\n\n                messages.push({\n                    serialNumber: key,\n                    currentStatus: newState\n                });\n            }\n        } \n    });\nflow.set('gaspariniNew', gaspariniNew);\n\nmessages.forEach(msg => {\n    node.send({ payload: msg });\n\n    return msg;\n})\nnode.warn(gaspariniNew);\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 5700,
        "y": 640,
        "wires": [
            [
                "4b1598bdd6195c82"
            ]
        ],
        "icon": "font-awesome/fa-exchange"
    },
    {
        "id": "4b1598bdd6195c82",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "Get changed Status (Dobras)",
        "func": "let {serialNumber, currentStatus} = msg.payload;\nlet timestamp = new Date().getTime();\n\nif (serialNumber && currentStatus !== null) {\n    msg.payload = {\n        timestamp: timestamp,\n        deviceSerialNumber: serialNumber,\n        status: currentStatus\n    }\n    return msg;\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 6180,
        "y": 640,
        "wires": [
            []
        ],
        "icon": "node-red/status.svg"
    },
    {
        "id": "f59e19c4ba9c66b7",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "MachineProperties ",
        "func": "let puncioProperties = flow.get('puncioProperties');\nlet serialNumber =  msg.payload.serialNumber;\nlet machineProperties = puncioProperties[serialNumber];\n\nlet payload = msg.payload;\nlet startCycle = handleSwitch(payload, context, machineProperties,'Switch1', 'StatusSNS' , 'startCycle');\nlet readyMachine = handleSwitch(payload, context, machineProperties, 'Switch2', 'StatusSNS', 'readyMachine');\nlet interruptedCycle = handleSwitch(payload, context, machineProperties, 'Switch3', 'StatusSNS', 'interruptedCycle');\n\nflow.set('puncioProperties', puncioProperties);\n\nfunction handleSwitch (payload, context, machineProperties, switchName, statusSNSName ,verifyName) {\n    let switchKey = Object.keys(payload).find(key => key.startsWith(switchName));\n    let actionValue = payload[switchKey] ? payload[switchKey].Action : null;\n    let switchState = context.get(switchName) || null;\n    let statusSNS = payload[statusSNSName] && payload[statusSNSName][switchName];\n    let verifyState = machineProperties[verifyName];\n\n    switchState = actionValue || switchState || statusSNS;\n\n    if (switchState === \"ON\") {\n        verifyState = true;\n    \n    } else if (switchState === \"OFF\") {\n        verifyState = false;\n    }\n    machineProperties[verifyName] = verifyState;\n\n    return {\n        switchState: switchState,\n        verifyState: verifyState,\n    }    \n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3190,
        "y": 3560,
        "wires": [
            [
                "cdfa8c0e1dcfb16a"
            ]
        ],
        "icon": "font-awesome/fa-save"
    },
    {
        "id": "5436bc5e2a1a86cb",
        "type": "switch",
        "z": "dae82ca7554ded9f",
        "name": "Machines",
        "property": "payload.serialNumber",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "ABC123",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "DEF123",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 4600,
        "y": 960,
        "wires": [
            [
                "b524f5f3d66feaad"
            ],
            [
                "b524f5f3d66feaad"
            ]
        ],
        "icon": "font-awesome/fa-desktop"
    },
    {
        "id": "b524f5f3d66feaad",
        "type": "switch",
        "z": "dae82ca7554ded9f",
        "name": "OPTION SW",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "hask",
                "v": "Switch1",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "Switch3",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 4770,
        "y": 960,
        "wires": [
            [
                "dcacb08e7862fea4"
            ],
            [
                "dcacb08e7862fea4"
            ]
        ]
    },
    {
        "id": "ca307bf783b86e03",
        "type": "inject",
        "z": "dae82ca7554ded9f",
        "name": "SWITCH1 ON",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "ABC123",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch1\": {\"Action\": \"ON\"} }",
        "payloadType": "json",
        "x": 4390,
        "y": 900,
        "wires": [
            [
                "5436bc5e2a1a86cb"
            ]
        ]
    },
    {
        "id": "c5a4d42d07250334",
        "type": "inject",
        "z": "dae82ca7554ded9f",
        "name": "SWITCH1 OFF",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "ABC123",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch1\": {\"Action\": \"OFF\"} }",
        "payloadType": "json",
        "x": 4400,
        "y": 940,
        "wires": [
            [
                "5436bc5e2a1a86cb"
            ]
        ]
    },
    {
        "id": "9ea290f9fba2d879",
        "type": "inject",
        "z": "dae82ca7554ded9f",
        "name": "SWITCH3 ON ",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "ABC123",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch3\": {\"Action\": \"ON\"} }",
        "payloadType": "json",
        "x": 4390,
        "y": 980,
        "wires": [
            [
                "5436bc5e2a1a86cb"
            ]
        ]
    },
    {
        "id": "4c600f3887d1a8c7",
        "type": "inject",
        "z": "dae82ca7554ded9f",
        "name": "SWITCH3 OFF",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "ABC123",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch3\": {\"Action\": \"OFF\"} }",
        "payloadType": "json",
        "x": 4400,
        "y": 1020,
        "wires": [
            [
                "5436bc5e2a1a86cb"
            ]
        ]
    },
    {
        "id": "dcacb08e7862fea4",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "Switch State",
        "func": "function handleSwitch(payload, context, switchName, startName, finishName, verifyName) {\n    let switchState = context.get(switchName) || null;\n    let startState = context.get(startName) || false;\n    let finishState = context.get(finishName) || false;\n    let verifyState = context.get(verifyName) || false;\n\n    if (payload[switchName] && payload[switchName].Action=== \"ON\") {\n        switchState = \"ON\";\n        startState = true;\n    \n    } else if (payload[switchName] && payload[switchName].Action === \"OFF\" && startState) {\n        switchState = \"OFF\";\n        finishState = true;\n    }\n    if (startState && finishState) {\n        verifyState = true;\n        startState = false;\n        finishState = false;\n    }\n    context.set(switchName, switchState);\n    context.set(startName, startState);\n    context.set(finishName, finishState);\n    context.set(verifyName, verifyState);\n\n    return {\n        switchState: switchState,\n        startState: startState,\n        finishState: finishState,\n        verifyState: verifyState\n    };\n}\n\nlet payload = msg.payload;\nlet verifyDescent = handleSwitch(payload, context, 'Switch1', 'startSlowDescent', 'endSlowDescent', 'slowDescentComplete');\nlet verifyQuick = handleSwitch(payload, context, 'Switch3', 'startQuickAscent', 'endQuickAscent', 'quickAscentComplete');\n\nmsg.switches = {\n    switch1: verifyDescent.switchState,\n    switch3: verifyQuick.switchState,\n    startSlowDescent: verifyDescent.startState,\n    slowDescentComplete: verifyDescent.verifyState,\n    startQuickAscent: verifyQuick.startState,\n    quickAscentComplete: verifyQuick.verifyState\n};\n\nif (verifyDescent.verifyState && verifyQuick.verifyState) {\n    verifyDescent.verifyState = false;\n    verifyQuick.verifyState = false\n\n    context.set('slowDescentComplete', verifyDescent.verifyState);\n}\nverifyQuick.verifyState = false;\ncontext.set('quickAscentComplete', verifyQuick.verifyState);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4970,
        "y": 960,
        "wires": [
            [
                "198937e51ec4d93c"
            ]
        ],
        "icon": "node-red/swap.svg"
    },
    {
        "id": "198937e51ec4d93c",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "Conditions machine",
        "func": "let {startSlowDescent, slowDescentComplete, startQuickAscent, quickAscentComplete } = msg.switches;\nlet  startFold = context.get('startFold') || false;\nlet verifyFold = context.get('verifyFold') || false;\nlet currentTimestamp = new Date();\nlet differenceTimeFold = context.get('differenceTimeFold') || null;\n\nif (startSlowDescent && startQuickAscent && !startFold) {\n    startFold = true;\n    differenceTimeFold = currentTimestamp;\n\n} else if (slowDescentComplete && quickAscentComplete && startFold) {\n    let timeFold = differenceTimeFold ? (currentTimestamp.getTime() - differenceTimeFold.getTime()) / 1000 : null;\n    startFold = false;\n    \n    if (timeFold >= 2) {\n        verifyFold = true;\n    }\n    differenceTimeFold = null;\n}\ncontext.set('startFold', startFold);\ncontext.set('verifyFold', verifyFold);\ncontext.set('differenceTimeFold', differenceTimeFold);\n\nmsg.conditions = {\n    startFold: startFold,\n    verifyFold: verifyFold,\n    serialNumber: msg.payload.serialNumber\n}\nverifyFold = false;\ncontext.set('verifyFold', verifyFold);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 5150,
        "y": 960,
        "wires": [
            [
                "4fe38f94d32eb51e"
            ]
        ],
        "icon": "font-awesome/fa-bars"
    },
    {
        "id": "4fe38f94d32eb51e",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "Production machine",
        "func": "let { startFold, verifyFold, serialNumber} = msg.conditions;\nlet [dateStartProduction, dateLastProduction, machine] = ['dateStartProduction', 'dateLastProduction', 'machine'].map(key => \ncontext.get(key) || null);\nlet foldCount = context.get('foldCount') || 0;\nlet resetShift = context.get('resetShift') || false;\nlet currentTimestamp = new Date();\n\nconst actions = {\n    resetShift: () => { foldCount = 0; resetShift = false},\n    payloadReset: () => { resetShift = true},\n    startProduction: () => { dateStartProduction = currentTimestamp},\n    finishedFold: () => { foldCount +=1; dateLastProduction = currentTimestamp },\n    machineNull: () => { machine = serialNumber }\n};\nconst conditions = {\n    resetShift: resetShift === true,\n    payloadReset: msg.payload === \"reset\",\n    startProduction: startFold === true,\n    finishedFold: verifyFold === true,\n    machineNull: (serialNumber && machine === null) || (serialNumber && machine !== serialNumber && machine !== null),\n};\n\nObject.entries(conditions).forEach(([condition, isTrue]) => {\n    if (isTrue && actions[condition]) actions[condition]();\n});\ncontext.set('foldCount', foldCount);\ncontext.set('dateStartProduction', dateStartProduction);\ncontext.set('dateLastProduction', dateLastProduction);\ncontext.set('resetShift', resetShift);\ncontext.set('machine', machine);\n\nmsg.data = {\n    verifyFold: verifyFold,\n    fold: foldCount,\n    dateStartProduction: dateStartProduction,\n    dateLastProduction: dateLastProduction,\n    machine: machine,\n    reset: resetShift\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 5380,
        "y": 960,
        "wires": [
            [
                "dcfb677343bb32b9",
                "4f25abf37e67a800"
            ]
        ],
        "icon": "font-awesome/fa-book"
    },
    {
        "id": "dcfb677343bb32b9",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "DOBRADEIRA T25 1",
        "func": "let { verifyFold, fold, machine } = msg.data;\n\nmsg.payload = {\n    verifyFold: verifyFold,\n    dobras: fold,\n    deviceSerialNumber: machine\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 5640,
        "y": 960,
        "wires": [
            [
                "184eb99f9645a49d"
            ]
        ],
        "icon": "font-awesome/fa-cogs"
    },
    {
        "id": "4f25abf37e67a800",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "Verify status",
        "func": "let { dateStartProduction, dateLastProduction, machine } = msg.data;\nlet [timeStartProduction, timeLastProduction] = ['timeStartProduction', 'timeLastProduction'].map(key => context.get(key) || 0);\nlet currentTimestamp = new Date();\nlet currentStatus = context.get('currentStatus') || null;\n\ntimeStartProduction = dateStartProduction ? (currentTimestamp.getTime() - dateStartProduction.getTime()) / 1000 : null;\ntimeLastProduction = dateLastProduction ? (currentTimestamp.getTime() - dateLastProduction.getTime()) / 1000 : null;\n\ncontext.set('timeStartProduction', timeStartProduction);\ncontext.set('timeLastProduction', timeLastProduction);\n\nif (dateStartProduction !== null) {\n\n    //Mapear status\n    const machineWorking = timeStartProduction <= 299 || (timeLastProduction <= 299 && timeLastProduction !== null);\n\n    const machineIdle = (timeStartProduction >= 300 && timeLastProduction >= 300 && timeLastProduction <= 1799) || \n    (timeStartProduction >= 300 && timeStartProduction <= 1799 && timeLastProduction === null);\n\n    const machineOff = ((timeLastProduction >= 1800 && timeStartProduction >= 1800) || (timeStartProduction >= 1800 && timeLastProduction === null));\n\n    const newStatus = machineWorking ? \"TRABALHANDO\" : machineIdle ? \"PARADO\" : machineOff ? \"DESLIGADO\" : null;\n    if (newStatus) currentStatus = newStatus;\n}\n\nif (dateStartProduction === null) currentStatus = \"DESLIGADO\";\ncontext.set('currentStatus', currentStatus);\n\nmsg.status = {\n    timeStartProduction: timeStartProduction,\n    timeLastProduction: timeLastProduction,\n    machine: machine,\n    currentStatus: currentStatus\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 5610,
        "y": 1000,
        "wires": [
            [
                "270f935e547321d6",
                "02b44cf056008e8f"
            ]
        ],
        "icon": "node-red/status.svg"
    },
    {
        "id": "270f935e547321d6",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "FormatedMessage",
        "func": "let machine = msg.status.machine;\nlet oldStatus = msg.status.currentStatus;\nlet timestamp = new Date().getTime();\nlet currentStatus = context.get('currentStatus') || null;\n\nif (!currentStatus || currentStatus !== oldStatus) {\n    currentStatus = oldStatus;\n    context.set('currentStatus', currentStatus);\n\n    msg.payload = {\n        timestamp: timestamp,\n        deviceSerialNumber: machine,\n        status: currentStatus\n    }\n    return msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 5870,
        "y": 1000,
        "wires": [
            []
        ],
        "icon": "font-awesome/fa-envelope"
    },
    {
        "id": "184eb99f9645a49d",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "Increment Dobras",
        "func": "let { verifyFold, deviceSerialNumber } = msg.payload;\nlet unit = context.get('unit') || null;\nlet count = context.get('count') || 0;\nlet currentTimestamp = new Date();\n\nif (verifyFold === true) {\n    unit = \"Dobras\";\n    count = 1;\n    context.set('unit', unit);\n    context.set('count', count);\n\n    msg.payload = {\n        timestamp: currentTimestamp.getTime(),\n        unit: unit,\n        count: count,\n        deviceSerialNumber: deviceSerialNumber\n    }\n    return msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 5870,
        "y": 960,
        "wires": [
            []
        ],
        "icon": "node-red/arrow-in.svg"
    },
    {
        "id": "02b44cf056008e8f",
        "type": "debug",
        "z": "dae82ca7554ded9f",
        "name": "debug 321",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 5730,
        "y": 1080,
        "wires": []
    },
    {
        "id": "4398f2dd35113ef8",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "Dobra T25 object main",
        "func": "let dobradeiraT25Properties = flow.get('dobradeiraT25Properties') || {};\nlet serialNumber = msg.payload.serialNumber;\nlet getSwitch = Object.keys(msg.payload).find(key => key.startsWith('Switch'));\n\nif (getSwitch) {\n    if (!dobradeiraT25Properties[serialNumber]) {\n        dobradeiraT25Properties[serialNumber] = {\n            \"outsetSlowDescent\": false,\n            \"endSlowDescent\": false,\n            \"slowDescentComplete\": false,\n            \"outsetQuickAscent\": false,\n            \"endQuickAscent\": false,\n            \"quickAscentComplete\": false,\n            \"startFold\": false,\n            \"dobras\": 0,\n            \"timestampLastAction\": null,\n            \"timestampLastProduction\": null,\n            \"differenceTimeFold\": null,\n            \"unit\": null,\n            \"status\": null\n        };\n    }\n}\nflow.set('dobradeiraT25Properties', dobradeiraT25Properties);\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2880,
        "y": 1020,
        "wires": [
            [
                "7f9c3ac455e48d61"
            ]
        ],
        "icon": "font-awesome/fa-save"
    },
    {
        "id": "7f9c3ac455e48d61",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "Get switches status",
        "func": "let handleSwitch = function (payload, context, machineProperties, switchName, startName, finishName, verifyName) {\n    let switchKey = Object.keys(payload).find(key => key.startsWith(switchName));\n    let switchState = context.get(switchName) || null;\n    let actionValue = payload[switchKey] ? payload[switchKey].Action : null;\n    let startState = machineProperties[startName] || false;\n    let finishState = machineProperties[finishName] || false;\n    let verifyState = machineProperties[verifyName] || false;\n\n    switchState = actionValue || switchState;\n\n    if (switchState === \"ON\") {\n        startState = true;\n    \n    } else if (switchState && startState) {\n        finishState = true;\n    }\n    if (startState && finishState) {\n        verifyState = true;\n        startState = false;\n        finishState = false;\n    }\n    machineProperties[startName] = startState;\n    machineProperties[finishName] = finishState;\n    machineProperties[verifyName] = verifyState;\n    return {\n        switchState: switchState,\n        startState: startState,\n        finishState: finishState,\n        verifyState: verifyState\n    };\n}\nlet payload = msg.payload;\nlet serialNumber = msg.payload.serialNumber;\nlet dobradeiraT25Properties = flow.get('dobradeiraT25Properties');\nlet machineProperties = dobradeiraT25Properties[serialNumber]\n\nlet slowDescent = handleSwitch(payload, context, machineProperties, 'Switch1', 'outsetSlowDescent', 'endSlowDescent', 'slowDescentComplete');\nlet quickAscent = handleSwitch(payload, context, machineProperties, 'Switch3', 'outsetQuickAscent', 'endQuickAscent', 'quickAscentComplete');\n\ndobradeiraT25Properties[serialNumber] = {\n    ...machineProperties,\n    outsetSlowDescent: slowDescent.startState,\n    endSlowDescent: slowDescent.finishState,\n    slowDescentComplete: slowDescent.verifyState,\n    outsetQuickAscent: quickAscent.startState,\n    endQuickAscent: quickAscent.finishState,\n    quickAscentComplete: quickAscent.verifyState\n}\nflow.set('dobradeiraT25Properties', dobradeiraT25Properties);\n\nif (slowDescent.verifyState && quickAscent.verifyState) {\n    slowDescent.verifyState = false;\n    quickAscent.verifyState = false;\n}\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3090,
        "y": 1020,
        "wires": [
            [
                "0e480da52dacb423"
            ]
        ],
        "icon": "node-red/switch.svg"
    },
    {
        "id": "0e480da52dacb423",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "Machine conditions",
        "func": "let dobradeiraT25Properties = flow.get('dobradeiraT25Properties') || {};\nlet serialNumber = msg.payload.serialNumber;\nlet currrentTimestamp = new Date();\n\n// node.warn(msg.payload);\n// node.warn(dobradeiraT25Properties);\nif (dobradeiraT25Properties[serialNumber].outsetSlowDescent && dobradeiraT25Properties[serialNumber].outsetQuickAscent && !dobradeiraT25Properties[serialNumber].startFold) {\n    dobradeiraT25Properties[serialNumber].startFold = true;\n    dobradeiraT25Properties[serialNumber].timestampLastAction = currrentTimestamp;\n    dobradeiraT25Properties[serialNumber].differenceTimeFold = currrentTimestamp;\n}\nelse if (dobradeiraT25Properties[serialNumber].slowDescentComplete && dobradeiraT25Properties[serialNumber].quickAscentComplete\n    && dobradeiraT25Properties[serialNumber].startFold) {\n    \n    let timeFold = \n    dobradeiraT25Properties[serialNumber].differenceTimeFold ?(currrentTimestamp.getTime() - dobradeiraT25Properties[serialNumber].differenceTimeFold.getTime()) /1000 : null;\n    dobradeiraT25Properties[serialNumber].startFold = false;\n\n    if (timeFold >= 2) {\n        dobradeiraT25Properties[serialNumber].timestampLastProduction = currrentTimestamp;\n        dobradeiraT25Properties[serialNumber].dobras += 1;\n        \n        dobradeiraT25Properties[serialNumber].unit = \"Dobras\";\n\n    }\n    dobradeiraT25Properties[serialNumber].differenceTimeFold = null;\n    dobradeiraT25Properties[serialNumber].slowDescentComplete = false;\n    dobradeiraT25Properties[serialNumber].quickAscentComplete = false;\n}\nflow.set('dobradeiraT25Properties', dobradeiraT25Properties);\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3310,
        "y": 1020,
        "wires": [
            [
                "663c26f6dd3d98cb",
                "7e102bde47e3ee11"
            ]
        ],
        "icon": "font-awesome/fa-bars"
    },
    {
        "id": "713993532e2bb5fa",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "Get count (DOBRAS)",
        "func": "let dobradeiraT25Properties = flow.get('dobradeiraT25Properties') || {};\nlet serialNumber = msg.payload.serialNumber;\n\nif (dobradeiraT25Properties) {\n    if (dobradeiraT25Properties[serialNumber] && dobradeiraT25Properties[serialNumber].unit !== null) {\n        let unit = dobradeiraT25Properties[serialNumber].unit;\n\n        msg.payload = {\n            timestamp: new Date().getTime(),\n            deviceSerialNumber: serialNumber,\n            unit: unit,\n            count: 1,\n        }\n        dobradeiraT25Properties[serialNumber].unit = null;\n        flow.set('dobradeiraT25Properties', dobradeiraT25Properties);\n        return msg;\n    }\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3980,
        "y": 1000,
        "wires": [
            []
        ],
        "icon": "font-awesome/fa-plus"
    },
    {
        "id": "7e102bde47e3ee11",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "Update status machine",
        "func": "let dobradeiraT25Properties = flow.get('dobradeiraT25Properties') || {};\nlet currentTimestamp = new Date();\nlet messages = [];\n\nif (dobradeiraT25Properties) {\n    Object.keys(dobradeiraT25Properties).forEach(key => {\n        if (dobradeiraT25Properties[key].hasOwnProperty('timestampLastAction') && dobradeiraT25Properties[key].hasOwnProperty('timestampLastProduction')) {\n            let timestampLastAction = dobradeiraT25Properties[key]['timestampLastAction'];\n            let timestampLastProduction = dobradeiraT25Properties[key]['timestampLastProduction'];\n            let oldState = dobradeiraT25Properties[key]['status']; \n\n            let differenceTimeLastAction = timestampLastAction ? (currentTimestamp.getTime() - timestampLastAction.getTime()) / 1000 : null;\n            let differenceTimeLastProduction = timestampLastProduction ? (currentTimestamp.getTime() - timestampLastProduction.getTime()) / 1000 : null;\n\n            const isWorking = (differenceTimeLastAction <= 299 && differenceTimeLastAction !== null) ||\n            (differenceTimeLastProduction <= 299 && differenceTimeLastProduction !== null);\n\n            const isStopped = (differenceTimeLastAction >= 300 && differenceTimeLastProduction >= 300 && differenceTimeLastProduction <= 1799) ||\n            (differenceTimeLastAction >= 300 && differenceTimeLastAction <= 1799 && differenceTimeLastProduction === null);\n\n            const isTurnedOff = differenceTimeLastAction >= 1800 || differenceTimeLastProduction >= 1800 || differenceTimeLastAction === null;\n\n            const newState = isWorking ? 'TRABALHANDO' : isStopped ? 'PARADO' : isTurnedOff ? 'DESLIGADO' : null;\n\n            if ( newState !== null && oldState !== newState) {\n                dobradeiraT25Properties[key]['status'] = newState;\n\n                messages.push({\n                    serialNumber: key,\n                    currentStatus: newState\n                });\n            }\n        } \n    });\nflow.set('dobradeiraT25Properties', dobradeiraT25Properties);\n\nmessages.forEach(msg => {\n    node.send({ payload: msg });\n\n    return msg;\n});\n}\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3560,
        "y": 1040,
        "wires": [
            [
                "7ed44c7b4a5b0f35"
            ]
        ],
        "icon": "font-awesome/fa-exchange"
    },
    {
        "id": "7ed44c7b4a5b0f35",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "Get changed Status (Dobras)",
        "func": "let {serialNumber, currentStatus} = msg.payload;\nlet timestamp = new Date().getTime();\n\nif (serialNumber && currentStatus !== null) {\n    msg.payload = {\n        timestamp: timestamp,\n        deviceSerialNumber: serialNumber,\n        status: currentStatus\n    }\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4000,
        "y": 1040,
        "wires": [
            []
        ],
        "icon": "node-red/status.svg"
    },
    {
        "id": "339641a14a1975ec",
        "type": "switch",
        "z": "dae82ca7554ded9f",
        "name": "OPTION SW",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "hask",
                "v": "Switch1",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "Switch3",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 2750,
        "y": 1160,
        "wires": [
            [
                "643d4c5c312e13d3"
            ],
            [
                "643d4c5c312e13d3"
            ]
        ]
    },
    {
        "id": "643d4c5c312e13d3",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "Dobra T25 NOVO",
        "func": "let dobraT25Test = flow.get('dobraT25Test') || {};\nlet serialNumber = msg.payload.serialNumber;\nlet getSwitch = Object.keys(msg.payload).find(key => key.startsWith('Switch')) || null;\n\ndelete dobraT25Test[serialNumber].differenceFold\nif (getSwitch !== null) {\n    if (!dobraT25Test[serialNumber]) {\n        dobraT25Test[serialNumber] = {\n            \"startSlowDescent\": false,\n            \"endSlowDescent\": false,\n            \"startQuickAscent\": false,\n            \"endQuickAscent\": false,\n            \"startFold\": false,\n            \"dobras\": 0,\n            \"timestampLastAction\": null,\n            \"timestampLastProduction\": null,\n            \"differenceTimeFold\": null,\n            \"unit\": null,\n            \"status\": null\n        };\n    }\n}\nflow.set('dobraT25Test', dobraT25Test);\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2970,
        "y": 1160,
        "wires": [
            [
                "dd965758504ae2cd"
            ]
        ],
        "icon": "font-awesome/fa-save"
    },
    {
        "id": "dd965758504ae2cd",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "Get switches status",
        "func": "let handleSwitch = function (payload, context, machineProperties, switchName, startName, finishName) {\n    let switchKey = Object.keys(payload).find(key => key.startsWith(switchName));\n    let switchState = context.get(switchName) || null;\n    let actionValue = payload[switchKey] ? payload[switchKey].Action : null;\n    let starState = machineProperties[startName] || false;\n    let finishState = machineProperties[finishName] || false;\n\n    switchState = actionValue || switchState;\n\n    if (switchState === \"ON\") {\n        starState = true;\n        finishState = false;\n\n    } else if (switchState === \"OFF\" && starState) {\n        starState = false;\n        finishState = true;\n    }\n    machineProperties[startName] = starState;\n    machineProperties[finishName] = finishState;\n    return {\n        switchState: switchState,\n        starState: starState,\n        finishState: finishState,\n    };\n}\nlet payload = msg.payload;\nlet serialNumber = msg.payload.serialNumber;\nlet dobraT25Test = flow.get('dobraT25Test');\nlet machineProperties = dobraT25Test[serialNumber] || {};\n\nlet slowDescent = handleSwitch(payload, context, machineProperties, 'Switch1', 'startSlowDescent', 'endSlowDescent');\nlet quickAscent = handleSwitch(payload, context, machineProperties, 'Switch3', 'startQuickAscent', 'endQuickAscent');\n\ndobraT25Test[serialNumber].startSlowDescent = slowDescent.starState;\ndobraT25Test[serialNumber].endSlowDescent = slowDescent.finishState;\ndobraT25Test[serialNumber].startQuickAscent = quickAscent.starState;\ndobraT25Test[serialNumber].endQuickAscent = quickAscent.finishState;\n\nflow.set('dobraT25Test', dobraT25Test);\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3210,
        "y": 1160,
        "wires": [
            [
                "6ee85f212f3356a7"
            ]
        ],
        "icon": "node-red/switch.svg"
    },
    {
        "id": "6ee85f212f3356a7",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "Machine conditions",
        "func": "let dobraT25Test = flow.get('dobraT25Test');\nlet serialNumber = msg.payload.serialNumber;\nlet currentTimestamp = new Date();\n\nif (dobraT25Test[serialNumber].startSlowDescent && dobraT25Test[serialNumber].startQuickAscent &&\n    !dobraT25Test[serialNumber].startFold) {\n    dobraT25Test[serialNumber].startFold = true;\n    dobraT25Test[serialNumber].timestampLastAction = currentTimestamp;\n    dobraT25Test[serialNumber].differenceTimeFold = currentTimestamp;\n}\nelse if (dobraT25Test[serialNumber].endSlowDescent && dobraT25Test[serialNumber].endQuickAscent &&\n    dobraT25Test[serialNumber].startFold) {\n    \n    let timeFold = dobraT25Test[serialNumber].differenceTimeFold ? \n        (currentTimestamp.getTime() - dobraT25Test[serialNumber].differenceTimeFold.getTime()) / 1000 : null;\n        \n    if (timeFold >=2) {\n        dobraT25Test[serialNumber].dobras += 1;\n        dobraT25Test[serialNumber].unit = \"Dobras\";\n    }\n    dobraT25Test[serialNumber].startFold = false;\n    dobraT25Test[serialNumber].timestampLastProduction = currentTimestamp;\n    dobraT25Test[serialNumber].differenceTimeFold = null;\n}\nflow.set('dobraT25Test', dobraT25Test);\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3430,
        "y": 1160,
        "wires": [
            [
                "ef4944398eca7f5b",
                "10a03ba3e43319bb"
            ]
        ],
        "icon": "font-awesome/fa-bars"
    },
    {
        "id": "10a03ba3e43319bb",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "Get count (DOBRAS)",
        "func": "let dobraT25Test = flow.get('dobraT25Test');\nlet serialNumber = msg.payload.serialNumber;\n\nif (dobraT25Test) {\n    if (dobraT25Test[serialNumber] && dobraT25Test[serialNumber].unit !== null) {\n        let unit = dobraT25Test[serialNumber].unit;\n\n        msg.payload = {\n            timestamp: new Date().getTime(),\n            deviceSerialNumber: serialNumber,\n            unit: unit,\n            count: 1\n        }\n        dobraT25Test[serialNumber].unit = null;\n        flow.set('dobraT25Test', dobraT25Test);\n        return msg;\n    }\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4140,
        "y": 1160,
        "wires": [
            []
        ],
        "icon": "font-awesome/fa-plus"
    },
    {
        "id": "ef4944398eca7f5b",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "Update status machine",
        "func": "let dobraT25Test = flow.get('dobraT25Test') || {};\nlet currentTimestamp = new Date();\nlet messages = [];\n\nif (dobraT25Test) {\n    Object.keys(dobraT25Test).forEach(key => {\n        if (dobraT25Test[key].hasOwnProperty('timestampLastAction') && dobraT25Test[key].hasOwnProperty('timestampLastProduction')) {\n\n            let timestampLastAction = dobraT25Test[key]['timestampLastAction'];\n            let timestampLastProduction = dobraT25Test[key]['timestampLastProduction'];\n            let oldStatus = dobraT25Test[key]['status'];\n\n            let differenceTimeLastAction = timestampLastAction ? (currentTimestamp.getTime() - timestampLastAction.getTime()) / 1000 : null;\n            let differenceTimeLastProduction = timestampLastProduction ? (currentTimestamp.getTime() - timestampLastProduction.getTime()) / 1000 : null;\n\n            const isWorking = (differenceTimeLastAction <= 299 && differenceTimeLastAction !== null) ||\n                (differenceTimeLastProduction <= 299 && differenceTimeLastProduction !== null);\n\n            const isStopped = (differenceTimeLastAction >= 300 && differenceTimeLastProduction >= 300 && differenceTimeLastAction <= 1799) ||\n                (differenceTimeLastAction >= 300 && differenceTimeLastAction <= 1799 && differenceTimeLastProduction === null);\n\n            const isTurnedOff = (differenceTimeLastAction >= 1800 && differenceTimeLastProduction === null) ||\n                (differenceTimeLastAction >= 1800 && differenceTimeLastProduction >= 1800) || differenceTimeLastAction === null;\n\n            const newState = isWorking ? \"TRABALHANDO\" : isStopped ? \"PARADO\" : isTurnedOff ? \"DESLIGADO\" : null;\n\n            if (newState !== null && oldStatus !== newState) {\n                dobraT25Test[key]['status'] = newState;\n\n                messages.push({\n                    serialNumber: key,\n                    currentStatus: newState\n                });\n            }\n\n        }\n    });\n    flow.set('dobraT25Test', dobraT25Test);\n\n    messages.forEach(msg => {\n        node.send({ payload: msg });\n    });\n}\nnode.warn(dobraT25Test);\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3660,
        "y": 1200,
        "wires": [
            [
                "f44002ca43de97ae"
            ]
        ],
        "icon": "font-awesome/fa-exchange"
    },
    {
        "id": "f44002ca43de97ae",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "name": "Get changed Status (Dobras)",
        "func": "let { serialNumber, currentStatus } = msg.payload;\nlet timestamp = new Date().getTime();\n\nif (serialNumber && currentStatus !== null) {\n    msg.payload = {\n        timestamp: timestamp,\n        deviceSerialNumber: serialNumber,\n        status: currentStatus\n    }\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4160,
        "y": 1200,
        "wires": [
            []
        ],
        "icon": "node-red/status.svg"
    },
    {
        "id": "68716042dbe6a028",
        "type": "switch",
        "z": "dae82ca7554ded9f",
        "name": "Machines",
        "property": "payload.serialNumber",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "DF24F3",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "DF55AF",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "ABC123",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 2580,
        "y": 1160,
        "wires": [
            [
                "339641a14a1975ec"
            ],
            [
                "339641a14a1975ec"
            ],
            [
                "339641a14a1975ec"
            ]
        ],
        "icon": "font-awesome/fa-desktop"
    },
    {
        "id": "698c3c9fb676dd35",
        "type": "inject",
        "z": "dae82ca7554ded9f",
        "name": "SWITCH1 ON",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF1860",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch1\": {\"Action\": \"ON\"} }",
        "payloadType": "json",
        "x": 2530,
        "y": 3960,
        "wires": [
            [
                "32648941924fb975"
            ]
        ]
    },
    {
        "id": "b7243081ffe0cb4d",
        "type": "inject",
        "z": "dae82ca7554ded9f",
        "name": "SWITCH1 OFF",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF1860",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch1\": {\"Action\": \"OFF\"} }",
        "payloadType": "json",
        "x": 2540,
        "y": 4000,
        "wires": [
            [
                "32648941924fb975"
            ]
        ]
    },
    {
        "id": "187f216d7b0f7fa5",
        "type": "inject",
        "z": "dae82ca7554ded9f",
        "name": "SWITCH3 ON ",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF1860",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch3\": {\"Action\": \"ON\"} }",
        "payloadType": "json",
        "x": 2530,
        "y": 4140,
        "wires": [
            [
                "32648941924fb975"
            ]
        ]
    },
    {
        "id": "d6d920617da54fb4",
        "type": "inject",
        "z": "dae82ca7554ded9f",
        "name": "SWITCH3 OFF",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF1860",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch3\": {\"Action\": \"OFF\"} }",
        "payloadType": "json",
        "x": 2540,
        "y": 4180,
        "wires": [
            [
                "32648941924fb975"
            ]
        ]
    },
    {
        "id": "9119c950c643d853",
        "type": "inject",
        "z": "dae82ca7554ded9f",
        "name": "STATUS8",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF1860",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"StatusSNS\": {  \"Switch1\": \"ON\" } }",
        "payloadType": "json",
        "x": 2520,
        "y": 4040,
        "wires": [
            [
                "32648941924fb975"
            ]
        ]
    },
    {
        "id": "c117fbf447682317",
        "type": "inject",
        "z": "dae82ca7554ded9f",
        "name": "STATUS8",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF1860",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"StatusSNS\": {  \"Switch1\": \"OFF\" } }",
        "payloadType": "json",
        "x": 2520,
        "y": 4080,
        "wires": [
            [
                "32648941924fb975"
            ]
        ]
    },
    {
        "id": "32648941924fb975",
        "type": "switch",
        "z": "dae82ca7554ded9f",
        "g": "1ec4d17b255d0492",
        "name": "Machines",
        "property": "payload.serialNumber",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "DF1860",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 2800,
        "y": 4120,
        "wires": [
            [
                "bb3bad6416cee5ef"
            ]
        ],
        "icon": "font-awesome/fa-desktop"
    },
    {
        "id": "5c6f5509d8497a26",
        "type": "inject",
        "z": "dae82ca7554ded9f",
        "name": "SWITCH4 ON ",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF1860",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch4\": {\"Action\": \"ON\"} }",
        "payloadType": "json",
        "x": 2550,
        "y": 4240,
        "wires": [
            [
                "32648941924fb975"
            ]
        ]
    },
    {
        "id": "33082e886202c038",
        "type": "inject",
        "z": "dae82ca7554ded9f",
        "name": "SWITCH4 OFF",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF1860",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch4\": {\"Action\": \"OFF\"} }",
        "payloadType": "json",
        "x": 2560,
        "y": 4280,
        "wires": [
            [
                "32648941924fb975"
            ]
        ]
    },
    {
        "id": "bb3bad6416cee5ef",
        "type": "switch",
        "z": "dae82ca7554ded9f",
        "g": "1ec4d17b255d0492",
        "name": "OPTION SW",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "hask",
                "v": "Switch1",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "Switch2",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "Switch3",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "Switch4",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "StatusSNS",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 5,
        "x": 2970,
        "y": 4120,
        "wires": [
            [
                "023b8937453d1649"
            ],
            [
                "023b8937453d1649"
            ],
            [
                "023b8937453d1649"
            ],
            [
                "023b8937453d1649"
            ],
            [
                "023b8937453d1649"
            ]
        ]
    },
    {
        "id": "023b8937453d1649",
        "type": "change",
        "z": "dae82ca7554ded9f",
        "g": "1ec4d17b255d0492",
        "name": "delete time",
        "rules": [
            {
                "t": "delete",
                "p": "payload.timestamp",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.StatusSNS.Time",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.StatusSNS.Switch2",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.StatusSNS.Switch4",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 3150,
        "y": 4120,
        "wires": [
            [
                "785b5ea46503e637"
            ]
        ],
        "icon": "font-awesome/fa-times-circle"
    },
    {
        "id": "785b5ea46503e637",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "g": "1ec4d17b255d0492",
        "name": "Usina object main",
        "func": "let usinagemProperties = flow.get('usinagemProperties') || {};\nlet serialNumber = msg.payload.serialNumber;\nlet getSwitch = Object.keys(msg.payload).find(key => key.startsWith('Switch')) || null;\nlet getStatusSNS = Object.keys(msg.payload).find(key => key.startsWith('StatusSNS')) || null;\n\nif (getSwitch !== null || getStatusSNS !== null) {\n    if (!usinagemProperties[serialNumber]) {\n        usinagemProperties[serialNumber] = {\n            \"readyMachine\": false,\n            \"idleMachine\": false,\n            \"verifyMachine\": false,\n            \"openDoor\": false,\n            \"closeDoor\": false,\n            \"verifyDoor\": false,\n            \"startProgram\": false,\n            \"finishedProgram\": false,\n            \"verifyProgram\": false,\n            \"startAlarm\": false,\n            \"finishedAlarm\": false,\n            \"verifyAlarm\": false,\n            \"runningProgram\": false,\n            \"alarmCount\": 0,\n            \"programCount\": 0,\n            \"dateStartProduction\": null,\n            \"dateLastProduction\": null,\n            \"unit\": null,\n            \"status\": null\n        }\n    }\n}\nflow.set('usinagemProperties', usinagemProperties);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3330,
        "y": 4120,
        "wires": [
            [
                "f35098cd611cebb4"
            ]
        ],
        "icon": "font-awesome/fa-save"
    },
    {
        "id": "f35098cd611cebb4",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "g": "1ec4d17b255d0492",
        "name": "Handle switches",
        "func": "let handleSwitch = function(payload, context, machineProperties, switchName, statusSNSName,startName, finishName, verifyName) {\nlet switchKey = Object.keys(payload).find(key => key.startsWith(switchName));\nlet switchState = context.get(switchName) || null;\nlet actionValue = payload[switchKey] ? payload[switchKey].Action : null;\nlet statusSNS = payload[statusSNSName] && payload[statusSNSName][switchName];\nlet startState = machineProperties[startName] || false;\nlet finishState = machineProperties[finishName] || false;\nlet verifyState = machineProperties[verifyName] || false;\n\nswitchState = actionValue || statusSNS || switchState;; // Adquire o estado do switch que chegou\n\nif (switchState === \"ON\") {\n    startState = true;\n\n} else if (switchState === \"OFF\" && startState) {\n    finishState = true;\n}\nif (startState && finishState) {\n    verifyState = true;\n    startState = false;\n    finishState = false;\n}\nmachineProperties[startName] = startState;\nmachineProperties[finishName] = finishState;\nmachineProperties[verifyName] = verifyState;\nreturn {\n    switchState: switchState,\n    startState: startState,\n    finishState: finishState,\n    verifyState: verifyState\n};\n}\nlet payload = msg.payload;\nlet serialNumber = msg.payload.serialNumber;\nlet usinagemProperties = flow.get('usinagemProperties');\nlet machineProperties = usinagemProperties[serialNumber];\nlet readyMachine = handleSwitch(payload,context,machineProperties,'Switch1','StatusSNS','readyMachine','idleMachine','verifyMachine');\nlet doorMachine = handleSwitch(payload,context,machineProperties,'Switch2','StatusSNS','openDoor','closeDoor','verifyDoor');\nlet verifyProgram = handleSwitch(payload,context,machineProperties,'Switch3','StatusSNS','startProgram','finishedProgram','verifyProgram');\nlet verifyAlarm = handleSwitch(payload,context,machineProperties,'Switch4','StatusSNS','startAlarm','finishedAlarm','verifyAlarm');\n\nusinagemProperties[serialNumber].readyMachine = readyMachine.startState;\nusinagemProperties[serialNumber].idleMachine = readyMachine.finishState;\nusinagemProperties[serialNumber].verifyMachine = readyMachine.verifyState;\nusinagemProperties[serialNumber].openDoor = doorMachine.startState;\nusinagemProperties[serialNumber].closeDoor = doorMachine.finishState;\nusinagemProperties[serialNumber].verifyDoor = doorMachine.verifyState;\nusinagemProperties[serialNumber].startProgram = verifyProgram.startState;\nusinagemProperties[serialNumber].finishedProgram = verifyProgram.finishState;\nusinagemProperties[serialNumber].verifyProgram = verifyProgram.verifyState;\nusinagemProperties[serialNumber].startAlarm = verifyAlarm.startState;\nusinagemProperties[serialNumber].finishedAlarm = verifyAlarm.finishState;\nusinagemProperties[serialNumber].verifyAlarm = verifyAlarm.verifyState;\nflow.set('usinagemProperties', usinagemProperties);\n\nreadyMachine.verifyState = false;\ndoorMachine.verifyState = false;\nverifyProgram.verifyState = false;\nverifyAlarm.verifyState = false;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3520,
        "y": 4120,
        "wires": [
            [
                "f4487c67175593b4"
            ]
        ],
        "icon": "node-red/swap.svg"
    },
    {
        "id": "f4487c67175593b4",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "g": "1ec4d17b255d0492",
        "name": "Conditions machine",
        "func": "let usinagemProperties = flow.get('usinagemProperties');\nlet serialNumber = msg.payload.serialNumber;\nlet currentTimestamp = new Date();\nif (usinagemProperties[serialNumber].readyMachine && usinagemProperties[serialNumber].startProgram && \n!usinagemProperties[serialNumber].runningProgram) {\n    usinagemProperties[serialNumber].runningProgram = true;\n    usinagemProperties[serialNumber].dateStartProduction = currentTimestamp;\n}\nelse if (usinagemProperties[serialNumber].verifyProgram && usinagemProperties[serialNumber].runningProgram) {\n    usinagemProperties[serialNumber].dateStartProduction = null;\n    usinagemProperties[serialNumber].dateLastProduction = currentTimestamp;\n    usinagemProperties[serialNumber].programCount += 1;\n    usinagemProperties[serialNumber].unit = \"Programas\";\n    usinagemProperties[serialNumber].runningProgram = false;\n    usinagemProperties[serialNumber].verifyProgram = false;\n}\n\nif (usinagemProperties[serialNumber].verifyAlarm) {\n    usinagemProperties[serialNumber].alarmCount += 1;\n    usinagemProperties[serialNumber].unit = \"Alarmes\";\n    usinagemProperties[serialNumber].verifyAlarm = false;\n}\nflow.set('usinagemProperties', usinagemProperties);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3730,
        "y": 4120,
        "wires": [
            [
                "ae362b8d0740b8a8",
                "3ac09b457be35964"
            ]
        ],
        "icon": "font-awesome/fa-bars"
    },
    {
        "id": "ae362b8d0740b8a8",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "g": "1ec4d17b255d0492",
        "name": "Update status machine",
        "func": "let usinagemProperties = flow.get('usinagemProperties');\nlet currentTimestamp = new Date();\nlet messages = [];\n\nif (usinagemProperties) {\n    Object.keys(usinagemProperties).forEach(key => {\n        if (usinagemProperties[key].hasOwnProperty('dateStartProduction') && usinagemProperties[key].hasOwnProperty('dateLastProduction')) {\n            let dateStartProduction = usinagemProperties[key]['dateStartProduction'];\n            let dateLastProduction = usinagemProperties[key]['dateLastProduction'];\n            let oldStatus = usinagemProperties[key]['status'];\n        \n            let timeCurrentProduction = dateStartProduction ?(currentTimestamp.getTime() - dateStartProduction.getTime()) / 1000 : null;\n            let timeLastProduction = dateLastProduction ? (currentTimestamp.getTime() - dateLastProduction.getTime()) / 1000 : null;\n\n            const isWorking = (dateStartProduction !== null) || \n            (dateStartProduction === null && timeLastProduction <= 299 && timeLastProduction !== null);\n\n            const isStopped = (dateStartProduction === null && timeLastProduction >= 299 && timeLastProduction <= 1799);\n\n            const isTunnedOff = (dateStartProduction === null && timeLastProduction >= 1800);\n\n            const newState = isWorking ? \"TRABALHANDO\" : isStopped ? \"PARADO\" : isTunnedOff ? \"DESLIGADO\" : null;\n\n            if (newState !== null && oldStatus !== newState) {\n                usinagemProperties[key]['status'] = newState;\n\n                messages.push(({\n                    serialNumber: key,\n                    currentStatus: newState\n                }));\n            } \n        }\n    });\n    \n    flow.set('usinagemProperties', usinagemProperties);\n    messages.forEach(msg => {\n        node.send({payload: msg});\n\n        return msg;\n    })\n}\nnode.warn(usinagemProperties);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3980,
        "y": 4140,
        "wires": [
            [
                "ef7bf7c449af8be3"
            ]
        ],
        "icon": "font-awesome/fa-exchange"
    },
    {
        "id": "dbf134252df13b56",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "g": "1ec4d17b255d0492",
        "name": "Get count (Programas)",
        "func": "let serialNumber = msg.payload.serialNumber;\nlet usinagemProperties = flow.get('usinagemProperties');\n\nif (usinagemProperties) {\n    if (usinagemProperties[serialNumber] && usinagemProperties[serialNumber].unit !== null) {\n        let unit = usinagemProperties[serialNumber].unit;\n\n        msg.payload = {\n            timestamp: new Date().getTime(),\n            deviceSerialNumber: serialNumber,\n            unit: unit,\n            count: 1\n        }\n        usinagemProperties[serialNumber].unit = null;\n        flow.set('usinagemProperties', usinagemProperties);\n\n        return msg;\n    }\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4320,
        "y": 4100,
        "wires": [
            []
        ],
        "icon": "font-awesome/fa-plus"
    },
    {
        "id": "ef7bf7c449af8be3",
        "type": "function",
        "z": "dae82ca7554ded9f",
        "g": "1ec4d17b255d0492",
        "name": "Get changed status (Usinagem)",
        "func": "let {serialNumber, currentStatus } = msg.payload;\nlet timestamp = new Date().getTime();\n\nif (serialNumber && currentStatus !== null) {\n    msg.payload = {\n        timestamp: timestamp,\n        deviceSerialNumber: serialNumber,\n        status: currentStatus\n    }\n    return msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4350,
        "y": 4140,
        "wires": [
            []
        ],
        "icon": "node-red/status.svg"
    },
    {
        "id": "676da02b4a4d8fb0",
        "type": "catch",
        "z": "dae82ca7554ded9f",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 960,
        "y": 1960,
        "wires": [
            [
                "cf0276bd868a445a"
            ]
        ]
    },
    {
        "id": "76969545be998e01",
        "type": "inject",
        "z": "dae82ca7554ded9f",
        "name": "RESET",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "reset",
        "payloadType": "str",
        "x": 1110,
        "y": 1680,
        "wires": [
            [
                "49151e42e3561d3e"
            ]
        ],
        "icon": "font-awesome/fa-hourglass-1"
    },
    {
        "id": "e466bc44f94b60ac",
        "type": "inject",
        "z": "d67cea8fca67c9ff",
        "name": "SWITCH1 ON",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF362F",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch1\":{\"Action\":\"ON\"}}",
        "payloadType": "json",
        "x": 190,
        "y": 60,
        "wires": [
            [
                "9ffe7f79a0994c54"
            ]
        ]
    },
    {
        "id": "a0311df2fb8b6fc5",
        "type": "inject",
        "z": "d67cea8fca67c9ff",
        "name": "SWITCH1 OFF",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF362F",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch1\":{\"Action\":\"OFF\"}}",
        "payloadType": "json",
        "x": 200,
        "y": 100,
        "wires": [
            [
                "9ffe7f79a0994c54"
            ]
        ]
    },
    {
        "id": "9ffe7f79a0994c54",
        "type": "function",
        "z": "d67cea8fca67c9ff",
        "name": "Switch State",
        "func": "function handleSwitch(payload, context, switchName, startName, finishName, verifyName) {\n    let switchState = context.get(switchName) || null;\n    let startState = context.get(startName) || false;\n    let finishState = context.get(finishName) || false;\n    let verifyState = context.get(verifyName) || false;\n\n    if (payload[switchName] && payload[switchName].Action === \"ON\") {\n        switchState = \"ON\";\n        startState = true;\n    }\n    else if (payload[switchName] && payload[switchName].Action ===\"OFF\" && startState === true) {\n        switchState = \"OFF\";\n        finishState = true;\n    }\n\n    if (startState && finishState) {\n        verifyState = true;\n        startState = false;\n        finishState = false;\n    }\n    context.set(switchName, switchState);\n    context.set(startName, startState);\n    context.set(finishName, finishState);\n    context.set(verifyName, verifyState);\n\n    return {\n        switchState: switchState,\n        startState: startState,\n        finishState: finishState,\n        verifyState: verifyState\n    };\n}\nlet payload = msg.payload;\nlet partOutput = handleSwitch(payload,context,'Switch1','startPart','finishPart','verifyPart');\n\nmsg.switches = {\n    switch1: partOutput.switchState,\n    startPart: partOutput.startState,\n    verifyPart: partOutput.verifyState,\n}\npartOutput.verifyState = false;\ncontext.set('verifyPart', partOutput.verifyState);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 80,
        "wires": [
            [
                "19204fb391b3f4a1"
            ]
        ],
        "icon": "node-red/swap.svg"
    },
    {
        "id": "19204fb391b3f4a1",
        "type": "function",
        "z": "d67cea8fca67c9ff",
        "name": "machine conditions",
        "func": "let {startPart, verifyPart } = msg.switches;\n\nmsg.conditions = {\n    startPart: startPart,\n    verifyPart: verifyPart,\n    serialNumber: msg.payload.serialNumber\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 80,
        "wires": [
            [
                "f6b81533ee87c655"
            ]
        ],
        "icon": "font-awesome/fa-bars"
    },
    {
        "id": "f6b81533ee87c655",
        "type": "function",
        "z": "d67cea8fca67c9ff",
        "name": "Machine production",
        "func": "let {startPart, verifyPart, serialNumber } = msg.conditions;\nlet [machine, dateStartProduction, dateLastProduction] = ['machine', 'dateStartProduction', 'dateLastProduction'].map(\n    key => context.get(key) || null);\n    let partCount = context.get('partCount') || 0;\n    let resetShift = context.get('resetShift') || false;\n    let currentTimestamp = new Date();\n\nconst actions = {\n    resetShift: () => {partCount = 0; resetShift = false},\n    payloadReset: () => { resetShift = true; },\n    startProduction: () => { dateStartProduction = currentTimestamp; },\n    finishedProduction: () => { partCount += 2, dateLastProduction = currentTimestamp},\n    machineNull: () => { machine = serialNumber; }\n};\nconst conditions = {\n    resetShift: resetShift,\n    payloadReset: msg.payload === 'reset',\n    startProduction: startPart,\n    finishedProduction: verifyPart,\n    machineNull: (serialNumber && machine === null) || (serialNumber && machine !== null && machine !== serialNumber)\n};\n\nObject.entries(conditions).forEach(([condition, isTrue]) => {\n    if (isTrue && actions[condition]) actions[condition]();\n});\ncontext.set('partCount', partCount);\ncontext.set('resetShift', resetShift);\ncontext.set('dateStartProduction', dateStartProduction);\ncontext.set('dateLastProduction', dateLastProduction);\ncontext.set('machine', machine);\n\nmsg.data = {\n    verifyPart: verifyPart,\n    parts: partCount,\n    dateStartProduction: dateStartProduction,\n    dateLastProduction: dateLastProduction,\n    reset: resetShift,\n    machine: machine,\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 80,
        "wires": [
            [
                "e53798c1f90e8fc5",
                "fc9a2681afe37489"
            ]
        ],
        "icon": "font-awesome/fa-book"
    },
    {
        "id": "e53798c1f90e8fc5",
        "type": "function",
        "z": "d67cea8fca67c9ff",
        "name": "ENTUFADORA 07",
        "func": "let { verifyPart, parts, machine } = msg.data;\n\nmsg.payload = {\n    verifyPart,\n    pecas: parts,\n    deviceSerialNumber: machine\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1170,
        "y": 80,
        "wires": [
            [
                "c91c7373c37b4083"
            ]
        ],
        "icon": "font-awesome/fa-cogs"
    },
    {
        "id": "fc9a2681afe37489",
        "type": "function",
        "z": "d67cea8fca67c9ff",
        "name": "Verify status",
        "func": "let { dateStartProduction, dateLastProduction, machine} = msg.data;\nlet [differenceTimeStartProduction, differenceTimeLastProducion] = ['dateStartProduction', 'differenceTimeLastProducion'].map(key =>\ncontext.get(key) || 0);\nlet currentTimestamp = new Date();\nlet currentStatus = context.get('currentStatus');\n\ndifferenceTimeStartProduction = dateStartProduction !== null ? (currentTimestamp.getTime() - dateStartProduction.getTime()) / 1000 : null;\ndifferenceTimeLastProducion = dateLastProduction !== null ? (currentTimestamp.getTime() - dateLastProduction.getTime()) / 1000 : null;\n\ncontext.set('differenceTimeLastProducion', differenceTimeStartProduction);\ncontext.set('differenceTimeLastProducion', differenceTimeLastProducion);\n\nif (dateStartProduction !== null) {\n    \n    //Mapear status\n    const machineWorking = (differenceTimeStartProduction <= 59 && dateStartProduction !== null) \n    || (differenceTimeLastProducion !== null && differenceTimeLastProducion <= 59);\n\n    const machineIdle = (differenceTimeStartProduction >= 60 && differenceTimeLastProducion >= 60 && differenceTimeLastProducion <= 1799) ||\n    (differenceTimeStartProduction >= 60 && differenceTimeStartProduction <= 1799 && dateLastProduction === null);\n\n    const machineOff = ((differenceTimeStartProduction >= 60 && differenceTimeLastProducion >= 1800)\n    || differenceTimeStartProduction >= 1800 && dateLastProduction === null);\n\n    const newStatus = machineWorking ? 'TRABALHANDO' : machineIdle ? 'PARADO' : machineOff ? 'DESLIGADO' : null;\n    if (newStatus) currentStatus = newStatus;\n}\n\nif (dateStartProduction === null) currentStatus = \"DESLIGADO\";\n\ncontext.set('currentStatus', currentStatus);\n\nmsg.status = {\n    timeCurrentProduction: differenceTimeStartProduction,\n    timeLastProduction: differenceTimeLastProducion,\n    machine: machine,\n    currentStatus: currentStatus\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1150,
        "y": 120,
        "wires": [
            [
                "0b80e33d9156da62"
            ]
        ],
        "icon": "node-red/status.svg"
    },
    {
        "id": "75bd054bd4e29e34",
        "type": "function",
        "z": "d67cea8fca67c9ff",
        "name": "Switch State",
        "func": "function handleSwitch(payload, context, switchName, startName, finishName, verifyName) {\n    let switchState = context.get(switchName) || null;\n    let startState = context.get(startName) || false;\n    let finishState = context.get(finishName) || false;\n    let verifyState = context.get(verifyName) || false;\n\n    if (payload[switchName] && payload[switchName].Action === \"ON\") {\n        switchState = \"ON\";\n        startState = true;\n    }\n    else if (payload[switchName] && payload[switchName].Action ===\"OFF\" && startState === true) {\n        switchState = \"OFF\";\n        finishState = true;\n    }\n\n    if (startState && finishState) {\n        verifyState = true;\n        startState = false;\n        finishState = false;\n    }\n    context.set(switchName, switchState);\n    context.set(startName, startState);\n    context.set(finishName, finishState);\n    context.set(verifyName, verifyState);\n\n    return {\n        switchState: switchState,\n        startState: startState,\n        finishState: finishState,\n        verifyState: verifyState\n    };\n}\nlet payload = msg.payload;\nlet engineSpin = handleSwitch(payload,context,'Switch1','startSpin','finishedSpin','verifyEngineSpin');\nlet verifyThread = handleSwitch(payload, context, 'Switch2', 'startThread', 'finishedThread', 'verifyThread');\n\nmsg.switches = {\n    switch1: engineSpin.switchState,\n    switch2: verifyThread.switchState,\n    startSpin: engineSpin.startState,\n    finishedSpin: engineSpin.verifyState,\n    startThread: verifyThread.startState,\n    verifyThread: verifyThread.verifyState,\n}\n\nif (engineSpin.verifyState && verifyThread.startState) {\n    engineSpin.verifyState = false;\n    context.set('verifyEngineSpin', engineSpin.verifyState);\n}\nverifyThread.verifyState = false;\ncontext.set('verifyThread', verifyThread.verifyState);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 260,
        "wires": [
            [
                "3a527e82daa766d3"
            ]
        ],
        "icon": "node-red/swap.svg"
    },
    {
        "id": "3a527e82daa766d3",
        "type": "function",
        "z": "d67cea8fca67c9ff",
        "name": "machine conditions",
        "func": "let {startSpin, finishedSpin, startThread, verifyThread } = msg.switches;\nlet startPart = context.get('startPart') || false;\nlet finishedPart = context.get('finishedPart') || false;\n\nif (startSpin && !startPart) {\n    startPart = true;\n}\nelse if (startPart && finishedSpin && startThread) {\n    startPart = false;\n    finishedPart = true;\n}\ncontext.set('startPart', startPart);\ncontext.set('finishedPart', finishedPart);\n\nmsg.conditions = {\n    startPart: startPart,\n    verifyPart: finishedPart,\n    serialNumber: msg.payload.serialNumber\n}\nfinishedPart = false;\ncontext.set('finishedPart', finishedPart);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 260,
        "wires": [
            [
                "faa590e7cfbc3955"
            ]
        ],
        "icon": "font-awesome/fa-bars"
    },
    {
        "id": "faa590e7cfbc3955",
        "type": "function",
        "z": "d67cea8fca67c9ff",
        "name": "Machine production",
        "func": "let {startPart, verifyPart, serialNumber } = msg.conditions;\nlet [machine, dateStartProduction, dateLastProduction] = ['machine', 'dateStartProduction', 'dateLastProduction'].map(\n    key => context.get(key) || null);\n    let partCount = context.get('partCount') || 0;\n    let resetShift = context.get('resetShift') || false;\n    let currentTimestamp = new Date();\n\nconst actions = {\n    resetShift: () => {partCount = 0; resetShift = false},\n    payloadReset: () => { resetShift = true; },\n    startProduction: () => { dateStartProduction = currentTimestamp; },\n    finishedProduction: () => { partCount++, dateLastProduction = currentTimestamp},\n    machineNull: () => { machine = serialNumber; }\n};\nconst conditions = {\n    resetShift: resetShift,\n    payloadReset: msg.payload === 'reset',\n    startProduction: startPart,\n    finishedProduction: verifyPart,\n    machineNull: (serialNumber && machine === null) || (serialNumber && machine !== null && machine !== serialNumber)\n};\n\nObject.entries(conditions).forEach(([condition, isTrue]) => {\n    if (isTrue && actions[condition]) actions[condition]();\n});\ncontext.set('partCount', partCount);\ncontext.set('resetShift', resetShift);\ncontext.set('dateStartProduction', dateStartProduction);\ncontext.set('dateLastProduction', dateLastProduction);\ncontext.set('machine', machine);\n\nmsg.data = {\n    verifyPart: verifyPart,\n    parts: partCount,\n    dateStartProduction: dateStartProduction,\n    dateLastProduction: dateLastProduction,\n    reset: resetShift,\n    machine: machine,\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 970,
        "y": 260,
        "wires": [
            [
                "b85d9ac2db5fb802",
                "c53ab429bd4993d7"
            ]
        ],
        "icon": "font-awesome/fa-book"
    },
    {
        "id": "b85d9ac2db5fb802",
        "type": "function",
        "z": "d67cea8fca67c9ff",
        "name": "EMBOBINADORA AT-2",
        "func": "let {verifyPart, parts, machine } = msg.data;\n\nmsg.payload = {\n    verifyPart: verifyPart,\n    pecas: parts,\n    deviceSerialNumber: machine\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1250,
        "y": 240,
        "wires": [
            []
        ],
        "icon": "font-awesome/fa-cogs"
    },
    {
        "id": "c53ab429bd4993d7",
        "type": "function",
        "z": "d67cea8fca67c9ff",
        "name": "Verify status",
        "func": "let { dateStartProduction, dateLastProduction, machine} = msg.data;\nlet [differenceTimeStartProduction, differenceTimeLastProducion] = ['dateStartProduction', 'differenceTimeLastProducion'].map(key =>\ncontext.get(key) || 0);\nlet currentTimestamp = new Date();\nlet currentStatus = context.get('currentStatus');\n\ndifferenceTimeStartProduction = dateStartProduction !== null ? (currentTimestamp.getTime() - dateStartProduction.getTime()) / 1000 : null;\ndifferenceTimeLastProducion = dateLastProduction !== null ? (currentTimestamp.getTime() - dateLastProduction.getTime()) / 1000 : null;\n\ncontext.set('differenceTimeLastProducion', differenceTimeStartProduction);\ncontext.set('differenceTimeLastProducion', differenceTimeLastProducion);\n\nif (dateStartProduction !== null) {\n    \n    //Mapear status\n    const machineWorking = (differenceTimeStartProduction <= 59 && dateStartProduction !== null) \n    || (differenceTimeLastProducion !== null && differenceTimeLastProducion <= 59);\n\n    const machineIdle = (differenceTimeStartProduction >= 60 && differenceTimeLastProducion >= 60 && differenceTimeLastProducion <= 1799) ||\n    (differenceTimeStartProduction >= 60 && differenceTimeStartProduction <= 1799 && dateLastProduction === null);\n\n    const machineOff = ((differenceTimeStartProduction >= 60 && differenceTimeLastProducion >= 1800)\n    || differenceTimeStartProduction >= 1800 && dateLastProduction === null);\n\n    const newStatus = machineWorking ? 'TRABALHANDO' : machineIdle ? 'PARADO' : machineOff ? 'DESLIGADO' : null;\n    if (newStatus) currentStatus = newStatus;\n}\n\nif (dateStartProduction === null) currentStatus = \"DESLIGADO\";\n\ncontext.set('currentStatus', currentStatus);\n\nmsg.status = {\n    timeCurrentProduction: differenceTimeStartProduction,\n    timeLastProduction: differenceTimeLastProducion,\n    machine: machine,\n    currentStatus: currentStatus\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1210,
        "y": 280,
        "wires": [
            []
        ],
        "icon": "node-red/status.svg"
    },
    {
        "id": "31bba492977f05a9",
        "type": "inject",
        "z": "d67cea8fca67c9ff",
        "name": "SWITCH2 ON",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "ABC123",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch2\":{\"Action\":\"ON\"}}",
        "payloadType": "json",
        "x": 190,
        "y": 280,
        "wires": [
            [
                "75bd054bd4e29e34"
            ]
        ]
    },
    {
        "id": "781a55fabe33cea3",
        "type": "inject",
        "z": "d67cea8fca67c9ff",
        "name": "SWITCH2 OFF",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "ABC123",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch2\":{\"Action\":\"OFF\"}}",
        "payloadType": "json",
        "x": 200,
        "y": 320,
        "wires": [
            [
                "75bd054bd4e29e34"
            ]
        ]
    },
    {
        "id": "4e3c96b06bf7383f",
        "type": "inject",
        "z": "d67cea8fca67c9ff",
        "name": "SWITCH1 ON",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "ABC123",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch1\":{\"Action\":\"ON\"}}",
        "payloadType": "json",
        "x": 190,
        "y": 180,
        "wires": [
            [
                "75bd054bd4e29e34"
            ]
        ]
    },
    {
        "id": "6a113c51e5ece362",
        "type": "inject",
        "z": "d67cea8fca67c9ff",
        "name": "SWITCH1 OFF",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "ABC123",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch1\":{\"Action\":\"OFF\"}}",
        "payloadType": "json",
        "x": 200,
        "y": 220,
        "wires": [
            [
                "75bd054bd4e29e34"
            ]
        ]
    },
    {
        "id": "67bbdde0d7fcdf38",
        "type": "function",
        "z": "d67cea8fca67c9ff",
        "g": "319b7172e1fdd35f",
        "name": "Entufadora ",
        "func": "let entufadoraProperties = flow.get('entufadoraProperties') || {};\nlet serialNumber = msg.payload.serialNumber;\n\nif (msg.payload.Switch1 && (msg.payload.Switch1.Action === \"ON\" || msg.payload.Switch1.Action === \"OFF\")) {\n    if (!entufadoraProperties[serialNumber]) {\n        entufadoraProperties[serialNumber] = {\n            \"partStart\": false,\n            \"pecas\": 0,\n            \"timestampLastAction\": null,\n            \"timestampLastProduction\": null,\n            \"unit\": null,\n            \"status\": null,\n        }\n    }\n}\nflow.set('entufadoraProperties', entufadoraProperties);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 460,
        "wires": [
            [
                "2e956ba13e82985b"
            ]
        ],
        "icon": "font-awesome/fa-save"
    },
    {
        "id": "06703c7ef9ffca3c",
        "type": "inject",
        "z": "d67cea8fca67c9ff",
        "name": "SWITCH1 ON",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "ABC123",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch1\":{\"Action\":\"ON\"}}",
        "payloadType": "json",
        "x": 190,
        "y": 440,
        "wires": [
            [
                "67bbdde0d7fcdf38"
            ]
        ]
    },
    {
        "id": "91642de799e97d87",
        "type": "inject",
        "z": "d67cea8fca67c9ff",
        "name": "SWITCH1 OFF",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "ABC123",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch1\":{\"Action\":\"OFF\"}}",
        "payloadType": "json",
        "x": 200,
        "y": 480,
        "wires": [
            [
                "67bbdde0d7fcdf38"
            ]
        ]
    },
    {
        "id": "2e956ba13e82985b",
        "type": "function",
        "z": "d67cea8fca67c9ff",
        "g": "319b7172e1fdd35f",
        "name": "machine Conditions",
        "func": "let serialNumber = msg.payload.serialNumber;\nlet entufadoraProperties = flow.get('entufadoraProperties') || {};\nlet currentTimestamp = new Date();\n\nif ((msg.payload.Switch1 && msg.payload.Switch1.Action === \"ON\") && (!entufadoraProperties[serialNumber].partStart)) {\n    entufadoraProperties[serialNumber].partStart = true;\n    entufadoraProperties[serialNumber].timestampLastAction = currentTimestamp;\n}\nelse if ((msg.payload.Switch1 && msg.payload.Switch1.Action === \"OFF\") && entufadoraProperties[serialNumber].partStart) {\n\n        entufadoraProperties[serialNumber].partStart = false;\n        entufadoraProperties[serialNumber].pecas += 1;\n        entufadoraProperties[serialNumber].timestampLastProduction = currentTimestamp;\n        entufadoraProperties[serialNumber].unit = \"Pe√ßas\";\n}\nflow.set('entufadoraProperties', entufadoraProperties);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 460,
        "wires": [
            [
                "e581c91616246ca2",
                "47672d3b5ef17365"
            ]
        ],
        "icon": "font-awesome/fa-bars"
    },
    {
        "id": "e581c91616246ca2",
        "type": "function",
        "z": "d67cea8fca67c9ff",
        "g": "319b7172e1fdd35f",
        "name": "Update status machine",
        "func": "let entufadoraProperties = flow.get('entufadoraProperties') || {};\nlet currentTimestamp = new Date();\nlet messages = [];\n\nif (entufadoraProperties) {\n    Object.keys(entufadoraProperties).forEach(key => {\n        if (entufadoraProperties[key].hasOwnProperty('timestampLastAction') \n        && entufadoraProperties[key].hasOwnProperty('timestampLastAction')) {\n            \n            let timestampLastAction = entufadoraProperties[key]['timestampLastAction'];\n            let timestampLastProduction = entufadoraProperties[key]['timestampLastProduction'];\n\n            let differenceTimeLastAction = timestampLastAction ? (currentTimestamp.getTime() - timestampLastAction.getTime()) / 1000 : null;\n            let differenceTimeLastProduction = timestampLastProduction ? (currentTimestamp.getTime() - timestampLastProduction.getTime()) / 1000 : null;\n            let oldState = entufadoraProperties[key]['status'];\n\n            const isWorking = (differenceTimeLastAction !== null && differenceTimeLastAction <= 59) \n            || (differenceTimeLastProduction !== null && differenceTimeLastProduction <= 59);\n\n            const isStopped = (differenceTimeLastAction >= 300 && differenceTimeLastProduction <= 300 && differenceTimeLastProduction <= 1799) ||\n            (differenceTimeLastAction >= 300 && differenceTimeLastAction <= 1799 && differenceTimeLastProduction === null);\n\n            const isTurnedOff = differenceTimeLastAction >= 1800  || differenceTimeLastProduction >= 1800 || differenceTimeLastAction === null;\n\n            const newState = isWorking ? \"TRABALHANDO\" : isStopped ? \"PARADO\" : isTurnedOff ? \"DESLIGADO\" : null;\n\n            if (newState !== null && oldState !== newState) {\n                entufadoraProperties[key]['status'] = newState;\n\n                messages.push(({\n                    serialNumber: key,\n                    currentStatus: newState\n                }));\n            }\n        }\n    });\n    flow.set('entufadoraProperties', entufadoraProperties);\n\n    messages.forEach(msg => {\n        node.send({ payload: msg});\n\n        return msg;\n    });\n}\nnode.warn(entufadoraProperties);",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 940,
        "y": 480,
        "wires": [
            [
                "94cf94b292b46154"
            ]
        ],
        "icon": "font-awesome/fa-exchange"
    },
    {
        "id": "b104fd013e73bedb",
        "type": "function",
        "z": "d67cea8fca67c9ff",
        "g": "319b7172e1fdd35f",
        "name": "Get Count (Pe√ßas)",
        "func": "let serialNumber = msg.payload.serialNumber;\nlet entufadoraProperties = flow.get('entufadoraProperties') || {};\n\nif (entufadoraProperties) {\n    if (entufadoraProperties[serialNumber] && entufadoraProperties[serialNumber].unit !== null) {\n        let unit = entufadoraProperties[serialNumber].unit;\n\n        msg.payload = {\n            timestamp: new Date().getTime(),\n            deviceSerialNumber: serialNumber,\n            unit: unit,\n            count: 1\n        }\n        entufadoraProperties[serialNumber].unit = null;\n        flow.set('entufadoraProperties', entufadoraProperties);\n\n        return msg;\n    }\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1230,
        "y": 440,
        "wires": [
            []
        ],
        "icon": "font-awesome/fa-plus"
    },
    {
        "id": "94cf94b292b46154",
        "type": "function",
        "z": "d67cea8fca67c9ff",
        "g": "319b7172e1fdd35f",
        "name": "Get changed status (ENTUFADORA)",
        "func": "let { serialNumber, currentStatus } = msg.payload;\nlet timestamp = new Date().getTime();\n\nif (serialNumber && currentStatus !== null) {\n    msg.payload = {\n        timestamp: timestamp,\n        deviceSerialNumber: serialNumber,\n        status: currentStatus\n    }\n    return msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1290,
        "y": 480,
        "wires": [
            []
        ],
        "icon": "font-awesome/fa-flash"
    },
    {
        "id": "10c6bdc18c824cfa",
        "type": "http request",
        "z": "d67cea8fca67c9ff",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://201.48.250.181:5800/api/v2/event/count/1",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1610,
        "y": 80,
        "wires": [
            [
                "71e67d0f80ca562a"
            ]
        ]
    },
    {
        "id": "c91c7373c37b4083",
        "type": "function",
        "z": "d67cea8fca67c9ff",
        "name": "Increment PE√áAS",
        "func": "let { verifyPart, deviceSerialNumber } = msg.payload;\nlet unit = context.get('unit') || null;\nlet count = context.get('count') || 0;\nlet currentTimestamp = new Date();\n\nif (verifyPart === true) {\n    unit = \"Pe√ßas\";\n    count = 1;\n    context.set('unit', unit);\n    context.set('count', count);\n\n    msg.payload = {\n        timestamp: currentTimestamp.getTime(),\n        deviceSerialNumber: deviceSerialNumber,\n        unit: unit,\n        count: count,\n    }\n    msg.count = msg.payload;\n    return msg;\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1410,
        "y": 80,
        "wires": [
            []
        ],
        "icon": "node-red/arrow-in.svg"
    },
    {
        "id": "71e67d0f80ca562a",
        "type": "function",
        "z": "d67cea8fca67c9ff",
        "name": "Get count error",
        "func": "let testeError = flow.get('testeError') || []; // Inicializa como um array vazio se n√£o existir\n\nif (msg.payload !== true) {\n    testeError.push(msg.count);\n}\nflow.set('testeError', testeError); // Salva a vari√°vel de volta no contexto",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1840,
        "y": 80,
        "wires": [
            [
                "1b357155b1c00730"
            ]
        ]
    },
    {
        "id": "1b357155b1c00730",
        "type": "debug",
        "z": "d67cea8fca67c9ff",
        "name": "debug 304",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2110,
        "y": 180,
        "wires": []
    },
    {
        "id": "d5f5c68b812fb125",
        "type": "function",
        "z": "d67cea8fca67c9ff",
        "g": "ee168877431e79e5",
        "name": "Format payload object",
        "func": "let lostCount = flow.get('lostCount') || [];\n\nif (lostCount.length > 0) {\n    for (let i = 0; i < lostCount.length; i++) { // Percorre o objeto \n        const count = lostCount[i];\n\n        const msgToSend = {\n            payload: count,\n            index: count.timestamp\n        };\n        node.send(msgToSend);\n\n    }\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 1180,
        "wires": [
            [
                "311d3a90f2ea45ab"
            ]
        ],
        "icon": "node-red/envelope.svg"
    },
    {
        "id": "5c2d70f9b738e8e4",
        "type": "inject",
        "z": "d67cea8fca67c9ff",
        "g": "ee168877431e79e5",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 210,
        "y": 1180,
        "wires": [
            [
                "d5f5c68b812fb125"
            ]
        ]
    },
    {
        "id": "311d3a90f2ea45ab",
        "type": "http request",
        "z": "d67cea8fca67c9ff",
        "g": "ee168877431e79e5",
        "name": "POST/Count",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://201.48.250.181:5800/api/v2/event/count",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "bearer",
        "senderr": false,
        "headers": [],
        "x": 750,
        "y": 1180,
        "wires": [
            [
                "f533b7856155ca06"
            ]
        ]
    },
    {
        "id": "f533b7856155ca06",
        "type": "function",
        "z": "d67cea8fca67c9ff",
        "g": "ee168877431e79e5",
        "name": "Delete values sent",
        "func": "let lostCount = flow.get('lostCount') || [];\n\nif (msg.payload === \"true\" && msg.index) {\n    for (let i = 0; i < lostCount.length; i++) {\n        if (msg.index === lostCount[i].timestamp) {\n            lostCount.splice(i,1);\n            flow.set('lostCount', lostCount);\n        }\n    }\n}",
        "outputs": 0,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 1180,
        "wires": [],
        "icon": "font-awesome/fa-warning"
    },
    {
        "id": "887ac7113c9d6558",
        "type": "function",
        "z": "d67cea8fca67c9ff",
        "g": "adf119f5a755d0fc",
        "name": "Get count error",
        "func": "let lostCount = flow.get('lostCount') || []; \nif (msg.payload !== \"true\" && msg.count) {\n    lostCount.push(msg.count); // Aloca na lista o contador que n√£o foi enviado ao banco\n}\nflow.set('lostCount', lostCount); ",
        "outputs": 0,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 1080,
        "wires": [],
        "icon": "node-red/alert.svg"
    },
    {
        "id": "c32ba36e20d9ae43",
        "type": "debug",
        "z": "d67cea8fca67c9ff",
        "name": "debug 306",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1370,
        "y": 180,
        "wires": []
    },
    {
        "id": "49f58b4ec3c258ae",
        "type": "inject",
        "z": "d67cea8fca67c9ff",
        "name": "SWITCH2 ON",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "ABC123",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch2\":{\"Action\":\"ON\"}}",
        "payloadType": "json",
        "x": 190,
        "y": 560,
        "wires": [
            [
                "f48e5fc6e1606d11"
            ]
        ]
    },
    {
        "id": "c10d629f9182c5af",
        "type": "inject",
        "z": "d67cea8fca67c9ff",
        "name": "SWITCH2 OFF",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DEF123",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch2\":{\"Action\":\"OFF\"}}",
        "payloadType": "json",
        "x": 200,
        "y": 600,
        "wires": [
            [
                "f48e5fc6e1606d11"
            ]
        ]
    },
    {
        "id": "f48e5fc6e1606d11",
        "type": "function",
        "z": "d67cea8fca67c9ff",
        "g": "de687bd569ea88fb",
        "name": "Embobinadora",
        "func": "let embobinadoraProperties = flow.get('embobinadoraProperties') || {};\nlet serialNumber = msg.payload.serialNumber;\n\nif (msg.payload.Switch2 && (msg.payload.Switch2.Action === \"ON\" || msg.payload.Switch2.Action === \"OFF\")){\n    if (!embobinadoraProperties[serialNumber]) {\n            embobinadoraProperties[serialNumber] = {\n                \"partStart\": false,\n                \"pecas\": 0,\n                \"timestampLastAction\": null,\n                \"timestampLastProduction\": null,\n                \"unit\": null,\n                \"status\": null\n            }   \n    }\n}\nflow.set('embobinadoraProperties', embobinadoraProperties);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 600,
        "wires": [
            [
                "fcc769c850e41776"
            ]
        ],
        "icon": "font-awesome/fa-save"
    },
    {
        "id": "0f31585e3bd2a93b",
        "type": "function",
        "z": "d67cea8fca67c9ff",
        "g": "de687bd569ea88fb",
        "name": "Machine conditions",
        "func": "let serialNumber = msg.payload.serialNumber;\nlet embobinadoraProperties = flow.get('embobinadoraProperties') || {};\nlet currentTimestamp = new Date();\n\nif ((msg.payload.Switch2 && msg.payload.Switch2.Action === \"ON\") && (!embobinadoraProperties[serialNumber].partStart)) {\n    embobinadoraProperties[serialNumber].partStart = true;\n    embobinadoraProperties[serialNumber].timestampLastAction = currentTimestamp;\n}\nelse if ((msg.payload.Switch2 && msg.payload.Switch2.Action === \"OFF\") && embobinadoraProperties[serialNumber].partStart) {\n\n    embobinadoraProperties[serialNumber].partStart = false;\n    embobinadoraProperties[serialNumber].timestampLastProduction = currentTimestamp;\n    embobinadoraProperties[serialNumber].unit = \"Pe√ßas\";\n    embobinadoraProperties[serialNumber].pecas += 2;\n}\n\n\n\nflow.set('embobinadoraProperties', embobinadoraProperties);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 600,
        "wires": [
            [
                "eca2a861bfb79177",
                "0a4a8975c243afa4"
            ]
        ],
        "icon": "font-awesome/fa-bars"
    },
    {
        "id": "eca2a861bfb79177",
        "type": "function",
        "z": "d67cea8fca67c9ff",
        "g": "de687bd569ea88fb",
        "name": "Update status machine",
        "func": "let embobinadoraProperties = flow.get('embobinadoraProperties') || {};\nlet currentTimestamp = new Date();\nlet messages = [];\n\nif (embobinadoraProperties) {\n    Object.keys(embobinadoraProperties).forEach(key => {\n        if (embobinadoraProperties[key].hasOwnProperty('timestampLastAction') &&\n        embobinadoraProperties[key].hasOwnProperty('timestampLastProduction')) {\n\n            let timestampLastAction = embobinadoraProperties[key]['timestampLastAction'];\n            let timestampLastProduction = embobinadoraProperties[key]['timestampLastProduction'];\n\n            let differenceTimeLastAction = timestampLastAction ? (currentTimestamp.getTime() - timestampLastAction.getTime()) / 1000 : null;\n            let differenceLastProduction = timestampLastProduction ? (currentTimestamp.getTime() - timestampLastProduction.getTime()) / 1000 : null;\n            let oldState = embobinadoraProperties[key]['status'];\n\n            const isWorking = (differenceTimeLastAction !== null && differenceTimeLastAction <= 299) ||\n            (differenceLastProduction !== null && differenceLastProduction <= 299);\n\n            const isStopped = (differenceTimeLastAction >= 300 && differenceLastProduction >= 300 && differenceLastProduction <= 1799)\n             ||(differenceTimeLastAction >= 300 && differenceTimeLastAction <= 1799 && differenceLastProduction === null);\n\n            const isTurnedOff = (differenceTimeLastAction >= 1800 && differenceLastProduction === null) || \n            (differenceTimeLastAction >= 1800 && differenceLastProduction >= 1800 ) || differenceTimeLastAction === null;\n\n            const newState = isWorking ? \"TRABALHANDO\" : isStopped ? \"PARADO\" : isTurnedOff ? \"DESLIGADO\" : null;\n\n            if (newState !== null && oldState !== newState) {\n                embobinadoraProperties[key]['status'] = newState;\n\n                messages.push(({\n                    serialNumber: key,\n                    currentStatus: newState\n                }));\n            }\n        }\n    });\n    flow.set('embobinadoraProperties', embobinadoraProperties);\n\n    messages.forEach(msg => {\n        node.send({ payload: msg });\n\n        return msg;\n    });\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 940,
        "y": 620,
        "wires": [
            [
                "c81e793c6b16e15e"
            ]
        ],
        "icon": "font-awesome/fa-exchange"
    },
    {
        "id": "36801d507a869f72",
        "type": "function",
        "z": "d67cea8fca67c9ff",
        "g": "de687bd569ea88fb",
        "name": "Get Count (Pe√ßas)",
        "func": "let embobinadoraProperties = flow.get('embobinadoraProperties') || {};\nlet serialNumber = msg.payload.serialNumber;\n\nif (embobinadoraProperties) {\n    if (embobinadoraProperties[serialNumber] && embobinadoraProperties[serialNumber].unit !== null) {\n        let unit = embobinadoraProperties[serialNumber].unit;\n\n        msg.payload = {\n            timestamp: new Date().getTime(),\n            deviceSerialNumber: serialNumber,\n            unit: unit,\n            count: 1\n        }\n        embobinadoraProperties[serialNumber].unit = null;\n        flow.set('embobinadoraProperties', embobinadoraProperties);\n\n        return msg;\n    }\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1210,
        "y": 580,
        "wires": [
            []
        ],
        "icon": "font-awesome/fa-plus"
    },
    {
        "id": "c81e793c6b16e15e",
        "type": "function",
        "z": "d67cea8fca67c9ff",
        "g": "de687bd569ea88fb",
        "name": "Get changed status (EMBOBINADORA)",
        "func": "let { serialNumber, currentStatus } = msg.payload;\nlet timestamp = new Date().getTime();\n\nif (serialNumber && currentStatus !== null) {\n    msg.payload = {\n        timestamp: timestamp,\n        deviceSerialNumber: serialNumber,\n        status: currentStatus\n    }\n    return msg;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1280,
        "y": 620,
        "wires": [
            []
        ],
        "icon": "font-awesome/fa-flash"
    },
    {
        "id": "0b80e33d9156da62",
        "type": "function",
        "z": "d67cea8fca67c9ff",
        "name": "FormatedMessage",
        "func": "let machine = msg.status.machine;\nlet timestamp = new Date().getTime();\nlet currentStatus = context.get('currentStatus') || null; \nlet oldStatus = msg.status.currentStatus;\n\nif(!currentStatus || currentStatus !== oldStatus) {\n    currentStatus = oldStatus;\n    context.set('currentStatus', currentStatus);\n\n    msg.payload = {\n            timestamp: timestamp,\n            deviceSerialNumber: machine,\n            status: currentStatus\n    }\n    return msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1390,
        "y": 120,
        "wires": [
            [
                "c32ba36e20d9ae43"
            ]
        ],
        "icon": "font-awesome/fa-envelope"
    },
    {
        "id": "fcc769c850e41776",
        "type": "function",
        "z": "d67cea8fca67c9ff",
        "name": "function 1",
        "func": "let serialNumber = msg.payload.serialNumber;\nlet embobinadoraProperties = flow.get('embobinadoraProperties') || {};\n\nfor (let key in embobinadoraProperties) {\n    node.warn(key);\n}\n\nfor ( let value of embobinadoraProperties[serialNumber]) {\nnode.warn(value);\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 720,
        "wires": [
            []
        ]
    },
    {
        "id": "398955976999042b",
        "type": "inject",
        "z": "d67cea8fca67c9ff",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 150,
        "y": 760,
        "wires": [
            [
                "94405d23e07dbfca",
                "1dbd4d2900432c11"
            ]
        ]
    },
    {
        "id": "94405d23e07dbfca",
        "type": "function",
        "z": "d67cea8fca67c9ff",
        "name": "Iterator in object",
        "func": "let menu = {\n    width: 200,\n    height: 300,\n    title: \"My menu\"\n};\n\nfunction multiplyNumeric(obj) {\n    for (let key in obj) {\n        if (typeof obj[key] == 'number') {\n            obj[key] *= 2;\n        }\n    }\n}\nmultiplyNumeric(menu)\nnode.warn(menu);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 760,
        "wires": [
            []
        ]
    },
    {
        "id": "1dbd4d2900432c11",
        "type": "function",
        "z": "d67cea8fca67c9ff",
        "name": "Date",
        "func": "let date = new Date();\n\nnode.warn(typeof date);",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 720,
        "wires": [
            []
        ]
    },
    {
        "id": "29ac15ebcfd22d13",
        "type": "inject",
        "z": "dea5fa223d05d26c",
        "name": "SWITCH1 ON",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF57A3",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch1\": {\"Action\": \"ON\"} }",
        "payloadType": "json",
        "x": 150,
        "y": 1260,
        "wires": [
            [
                "6cd82711f1d28358"
            ]
        ]
    },
    {
        "id": "93eb8b62b22ae9b4",
        "type": "inject",
        "z": "dea5fa223d05d26c",
        "name": "SWITCH1 OFF",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF57A3",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch1\": {\"Action\": \"OFF\"} }",
        "payloadType": "json",
        "x": 160,
        "y": 1300,
        "wires": [
            [
                "6cd82711f1d28358"
            ]
        ]
    },
    {
        "id": "80a884d7991eb90c",
        "type": "function",
        "z": "dea5fa223d05d26c",
        "name": "Switch State",
        "func": "function handleSwitch(payload, context, switchName, statusSNSName, startName, finishName, verifyName) {\n    let switchKey = Object.keys(payload).find(key => key.startsWith(switchName)) // extrai o switch que chegou no payload\n    let switchState = context.get(switchName) || null;\n    let actionValue = payload[switchKey] ? payload[switchKey].Action : null; // extrai o estado do switch que chegou\n    let statusSNS = payload[statusSNSName] && payload[statusSNSName][switchName];\n    let startState = context.get(startName) || false;\n    let finishState = context.get(finishName) || false;\n    let verifyState = context.get(verifyName) || false;\n\n    switchState = actionValue || statusSNS || switchState; // adquiri o estado do switch que chegou\n\n    if (switchState == \"ON\" && finishState == false) { // Condi√ß√£o que caracteriza o in√≠cio da produ√ß√£o da pe√ßa\n        startState = true;\n    }\n    else if (switchState == \"OFF\" && startState == true) { // condi√ß√£o que caracteriza o final da produ√ß√£o da pe√ßa\n        finishState = true;\n    }\n    verifyState = startState == true && finishState == true ? true : false;\n\n    if (verifyState == true) { // reseta o in√≠cio o fim da produ√ß√£o quando a pe√ßa √© produzida\n        startState = false;\n        finishState = false;\n\n    }\n    context.set(switchName, switchState);\n    context.set(startName, startState);\n    context.set(finishName, finishState);\n    context.set(verifyName, verifyState);\n\n    return {\n        switchState: switchState,\n        startState: startState,\n        finishState: finishState,\n        verifyState: verifyState\n    };\n}\nlet payload = msg.payload;\nlet switch1 = handleSwitch(payload, context, 'Switch1', 'StatusSNS', 'startPress', 'finishedPress', 'verifyPress');\n\nmsg.switches = {\n    switch1: switch1.switchState,\n    startPress: switch1.startState,\n    finishedPress: switch1.finishState,\n    verifyPress: switch1.verifyState,\n}\nswitch1.verifyState = false; // reseta a condi√ß√£o de pe√ßa produzindo para false quando a pe√ßa √© finalizada\ncontext.set('verifyPress', switch1.verifyState);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 970,
        "y": 140,
        "wires": [
            [
                "aa0465cbe3d8b36b"
            ]
        ],
        "icon": "node-red/swap.svg"
    },
    {
        "id": "04f4455aa81fa81f",
        "type": "switch",
        "z": "dea5fa223d05d26c",
        "name": "OPTION SW",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "hask",
                "v": "Switch1",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "StatusSNS",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 470,
        "y": 140,
        "wires": [
            [
                "a1d7e99cd6556d1f"
            ],
            [
                "a1d7e99cd6556d1f"
            ]
        ]
    },
    {
        "id": "aa0465cbe3d8b36b",
        "type": "function",
        "z": "dea5fa223d05d26c",
        "name": "Conditions Machine",
        "func": "const { startPress, verifyPress } = msg.switches;\nconst machine = msg.payload.serialNumber;\nlet startProduction = startPress;\nlet verifyProduction = verifyPress && !startPress ? true : false;\n\ncontext.set('startProduction', startProduction);\ncontext.set('verifyProduction', verifyProduction);\n\nmsg.conditions = {\n        startProduction,\n        verifyProduction,\n        serialNumber: machine\n    }\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1170,
        "y": 140,
        "wires": [
            [
                "7d11c22eb55cbf7d"
            ]
        ],
        "icon": "font-awesome/fa-bars"
    },
    {
        "id": "7d11c22eb55cbf7d",
        "type": "function",
        "z": "dea5fa223d05d26c",
        "name": "Production Machine",
        "func": "const {startProduction, verifyProduction, serialNumber} = msg.conditions || {};\nlet payload = msg.payload;\nlet [machine,startWorking,lastTimestamp] = ['machine','startWorking','lastTimestamp'].map(key => context.get(key) || null);\nlet currentTimestamp = new Date();\nlet pressCount = context.get('pressCount') || 0;\nlet resetShift = context.get('resetShift') || false;\n\nconst actions = {\n    'resetShift': () => {\n        pressCount = 0;\n        resetShift = false;\n\n        context.set('pressCount', pressCount);\n        context.set('resetShift', resetShift);\n    },\n    'payloadReset': () => {\n        resetShift = true;\n        context.set('resetShift', resetShift);\n    },\n    'startWorking': () => {\n        startWorking = currentTimestamp;\n        context.set('startWorking', startWorking);\n    },\n    'finishedProduction': () => {\n        pressCount++;\n\n        lastTimestamp = currentTimestamp;\n        context.set('lastTimestamp', lastTimestamp);\n    },\n    'machineNull': () => {\n        machine = serialNumber;\n        context.set('machine', machine);\n    }\n}\n\nconst conditions = {\n    resetShift: resetShift === true,\n    payloadReset: payload === 'reset',\n    startWorking: startProduction === true,\n    finishedProduction: verifyProduction === true,\n    machineNull: serialNumber && machine === null,\n};\n\nObject.entries(conditions).forEach(([condition, isTrue]) => {\n    if (isTrue) {\n        actions[condition]();\n    }\n});\ncontext.set('pressCount', pressCount);\n\nmsg.data = {\n    press: pressCount,\n    startProduction: startWorking,\n    lastTimestamp: lastTimestamp,\n    machine: machine,\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1400,
        "y": 140,
        "wires": [
            [
                "175646bbcd2dd8d3",
                "8ce95e64c84e2f2e"
            ]
        ],
        "icon": "font-awesome/fa-book"
    },
    {
        "id": "175646bbcd2dd8d3",
        "type": "function",
        "z": "dea5fa223d05d26c",
        "name": "PRENSA 400T",
        "func": "let press = msg.data.press;\nlet machine = msg.data.machine;\n\nmsg.payload = {\n    press: press,\n    deviceSerialNumber: machine\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1760,
        "y": 80,
        "wires": [
            []
        ],
        "icon": "font-awesome/fa-cogs"
    },
    {
        "id": "8ce95e64c84e2f2e",
        "type": "function",
        "z": "dea5fa223d05d26c",
        "name": "verifyStatus",
        "func": "const {startProduction, lastTimestamp, machine} = msg.data;\nlet [differenceStartProduction, differenceLastProduction] = \n['differenceStartProduction', 'differenceLastProduction' ].map(key => context.get(key) || null);\nlet currentTimestamp = new Date();\nlet currentStatus = context.get('currentStatus') || null;\n\nif (lastTimestamp !== null) {\n    differenceLastProduction = (currentTimestamp.getTime() - lastTimestamp.getTime()) /1000;\n    context.set('differenceLastProduction', differenceLastProduction);    \n}\n\nif (startProduction !== null) {\n    differenceStartProduction = (currentTimestamp.getTime() - startProduction.getTime()) / 1000;\n    context.set('differenceStartProduction', differenceStartProduction);\n\n    const statusMap = {\n        'TRABALHANDO': differenceStartProduction <= 299 || (differenceLastProduction <= 299 && differenceLastProduction !== null),\n        'PARADO': (differenceStartProduction >=300 && differenceLastProduction >= 300 && differenceLastProduction <= 1799) ||\n                (differenceStartProduction >= 300 && differenceStartProduction <= 1799 && lastTimestamp === null),\n        'DESLIGADO': differenceStartProduction>= 1800 || differenceLastProduction >= 1800\n\n    };\n    const newState = Object.keys(statusMap).find(key => statusMap[key]);\n\n    if (newState) {\n        currentStatus = newState;\n        context.set('currentStatus', currentStatus);\n    }\n}\n\nif (lastTimestamp == null) {\n    currentStatus = \"DESLIGADO\";\n    context.set('currentStatus', currentStatus);\n}\n\nmsg.status = {\n    timeStartProduction: differenceStartProduction,\n    timeLastProduction: differenceLastProduction,\n    currentStatus: currentStatus,\n    machine: machine\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1750,
        "y": 120,
        "wires": [
            [
                "0add8038b16c7640"
            ]
        ],
        "icon": "node-red/status.svg"
    },
    {
        "id": "a1d7e99cd6556d1f",
        "type": "change",
        "z": "dea5fa223d05d26c",
        "name": "delete time",
        "rules": [
            {
                "t": "delete",
                "p": "payload.timestamp",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.StatusSNS.Time",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.StatusSNS.Switch2",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.StatusSNS.Switch3",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.StatusSNS.Switch4",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 650,
        "y": 140,
        "wires": [
            [
                "3ef4dcf64d2f5ab5"
            ]
        ],
        "icon": "font-awesome/fa-times-circle"
    },
    {
        "id": "0add8038b16c7640",
        "type": "function",
        "z": "dea5fa223d05d26c",
        "name": "FormatedMessage",
        "func": "let machine = msg.status.machine;\nlet timestamp = new Date().getTime();\nlet currentStatus = context.get('currentStatus') || null; \nlet oldStatus = msg.status.currentStatus;\n\nif(!currentStatus || currentStatus !== oldStatus) {\n    currentStatus = oldStatus;\n    context.set('currentStatus', currentStatus);\n\n    msg.payload = {\n            timestamp: timestamp,\n            deviceSerialNumber: machine,\n            status: currentStatus\n    }\n    return msg;\n}\nreturn null;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1770,
        "y": 160,
        "wires": [
            []
        ],
        "icon": "font-awesome/fa-envelope"
    },
    {
        "id": "c6e834e27f47ee15",
        "type": "function",
        "z": "dea5fa223d05d26c",
        "name": "Switch State",
        "func": "let payload = msg.payload;\nlet switch1 = context.get('switch1') || null;\n\nif ((payload.Switch1 && payload.Switch1.Action == \"ON\") || (payload.StatusSNS && payload.StatusSNS.Switch1 == \"ON\")) {\n    context.set('switch1', \"ON\");\n}\nif ((payload.Switch1 && payload.Switch1.Action == \"OFF\") || (payload.StatusSNS && payload.StatusSNS.Switch1 == \"OFF\") && switch1 == \"ON\") {\n    context.set('switch1', \"OFF\");\n}\nmsg.switches = {\n    switch1: context.get('switch1')\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 1300,
        "wires": [
            [
                "d1685895611d128f"
            ]
        ],
        "icon": "node-red/swap.svg"
    },
    {
        "id": "014b04101bd33e04",
        "type": "switch",
        "z": "dea5fa223d05d26c",
        "name": "OPTION SW",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "hask",
                "v": "Switch1",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "StatusSNS",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 570,
        "y": 1300,
        "wires": [
            [
                "ac6c86067f21e9e0"
            ],
            [
                "ac6c86067f21e9e0"
            ]
        ]
    },
    {
        "id": "d1685895611d128f",
        "type": "function",
        "z": "dea5fa223d05d26c",
        "name": "Conditions Machine",
        "func": "let switch1 = msg.switches.switch1 || null;\nlet serialNumber = msg.payload.serialNumber;\nlet verifyPress = context.get('verifyPress') || false; /* verifica se a pe√ßa foi realizada */\nlet startPress = context.get('startPress') || false; /* verifica se a produ√ß√£o da pe√ßa foi iniciada */\n\nif (switch1 == \"ON\") { /* momento em que a produ√ß√£o da pe√ßa √© iniciada */\n    startPress = true;\n    context.set('startPress', startPress);\n}\n\nif (switch1 == \"OFF\" && startPress) { /* momento em que a produ√ß√£o da pe√ßa √© finalizada */\n    verifyPress = true;\n    startPress = false;\n\n    context.set('verifyPress', verifyPress);\n    context.set('startPress', startPress);\n}\n\nmsg.conditions = {\n    verifyPress: verifyPress,\n    startPress: startPress,\n    machine: serialNumber\n}\n\nif (verifyPress) {\n    verifyPress = false;\n    context.set('verifyPress', verifyPress);\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1270,
        "y": 1300,
        "wires": [
            [
                "725acf0bfa7b3d1e"
            ]
        ],
        "icon": "font-awesome/fa-bars"
    },
    {
        "id": "725acf0bfa7b3d1e",
        "type": "function",
        "z": "dea5fa223d05d26c",
        "name": "Production Machine",
        "func": "let startPress = msg.conditions.startPress;\nlet verifyPress = msg.conditions.verifyPress;\nlet serialNumber = msg.conditions.machine;\nlet payload = msg.payload;\nlet machine = context.get('machine') || null;\nlet startingOfPress = context.get('startingOfPress') || null;\nlet timestampLastPress = context.get('timestampLastPress') || null;\nlet currentTimestamp = new Date();\nlet sumWorkingTime = context.get('sumWorkingTime') || 0;\nlet sumIdleTime = context.get('sumIdleTime') || 0;\nlet pressCount = context.get('pressCount') || 0;\nlet resetShift = context.get('resetShift') || false;\nlet currentStatus = context.get('currentStatus') || 'PARADA';\n\nif (resetShift) {\n    pressCount = 0;\n    sumWorkingTime = 0;\n    sumIdleTime = 0;\n\n    context.set('pressCount', pressCount);\n    context.set('sumWorkingTime', sumWorkingTime);\n    context.set('sumIdleTime', sumIdleTime);\n\n    resetShift = false;\n    context.set('resetShift', resetShift);\n}\n\nif (startPress == true) {\n\n    startingOfPress = currentTimestamp;\n    context.set('startingOfPress', startingOfPress);\n\n    if (timestampLastPress !== null) {\n        let differenceTimeSignals = (currentTimestamp.getTime() - timestampLastPress.getTime()) / 1000;\n\n        if (differenceTimeSignals >= 300) {\n            sumIdleTime += differenceTimeSignals;\n            context.set('sumIdleTime', sumIdleTime);\n        }\n        else {\n            sumWorkingTime += differenceTimeSignals;\n            context.set('sumWorkingTime', sumWorkingTime);\n        }\n    }\n    currentStatus = \"TRABALHANDO\";\n    context.set('currentStatus',currentStatus);\n}\n\nif (verifyPress == true) {\n    pressCount++;\n\n    timestampLastPress = currentTimestamp;\n    context.set('timestampLastPress', timestampLastPress);\n\n    let timeWorking = (currentTimestamp.getTime() - startingOfPress.getTime()) / 1000;\n    sumWorkingTime += timeWorking;\n    context.set('sumWorkingTime', sumWorkingTime);\n\n    currentStatus = \"PARADA\";\n    context.set('currentStatus', currentStatus);\n}\n\nif (machine == null) {\n    machine = serialNumber;\n    context.set('machine', machine);\n}\n\nif (payload === \"reset\") {\n    resetShift = true;\n    context.set('resetShift', true);\n}\ncontext.set('pressCount', pressCount);\n\nmsg.data = {\n    press: pressCount,\n    workingTime: sumWorkingTime.toFixed(3),\n    idleTime: sumIdleTime.toFixed(3),\n    startingOfPress: startingOfPress,\n    timestampLastPress: timestampLastPress,\n    machine: machine,\n    status: currentStatus,\n    reset: resetShift\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1500,
        "y": 1300,
        "wires": [
            [
                "73195cd1d9a95933",
                "65205d423b98a28d"
            ]
        ],
        "icon": "font-awesome/fa-book"
    },
    {
        "id": "73195cd1d9a95933",
        "type": "function",
        "z": "dea5fa223d05d26c",
        "name": "PRENSA 320T",
        "func": "let workingTime = msg.data.workingTime;\nlet idleTime = msg.data.idleTime;\nlet press = msg.data.press;\nlet status = msg.data.status;\nlet reset = msg.data.reset;\nlet machine = msg.data.machine;\nlet workingTimeMinutes = context.get('workingTimeMinutes') || 0;\nlet idleTimeMinutes = context.get('idleTimeMinutes') || 0;\n\nfunction minutesToHours(totalMinutes) {\n    var hours = String(Math.floor(totalMinutes / 60)).padStart(2, \"0\");\n    var minutes = String(totalMinutes % 60).padStart(2, \"0\");\n\n    return `${hours}:${minutes}`;\n}\n\nif (reset == true) {\n    workingTimeMinutes = 0;\n    idleTimeMinutes = 0;\n\n    context.set('workingTimeMinutes', workingTimeMinutes);\n    context.set('idleTimeMinutes', 0);\n}\n\nif (workingTime > 0 || idleTime > 0) {\n    workingTimeMinutes = workingTime / 60;\n    idleTimeMinutes = idleTime / 60;\n}\n\nmsg.payload = {\n    press: press,\n    workingTimeMinutes: minutesToHours(workingTimeMinutes.toFixed(0)),\n    idleTimeMinutes: minutesToHours(idleTimeMinutes.toFixed(0)),\n    status: status,\n    deviceSerialNumber: machine\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1780,
        "y": 1300,
        "wires": [
            [
                "d2e9a4dd8128d493"
            ]
        ],
        "icon": "font-awesome/fa-cogs"
    },
    {
        "id": "65205d423b98a28d",
        "type": "function",
        "z": "dea5fa223d05d26c",
        "name": "verifyStatus",
        "func": "let startingOfPress = msg.data.startingOfPress || null;\nlet timestampLastPress = msg.data.timestampLastPress || null;\nlet countPress = msg.data.press;\nlet machine = msg.data.machine;\nlet currentTimestamp = new Date();\nlet currentStatus = context.get('currentStatus') || null;\nlet differenceTimeStartPress = context.get('differenceTimeStartPress') || 0;\nlet differenceTimelastProduction = context.get('differenceTimelastProduction') || 0;\n\nif (timestampLastPress !== null) {\n    differenceTimelastProduction = (currentTimestamp.getTime() - timestampLastPress.getTime()) / 1000;\n    context.set('differenceTimelastProduction', differenceTimelastProduction);\n}\n\nif (startingOfPress !== null) {\n\n    differenceTimeStartPress = (currentTimestamp.getTime() - startingOfPress.getTime()) / 1000;\n    context.set('differenceTimeStartPress', differenceTimeStartPress);\n\n    if( differenceTimeStartPress <= 299 || differenceTimelastProduction <= 299 ) {\n        currentStatus = \"TRABALHANDO\";\n        context.set('currentStatus', currentStatus);\n    }\n\n    if ((differenceTimeStartPress >= 300 && differenceTimelastProduction >= 300 && differenceTimelastProduction <= 1799)\n    || (differenceTimeStartPress >= 300 && differenceTimeStartPress <= 1799 && timestampLastPress === null)) {\n        currentStatus = \"PARADO\";\n        context.set('currentStatus', currentStatus);\n    }\n\n    else if ((differenceTimeStartPress >= 300 && differenceTimelastProduction >= 1800) || (differenceTimeStartPress >= 1800 && timestampLastPress === null)) {\n        currentStatus = \"DESLIGADO\";\n        context.set('currentStatus', currentStatus);\n    }\n}\n\nelse if (startingOfPress == null) {\n    currentStatus = \"DESLIGADO\";\n    context.set('currentStatus', currentStatus);\n}\n\nmsg.status = {\n    timeCurrentProduction: differenceTimeStartPress,\n    timeLastProduction: differenceTimelastProduction,\n    machine: machine,\n    currentStatus: currentStatus\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1470,
        "y": 1340,
        "wires": [
            [
                "b9d81fcf940947bf"
            ]
        ],
        "icon": "node-red/status.svg"
    },
    {
        "id": "ac6c86067f21e9e0",
        "type": "change",
        "z": "dea5fa223d05d26c",
        "name": "delete time",
        "rules": [
            {
                "t": "delete",
                "p": "payload.timestamp",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.StatusSNS.Time",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.StatusSNS.Switch2",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.StatusSNS.Switch3",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.StatusSNS.Switch4",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 770,
        "y": 1300,
        "wires": [
            [
                "33b7f6b39598ff5f"
            ]
        ],
        "icon": "font-awesome/fa-times-circle"
    },
    {
        "id": "b9d81fcf940947bf",
        "type": "function",
        "z": "dea5fa223d05d26c",
        "name": "FormatedMessage",
        "func": "let machine = msg.status.machine;\nlet timestamp = new Date().getTime();\nlet currentStatus = context.get('currentStatus') || null; \nlet oldStatus = msg.status.currentStatus;\n\nif(!currentStatus || currentStatus !== oldStatus) {\n    currentStatus = oldStatus;\n    context.set('currentStatus', currentStatus);\n\n    msg.payload = {\n            timestamp: timestamp,\n            deviceSerialNumber: machine,\n            status: currentStatus\n    }\n    return msg;\n}\nreturn null;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1790,
        "y": 1340,
        "wires": [
            []
        ],
        "icon": "font-awesome/fa-envelope"
    },
    {
        "id": "6cd82711f1d28358",
        "type": "switch",
        "z": "dea5fa223d05d26c",
        "name": "Machine",
        "property": "payload.serialNumber",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "DF57A3",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 380,
        "y": 1300,
        "wires": [
            [
                "014b04101bd33e04"
            ]
        ],
        "icon": "font-awesome/fa-desktop"
    },
    {
        "id": "2471ef435f01b064",
        "type": "function",
        "z": "dea5fa223d05d26c",
        "name": "Switch State",
        "func": "function handleSwitch(payload, context, switchName, statusSNSName, startName, finishName, verifyName) {\n    let switchKey = Object.keys(payload).find(key => key.startsWith(switchName)) // extrai o switch que chegou no payload\n    let switchState = context.get(switchName) || null;\n    let actionValue = payload[switchKey] ? payload[switchKey].Action : null; // extrai o estado do switch que chegou\n    let statusSNS = payload[statusSNSName] && payload[statusSNSName][switchName];\n    let startState = context.get(startName) || false;\n    let finishState = context.get(finishName) || false;\n    let verifyState = context.get(verifyName) || false;\n\n    switchState = actionValue || statusSNS || switchState; // adquiri o estado do switch que chegou\n\n    if (switchState == \"ON\" && finishState == false) { // Condi√ß√£o que caracteriza o in√≠cio da produ√ß√£o da pe√ßa\n        startState = true;\n    }\n    else if (switchState == \"OFF\" && startState == true) { // condi√ß√£o que caracteriza o final da produ√ß√£o da pe√ßa\n        finishState = true;\n    }\n    verifyState = startState == true && finishState == true ? true : false;\n\n    if (verifyState == true) { // reseta o in√≠cio o fim da produ√ß√£o quando a pe√ßa √© produzida\n        startState = false;\n        finishState = false;\n\n    }\n    context.set(switchName, switchState);\n    context.set(startName, startState);\n    context.set(finishName, finishState);\n    context.set(verifyName, verifyState);\n\n    return {\n        switchState: switchState,\n        startState: startState,\n        finishState: finishState,\n        verifyState: verifyState\n    };\n}\nlet payload = msg.payload;\nlet switch1 = handleSwitch(payload, context, 'Switch1', 'StatusSNS', 'startPress', 'finishedPress', 'verifyPress');\n\nmsg.switches = {\n    switch1: switch1.switchState,\n    startPress: switch1.startState,\n    finishedPress: switch1.finishState,\n    verifyPress: switch1.verifyState,\n}\nswitch1.verifyState = false; // reseta a condi√ß√£o de pe√ßa produzindo para false quando a pe√ßa √© finalizada\ncontext.set('verifyPress', switch1.verifyState);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 970,
        "y": 180,
        "wires": [
            [
                "52bc61fcab0c42a8"
            ]
        ],
        "icon": "node-red/swap.svg"
    },
    {
        "id": "52bc61fcab0c42a8",
        "type": "function",
        "z": "dea5fa223d05d26c",
        "name": "Conditions Machine",
        "func": "const { startPress, verifyPress } = msg.switches;\nconst machine = msg.payload.serialNumber;\nlet startProduction = startPress;\nlet verifyProduction = verifyPress && !startPress ? true : false;\n\ncontext.set('startProduction', startProduction);\ncontext.set('verifyProduction', verifyProduction);\n\nreturn {\n    ...msg,\n    conditions: {\n        startProduction,\n        verifyProduction,\n        serialNumber: machine\n    }\n};",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1170,
        "y": 180,
        "wires": [
            [
                "68a02904655fc174"
            ]
        ],
        "icon": "font-awesome/fa-bars"
    },
    {
        "id": "68a02904655fc174",
        "type": "function",
        "z": "dea5fa223d05d26c",
        "name": "Production Machine",
        "func": "const { startProduction, verifyProduction, serialNumber } = msg.conditions || {};\nlet payload = msg.payload;\nlet [machine, startWorking, lastTimestamp] = ['machine', 'startWorking', 'lastTimestamp'].map(key => context.get(key) || null);\nlet currentTimestamp = new Date();\nlet pressCount = context.get('pressCount') || 0;\nlet resetShift = context.get('resetShift') || false;\n\nconst actions = {\n    'resetShift': () => {\n        pressCount = 0;\n        resetShift = false;\n\n        context.set('pressCount', pressCount);\n        context.set('resetShift', resetShift);\n    },\n    'payloadReset': () => {\n        resetShift = true;\n        context.set('resetShift', resetShift);\n    },\n    'startWorking': () => {\n        startWorking = currentTimestamp;\n        context.set('startWorking', startWorking);\n    },\n    'finishedProduction': () => {\n        pressCount++;\n\n        lastTimestamp = currentTimestamp;\n        context.set('lastTimestamp', lastTimestamp);\n    },\n    'machineNull': () => {\n        machine = serialNumber;\n        context.set('machine', machine);\n    }\n}\n\nconst conditions = {\n    resetShift: resetShift === true,\n    payloadReset: payload === 'reset',\n    startWorking: startProduction === true,\n    finishedProduction: verifyProduction === true,\n    machineNull: serialNumber && machine === null,\n};\n\nObject.entries(conditions).forEach(([condition, isTrue]) => {\n    if (isTrue) {\n        actions[condition]();\n    }\n});\ncontext.set('pressCount', pressCount);\n\nmsg.data = {\n    press: pressCount,\n    startProduction: startWorking,\n    lastTimestamp: lastTimestamp,\n    machine: machine,\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1400,
        "y": 180,
        "wires": [
            [
                "30e63facb78b229a",
                "16eeeafde4b45717"
            ]
        ],
        "icon": "font-awesome/fa-book"
    },
    {
        "id": "30e63facb78b229a",
        "type": "function",
        "z": "dea5fa223d05d26c",
        "name": "PRENSA 220T",
        "func": "let workingTime = msg.data.workingTime;\nlet idleTime = msg.data.idleTime;\nlet press = msg.data.press;\nlet status = msg.data.status;\nlet reset = msg.data.reset;\nlet machine = msg.topic;\nlet workingTimeMinutes = context.get('workingTimeMinutes') || 0;\nlet idleTimeMinutes = context.get('idleTimeMinutes') || 0;\n\nfunction minutesToHours(totalMinutes) {\n    var hours = String(Math.floor(totalMinutes / 60)).padStart(2, \"0\");\n    var minutes = String(totalMinutes % 60).padStart(2, \"0\");\n\n    return `${hours}:${minutes}`;\n}\n\nif (reset == true) {\n    workingTimeMinutes = 0;\n    idleTimeMinutes = 0;\n\n    context.set('workingTimeMinutes', workingTimeMinutes);\n    context.set('idleTimeMinutes', 0);\n}\n\nif (workingTime > 0 || idleTime > 0) {\n    workingTimeMinutes = workingTime / 60;\n    idleTimeMinutes = idleTime / 60;\n}\n\nmsg.payload = {\n    press: press,\n    workingTimeMinutes: minutesToHours(workingTimeMinutes.toFixed(0)),\n    idleTimeMinutes: minutesToHours(idleTimeMinutes.toFixed(0)),\n    status: status,\n    deviceSerialNumber: machine\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1760,
        "y": 220,
        "wires": [
            []
        ],
        "icon": "font-awesome/fa-cogs"
    },
    {
        "id": "16eeeafde4b45717",
        "type": "function",
        "z": "dea5fa223d05d26c",
        "name": "verifyStatus",
        "func": "let verifyPC = msg.conditions.verifyPC;\nlet startPC = msg.conditions.startPC;\nlet lastTimestamp = msg.data.lastTimestamp;\nlet machine = msg.data.machine;\nlet status = msg.data.status;\nlet currentTimestamp = new Date();\nlet currentStatus = context.get('currentStatus') || null;\nlet differenceInSeconds = context.get('differenceInSeconds') || 0;\n\nif(lastTimestamp !== null) {\n\n    differenceInSeconds = (currentTimestamp.getTime() - lastTimestamp) / 1000;\n    context.set('differenceInSeconds', differenceInSeconds);\n\n    if(differenceInSeconds >= 300 && (!startPC && !verifyPC) && status == \"PARADA\") {\n        currentStatus = \"PARADA\";\n        context.set('currentStatus', currentStatus);\n    }\n\n    if ((differenceInSeconds <= 299) || (startPC == true || verifyPC == true) || (status == \"TRABALHANDO\")) {\n        currentStatus = \"TRABALHANDO\";\n        context.set('currentStatus', currentStatus);\n    }\n\n    else if (differenceInSeconds >= 1800) {\n        currentStatus = \"DESLIGADO\";\n        context.set('currentStatus', currentStatus);\n    }\n}\nelse if( lastTimestamp == null && status == \"PARADA\") {\n    currentStatus = \"DESLIGADO\";\n    context.set('currentStatus', currentStatus);\n}\nmsg.status = {\n    time: differenceInSeconds,\n    machine: machine,\n    currentStatus: currentStatus\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1750,
        "y": 260,
        "wires": [
            [
                "be0236e927a2aa47"
            ]
        ],
        "icon": "node-red/status.svg"
    },
    {
        "id": "be0236e927a2aa47",
        "type": "function",
        "z": "dea5fa223d05d26c",
        "name": "FormatedMessage",
        "func": "let machine = msg.status.machine;\nlet timestamp = new Date().getTime();\nlet currentStatus = context.get('currentStatus') || null; \nlet oldStatus = msg.status.currentStatus;\n\nif(!currentStatus || currentStatus !== oldStatus) {\n    currentStatus = oldStatus;\n    context.set('currentStatus', currentStatus);\n\n    msg.payload = {\n            timestamp: timestamp,\n            deviceSerialNumber: machine,\n            status: currentStatus\n    }\n    return msg;\n}\nreturn null;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1770,
        "y": 300,
        "wires": [
            []
        ],
        "icon": "font-awesome/fa-envelope"
    },
    {
        "id": "c461a87d14871ef3",
        "type": "function",
        "z": "dea5fa223d05d26c",
        "name": "Switch State",
        "func": "function handleSwitch(payload, context, switchName, statusSNSName, startName, finishName, verifyName) {\n    let switchKey = Object.keys(payload).find(key => key.startsWith(switchName)) // extrai o switch que chegou no payload\n    let switchState = context.get(switchName) || null;\n    let actionValue = payload[switchKey] ? payload[switchKey].Action : null; // extrai o estado do switch que chegou\n    let statusSNS = payload[statusSNSName] && payload[statusSNSName][switchName];\n    let startState = context.get(startName) || false;\n    let finishState = context.get(finishName) || false;\n    let verifyState = context.get(verifyName) || false;\n\n    switchState = actionValue || statusSNS || switchState; // adquiri o estado do switch que chegou\n\n    if (switchState == \"ON\" && finishState == false) { // Condi√ß√£o que caracteriza o in√≠cio da produ√ß√£o da pe√ßa\n        startState = true;\n    }\n    else if (switchState == \"OFF\" && startState == true) { // condi√ß√£o que caracteriza o final da produ√ß√£o da pe√ßa\n        finishState = true;\n    }\n    verifyState = startState == true && finishState == true ? true : false;\n\n    if (verifyState == true) { // reseta o in√≠cio o fim da produ√ß√£o quando a pe√ßa √© produzida\n        startState = false;\n        finishState = false;\n\n    }\n    context.set(switchName, switchState);\n    context.set(startName, startState);\n    context.set(finishName, finishState);\n    context.set(verifyName, verifyState);\n\n    return {\n        switchState: switchState,\n        startState: startState,\n        finishState: finishState,\n        verifyState: verifyState\n    };\n}\nlet payload = msg.payload;\nlet switch1 = handleSwitch(payload, context, 'Switch1', 'StatusSNS', 'startPress', 'finishedPress', 'verifyPress');\n\nmsg.switches = {\n    switch1: switch1.switchState,\n    startPress: switch1.startState,\n    finishedPress: switch1.finishState,\n    verifyPress: switch1.verifyState,\n}\nswitch1.verifyState = false; // reseta a condi√ß√£o de pe√ßa produzindo para false quando a pe√ßa √© finalizada\ncontext.set('verifyPress', switch1.verifyState);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 970,
        "y": 220,
        "wires": [
            [
                "7397690d893f089e"
            ]
        ],
        "icon": "node-red/swap.svg"
    },
    {
        "id": "7397690d893f089e",
        "type": "function",
        "z": "dea5fa223d05d26c",
        "name": "Conditions Machine",
        "func": "const { startPress, verifyPress } = msg.switches;\nconst machine = msg.payload.serialNumber;\nlet startProduction = startPress;\nlet verifyProduction = verifyPress && !startPress ? true : false;\n\ncontext.set('startProduction', startProduction);\ncontext.set('verifyProduction', verifyProduction);\n\nreturn {\n    ...msg,\n    conditions: {\n        startProduction,\n        verifyProduction,\n        serialNumber: machine\n    }\n};",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1170,
        "y": 220,
        "wires": [
            [
                "1ca9e86c5219bb3f"
            ]
        ],
        "icon": "font-awesome/fa-bars"
    },
    {
        "id": "1ca9e86c5219bb3f",
        "type": "function",
        "z": "dea5fa223d05d26c",
        "name": "Production Machine",
        "func": "const { startProduction, verifyProduction, serialNumber } = msg.conditions || {};\nlet payload = msg.payload;\nlet [machine, startWorking, lastTimestamp] = ['machine', 'startWorking', 'lastTimestamp'].map(key => context.get(key) || null);\nlet currentTimestamp = new Date();\nlet pressCount = context.get('pressCount') || 0;\nlet resetShift = context.get('resetShift') || false;\n\nconst actions = {\n    'resetShift': () => {\n        pressCount = 0;\n        resetShift = false;\n\n        context.set('pressCount', pressCount);\n        context.set('resetShift', resetShift);\n    },\n    'payloadReset': () => {\n        resetShift = true;\n        context.set('resetShift', resetShift);\n    },\n    'startWorking': () => {\n        startWorking = currentTimestamp;\n        context.set('startWorking', startWorking);\n    },\n    'finishedProduction': () => {\n        pressCount++;\n\n        lastTimestamp = currentTimestamp;\n        context.set('lastTimestamp', lastTimestamp);\n    },\n    'machineNull': () => {\n        machine = serialNumber;\n        context.set('machine', machine);\n    }\n}\n\nconst conditions = {\n    resetShift: resetShift === true,\n    payloadReset: payload === 'reset',\n    startWorking: startProduction === true,\n    finishedProduction: verifyProduction === true,\n    machineNull: serialNumber && machine === null,\n};\n\nObject.entries(conditions).forEach(([condition, isTrue]) => {\n    if (isTrue) {\n        actions[condition]();\n    }\n});\ncontext.set('pressCount', pressCount);\n\nmsg.data = {\n    press: pressCount,\n    startProduction: startWorking,\n    lastTimestamp: lastTimestamp,\n    machine: machine,\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1400,
        "y": 220,
        "wires": [
            [
                "826c2d0e12b035c2",
                "dd85d2934e27e986"
            ]
        ],
        "icon": "font-awesome/fa-book"
    },
    {
        "id": "826c2d0e12b035c2",
        "type": "function",
        "z": "dea5fa223d05d26c",
        "name": "PRENSA 110T 06",
        "func": "let workingTime = msg.data.workingTime;\nlet idleTime = msg.data.idleTime;\nlet press = msg.data.press;\nlet status = msg.data.status;\nlet reset = msg.data.reset;\nlet machine = msg.topic;\nlet workingTimeMinutes = context.get('workingTimeMinutes') || 0;\nlet idleTimeMinutes = context.get('idleTimeMinutes') || 0;\n\nfunction minutesToHours(totalMinutes) {\n    var hours = String(Math.floor(totalMinutes / 60)).padStart(2, \"0\");\n    var minutes = String(totalMinutes % 60).padStart(2, \"0\");\n\n    return `${hours}:${minutes}`;\n}\n\nif (reset == true) {\n    workingTimeMinutes = 0;\n    idleTimeMinutes = 0;\n\n    context.set('workingTimeMinutes', workingTimeMinutes);\n    context.set('idleTimeMinutes', 0);\n}\n\nif (workingTime > 0 || idleTime > 0) {\n    workingTimeMinutes = workingTime / 60;\n    idleTimeMinutes = idleTime / 60;\n}\n\nmsg.payload = {\n    press: press,\n    workingTimeMinutes: minutesToHours(workingTimeMinutes.toFixed(0)),\n    idleTimeMinutes: minutesToHours(idleTimeMinutes.toFixed(0)),\n    status: status,\n    deviceSerialNumber: machine\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1770,
        "y": 360,
        "wires": [
            []
        ],
        "icon": "font-awesome/fa-cogs"
    },
    {
        "id": "dd85d2934e27e986",
        "type": "function",
        "z": "dea5fa223d05d26c",
        "name": "verifyStatus",
        "func": "let verifyPC = msg.conditions.verifyPC;\nlet startPC = msg.conditions.startPC;\nlet lastTimestamp = msg.data.lastTimestamp;\nlet machine = msg.data.machine;\nlet status = msg.data.status;\nlet currentTimestamp = new Date();\nlet currentStatus = context.get('currentStatus') || null;\nlet differenceInSeconds = context.get('differenceInSeconds') || 0;\n\nif (lastTimestamp !== null) {\n\n    differenceInSeconds = (currentTimestamp.getTime() - lastTimestamp) / 1000;\n    context.set('differenceInSeconds', differenceInSeconds);\n\n    if (differenceInSeconds >= 300 && (!startPC && !verifyPC) && status == \"PARADA\") {\n        currentStatus = \"PARADA\";\n        context.set('currentStatus', currentStatus);\n    }\n\n    if ((differenceInSeconds <= 299) || (startPC == true || verifyPC == true) || (status == \"TRABALHANDO\")) {\n        currentStatus = \"TRABALHANDO\";\n        context.set('currentStatus', currentStatus);\n    }\n\n    else if (differenceInSeconds >= 1800) {\n        currentStatus = \"DESLIGADO\";\n        context.set('currentStatus', currentStatus);\n    }\n}\nelse if (lastTimestamp == null && status == \"PARADA\") {\n    currentStatus = \"DESLIGADO\";\n    context.set('currentStatus', currentStatus);\n}\nmsg.status = {\n    time: differenceInSeconds,\n    machine: machine,\n    currentStatus: currentStatus\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1750,
        "y": 400,
        "wires": [
            [
                "da8789eaacc6a129"
            ]
        ],
        "icon": "node-red/status.svg"
    },
    {
        "id": "da8789eaacc6a129",
        "type": "function",
        "z": "dea5fa223d05d26c",
        "name": "FormatedMessage",
        "func": "let machine = msg.status.machine;\nlet timestamp = new Date().getTime();\nlet currentStatus = context.get('currentStatus') || null; \nlet oldStatus = msg.status.currentStatus;\n\nif(!currentStatus || currentStatus !== oldStatus) {\n    currentStatus = oldStatus;\n    context.set('currentStatus', currentStatus);\n\n    msg.payload = {\n            timestamp: timestamp,\n            deviceSerialNumber: machine,\n            status: currentStatus\n    }\n    return msg;\n}\nreturn null;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1770,
        "y": 440,
        "wires": [
            []
        ],
        "icon": "font-awesome/fa-envelope"
    },
    {
        "id": "13eb6ba95955e2e9",
        "type": "switch",
        "z": "dea5fa223d05d26c",
        "name": "Machine",
        "property": "payload.serialNumber",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "DF3685",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "DF1FA0",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "DF5144",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "DF29B4",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 4,
        "x": 280,
        "y": 200,
        "wires": [
            [
                "04f4455aa81fa81f"
            ],
            [
                "3ce18ebb432b3bce"
            ],
            [
                "e0bea961c96a8078"
            ],
            [
                "58a422d41c5a4ef3"
            ]
        ],
        "icon": "font-awesome/fa-desktop"
    },
    {
        "id": "beb76d50c606c961",
        "type": "function",
        "z": "dea5fa223d05d26c",
        "name": "Switch State",
        "func": "function handleSwitch(payload, context, switchName, statusSNSName, startName, finishName, verifyName) {\n    let switchKey = Object.keys(payload).find(key => key.startsWith(switchName)) // extrai o switch que chegou no payload\n    let switchState = context.get(switchName) || null;\n    let actionValue = payload[switchKey] ? payload[switchKey].Action : null; // extrai o estado do switch que chegou\n    let statusSNS = payload[statusSNSName] && payload[statusSNSName][switchName];\n    let startState = context.get(startName) || false;\n    let finishState = context.get(finishName) || false;\n    let verifyState = context.get(verifyName) || false;\n\n    switchState = actionValue || statusSNS || switchState; // adquiri o estado do switch que chegou\n\n    if (switchState == \"ON\" && finishState == false) { // Condi√ß√£o que caracteriza o in√≠cio da produ√ß√£o da pe√ßa\n        startState = true;\n    }\n    else if (switchState == \"OFF\" && startState == true) { // condi√ß√£o que caracteriza o final da produ√ß√£o da pe√ßa\n        finishState = true;\n    }\n    verifyState = startState == true && finishState == true ? true : false;\n\n    if (verifyState == true) { // reseta o in√≠cio o fim da produ√ß√£o quando a pe√ßa √© produzida\n        startState = false;\n        finishState = false;\n\n    }\n    context.set(switchName, switchState);\n    context.set(startName, startState);\n    context.set(finishName, finishState);\n    context.set(verifyName, verifyState);\n\n    return {\n        switchState: switchState,\n        startState: startState,\n        finishState: finishState,\n        verifyState: verifyState\n    };\n}\nlet payload = msg.payload;\nlet switch1 = handleSwitch(payload, context, 'Switch1', 'StatusSNS', 'startPress', 'finishedPress', 'verifyPress');\n\nmsg.switches = {\n    switch1: switch1.switchState,\n    startPress: switch1.startState,\n    finishedPress: switch1.finishState,\n    verifyPress: switch1.verifyState,\n}\nswitch1.verifyState = false; // reseta a condi√ß√£o de pe√ßa produzindo para false quando a pe√ßa √© finalizada\ncontext.set('verifyPress', switch1.verifyState);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 970,
        "y": 260,
        "wires": [
            [
                "971470b8b20988d5"
            ]
        ],
        "icon": "node-red/swap.svg"
    },
    {
        "id": "971470b8b20988d5",
        "type": "function",
        "z": "dea5fa223d05d26c",
        "name": "Conditions Machine",
        "func": "const { startPress, verifyPress } = msg.switches;\nconst machine = msg.payload.serialNumber;\nlet startProduction = startPress;\nlet verifyProduction = verifyPress && !startPress ? true : false;\n\ncontext.set('startProduction', startProduction);\ncontext.set('verifyProduction', verifyProduction);\n\nreturn {\n    ...msg,\n    conditions: {\n        startProduction,\n        verifyProduction,\n        serialNumber: machine\n    }\n};",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1170,
        "y": 260,
        "wires": [
            [
                "2e58e74c042b7cda"
            ]
        ],
        "icon": "font-awesome/fa-bars"
    },
    {
        "id": "2e58e74c042b7cda",
        "type": "function",
        "z": "dea5fa223d05d26c",
        "name": "Production Machine",
        "func": "const { startProduction, verifyProduction, serialNumber } = msg.conditions || {};\nlet payload = msg.payload;\nlet [machine, startWorking, lastTimestamp] = ['machine', 'startWorking', 'lastTimestamp'].map(key => context.get(key) || null);\nlet currentTimestamp = new Date();\nlet pressCount = context.get('pressCount') || 0;\nlet resetShift = context.get('resetShift') || false;\n\nconst actions = {\n    'resetShift': () => {\n        pressCount = 0;\n        resetShift = false;\n\n        context.set('pressCount', pressCount);\n        context.set('resetShift', resetShift);\n    },\n    'payloadReset': () => {\n        resetShift = true;\n        context.set('resetShift', resetShift);\n    },\n    'startWorking': () => {\n        startWorking = currentTimestamp;\n        context.set('startWorking', startWorking);\n    },\n    'finishedProduction': () => {\n        pressCount++;\n\n        lastTimestamp = currentTimestamp;\n        context.set('lastTimestamp', lastTimestamp);\n    },\n    'machineNull': () => {\n        machine = serialNumber;\n        context.set('machine', machine);\n    }\n}\n\nconst conditions = {\n    resetShift: resetShift === true,\n    payloadReset: payload === 'reset',\n    startWorking: startProduction === true,\n    finishedProduction: verifyProduction === true,\n    machineNull: serialNumber && machine === null,\n};\n\nObject.entries(conditions).forEach(([condition, isTrue]) => {\n    if (isTrue) {\n        actions[condition]();\n    }\n});\ncontext.set('pressCount', pressCount);\n\nmsg.data = {\n    press: pressCount,\n    startProduction: startWorking,\n    lastTimestamp: lastTimestamp,\n    machine: machine,\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1400,
        "y": 260,
        "wires": [
            [
                "b3462a7db60633e5",
                "5c57f4bf16178486"
            ]
        ],
        "icon": "font-awesome/fa-book"
    },
    {
        "id": "b3462a7db60633e5",
        "type": "function",
        "z": "dea5fa223d05d26c",
        "name": "PRENSA 110T 07",
        "func": "let workingTime = msg.data.workingTime;\nlet idleTime = msg.data.idleTime;\nlet press = msg.data.press;\nlet status = msg.data.status;\nlet reset = msg.data.reset;\nlet machine = msg.topic;\nlet workingTimeMinutes = context.get('workingTimeMinutes') || 0;\nlet idleTimeMinutes = context.get('idleTimeMinutes') || 0;\n\nfunction minutesToHours(totalMinutes) {\n    var hours = String(Math.floor(totalMinutes / 60)).padStart(2, \"0\");\n    var minutes = String(totalMinutes % 60).padStart(2, \"0\");\n\n    return `${hours}:${minutes}`;\n}\n\nif (reset == true) {\n    workingTimeMinutes = 0;\n    idleTimeMinutes = 0;\n\n    context.set('workingTimeMinutes', workingTimeMinutes);\n    context.set('idleTimeMinutes', 0);\n}\n\nif (workingTime > 0 || idleTime > 0) {\n    workingTimeMinutes = workingTime / 60;\n    idleTimeMinutes = idleTime / 60;\n}\n\nmsg.payload = {\n    press: press,\n    workingTimeMinutes: minutesToHours(workingTimeMinutes.toFixed(0)),\n    idleTimeMinutes: minutesToHours(idleTimeMinutes.toFixed(0)),\n    status: status,\n    deviceSerialNumber: machine\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1770,
        "y": 500,
        "wires": [
            []
        ],
        "icon": "font-awesome/fa-cogs"
    },
    {
        "id": "5c57f4bf16178486",
        "type": "function",
        "z": "dea5fa223d05d26c",
        "name": "verifyStatus",
        "func": "let verifyPC = msg.conditions.verifyPC;\nlet startPC = msg.conditions.startPC;\nlet lastTimestamp = msg.data.lastTimestamp;\nlet machine = msg.data.machine;\nlet status = msg.data.status;\nlet currentTimestamp = new Date();\nlet currentStatus = context.get('currentStatus') || null;\nlet differenceInSeconds = context.get('differenceInSeconds') || 0;\n\nif (lastTimestamp !== null) {\n\n    differenceInSeconds = (currentTimestamp.getTime() - lastTimestamp) / 1000;\n    context.set('differenceInSeconds', differenceInSeconds);\n\n    if (differenceInSeconds >= 300 && (!startPC && !verifyPC) && status == \"PARADA\") {\n        currentStatus = \"PARADA\";\n        context.set('currentStatus', currentStatus);\n    }\n\n    if ((differenceInSeconds <= 299) || (startPC == true || verifyPC == true) || (status == \"TRABALHANDO\")) {\n        currentStatus = \"TRABALHANDO\";\n        context.set('currentStatus', currentStatus);\n    }\n\n    else if (differenceInSeconds >= 1800) {\n        currentStatus = \"DESLIGADO\";\n        context.set('currentStatus', currentStatus);\n    }\n}\nelse if (lastTimestamp == null && status == \"PARADA\") {\n    currentStatus = \"DESLIGADO\";\n    context.set('currentStatus', currentStatus);\n}\nmsg.status = {\n    time: differenceInSeconds,\n    machine: machine,\n    currentStatus: currentStatus\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1750,
        "y": 540,
        "wires": [
            [
                "b8e8be15073532f5"
            ]
        ],
        "icon": "node-red/status.svg"
    },
    {
        "id": "b8e8be15073532f5",
        "type": "function",
        "z": "dea5fa223d05d26c",
        "name": "FormatedMessage",
        "func": "let machine = msg.status.machine;\nlet timestamp = new Date().getTime();\nlet currentStatus = context.get('currentStatus') || null; \nlet oldStatus = msg.status.currentStatus;\n\nif(!currentStatus || currentStatus !== oldStatus) {\n    currentStatus = oldStatus;\n    context.set('currentStatus', currentStatus);\n\n    msg.payload = {\n            timestamp: timestamp,\n            deviceSerialNumber: machine,\n            status: currentStatus\n    }\n    return msg;\n}\nreturn null;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1770,
        "y": 580,
        "wires": [
            []
        ],
        "icon": "font-awesome/fa-envelope"
    },
    {
        "id": "32466e6f381490a8",
        "type": "switch",
        "z": "dea5fa223d05d26c",
        "name": "Machine",
        "property": "payload.serialNumber",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "DF5795",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "DF57A3",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "EAB0E4",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "DF3E25",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 4,
        "x": 280,
        "y": 720,
        "wires": [
            [
                "f89b843d42c11e11"
            ],
            [
                "510297819e168f99"
            ],
            [
                "d35f6d5abb13c232"
            ],
            [
                "ea655d1d92b270d5"
            ]
        ],
        "icon": "font-awesome/fa-desktop"
    },
    {
        "id": "3452e384cda3272a",
        "type": "function",
        "z": "dea5fa223d05d26c",
        "name": "Conditions Machine",
        "func": "const { startPress, verifyPress } = msg.switches;\nconst machine = msg.payload.serialNumber;\nlet startProduction = startPress;\nlet verifyProduction = verifyPress && !startPress ? true : false;\n\ncontext.set('startProduction', startProduction);\ncontext.set('verifyProduction', verifyProduction);\n\nmsg.conditions = {\n    startProduction,\n    verifyProduction,\n    serialNumber: machine\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1190,
        "y": 660,
        "wires": [
            [
                "ec393ca5e74b58bb"
            ]
        ],
        "icon": "font-awesome/fa-bars"
    },
    {
        "id": "ec393ca5e74b58bb",
        "type": "function",
        "z": "dea5fa223d05d26c",
        "name": "Production Machine",
        "func": "const { startProduction, verifyProduction, serialNumber } = msg.conditions;\nlet [machine, startWorking, lastTimestamp] = ['machine', 'startWorking', 'lastTimestamp'].map(key => context.get(key) || null);\nlet pressCount = context.get('pressCount') || 0;\nlet resetShift = context.get('resetShift') || false;\nlet currentTimestamp = new Date();\n\nconst actions = {\n    resetShift: () => { pressCount = 0; resetShift = false; },\n    payloadReset: () => { resetShift = true; },\n    startProduction: () => { startWorking = currentTimestamp; },\n    finishedProduction: () => { pressCount++; lastTimestamp = currentTimestamp; },\n    machineNull: () => { machine = serialNumber; }\n};\n\nconst conditions = {\n    resetShift: resetShift,\n    payloadReset: msg.payload === 'reset',\n    startProduction: startProduction,\n    finishedProduction: verifyProduction,\n    machineNull: serialNumber && machine === null,\n};\n\nObject.entries(conditions).forEach(([condition, isTrue]) => {\n    if (isTrue && actions[condition]) actions[condition]();\n});\ncontext.set('pressCount', pressCount);\ncontext.set('resetShift', resetShift);\ncontext.set('startWorking', startWorking);\ncontext.set('lastTimestamp', lastTimestamp);\ncontext.set('machine', machine);\n\nmsg.data = {\n    press: pressCount,\n    dateStartProduction: startWorking,\n    dateLastProduction: lastTimestamp,\n    machine: machine,\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1420,
        "y": 660,
        "wires": [
            [
                "298cd57c7a92369e",
                "f7d517409e2abc1f"
            ]
        ],
        "icon": "font-awesome/fa-book"
    },
    {
        "id": "298cd57c7a92369e",
        "type": "function",
        "z": "dea5fa223d05d26c",
        "name": "verifyStatus",
        "func": "let { dateStartProduction, dateLastProduction, machine } = msg.data;\nlet [differenceTimedateStartProduction, differenceTimelastProduction] = ['differenceTimedateStartProduction', 'differenceTimelasProduction'].map(key => context.get(key) || 0);\nlet currentTimestamp = new Date();\nlet currentStatus = context.get('currentStatus') || null;\n\ndifferenceTimedateStartProduction = dateStartProduction !== null ? (currentTimestamp.getTime() - dateStartProduction.getTime()) / 1000 : null;\ndifferenceTimelastProduction = dateLastProduction !== null ? (currentTimestamp.getTime() - dateLastProduction.getTime()) / 1000 : null;\n\ncontext.set('differenceTimedateStartProduction', differenceTimedateStartProduction);\ncontext.set('differenceTimelastProduction', differenceTimelastProduction);\n\nif (dateStartProduction !== null) {\n\n    //Mapear status\n    const machineWorking = differenceTimedateStartProduction <= 299 || (differenceTimelastProduction !== null && differenceTimelastProduction <= 299);\n\n    const machineIdle = (differenceTimedateStartProduction >= 300 && differenceTimelastProduction >= 300 && differenceTimelastProduction <= 1799) ||\n        (differenceTimedateStartProduction >= 300 && differenceTimedateStartProduction <= 1799 && dateLastProduction === null);\n\n    const machineOff = ((differenceTimedateStartProduction >= 300 && differenceTimelastProduction >= 1800) || (differenceTimedateStartProduction >= 1800 && dateLastProduction === null));\n\n    const newStatus = machineWorking ? 'TRABALHANDO' : machineIdle ? 'PARADO' : machineOff ? 'DESLIGADO' : null;\n    if (newStatus) currentStatus = newStatus;\n}\n\nif (dateStartProduction == null) currentStatus = \"DESLIGADO\";\n\ncontext.set('currentStatus', currentStatus);\n\nmsg.status = {\n    timeCurrentProduction: differenceTimedateStartProduction,\n    timeLastProduction: differenceTimelastProduction,\n    machine: machine,\n    currentStatus: currentStatus\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1750,
        "y": 680,
        "wires": [
            [
                "c7827e60e57702d0",
                "e14bf9f9f77b1447"
            ]
        ],
        "icon": "node-red/status.svg"
    },
    {
        "id": "c7827e60e57702d0",
        "type": "function",
        "z": "dea5fa223d05d26c",
        "name": "FormatedMessage",
        "func": "let machine = msg.status.machine;\nlet timestamp = new Date().getTime();\nlet currentStatus = context.get('currentStatus') || null; \nlet oldStatus = msg.status.currentStatus;\n\nif(!currentStatus || currentStatus !== oldStatus) {\n    currentStatus = oldStatus;\n    context.set('currentStatus', currentStatus);\n\n    msg.payload = {\n            timestamp: timestamp,\n            deviceSerialNumber: machine,\n            status: currentStatus\n    }\n    return msg;\n}\n\nreturn null;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1770,
        "y": 720,
        "wires": [
            []
        ],
        "icon": "font-awesome/fa-envelope"
    },
    {
        "id": "f7d517409e2abc1f",
        "type": "function",
        "z": "dea5fa223d05d26c",
        "name": "PRENSA 160T",
        "func": "let {press, machine} = msg.data;\n\nmsg.payload = {\n    golpes: press,\n    deviceSerialNumber: machine\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1760,
        "y": 640,
        "wires": [
            []
        ],
        "icon": "font-awesome/fa-cogs"
    },
    {
        "id": "f731f85fdec4f8b5",
        "type": "function",
        "z": "dea5fa223d05d26c",
        "name": "Switch State",
        "func": "let payload = msg.payload; \nlet switch1 = context.get('switch1') || null;\n\nif ((payload.Switch1 && payload.Switch1.Action == \"ON\") || (payload.StatusSNS && payload.StatusSNS.Switch1 == \"ON\")) {\n    context.set('switch1', \"ON\");\n}\nif ((payload.Switch1 && payload.Switch1.Action == \"OFF\") || (payload.StatusSNS && payload.StatusSNS.Switch1 == \"OFF\") && switch1 == \"ON\") {\n    context.set('switch1', \"OFF\");\n}\nmsg.switches = {\n    switch1: context.get('switch1')\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 700,
        "wires": [
            [
                "f8ad91f2608b1a00"
            ]
        ],
        "icon": "node-red/swap.svg"
    },
    {
        "id": "510297819e168f99",
        "type": "switch",
        "z": "dea5fa223d05d26c",
        "name": "OPTION SW",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "hask",
                "v": "Switch1",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "StatusSNS",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 490,
        "y": 700,
        "wires": [
            [
                "0511ba23a865f8ad"
            ],
            [
                "0511ba23a865f8ad"
            ]
        ]
    },
    {
        "id": "f8ad91f2608b1a00",
        "type": "function",
        "z": "dea5fa223d05d26c",
        "name": "Conditions Machine",
        "func": "let switch1 = msg.switches.switch1 || null;\nlet serialNumber = msg.payload.serialNumber;\nlet verifyPress = context.get('verifyPress') || false; /* verifica se a pe√ßa foi realizada */\nlet startPress = context.get('startPress') || false; /* verifica se a produ√ß√£o da pe√ßa foi iniciada */\n\nif (switch1 == \"ON\") { /* momento em que a produ√ß√£o da pe√ßa √© iniciada */\n    startPress = true;\n    context.set('startPress', startPress);\n}\n\nif (switch1 == \"OFF\" && startPress) { /* momento em que a produ√ß√£o da pe√ßa √© finalizada */\n    verifyPress = true;\n    startPress = false;\n\n    context.set('verifyPress', verifyPress);\n    context.set('startPress', startPress);\n}\n\nmsg.conditions = {\n    verifyPress: verifyPress,\n    startPress: startPress,\n    machine: serialNumber\n}\n\nif (verifyPress) {\n    verifyPress = false;\n    context.set('verifyPress', verifyPress);\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1190,
        "y": 700,
        "wires": [
            [
                "74d62318576ece58"
            ]
        ],
        "icon": "font-awesome/fa-bars"
    },
    {
        "id": "74d62318576ece58",
        "type": "function",
        "z": "dea5fa223d05d26c",
        "name": "Production Machine",
        "func": "let startPress = msg.conditions.startPress;\nlet verifyPress = msg.conditions.verifyPress;\nlet serialNumber = msg.conditions.machine;\nlet payload = msg.payload;\nlet machine = context.get('machine') || null;\nlet startWorking = context.get('startWorking') || null;\nlet lastTimestamp = context.get('lastTimestamp') || null;\nlet currentTimestamp = new Date().getTime();\nlet sumWorkingTime = context.get('sumWorkingTime') || 0;\nlet sumIdleTime = context.get('sumIdleTime') || 0;\nlet pressCount = context.get('pressCount') || 0;\nlet currentStatus = context.get('currentStatus') || \"PARADA\";\nlet verifyWorking = context.get('verifyWorking') || false;\nlet resetShift = context.get('resetShift') || false;\n\nif (resetShift) {\n    pressCount = 0;\n    sumWorkingTime = 0;\n    sumIdleTime = 0;\n\n    context.set('pressCount', pressCount);\n    context.set('sumWorkingTime', sumWorkingTime);\n    context.set('sumIdleTime', sumIdleTime);\n\n    resetShift = false;\n    context.set('resetShift', resetShift);\n}\n\nif (startPress) {\n\n    startWorking = currentTimestamp;\n    context.set('startWorking', startWorking);\n\n    if (lastTimestamp !== null) {\n        let differenceTimeSignals = (currentTimestamp - lastTimestamp) / 1000;\n\n        if (differenceTimeSignals >= 300) {\n            sumIdleTime += differenceTimeSignals;\n            context.set('sumIdleTime', sumIdleTime);\n        }\n        else {\n            sumWorkingTime += differenceTimeSignals;\n            context.set('sumWorkingTime', sumWorkingTime);\n        }\n    }\n    currentStatus = \"TRABALHANDO\";\n    context.set('currentStatus', currentStatus);\n\n    verifyWorking = true;\n    context.set('verifyWorking', true);\n}\nelse if (startPress == false) {\n    currentStatus = \"PARADA\";\n    context.set('currentStatus', currentStatus);\n}\n\nif (verifyPress) {\n    pressCount++;\n\n    lastTimestamp = currentTimestamp\n    context.set('lastTimestamp', lastTimestamp);\n\n    let timeWorking = (currentTimestamp - startWorking) / 1000;\n    sumWorkingTime += timeWorking;\n    context.set('sumWorkingTime', sumWorkingTime);\n\n}\n\nif (machine == null) {\n    machine = serialNumber;\n    context.set('machine', machine);\n}\n\nif (payload === \"reset\") {\n    resetShift = true;\n    context.set('resetShift', true);\n}\ncontext.set('pressCount', pressCount);\n\nmsg.data = {\n    press: pressCount,\n    workingTime: sumWorkingTime.toFixed(3),\n    idleTime: sumIdleTime.toFixed(3),\n    status: currentStatus,\n    verifyWorking: verifyWorking,\n    lastTimestamp: lastTimestamp,\n    machine: machine,\n    reset: resetShift\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1420,
        "y": 700,
        "wires": [
            [
                "7118d4c659f69969",
                "af526615f809251b"
            ]
        ],
        "icon": "font-awesome/fa-book"
    },
    {
        "id": "7118d4c659f69969",
        "type": "function",
        "z": "dea5fa223d05d26c",
        "name": "verifyStatus",
        "func": "let verifyPC = msg.conditions.verifyPC;\nlet startPC = msg.conditions.startPC;\nlet lastTimestamp = msg.data.lastTimestamp;\nlet machine = msg.data.machine;\nlet status = msg.data.status;\nlet currentTimestamp = new Date();\nlet currentStatus = context.get('currentStatus') || null;\nlet differenceInSeconds = context.get('differenceInSeconds') || 0;\n\nif (lastTimestamp !== null) {\n\n    differenceInSeconds = (currentTimestamp.getTime() - lastTimestamp) / 1000;\n    context.set('differenceInSeconds', differenceInSeconds);\n\n    if (differenceInSeconds >= 300 && (!startPC && !verifyPC) && status == \"PARADA\") {\n        currentStatus = \"PARADA\";\n        context.set('currentStatus', currentStatus);\n    }\n\n    if ((differenceInSeconds <= 299) || (startPC == true || verifyPC == true) || (status == \"TRABALHANDO\")) {\n        currentStatus = \"TRABALHANDO\";\n        context.set('currentStatus', currentStatus);\n    }\n\n    else if (differenceInSeconds >= 1800) {\n        currentStatus = \"DESLIGADO\";\n        context.set('currentStatus', currentStatus);\n    }\n}\nelse if (lastTimestamp == null && status == \"PARADA\") {\n    currentStatus = \"DESLIGADO\";\n    context.set('currentStatus', currentStatus);\n}\nmsg.status = {\n    time: differenceInSeconds,\n    machine: machine,\n    currentStatus: currentStatus\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1750,
        "y": 820,
        "wires": [
            [
                "1e70ad19a881b7f3"
            ]
        ],
        "icon": "node-red/status.svg"
    },
    {
        "id": "0511ba23a865f8ad",
        "type": "change",
        "z": "dea5fa223d05d26c",
        "name": "delete time",
        "rules": [
            {
                "t": "delete",
                "p": "payload.timestamp",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.StatusSNS.Time",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.StatusSNS.Switch2",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.StatusSNS.Switch3",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.StatusSNS.Switch4",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 670,
        "y": 700,
        "wires": [
            [
                "ffe9eaa7eb952798"
            ]
        ],
        "icon": "font-awesome/fa-times-circle"
    },
    {
        "id": "1e70ad19a881b7f3",
        "type": "function",
        "z": "dea5fa223d05d26c",
        "name": "FormatedMessage",
        "func": "let machine = msg.status.machine;\nlet timestamp = new Date().getTime();\nlet currentStatus = context.get('currentStatus') || null; \nlet oldStatus = msg.status.currentStatus;\n\nif(!currentStatus || currentStatus !== oldStatus) {\n    currentStatus = oldStatus;\n    context.set('currentStatus', currentStatus);\n\n    msg.payload = {\n            timestamp: timestamp,\n            deviceSerialNumber: machine,\n            status: currentStatus\n    }\n    return msg;\n}\nreturn null;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1770,
        "y": 860,
        "wires": [
            []
        ],
        "icon": "font-awesome/fa-envelope"
    },
    {
        "id": "af526615f809251b",
        "type": "function",
        "z": "dea5fa223d05d26c",
        "name": "PRENSA 320T",
        "func": "let workingTime = msg.data.workingTime;\nlet idleTime = msg.data.idleTime;\nlet press = msg.data.press;\nlet status = msg.data.status;\nlet reset = msg.data.reset;\nlet machine = msg.topic;\nlet workingTimeMinutes = context.get('workingTimeMinutes') || 0;\nlet idleTimeMinutes = context.get('idleTimeMinutes') || 0;\n\nfunction minutesToHours(totalMinutes) {\n    var hours = String(Math.floor(totalMinutes / 60)).padStart(2, \"0\");\n    var minutes = String(totalMinutes % 60).padStart(2, \"0\");\n\n    return `${hours}:${minutes}`;\n}\n\nif (reset == true) {\n    workingTimeMinutes = 0;\n    idleTimeMinutes = 0;\n\n    context.set('workingTimeMinutes', workingTimeMinutes);\n    context.set('idleTimeMinutes', 0);\n}\n\nif (workingTime > 0 || idleTime > 0) {\n    workingTimeMinutes = workingTime / 60;\n    idleTimeMinutes = idleTime / 60;\n}\n\nmsg.payload = {\n    press: press,\n    workingTimeMinutes: minutesToHours(workingTimeMinutes.toFixed(0)),\n    idleTimeMinutes: minutesToHours(idleTimeMinutes.toFixed(0)),\n    status: status,\n    deviceSerialNumber: machine\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1760,
        "y": 780,
        "wires": [
            []
        ],
        "icon": "font-awesome/fa-cogs"
    },
    {
        "id": "49cc0729520f8cd2",
        "type": "function",
        "z": "dea5fa223d05d26c",
        "name": "Switch State",
        "func": "let payload = msg.payload; \nlet switch1 = context.get('switch1') || null;\n\nif ((payload.Switch1 && payload.Switch1.Action == \"ON\") || (payload.StatusSNS && payload.StatusSNS.Switch1 == \"ON\")) {\n    context.set('switch1', \"ON\");\n}\nif ((payload.Switch1 && payload.Switch1.Action == \"OFF\") || (payload.StatusSNS && payload.StatusSNS.Switch1 == \"OFF\") && switch1 == \"ON\") {\n    context.set('switch1', \"OFF\");\n}\nmsg.switches = {\n    switch1: context.get('switch1')\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 740,
        "wires": [
            [
                "26c8e9dbb2e2debd"
            ]
        ],
        "icon": "node-red/swap.svg"
    },
    {
        "id": "d35f6d5abb13c232",
        "type": "switch",
        "z": "dea5fa223d05d26c",
        "name": "OPTION SW",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "hask",
                "v": "Switch1",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "StatusSNS",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 490,
        "y": 740,
        "wires": [
            [
                "0bdf780d1d905dfa"
            ],
            [
                "0bdf780d1d905dfa"
            ]
        ]
    },
    {
        "id": "26c8e9dbb2e2debd",
        "type": "function",
        "z": "dea5fa223d05d26c",
        "name": "Conditions Machine",
        "func": "let switch1 = msg.switches.switch1 || null;\nlet serialNumber = msg.payload.serialNumber;\nlet verifyPress = context.get('verifyPress') || false; /* verifica se a pe√ßa foi realizada */\nlet startPress = context.get('startPress') || false; /* verifica se a produ√ß√£o da pe√ßa foi iniciada */\n\nif (switch1 == \"ON\") { /* momento em que a produ√ß√£o da pe√ßa √© iniciada */\n    startPress = true;\n    context.set('startPress', startPress);\n}\n\nif (switch1 == \"OFF\" && startPress) { /* momento em que a produ√ß√£o da pe√ßa √© finalizada */\n    verifyPress = true;\n    startPress = false;\n\n    context.set('verifyPress', verifyPress);\n    context.set('startPress', startPress);\n}\n\nmsg.conditions = {\n    verifyPress: verifyPress,\n    startPress: startPress,\n    machine: serialNumber\n}\n\nif (verifyPress) {\n    verifyPress = false;\n    context.set('verifyPress', verifyPress);\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1190,
        "y": 740,
        "wires": [
            [
                "4f79cc75c2953cb3"
            ]
        ],
        "icon": "font-awesome/fa-bars"
    },
    {
        "id": "4f79cc75c2953cb3",
        "type": "function",
        "z": "dea5fa223d05d26c",
        "name": "Production Machine",
        "func": "let startPress = msg.conditions.startPress;\nlet verifyPress = msg.conditions.verifyPress;\nlet serialNumber = msg.conditions.machine;\nlet payload = msg.payload;\nlet machine = context.get('machine') || null;\nlet startWorking = context.get('startWorking') || null;\nlet lastTimestamp = context.get('lastTimestamp') || null;\nlet currentTimestamp = new Date().getTime();\nlet sumWorkingTime = context.get('sumWorkingTime') || 0;\nlet sumIdleTime = context.get('sumIdleTime') || 0;\nlet pressCount = context.get('pressCount') || 0;\nlet currentStatus = context.get('currentStatus') || \"PARADA\";\nlet verifyWorking = context.get('verifyWorking') || false;\nlet resetShift = context.get('resetShift') || false;\n\nif (resetShift) {\n    pressCount = 0;\n    sumWorkingTime = 0;\n    sumIdleTime = 0;\n\n    context.set('pressCount', pressCount);\n    context.set('sumWorkingTime', sumWorkingTime);\n    context.set('sumIdleTime', sumIdleTime);\n\n    resetShift = false;\n    context.set('resetShift', resetShift);\n}\n\nif (startPress) {\n\n    startWorking = currentTimestamp;\n    context.set('startWorking', startWorking);\n\n    if (lastTimestamp !== null) {\n        let differenceTimeSignals = (currentTimestamp - lastTimestamp) / 1000;\n\n        if (differenceTimeSignals >= 300) {\n            sumIdleTime += differenceTimeSignals;\n            context.set('sumIdleTime', sumIdleTime);\n        }\n        else {\n            sumWorkingTime += differenceTimeSignals;\n            context.set('sumWorkingTime', sumWorkingTime);\n        }\n    }\n    currentStatus = \"TRABALHANDO\";\n    context.set('currentStatus', currentStatus);\n\n    verifyWorking = true;\n    context.set('verifyWorking', true);\n}\nelse if (startPress == false) {\n    currentStatus = \"PARADA\";\n    context.set('currentStatus', currentStatus);\n}\n\nif (verifyPress) {\n    pressCount++;\n\n    lastTimestamp = currentTimestamp\n    context.set('lastTimestamp', lastTimestamp);\n\n    let timeWorking = (currentTimestamp - startWorking) / 1000;\n    sumWorkingTime += timeWorking;\n    context.set('sumWorkingTime', sumWorkingTime);\n\n}\n\nif (machine == null) {\n    machine = serialNumber;\n    context.set('machine', machine);\n}\n\nif (payload === \"reset\") {\n    resetShift = true;\n    context.set('resetShift', true);\n}\ncontext.set('pressCount', pressCount);\n\nmsg.data = {\n    press: pressCount,\n    workingTime: sumWorkingTime.toFixed(3),\n    idleTime: sumIdleTime.toFixed(3),\n    status: currentStatus,\n    verifyWorking: verifyWorking,\n    lastTimestamp: lastTimestamp,\n    machine: machine,\n    reset: resetShift\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1420,
        "y": 740,
        "wires": [
            [
                "16926e734fb6fe12",
                "b3cbf6eca6e71dc0"
            ]
        ],
        "icon": "font-awesome/fa-book"
    },
    {
        "id": "16926e734fb6fe12",
        "type": "function",
        "z": "dea5fa223d05d26c",
        "name": "verifyStatus",
        "func": "let verifyPC = msg.conditions.verifyPC;\nlet startPC = msg.conditions.startPC;\nlet lastTimestamp = msg.data.lastTimestamp;\nlet machine = msg.data.machine;\nlet status = msg.data.status;\nlet currentTimestamp = new Date();\nlet currentStatus = context.get('currentStatus') || null;\nlet differenceInSeconds = context.get('differenceInSeconds') || 0;\n\nif (lastTimestamp !== null) {\n\n    differenceInSeconds = (currentTimestamp.getTime() - lastTimestamp) / 1000;\n    context.set('differenceInSeconds', differenceInSeconds);\n\n    if (differenceInSeconds >= 300 && (!startPC && !verifyPC) && status == \"PARADA\") {\n        currentStatus = \"PARADA\";\n        context.set('currentStatus', currentStatus);\n    }\n\n    if ((differenceInSeconds <= 299) || (startPC == true || verifyPC == true) || (status == \"TRABALHANDO\")) {\n        currentStatus = \"TRABALHANDO\";\n        context.set('currentStatus', currentStatus);\n    }\n\n    else if (differenceInSeconds >= 1800) {\n        currentStatus = \"DESLIGADO\";\n        context.set('currentStatus', currentStatus);\n    }\n}\nelse if (lastTimestamp == null && status == \"PARADA\") {\n    currentStatus = \"DESLIGADO\";\n    context.set('currentStatus', currentStatus);\n}\nmsg.status = {\n    time: differenceInSeconds,\n    machine: machine,\n    currentStatus: currentStatus\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1750,
        "y": 960,
        "wires": [
            [
                "57f816a7c5d8876e"
            ]
        ],
        "icon": "node-red/status.svg"
    },
    {
        "id": "0bdf780d1d905dfa",
        "type": "change",
        "z": "dea5fa223d05d26c",
        "name": "delete time",
        "rules": [
            {
                "t": "delete",
                "p": "payload.timestamp",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.StatusSNS.Time",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.StatusSNS.Switch2",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.StatusSNS.Switch3",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.StatusSNS.Switch4",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 670,
        "y": 740,
        "wires": [
            [
                "e627e74f7d050e64"
            ]
        ],
        "icon": "font-awesome/fa-times-circle"
    },
    {
        "id": "57f816a7c5d8876e",
        "type": "function",
        "z": "dea5fa223d05d26c",
        "name": "FormatedMessage",
        "func": "let machine = msg.status.machine;\nlet timestamp = new Date().getTime();\nlet currentStatus = context.get('currentStatus') || null; \nlet oldStatus = msg.status.currentStatus;\n\nif(!currentStatus || currentStatus !== oldStatus) {\n    currentStatus = oldStatus;\n    context.set('currentStatus', currentStatus);\n\n    msg.payload = {\n            timestamp: timestamp,\n            deviceSerialNumber: machine,\n            status: currentStatus\n    }\n    return msg;\n}\nreturn null;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1770,
        "y": 1000,
        "wires": [
            []
        ],
        "icon": "font-awesome/fa-envelope"
    },
    {
        "id": "b3cbf6eca6e71dc0",
        "type": "function",
        "z": "dea5fa223d05d26c",
        "name": "PRENSA 200T",
        "func": "let workingTime = msg.data.workingTime;\nlet idleTime = msg.data.idleTime;\nlet press = msg.data.press;\nlet status = msg.data.status;\nlet reset = msg.data.reset;\nlet machine = msg.topic;\nlet workingTimeMinutes = context.get('workingTimeMinutes') || 0;\nlet idleTimeMinutes = context.get('idleTimeMinutes') || 0;\n\nfunction minutesToHours(totalMinutes) {\n    var hours = String(Math.floor(totalMinutes / 60)).padStart(2, \"0\");\n    var minutes = String(totalMinutes % 60).padStart(2, \"0\");\n\n    return `${hours}:${minutes}`;\n}\n\nif (reset == true) {\n    workingTimeMinutes = 0;\n    idleTimeMinutes = 0;\n\n    context.set('workingTimeMinutes', workingTimeMinutes);\n    context.set('idleTimeMinutes', 0);\n}\n\nif (workingTime > 0 || idleTime > 0) {\n    workingTimeMinutes = workingTime / 60;\n    idleTimeMinutes = idleTime / 60;\n}\n\nmsg.payload = {\n    press: press,\n    workingTimeMinutes: minutesToHours(workingTimeMinutes.toFixed(0)),\n    idleTimeMinutes: minutesToHours(idleTimeMinutes.toFixed(0)),\n    status: status,\n    deviceSerialNumber: machine\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1760,
        "y": 920,
        "wires": [
            []
        ],
        "icon": "font-awesome/fa-cogs"
    },
    {
        "id": "83c4374aab1ae9d8",
        "type": "function",
        "z": "dea5fa223d05d26c",
        "name": "Switch State",
        "func": "let payload = msg.payload; \nlet switch1 = context.get('switch1') || null;\n\nif ((payload.Switch1 && payload.Switch1.Action == \"ON\") || (payload.StatusSNS && payload.StatusSNS.Switch1 == \"ON\")) {\n    context.set('switch1', \"ON\");\n}\nif ((payload.Switch1 && payload.Switch1.Action == \"OFF\") || (payload.StatusSNS && payload.StatusSNS.Switch1 == \"OFF\") && switch1 == \"ON\") {\n    context.set('switch1', \"OFF\");\n}\nmsg.switches = {\n    switch1: context.get('switch1')\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 780,
        "wires": [
            [
                "96c317006e112558"
            ]
        ],
        "icon": "node-red/swap.svg"
    },
    {
        "id": "ea655d1d92b270d5",
        "type": "switch",
        "z": "dea5fa223d05d26c",
        "name": "OPTION SW",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "hask",
                "v": "Switch1",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "StatusSNS",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 490,
        "y": 780,
        "wires": [
            [
                "80603d00d4bce971"
            ],
            [
                "80603d00d4bce971"
            ]
        ]
    },
    {
        "id": "96c317006e112558",
        "type": "function",
        "z": "dea5fa223d05d26c",
        "name": "Conditions Machine",
        "func": "let switch1 = msg.switches.switch1 || null;\nlet serialNumber = msg.payload.serialNumber;\nlet verifyPress = context.get('verifyPress') || false; /* verifica se a pe√ßa foi realizada */\nlet startPress = context.get('startPress') || false; /* verifica se a produ√ß√£o da pe√ßa foi iniciada */\n\nif (switch1 == \"ON\") { /* momento em que a produ√ß√£o da pe√ßa √© iniciada */\n    startPress = true;\n    context.set('startPress', startPress);\n}\n\nif (switch1 == \"OFF\" && startPress) { /* momento em que a produ√ß√£o da pe√ßa √© finalizada */\n    verifyPress = true;\n    startPress = false;\n\n    context.set('verifyPress', verifyPress);\n    context.set('startPress', startPress);\n}\n\nmsg.conditions = {\n    verifyPress: verifyPress,\n    startPress: startPress,\n    machine: serialNumber\n}\n\nif (verifyPress) {\n    verifyPress = false;\n    context.set('verifyPress', verifyPress);\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1190,
        "y": 780,
        "wires": [
            [
                "d9f0992e80a09252"
            ]
        ],
        "icon": "font-awesome/fa-bars"
    },
    {
        "id": "d9f0992e80a09252",
        "type": "function",
        "z": "dea5fa223d05d26c",
        "name": "Production Machine",
        "func": "let startPress = msg.conditions.startPress;\nlet verifyPress = msg.conditions.verifyPress;\nlet serialNumber = msg.conditions.machine;\nlet payload = msg.payload;\nlet machine = context.get('machine') || null;\nlet startWorking = context.get('startWorking') || null;\nlet lastTimestamp = context.get('lastTimestamp') || null;\nlet currentTimestamp = new Date().getTime();\nlet sumWorkingTime = context.get('sumWorkingTime') || 0;\nlet sumIdleTime = context.get('sumIdleTime') || 0;\nlet pressCount = context.get('pressCount') || 0;\nlet currentStatus = context.get('currentStatus') || \"PARADA\";\nlet verifyWorking = context.get('verifyWorking') || false;\nlet resetShift = context.get('resetShift') || false;\n\nif (resetShift) {\n    pressCount = 0;\n    sumWorkingTime = 0;\n    sumIdleTime = 0;\n\n    context.set('pressCount', pressCount);\n    context.set('sumWorkingTime', sumWorkingTime);\n    context.set('sumIdleTime', sumIdleTime);\n\n    resetShift = false;\n    context.set('resetShift', resetShift);\n}\n\nif (startPress) {\n\n    startWorking = currentTimestamp;\n    context.set('startWorking', startWorking);\n\n    if (lastTimestamp !== null) {\n        let differenceTimeSignals = (currentTimestamp - lastTimestamp) / 1000;\n\n        if (differenceTimeSignals >= 300) {\n            sumIdleTime += differenceTimeSignals;\n            context.set('sumIdleTime', sumIdleTime);\n        }\n        else {\n            sumWorkingTime += differenceTimeSignals;\n            context.set('sumWorkingTime', sumWorkingTime);\n        }\n    }\n    currentStatus = \"TRABALHANDO\";\n    context.set('currentStatus', currentStatus);\n\n    verifyWorking = true;\n    context.set('verifyWorking', true);\n}\nelse if (startPress == false) {\n    currentStatus = \"PARADA\";\n    context.set('currentStatus', currentStatus);\n}\n\nif (verifyPress) {\n    pressCount++;\n\n    lastTimestamp = currentTimestamp\n    context.set('lastTimestamp', lastTimestamp);\n\n    let timeWorking = (currentTimestamp - startWorking) / 1000;\n    sumWorkingTime += timeWorking;\n    context.set('sumWorkingTime', sumWorkingTime);\n\n}\n\nif (machine == null) {\n    machine = serialNumber;\n    context.set('machine', machine);\n}\n\nif (payload === \"reset\") {\n    resetShift = true;\n    context.set('resetShift', true);\n}\ncontext.set('pressCount', pressCount);\n\nmsg.data = {\n    press: pressCount,\n    workingTime: sumWorkingTime.toFixed(3),\n    idleTime: sumIdleTime.toFixed(3),\n    status: currentStatus,\n    verifyWorking: verifyWorking,\n    lastTimestamp: lastTimestamp,\n    machine: machine,\n    reset: resetShift\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1420,
        "y": 780,
        "wires": [
            [
                "6131c258857cefcd",
                "a7499a8ae94cd703"
            ]
        ],
        "icon": "font-awesome/fa-book"
    },
    {
        "id": "6131c258857cefcd",
        "type": "function",
        "z": "dea5fa223d05d26c",
        "name": "verifyStatus",
        "func": "let verifyPC = msg.conditions.verifyPC;\nlet startPC = msg.conditions.startPC;\nlet lastTimestamp = msg.data.lastTimestamp;\nlet machine = msg.data.machine;\nlet status = msg.data.status;\nlet currentTimestamp = new Date();\nlet currentStatus = context.get('currentStatus') || null;\nlet differenceInSeconds = context.get('differenceInSeconds') || 0;\n\nif (lastTimestamp !== null) {\n\n    differenceInSeconds = (currentTimestamp.getTime() - lastTimestamp) / 1000;\n    context.set('differenceInSeconds', differenceInSeconds);\n\n    if (differenceInSeconds >= 300 && (!startPC && !verifyPC) && status == \"PARADA\") {\n        currentStatus = \"PARADA\";\n        context.set('currentStatus', currentStatus);\n    }\n\n    if ((differenceInSeconds <= 299) || (startPC == true || verifyPC == true) || (status == \"TRABALHANDO\")) {\n        currentStatus = \"TRABALHANDO\";\n        context.set('currentStatus', currentStatus);\n    }\n\n    else if (differenceInSeconds >= 1800) {\n        currentStatus = \"DESLIGADO\";\n        context.set('currentStatus', currentStatus);\n    }\n}\nelse if (lastTimestamp == null && status == \"PARADA\") {\n    currentStatus = \"DESLIGADO\";\n    context.set('currentStatus', currentStatus);\n}\nmsg.status = {\n    time: differenceInSeconds,\n    machine: machine,\n    currentStatus: currentStatus\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1750,
        "y": 1100,
        "wires": [
            [
                "f6e27d6160ee4afe"
            ]
        ],
        "icon": "node-red/status.svg"
    },
    {
        "id": "80603d00d4bce971",
        "type": "change",
        "z": "dea5fa223d05d26c",
        "name": "delete time",
        "rules": [
            {
                "t": "delete",
                "p": "payload.timestamp",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.StatusSNS.Time",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.StatusSNS.Switch2",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.StatusSNS.Switch3",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.StatusSNS.Switch4",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 670,
        "y": 780,
        "wires": [
            [
                "64e7c3cc06f48d8a"
            ]
        ],
        "icon": "font-awesome/fa-times-circle"
    },
    {
        "id": "f6e27d6160ee4afe",
        "type": "function",
        "z": "dea5fa223d05d26c",
        "name": "FormatedMessage",
        "func": "let machine = msg.status.machine;\nlet timestamp = new Date().getTime();\nlet currentStatus = context.get('currentStatus') || null; \nlet oldStatus = msg.status.currentStatus;\n\nif(!currentStatus || currentStatus !== oldStatus) {\n    currentStatus = oldStatus;\n    context.set('currentStatus', currentStatus);\n\n    msg.payload = {\n            timestamp: timestamp,\n            deviceSerialNumber: machine,\n            status: currentStatus\n    }\n    return msg;\n}\nreturn null;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1770,
        "y": 1140,
        "wires": [
            []
        ],
        "icon": "font-awesome/fa-envelope"
    },
    {
        "id": "a7499a8ae94cd703",
        "type": "function",
        "z": "dea5fa223d05d26c",
        "name": "PRENSA 800T",
        "func": "let workingTime = msg.data.workingTime;\nlet idleTime = msg.data.idleTime;\nlet press = msg.data.press;\nlet status = msg.data.status;\nlet reset = msg.data.reset;\nlet machine = msg.topic;\nlet workingTimeMinutes = context.get('workingTimeMinutes') || 0;\nlet idleTimeMinutes = context.get('idleTimeMinutes') || 0;\n\nfunction minutesToHours(totalMinutes) {\n    var hours = String(Math.floor(totalMinutes / 60)).padStart(2, \"0\");\n    var minutes = String(totalMinutes % 60).padStart(2, \"0\");\n\n    return `${hours}:${minutes}`;\n}\n\nif (reset == true) {\n    workingTimeMinutes = 0;\n    idleTimeMinutes = 0;\n\n    context.set('workingTimeMinutes', workingTimeMinutes);\n    context.set('idleTimeMinutes', 0);\n}\n\nif (workingTime > 0 || idleTime > 0) {\n    workingTimeMinutes = workingTime / 60;\n    idleTimeMinutes = idleTime / 60;\n}\n\nmsg.payload = {\n    press: press,\n    workingTimeMinutes: minutesToHours(workingTimeMinutes.toFixed(0)),\n    idleTimeMinutes: minutesToHours(idleTimeMinutes.toFixed(0)),\n    status: status,\n    deviceSerialNumber: machine\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1760,
        "y": 1060,
        "wires": [
            []
        ],
        "icon": "font-awesome/fa-cogs"
    },
    {
        "id": "3ef4dcf64d2f5ab5",
        "type": "rbe",
        "z": "dea5fa223d05d26c",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 810,
        "y": 140,
        "wires": [
            [
                "80a884d7991eb90c"
            ]
        ]
    },
    {
        "id": "3ce18ebb432b3bce",
        "type": "switch",
        "z": "dea5fa223d05d26c",
        "name": "OPTION SW",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "hask",
                "v": "Switch1",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "StatusSNS",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 470,
        "y": 180,
        "wires": [
            [
                "ddd2b11380be9403"
            ],
            [
                "ddd2b11380be9403"
            ]
        ]
    },
    {
        "id": "ddd2b11380be9403",
        "type": "change",
        "z": "dea5fa223d05d26c",
        "name": "delete time",
        "rules": [
            {
                "t": "delete",
                "p": "payload.timestamp",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.StatusSNS.Time",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.StatusSNS.Switch2",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.StatusSNS.Switch3",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.StatusSNS.Switch4",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 650,
        "y": 180,
        "wires": [
            [
                "b58c006d9decd28a"
            ]
        ],
        "icon": "font-awesome/fa-times-circle"
    },
    {
        "id": "b58c006d9decd28a",
        "type": "rbe",
        "z": "dea5fa223d05d26c",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 810,
        "y": 180,
        "wires": [
            [
                "2471ef435f01b064"
            ]
        ]
    },
    {
        "id": "e0bea961c96a8078",
        "type": "switch",
        "z": "dea5fa223d05d26c",
        "name": "OPTION SW",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "hask",
                "v": "Switch1",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "StatusSNS",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 470,
        "y": 220,
        "wires": [
            [
                "cb448396c6725b08"
            ],
            [
                "cb448396c6725b08"
            ]
        ]
    },
    {
        "id": "cb448396c6725b08",
        "type": "change",
        "z": "dea5fa223d05d26c",
        "name": "delete time",
        "rules": [
            {
                "t": "delete",
                "p": "payload.timestamp",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.StatusSNS.Time",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.StatusSNS.Switch2",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.StatusSNS.Switch3",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.StatusSNS.Switch4",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 650,
        "y": 220,
        "wires": [
            [
                "34f1f90af81f40e0"
            ]
        ],
        "icon": "font-awesome/fa-times-circle"
    },
    {
        "id": "34f1f90af81f40e0",
        "type": "rbe",
        "z": "dea5fa223d05d26c",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 810,
        "y": 220,
        "wires": [
            [
                "c461a87d14871ef3"
            ]
        ]
    },
    {
        "id": "58a422d41c5a4ef3",
        "type": "switch",
        "z": "dea5fa223d05d26c",
        "name": "OPTION SW",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "hask",
                "v": "Switch1",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "StatusSNS",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 470,
        "y": 260,
        "wires": [
            [
                "455f1a2e841ab013"
            ],
            [
                "455f1a2e841ab013"
            ]
        ]
    },
    {
        "id": "455f1a2e841ab013",
        "type": "change",
        "z": "dea5fa223d05d26c",
        "name": "delete time",
        "rules": [
            {
                "t": "delete",
                "p": "payload.timestamp",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.StatusSNS.Time",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.StatusSNS.Switch2",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.StatusSNS.Switch3",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.StatusSNS.Switch4",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 650,
        "y": 260,
        "wires": [
            [
                "7b44f0cd9cd620fc"
            ]
        ],
        "icon": "font-awesome/fa-times-circle"
    },
    {
        "id": "7b44f0cd9cd620fc",
        "type": "rbe",
        "z": "dea5fa223d05d26c",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 810,
        "y": 260,
        "wires": [
            [
                "beb76d50c606c961"
            ]
        ]
    },
    {
        "id": "f89b843d42c11e11",
        "type": "switch",
        "z": "dea5fa223d05d26c",
        "name": "OPTION SW",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "hask",
                "v": "Switch1",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "StatusSNS",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 490,
        "y": 660,
        "wires": [
            [
                "9162ade2285211b8"
            ],
            [
                "9162ade2285211b8"
            ]
        ]
    },
    {
        "id": "9162ade2285211b8",
        "type": "change",
        "z": "dea5fa223d05d26c",
        "name": "delete time",
        "rules": [
            {
                "t": "delete",
                "p": "payload.timestamp",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.StatusSNS.Time",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.StatusSNS.Switch2",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.StatusSNS.Switch3",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.StatusSNS.Switch4",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 670,
        "y": 660,
        "wires": [
            [
                "0812d241a1dcc734"
            ]
        ],
        "icon": "font-awesome/fa-times-circle"
    },
    {
        "id": "0812d241a1dcc734",
        "type": "rbe",
        "z": "dea5fa223d05d26c",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 830,
        "y": 660,
        "wires": [
            [
                "9bef99490cc50207"
            ]
        ]
    },
    {
        "id": "9bef99490cc50207",
        "type": "function",
        "z": "dea5fa223d05d26c",
        "name": "Switch State",
        "func": "function handleSwitch(payload, context, switchName, statusSNSName, startName, finishName, verifyName) {\n    let switchKey = Object.keys(payload).find(key => key.startsWith(switchName)) // extrai o switch que chegou no payload\n    let switchState = context.get(switchName) || null;\n    let actionValue = payload[switchKey] ? payload[switchKey].Action : null; // extrai o estado do switch que chegou\n    let statusSNS = payload[statusSNSName] && payload[statusSNSName][switchName];\n    let startState = context.get(startName) || false;\n    let finishState = context.get(finishName) || false;\n    let verifyState = context.get(verifyName) || false;\n\n    switchState = actionValue || statusSNS || switchState; // adquiri o estado do switch que chegou\n\n    if (switchState == \"ON\" && finishState == false) { // Condi√ß√£o que caracteriza o in√≠cio da produ√ß√£o da pe√ßa\n        startState = true;\n    }\n    else if (switchState == \"OFF\" && startState == true) { // condi√ß√£o que caracteriza o final da produ√ß√£o da pe√ßa\n        finishState = true;\n    }\n    verifyState = startState == true && finishState == true ? true : false;\n\n    if (verifyState == true) { // reseta o in√≠cio o fim da produ√ß√£o quando a pe√ßa √© produzida\n        startState = false;\n        finishState = false;\n\n    }\n    context.set(switchName, switchState);\n    context.set(startName, startState);\n    context.set(finishName, finishState);\n    context.set(verifyName, verifyState);\n\n    return {\n        switchState: switchState,\n        startState: startState,\n        finishState: finishState,\n        verifyState: verifyState\n    };\n}\nlet payload = msg.payload;\nlet switch1 = handleSwitch(payload, context, 'Switch1', 'StatusSNS', 'startPress', 'finishedPress', 'verifyPress');\n\nmsg.switches = {\n    switch1: switch1.switchState,\n    startPress: switch1.startState,\n    finishedPress: switch1.finishState,\n    verifyPress: switch1.verifyState,\n}\nswitch1.verifyState = false; // reseta a condi√ß√£o de pe√ßa produzindo para false quando a pe√ßa √© finalizada\ncontext.set('verifyPress', switch1.verifyState);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 660,
        "wires": [
            [
                "3452e384cda3272a"
            ]
        ],
        "icon": "node-red/swap.svg"
    },
    {
        "id": "ffe9eaa7eb952798",
        "type": "rbe",
        "z": "dea5fa223d05d26c",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 830,
        "y": 700,
        "wires": [
            [
                "f731f85fdec4f8b5"
            ]
        ]
    },
    {
        "id": "e627e74f7d050e64",
        "type": "rbe",
        "z": "dea5fa223d05d26c",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 830,
        "y": 740,
        "wires": [
            [
                "49cc0729520f8cd2"
            ]
        ]
    },
    {
        "id": "64e7c3cc06f48d8a",
        "type": "rbe",
        "z": "dea5fa223d05d26c",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 830,
        "y": 780,
        "wires": [
            [
                "83c4374aab1ae9d8"
            ]
        ]
    },
    {
        "id": "33b7f6b39598ff5f",
        "type": "rbe",
        "z": "dea5fa223d05d26c",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 910,
        "y": 1300,
        "wires": [
            [
                "c6e834e27f47ee15"
            ]
        ]
    },
    {
        "id": "5a2d678d98f8aba6",
        "type": "mqtt in",
        "z": "dea5fa223d05d26c",
        "d": true,
        "name": "Methal",
        "topic": "Methal",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "3a6af4e4f1669aa9",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 150,
        "y": 960,
        "wires": [
            [
                "8974a060195f39b6"
            ]
        ]
    },
    {
        "id": "8974a060195f39b6",
        "type": "switch",
        "z": "dea5fa223d05d26c",
        "name": "Machine",
        "property": "payload.serialNumber",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "DF2A34",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 320,
        "y": 960,
        "wires": [
            [
                "9022ff43eaf6182a"
            ]
        ],
        "icon": "font-awesome/fa-desktop"
    },
    {
        "id": "9022ff43eaf6182a",
        "type": "debug",
        "z": "dea5fa223d05d26c",
        "name": "debug 204",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 550,
        "y": 960,
        "wires": []
    },
    {
        "id": "d2e9a4dd8128d493",
        "type": "function",
        "z": "dea5fa223d05d26c",
        "name": "Increment Golpes",
        "func": "let serialNumber = msg.payload.deviceSerialNumber;\nlet golpes = msg.payload.press;\nlet previousPress = context.get('previousPress') || 0;\nlet count = context.get('count') || 0;\nlet unit = context.get('unit') || null;\nlet currentTimestamp = new Date().getTime();\n\n// Verifique se houve um acr√©scimo\nlet increaseInPress = golpes > previousPress;\n\n// Atualize os valores anteriores\ncontext.set('previousPress', golpes);\n\nif (increaseInPress == true && previousPress > 0) {\n\n    unit = \"Golpes\";\n    context.set('unit', unit);\n\n    count = 1;\n    context.set('count', count);\n\n    msg.payload = {\n        timestamp: currentTimestamp,\n        deviceSerialNumber: serialNumber,\n        unit: unit,\n        count: count\n    }\n    return msg;\n}\nreturn null;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2050,
        "y": 1300,
        "wires": [
            []
        ],
        "icon": "node-red/arrow-in.svg"
    },
    {
        "id": "dd3036560b6d3f33",
        "type": "function",
        "z": "dea5fa223d05d26c",
        "name": "Increment Dobras",
        "func": "let serialNumber = msg.payload.deviceSerialNumber;\nlet dobras = msg.payload.fold;\nlet previousFold = context.get('previousFold') || 0;\nlet count = context.get('count') || 0;\nlet unit = context.get('unit') || null;\nlet currentTimestamp = new Date().getTime();\n\n// Verifique se houve um acr√©scimo\nlet increaseInFold = dobras > previousFold;\n\n// Atualize os valores anteriores\ncontext.set('previousFold', dobras);\n\nif (increaseInFold == true && previousFold > 0) {\n\n    unit = \"Dobras\";\n    context.set('unit', unit);\n\n    count = 1;\n    context.set('count', count);\n\n    msg.payload = {\n        timeStamp: currentTimestamp,\n        deviceSerialNumber: serialNumber,\n        unit: unit,\n        count: count\n    }\n    return msg;\n}\nreturn null;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2050,
        "y": 1480,
        "wires": [
            []
        ],
        "icon": "node-red/arrow-in.svg"
    },
    {
        "id": "39eeee105474e631",
        "type": "function",
        "z": "dea5fa223d05d26c",
        "name": "Increment Pulsos",
        "func": "let serialNumber = msg.payload.deviceSerialNumber;\nlet pulsos = msg.payload.pulse;\nlet previousPulse = context.get('previousPulse') || 0;\nlet count = context.get('count') || 0;\nlet unit = context.get('unit') || null;\nlet currentTimestamp = new Date().getTime();\n\n// Verifique se houve um acr√©scimo\nlet increaseInPulse = pulsos > previousPulse;\n\n// Atualize os valores anteriores\ncontext.set('previousPulse', pulsos);\n\nif (increaseInPulse == true && previousPulse > 0) {\n\n    unit = \"Pulsos\";\n    context.set('unit', unit);\n\n    count = 1;\n    context.set('count', count);\n\n    msg.payload = {\n        timeStamp: currentTimestamp,\n        deviceSerialNumber: serialNumber,\n        unit: unit,\n        count: count\n    }\n    return msg;\n}\nreturn null;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2050,
        "y": 1540,
        "wires": [
            []
        ],
        "icon": "node-red/arrow-in.svg"
    },
    {
        "id": "17be7ae9267ea9fb",
        "type": "function",
        "z": "dea5fa223d05d26c",
        "name": "Increment Cortes",
        "func": "let serialNumber = msg.payload.deviceSerialNumber;\nlet cortes = msg.payload.cut;\nlet previousCut = context.get('previousCut') || 0;\nlet count = context.get('count') || 0;\nlet unit = context.get('unit') || null;\nlet currentTimestamp = new Date().getTime();\n\n// Verifique se houve um acr√©scimo\nlet increaseInCut = cortes > previousCut;\n\n// Atualize os valores anteriores\ncontext.set('previousCut', cortes);\n\nif (increaseInCut == true && previousCut > 0) {\n\n    unit = \"Cortes\";\n    context.set('unit', unit);\n\n    count = 1;\n    context.set('count', count);\n\n    msg.payload = {\n        timeStamp: currentTimestamp,\n        deviceSerialNumber: serialNumber,\n        unit: unit,\n        count: count\n    }\n    return msg;\n}\nreturn null;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2050,
        "y": 1600,
        "wires": [
            []
        ],
        "icon": "node-red/arrow-in.svg"
    },
    {
        "id": "4b41a7565c0b9f13",
        "type": "function",
        "z": "dea5fa223d05d26c",
        "name": "Increment Plano-Corte",
        "func": "let serialNumber = msg.payload.deviceSerialNumber;\nlet planoCorte = msg.payload.planoCorte;\nlet previousPlanCut = context.get('previousPlanCut') || 0;\nlet count = context.get('count') || 0;\nlet unit = context.get('unit') || null;\nlet currentTimestamp = new Date().getTime();\n\n// Verifique se houve um acr√©scimo\nlet increaseInPlanCut = planoCorte > previousPlanCut;\n\n// Atualize os valores anteriores\ncontext.set('previousPlanCut', planoCorte);\n\nif (increaseInPlanCut == true && previousPlanCut > 0) {\n\n    unit = \"Chapas\";\n    context.set('unit', unit);\n\n    count = 1;\n    context.set('count', count);\n\n    msg.payload = {\n        timeStamp: currentTimestamp,\n        deviceSerialNumber: serialNumber,\n        unit: unit,\n        count: count\n    }\n    return msg;\n}\nreturn null;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2060,
        "y": 1660,
        "wires": [
            []
        ],
        "icon": "node-red/arrow-in.svg"
    },
    {
        "id": "83a218326b7fb485",
        "type": "function",
        "z": "dea5fa223d05d26c",
        "name": "Increment CHAPAS",
        "func": "let serialNumber = msg.payload.deviceSerialNumber;\nlet chapas = msg.payload.chapas;\nlet previousPlate = context.get('previousPlate') || 0;\nlet count = context.get('count') || 0;\nlet unit = context.get('unit') || null;\nlet currentTimestamp = new Date().getTime();\n\n// Verifique se houve um acr√©scimo\nlet increaseInPlate = chapas > previousPlate;\n\n// Atualize os valores anteriores\ncontext.set('previousPlate', chapas);\n\nif (increaseInPlate == true && previousPlate > 0) {\n\n    unit = \"Chapas\";\n    context.set('unit', unit);\n\n    count = 1;\n    context.set('count', count);\n\n    msg.payload = {\n        timeStamp: currentTimestamp,\n        deviceSerialNumber: serialNumber,\n        unit: unit,\n        count: count\n    }\n    return msg;\n}\nreturn null;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2050,
        "y": 1720,
        "wires": [
            []
        ],
        "icon": "node-red/arrow-in.svg"
    },
    {
        "id": "13df60e81b5fc862",
        "type": "catch",
        "z": "dea5fa223d05d26c",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 1300,
        "y": 1740,
        "wires": [
            [
                "1298c275ccbc26a3"
            ]
        ]
    },
    {
        "id": "1298c275ccbc26a3",
        "type": "debug",
        "z": "dea5fa223d05d26c",
        "name": "debug 218",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1550,
        "y": 1760,
        "wires": []
    },
    {
        "id": "3fd01faa525d28e9",
        "type": "inject",
        "z": "dea5fa223d05d26c",
        "name": "STATUS8",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF57A3",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"StatusSNS\": {  \"Switch1\": \"ON\" } }",
        "payloadType": "json",
        "x": 140,
        "y": 1360,
        "wires": [
            [
                "6cd82711f1d28358"
            ]
        ]
    },
    {
        "id": "460e0ccc5d71540b",
        "type": "inject",
        "z": "dea5fa223d05d26c",
        "name": "STATUS8",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF57A3",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"StatusSNS\": {  \"Switch1\": \"OFF\" } }",
        "payloadType": "json",
        "x": 140,
        "y": 1400,
        "wires": [
            [
                "6cd82711f1d28358"
            ]
        ]
    },
    {
        "id": "a9d830269efa5c18",
        "type": "switch",
        "z": "dea5fa223d05d26c",
        "name": "Machines",
        "property": "payload.serialNumber",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "DF1877",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 360,
        "y": 1880,
        "wires": [
            [
                "d6b81b4edc2d420a"
            ]
        ],
        "icon": "font-awesome/fa-desktop"
    },
    {
        "id": "299461373f597518",
        "type": "function",
        "z": "dea5fa223d05d26c",
        "name": "Switches States",
        "func": "function handleSwitch(payload, context, switchName, startName, finishName, verifyName) {\n    let switchState = context.get(switchName) || null;\n    let startState = context.get(startName) || false;\n    let finishState = context.get(finishName) || false;\n    let verifyState = context.get(verifyName) || false;\n\n    if (payload[switchName] && payload[switchName].Action == \"ON\") {\n        switchState = \"ON\";\n        startState = true;\n    } else if (payload[switchName] && payload[switchName].Action == \"OFF\" && switchState == \"ON\" && startState == true) {\n        switchState = \"OFF\";\n        finishState = true;\n    }\n    if (startState == true && finishState == true) {\n        verifyState = true;\n        startState = false;\n        finishState = false;\n    }\n\n    context.set(switchName, switchState);\n    context.set(startName, startState);\n    context.set(finishName, finishState);\n    context.set(verifyName, verifyState);\n\n    return {\n        switchState: switchState,\n        startState: startState,\n        finishState: finishState,\n        verifyState: verifyState\n    };\n}\n\nlet payload = msg.payload;\nlet laser = handleSwitch(payload, context, 'Switch1', 'startLaser', 'finishedLaser', 'verifyUseLaser');\nlet tableEnginerBreak = handleSwitch(payload, context, 'Switch2', 'breakStart', 'breakFinished', 'verifyBreakEngine');\nlet collisionPart = handleSwitch(payload, context, 'Switch3', 'startCollison', 'finishedCollison', 'verifyCollison');\n\nmsg.switches = {\n    switch1: laser.switchState,\n    switch2: tableEnginerBreak.switchState,\n    switch3: collisionPart.switchState,\n    startLaser: laser.startState,\n    finisehdLaser: laser.finishState,\n    laser: laser.verifyState,\n    breakStart: tableEnginerBreak.startState,\n    breakFinished: tableEnginerBreak.finishState,\n    verifyBreakEngine: tableEnginerBreak.verifyState,\n    startCollison: collisionPart.startState,\n    finishedCollison: collisionPart.finishState,\n    collisonPart: collisionPart.verifyState\n}\n\nif (laser.verifyState === true) {\n    laser.verifyState = false;\n    context.set('verifyUseLaser', laser.verifyState);\n}\nelse if (tableEnginerBreak.verifyState === true) {\n    tableEnginerBreak.verifyState = false;\n    context.set('verifyBreakEngine', tableEnginerBreak.verifyState);\n}\n\nelse if (collisionPart.verifyState === true) {\n    collisionPart.verifyState = false;\n    context.set('verifyCollison', collisionPart.verifyState);\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 1880,
        "wires": [
            [
                "6db89e8d347df463"
            ]
        ],
        "icon": "node-red/swap.svg"
    },
    {
        "id": "6db89e8d347df463",
        "type": "function",
        "z": "dea5fa223d05d26c",
        "name": "Conditions Machine",
        "func": "//Extra√ß√£o do estado de cada switch e suas a√ß√µes\nlet serialNumber = msg.payload.serialNumber; // n√∫mero de s√©rie da m√°quina\nlet laserActive = msg.switches.laser;\nlet verifyBreakEngine = msg.switches.verifyBreakEngine;\nlet collisonPart = msg.switches.collisonPart;\nlet existsPlateCutting = context.get('existsPlateCutting') || false;\nlet plateCutStarting = context.get('plateCutStarting') || false;\nlet finishedPlateCutting = context.get('finishedPlateCutting') || false;\nlet existsCollison = context.get('existsCollison') || false;\nlet currentTimestamp = new Date();\nlet timestampStartWorking = context.get('timestampStartWorking') || null;\n\nif (laserActive == true && existsPlateCutting == false) { // in√≠cio do corte da chapa\n    plateCutStarting = true;\n    existsPlateCutting = true;\n    timestampStartWorking = currentTimestamp;\n\n    context.set('plateCutStarting', plateCutStarting);\n    context.set('existsPlateCutting', existsPlateCutting);\n    context.set('timestampStartWorking', timestampStartWorking);\n}\n\nelse if (laserActive == false && existsPlateCutting == true && verifyBreakEngine == true) { // abertura da porta\n    if (timestampStartWorking !== null) {\n        let plateCutDuration = (currentTimestamp.getTime() - timestampStartWorking.getTime()) / 1000;\n\n        if (plateCutDuration >= 60) {\n            finishedPlateCutting = true;\n            context.set('finishedPlateCutting', finishedPlateCutting);\n        }\n    }\n}\n\nif (collisonPart == true) {\n    existsCollison = true;\n    context.set('existsCollison', existsCollison);\n}\n\nmsg.conditions = {\n    timestampStartWorking: timestampStartWorking,\n    plateCutStarting: plateCutStarting,\n    existsPlateCutting: existsPlateCutting,\n    finishedPlateCutting: finishedPlateCutting,\n    existsCollison: existsCollison,\n    serialNumber: serialNumber\n}\n\nif (finishedPlateCutting == true) {\n    existsPlateCutting = false;\n    finishedPlateCutting = false;\n    timestampStartWorking = null;\n\n    context.set('existsPlateCutting', existsPlateCutting);\n    context.set('finishedPlateCutting', finishedPlateCutting);\n    context.set('timestampStartWorking', timestampStartWorking);\n}\n\nif (plateCutStarting == true) {\n    plateCutStarting = false;\n    context.set('plateCutStarting', plateCutStarting);\n}\n\nif (existsCollison == true) {\n    existsCollison = false;\n    context.set('existsCollison', existsCollison);\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 1880,
        "wires": [
            [
                "c393461db8abb586"
            ]
        ],
        "icon": "font-awesome/fa-bars"
    },
    {
        "id": "a064ca49e4ad86f5",
        "type": "function",
        "z": "dea5fa223d05d26c",
        "name": "LASER TRUMPF",
        "func": "let workingTime = msg.data.workingTime;\nlet idleTime = msg.data.idleTime;\nlet plateSteelCount = msg.data.plateSteelCount;\nlet collisonCount = msg.data.collisonCount;\nlet status = msg.data.status;\nlet reset = msg.data.reset;\nlet machine = msg.data.machine;\nlet workingTimeMinutes = context.get('workingTimeMinutes') || 0;\nlet idleTimeMinutes = context.get('idleTimeMinutes') || 0;\n\nfunction minutesToHours(totalMinutes) {\n    var hours = String(Math.floor(totalMinutes / 60)).padStart(2, \"0\");\n    var minutes = String(totalMinutes % 60).padStart(2, \"0\");\n\n    return `${hours}:${minutes}`;\n}\n\nif (reset == true) {\n    workingTimeMinutes = 0;\n    idleTimeMinutes = 0;\n\n    context.set('workingTimeMinutes', workingTimeMinutes);\n    context.set('idleTimeMinutes', idleTimeMinutes);\n}\n\nif (workingTime > 0) {\n    workingTimeMinutes = workingTime / 60;\n}\nif (idleTime > 0) {\n    idleTimeMinutes = idleTime / 60;\n}\n\ncontext.set('workingTimeMinutes', workingTimeMinutes);\ncontext.set('idleTimeMinutes', idleTimeMinutes);\n\nmsg.payload = {\n    chapas: plateSteelCount,\n    colisao: collisonCount,\n    workingTimeMinutes: minutesToHours(workingTimeMinutes.toFixed(0)),\n    idleTimeMinutes: minutesToHours(idleTimeMinutes.toFixed(0)),\n    status: status,\n    deviceSerialNumber: machine\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1390,
        "y": 1880,
        "wires": [
            []
        ],
        "icon": "font-awesome/fa-cogs"
    },
    {
        "id": "59bbf7d5ba148f2c",
        "type": "function",
        "z": "dea5fa223d05d26c",
        "name": "verifyStatus",
        "func": "let lastTimestamp = msg.data.lastTimestamp;\nlet startWorking = msg.data.startWorking;\nlet machine = msg.data.machine;\nlet status = msg.data.status;\nlet currentTimestamp = new Date();\nlet currentStatus = context.get('currentStatus') || null;\nlet differenceInSeconds = context.get('differenceInSeconds') || 0;\n\nif (lastTimestamp !== null) {\n    differenceInSeconds = (currentTimestamp.getTime() - lastTimestamp.getTime()) / 1000;\n\n    if ((startWorking !== null || differenceInSeconds <= 299)) {\n        currentStatus = \"TRABALHANDO\";\n        context.set('currentStatus', currentStatus);\n    }\n    else if ((startWorking == null && differenceInSeconds >= 300)) {\n        currentStatus = \"PARADO\";\n        context.set('currentStatus', currentStatus);\n    }\n    else if ((startWorking == null && differenceInSeconds >= 1800)) {\n        currentStatus = \"DESLIGADO\";\n        context.set('currentStatus', currentStatus);\n    }\n}\n\nelse if (lastTimestamp == null && (startWorking !== null || status == \"TRABALHANDO\")) {\n    currentStatus = \"TRABALHANDO\";\n    context.set('currentStatus', currentStatus);\n}\n\nelse if (lastTimestamp == null && (startWorking == null || status == \"PARADA\")) {\n    currentStatus = \"DESLIGADO\";\n    context.set('currentStatus', currentStatus);\n}\n\nmsg.status = {\n    time: differenceInSeconds,\n    machine: machine,\n    currentStatus: currentStatus\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1370,
        "y": 1920,
        "wires": [
            [
                "5f9d96a5275d4e67",
                "c622eb19fb20c225"
            ]
        ],
        "icon": "node-red/status.svg"
    },
    {
        "id": "5f9d96a5275d4e67",
        "type": "function",
        "z": "dea5fa223d05d26c",
        "name": "FormatedMessage",
        "func": "let machine = msg.status.machine;\nlet timestamp = new Date().getTime();\nlet currentStatus = context.get('currentStatus') || null; \nlet oldStatus = msg.status.currentStatus;\n\nif(!currentStatus || currentStatus !== oldStatus) {\n    currentStatus = oldStatus;\n    context.set('currentStatus', currentStatus);\n\n    msg.payload = {\n            timestamp: timestamp,\n            deviceSerialNumber: machine,\n            status: currentStatus\n    }\n    return msg;\n}\nreturn null;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1390,
        "y": 1960,
        "wires": [
            []
        ],
        "icon": "font-awesome/fa-envelope"
    },
    {
        "id": "d6b81b4edc2d420a",
        "type": "switch",
        "z": "dea5fa223d05d26c",
        "name": "OPTION SW",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "hask",
                "v": "Switch1",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "Switch2",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "Switch3",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 510,
        "y": 1880,
        "wires": [
            [
                "299461373f597518"
            ],
            [
                "299461373f597518"
            ],
            [
                "299461373f597518"
            ]
        ]
    },
    {
        "id": "c622eb19fb20c225",
        "type": "debug",
        "z": "dea5fa223d05d26c",
        "name": "debug 234",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1670,
        "y": 1960,
        "wires": []
    },
    {
        "id": "be9abbee30bb0ba6",
        "type": "inject",
        "z": "dea5fa223d05d26c",
        "name": "TIMESTAMP (STATUS)",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "switches",
                "v": "{}",
                "vt": "json"
            },
            {
                "p": "conditions",
                "v": "{}",
                "vt": "json"
            },
            {
                "p": "data",
                "v": "{}",
                "vt": "json"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 780,
        "y": 1780,
        "wires": [
            [
                "c393461db8abb586"
            ]
        ],
        "icon": "font-awesome/fa-hourglass-1"
    },
    {
        "id": "18e5ddd7ae597681",
        "type": "inject",
        "z": "dea5fa223d05d26c",
        "name": "SWITCH2 ON",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF1877",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch2\": {\"Action\": \"ON\"} }",
        "payloadType": "json",
        "x": 170,
        "y": 2000,
        "wires": [
            [
                "a9d830269efa5c18"
            ]
        ]
    },
    {
        "id": "955b32eed5f86c3c",
        "type": "inject",
        "z": "dea5fa223d05d26c",
        "name": "SWITCH2 OFF",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF1877",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch2\": {\"Action\": \"OFF\"} }",
        "payloadType": "json",
        "x": 180,
        "y": 2040,
        "wires": [
            [
                "a9d830269efa5c18"
            ]
        ]
    },
    {
        "id": "27d308b37230032b",
        "type": "inject",
        "z": "dea5fa223d05d26c",
        "name": "TIMESTAMP (STATUS)",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "switches",
                "v": "{}",
                "vt": "json"
            },
            {
                "p": "conditions",
                "v": "{}",
                "vt": "json"
            },
            {
                "p": "data",
                "v": "{}",
                "vt": "json"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1140,
        "y": 100,
        "wires": [
            [
                "7d11c22eb55cbf7d"
            ]
        ],
        "icon": "font-awesome/fa-hourglass-1"
    },
    {
        "id": "52ad269dcb996e5b",
        "type": "inject",
        "z": "dea5fa223d05d26c",
        "name": "TIMESTAMP (STATUS)",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "switches",
                "v": "{}",
                "vt": "json"
            },
            {
                "p": "conditions",
                "v": "{}",
                "vt": "json"
            },
            {
                "p": "data",
                "v": "{}",
                "vt": "json"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1140,
        "y": 600,
        "wires": [
            [
                "ec393ca5e74b58bb"
            ]
        ],
        "icon": "font-awesome/fa-hourglass-1"
    },
    {
        "id": "7d18bca5672a2aee",
        "type": "inject",
        "z": "dea5fa223d05d26c",
        "name": "SWITCH1 ON",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF5795",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch1\": {\"Action\": \"ON\"} }",
        "payloadType": "json",
        "x": 110,
        "y": 580,
        "wires": [
            [
                "32466e6f381490a8"
            ]
        ]
    },
    {
        "id": "794f63443d3c79df",
        "type": "inject",
        "z": "dea5fa223d05d26c",
        "name": "SWITCH1 OFF",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF5795",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch1\": {\"Action\": \"OFF\"} }",
        "payloadType": "json",
        "x": 120,
        "y": 620,
        "wires": [
            [
                "32466e6f381490a8"
            ]
        ]
    },
    {
        "id": "e14bf9f9f77b1447",
        "type": "debug",
        "z": "dea5fa223d05d26c",
        "name": "debug 252",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2030,
        "y": 560,
        "wires": []
    },
    {
        "id": "1d2f1bc92727b503",
        "type": "inject",
        "z": "dea5fa223d05d26c",
        "name": "TIMESTAMP RESET",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "switches",
                "v": "{}",
                "vt": "json"
            },
            {
                "p": "conditions",
                "v": "{}",
                "vt": "json"
            },
            {
                "p": "data",
                "v": "{}",
                "vt": "json"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "reset",
        "payloadType": "str",
        "x": 1140,
        "y": 560,
        "wires": [
            [
                "ec393ca5e74b58bb"
            ]
        ],
        "icon": "font-awesome/fa-hourglass-1"
    },
    {
        "id": "a870b3ef36f1eb37",
        "type": "inject",
        "z": "dea5fa223d05d26c",
        "name": "SWITCH2 ON",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF0680",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch2\": {\"Action\": \"ON\"} }",
        "payloadType": "json",
        "x": 210,
        "y": 2440,
        "wires": [
            [
                "94ce6a04b69cbe98"
            ]
        ]
    },
    {
        "id": "9ed47d1a7d8901fc",
        "type": "inject",
        "z": "dea5fa223d05d26c",
        "name": "SWITCH2 OFF",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF0680",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch2\": {\"Action\": \"OFF\"} }",
        "payloadType": "json",
        "x": 220,
        "y": 2480,
        "wires": [
            [
                "94ce6a04b69cbe98"
            ]
        ]
    },
    {
        "id": "94ce6a04b69cbe98",
        "type": "switch",
        "z": "dea5fa223d05d26c",
        "name": "Machines",
        "property": "payload.serialNumber",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "DF0680",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "DF2475",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "DF2A34",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 460,
        "y": 2380,
        "wires": [
            [
                "d64bed931e00485a"
            ],
            [],
            []
        ],
        "icon": "font-awesome/fa-desktop"
    },
    {
        "id": "d64bed931e00485a",
        "type": "switch",
        "z": "dea5fa223d05d26c",
        "name": "OPTION SW",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "hask",
                "v": "Switch1",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "Switch2",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "StatusSNS",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 650,
        "y": 2280,
        "wires": [
            [
                "7d4a52cfdc9b01de"
            ],
            [
                "7d4a52cfdc9b01de"
            ],
            [
                "7d4a52cfdc9b01de"
            ]
        ]
    },
    {
        "id": "548798da7d2c92c0",
        "type": "inject",
        "z": "dea5fa223d05d26c",
        "name": "SWITCH1 ON",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF0680",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch1\": {\"Action\": \"ON\"} }",
        "payloadType": "json",
        "x": 210,
        "y": 2340,
        "wires": [
            [
                "94ce6a04b69cbe98"
            ]
        ]
    },
    {
        "id": "45f491c0651b2269",
        "type": "inject",
        "z": "dea5fa223d05d26c",
        "name": "SWITCH1 OFF",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF0680",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch1\": {\"Action\": \"OFF\"} }",
        "payloadType": "json",
        "x": 220,
        "y": 2380,
        "wires": [
            [
                "94ce6a04b69cbe98"
            ]
        ]
    },
    {
        "id": "7065642a83ffbd27",
        "type": "inject",
        "z": "dea5fa223d05d26c",
        "name": "STATUS8",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF0680",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"StatusSNS\": {  \"Switch1\": \"ON\" } }",
        "payloadType": "json",
        "x": 200,
        "y": 2260,
        "wires": [
            [
                "94ce6a04b69cbe98"
            ]
        ]
    },
    {
        "id": "4a2a1a904e73d805",
        "type": "inject",
        "z": "dea5fa223d05d26c",
        "name": "STATUS8",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF0680",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"StatusSNS\": {  \"Switch1\": \"OFF\" } }",
        "payloadType": "json",
        "x": 200,
        "y": 2300,
        "wires": [
            [
                "94ce6a04b69cbe98"
            ]
        ]
    },
    {
        "id": "7d4a52cfdc9b01de",
        "type": "change",
        "z": "dea5fa223d05d26c",
        "name": "delete time",
        "rules": [
            {
                "t": "delete",
                "p": "payload.timestamp",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.StatusSNS.Time",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.StatusSNS.Switch2",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.StatusSNS.Switch3",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.StatusSNS.Switch4",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 830,
        "y": 2280,
        "wires": [
            [
                "36ceb0aaa312dfae"
            ]
        ],
        "icon": "font-awesome/fa-times-circle"
    },
    {
        "id": "36ceb0aaa312dfae",
        "type": "rbe",
        "z": "dea5fa223d05d26c",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 970,
        "y": 2280,
        "wires": [
            [
                "c2630ad4e9284856"
            ]
        ]
    },
    {
        "id": "e8b6a5e1fe057c52",
        "type": "debug",
        "z": "dea5fa223d05d26c",
        "name": "debug 260",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2030,
        "y": 2360,
        "wires": []
    },
    {
        "id": "c2630ad4e9284856",
        "type": "function",
        "z": "dea5fa223d05d26c",
        "name": "Switch State",
        "func": "function handleSwitch(payload, context, switchName, statusSNSName, startName, finishName) {\n    let switchKey = Object.keys(payload).find(key => key.startsWith(switchName)) // extrai o switch que chegou no payload\n    let switchState = context.get(switchName) || null;\n    let actionValue = payload[switchKey] ? payload[switchKey].Action : null; // extrai o estado do switch que chegou\n    let statusSNS = payload[statusSNSName] && payload[statusSNSName][switchName];\n    let startState = context.get(startName) || false;\n    let finishState = context.get(finishName) || false;\n\n    switchState = actionValue || statusSNS || switchState; // adquiri o estado do switch que chegou\n\n    if (switchState == \"ON\") { // Condi√ß√£o que caracteriza o in√≠cio da produ√ß√£o\n        startState = true;\n        finishState = false;\n    }\n    else if (switchState == \"OFF\" && startState == true) { // condi√ß√£o que caracteriza o final da produ√ß√£o \n        startState = false;\n        finishState = true;\n    }\n    context.set(switchName, switchState);\n    context.set(startName, startState);\n    context.set(finishName, finishState);\n\n    return {\n        switchState: switchState,\n        startState: startState,\n        finishState: finishState,\n    };\n}\nlet payload = msg.payload;\nlet verifyProgram = handleSwitch(payload, context, 'Switch1', 'StatusSNS', 'runningProgram', 'finishedProgram');\nlet tableDoor = handleSwitch(payload, context, 'Switch2', 'StatusSNS', 'openDoor', 'closeDoor');\n\nmsg.switches = {\n    switch1: verifyProgram.switchState,\n    switch2: tableDoor.switchState,\n    runningProgram: verifyProgram.startState,\n    finishedProgram: verifyProgram.finishState,\n    openDoor: tableDoor.startState,\n    closeDoor: tableDoor.finishState,\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1130,
        "y": 2280,
        "wires": [
            [
                "104354fcd39518c5"
            ]
        ],
        "icon": "node-red/swap.svg"
    },
    {
        "id": "104354fcd39518c5",
        "type": "function",
        "z": "dea5fa223d05d26c",
        "name": "Conditions Machine",
        "func": "let { runningProgram, finishedProgram, openDoor, closeDoor } = msg.switches;\nlet [existsPlateCutting, plateCutStarting, finishedPlateCutting] = \n['existsPlateCutting', 'plateCutStarting', 'finishedPlateCutting'].map(key => context.get(key) || false);\nlet timestampStartWorking = context.get('timestampStartWorking') || null;\nlet currentTimestamp = new Date();\n\nconst actions = {\n    existsPlateCutting: () => { plateCutStarting = true; existsPlateCutting = true; timestampStartWorking = currentTimestamp},\n    finishedPlateCutting: () => {timestampStartWorking = null; finishedPlateCutting = true; existsPlateCutting = false}\n};\n\nconst conditions = {\n    existsPlateCutting: runningProgram && !existsPlateCutting && !openDoor,\n    finishedPlateCutting: finishedProgram && openDoor && existsPlateCutting\n}\n\nObject.entries(conditions).forEach(([condition, isTrue]) => {\n    if(isTrue && actions[condition]) actions[condition] ();\n\n});\ncontext.set('plateCutStarting', plateCutStarting);\ncontext.set('existsPlateCutting', existsPlateCutting);\ncontext.set('timestampStartWorking', timestampStartWorking);\ncontext.set('finishedPlateCutting', finishedPlateCutting);\n\nmsg.conditions = {\n    timestampStartWorking: timestampStartWorking,\n    plateCutStarting: plateCutStarting,\n    existsPlateCutting: existsPlateCutting,\n    finishedPlateCutting: finishedPlateCutting,\n    serialNumber: msg.payload.serialNumber\n};\nif (finishedPlateCutting) {\n    finishedPlateCutting = false;\n}\nplateCutStarting = false;\n\ncontext.set('plateCutStarting', plateCutStarting);\ncontext.set('finishedPlateCutting', finishedPlateCutting);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1330,
        "y": 2280,
        "wires": [
            [
                "9711c5532ebeded8"
            ]
        ],
        "icon": "font-awesome/fa-bars"
    },
    {
        "id": "c393461db8abb586",
        "type": "function",
        "z": "dea5fa223d05d26c",
        "name": "Production Machine",
        "func": "let payload = msg.payload;\nlet serialNumber = msg.conditions.serialNumber;\nlet plateCutStarting = msg.conditions.plateCutStarting;\nlet existsPlateCutting = msg.conditions.existsPlateCutting;\nlet finishedPlateCutting = msg.conditions.finishedPlateCutting;\nlet existsCollison = msg.conditions.existsCollison;\nlet startWorking = context.get('startWorking') || null;\nlet machine = context.get('machine') || null;\nlet lastTimestamp = context.get('lastTimestamp') || null;\nlet resetShift = context.get('resetShift') || false;\nlet plateSteelCount = context.get('plateSteelCount') || 0;\nlet collisonCount = context.get('collisonCount') || 0;\nlet machineActivity = context.get('machineActivity') || 0;\nlet machineInactivity = context.get('machineInactivity') || 0;\nlet currentStatus = context.get('currentStatus') || 'PARADA';\nlet currentTimestamp = new Date();\n\nconst actions = {\n    'payloadReset': () => {\n        resetShift = true;\n        context.set('resetShift', resetShift);\n    },\n    'resetShift': () => {\n        plateSteelCount = 0;\n        collisonCount = 0;\n        machineActivity = 0;\n        machineInactivity = 0;\n        lastTimestamp = null;\n        resetShift= false;\n\n        context.set('plateSteelCount', plateSteelCount);\n        context.set('collisonCount', collisonCount);\n        context.set('machineActivity', machineActivity);\n        context.set('machineInactivity', machineInactivity);\n        context.set('lastTimestamp', lastTimestamp);\n        context.set('resetShift', resetShift);\n    },\n    'plateCutStarting': () => {\n        startWorking = currentTimestamp;\n        context.set('startWorking', startWorking);\n\n        if (lastTimestamp !== null) {\n            let timeIdle = (currentTimestamp.getTime() - lastTimestamp.getTime()) / 1000;\n\n                if(timeIdle >= 300) {\n                    machineInactivity += timeIdle;\n                    context.set('machineInactivity', machineInactivity);\n                }\n                else {\n                    machineActivity += timeIdle;\n                    context.set('machineActivity', machineActivity);\n                }\n        };\n    },\n    'runningSteelCut': () => {\n        currentStatus = \"TRABALHANDO\";\n        context.set('currentStatus', currentStatus);\n    },\n    'finishedPlateCutting': () => {\n        let timeWorking = (currentTimestamp.getTime() - startWorking.getTime()) / 1000;\n        machineActivity += timeWorking;\n        context.set('machineActivity');\n\n        startWorking = null;\n        context.set('startWorking', startWorking);\n\n        plateSteelCount++;\n\n        currentStatus = \"PARADA\";\n        context.set('currentStatus', currentStatus);\n\n        lastTimestamp = currentTimestamp;\n        context.set('lastTimestamp', lastTimestamp);\n    },\n    'verifyCollison': () => collisonCount++,\n    'machineIsNull': () => {\n        machine = serialNumber;\n        context.set('machine', machine);\n    }\n};\n\nif (resetShift === true) actions.resetShift();\nif (payload === \"reset\") actions.payloadReset();\nif (plateCutStarting === true) actions.plateCutStarting();\nif (existsPlateCutting === true) actions.runningSteelCut();\nif (finishedPlateCutting === true) actions.finishedPlateCutting();\nif (serialNumber && machine === null) actions.machineIsNull();\nif (existsCollison === true) actions.verifyCollison();\n \ncontext.set('plateSteelCount', plateSteelCount);\ncontext.set('collisonCount', collisonCount);\n\nmsg.data = {\n    startWorking: startWorking,\n    plateSteelCount: plateSteelCount,\n    collisonCount: collisonCount,\n    workingTime: machineActivity,\n    idleTime: machineInactivity,\n    lastTimestamp: lastTimestamp,\n    reset: resetShift,\n    machine: machine,\n    status: currentStatus,\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1140,
        "y": 1880,
        "wires": [
            [
                "a064ca49e4ad86f5",
                "59bbf7d5ba148f2c"
            ]
        ],
        "icon": "font-awesome/fa-book"
    },
    {
        "id": "9711c5532ebeded8",
        "type": "function",
        "z": "dea5fa223d05d26c",
        "name": "Production Machine",
        "func": "let { plateCutStarting, existsPlateCutting, finishedPlateCutting, serialNumber } = msg.conditions;\nlet [plateSteelCount, durationCutPlan] = ['plateSteelCount', 'durationCutPlan'].map(key => context.get(key) || 0);\nlet [startProduction, dateLastProduction, machine] = ['startProduction', 'dateLastProduction', 'machine'].map(key => context.get(key) || null);\nlet resetShift = context.get('resetShift') || false;\nlet currentTimestamp = new Date();\n\nconst actions = {\n    resetShift: () => {plateSteelCount = 0; resetShift = false;},\n    payloadReset: () => {resetShift = true},\n    startProduction: () => {startProduction = currentTimestamp},\n    finishedProduction: () => {\n        durationCutPlan = (currentTimestamp.getTime() - startProduction.getTime()) / 1000; plateSteelCount++;\n        startProduction = null; dateLastProduction = currentTimestamp\n    },\n    machineNull: () => { machine = serialNumber },\n}\n\nconst conditions = {\n    resetShift: resetShift === true,\n    payloadReset: msg.payload === 'reset',\n    startProduction: plateCutStarting === true,\n    finishedProduction: finishedPlateCutting,\n    machineNull: (serialNumber && machine == null) || (serialNumber && machine !== serialNumber && machine !== null)\n};\n\nObject.entries(conditions).forEach(([condition, isTrue]) => {\n    if (isTrue && actions[condition]) actions[condition] ();\n});\n\ncontext.set('startProduction', startProduction);\ncontext.set('dateLastProduction', dateLastProduction);\ncontext.set('machine', machine);\ncontext.set('plateSteelCount', plateSteelCount);\ncontext.set('durationCutPlan', durationCutPlan);\ncontext.set('resetShift', resetShift);\n\nmsg.data = {\n    chapas: plateSteelCount,\n    durationLastCutPlan: durationCutPlan,\n    dateStartProduction: startProduction,\n    dateLastProduction: dateLastProduction,\n    machine: machine,\n    reset: resetShift\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1580,
        "y": 2280,
        "wires": [
            [
                "c6f48b81bb4b4020",
                "042d5f3a382d5765"
            ]
        ],
        "icon": "font-awesome/fa-book"
    },
    {
        "id": "c6f48b81bb4b4020",
        "type": "function",
        "z": "dea5fa223d05d26c",
        "name": "LASER TRUMPF",
        "func": "let { chapas, durationLastCutPlan, machine } = msg.data;\nlet workingMinutes = durationLastCutPlan ? durationLastCutPlan / 60 : 0;\n\nfunction minutesToHours(totalMinutes) {\n    var hours = String(Math.floor(totalMinutes / 60)).padStart(2, \"0\");\n    var minutes = String(totalMinutes % 60).padStart(2, \"0\");\n\n    return `${hours}:${minutes}`;\n}\n\nmsg.payload = {\n    chapas: chapas,\n    durationLastCutPlan: minutesToHours(workingMinutes.toFixed(0)),\n    deviceSerialNumber: machine\n}\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1890,
        "y": 2220,
        "wires": [
            []
        ],
        "icon": "font-awesome/fa-cogs"
    },
    {
        "id": "042d5f3a382d5765",
        "type": "function",
        "z": "dea5fa223d05d26c",
        "name": "verifyStatus",
        "func": "let { dateStartProduction, dateLastProduction, machine } = msg.data;\nlet currentTimestamp = new Date();\nlet currentStatus = context.get('currentStatus') || null;\nlet timeCurrentProduction = dateStartProduction !== null ? (currentTimestamp.getTime() - dateStartProduction.getTime()) / 1000 : null;\nlet timeLastProduction = dateLastProduction !== null ? (currentTimestamp.getTime() - dateLastProduction.getTime()) / 1000 : null;\n\ncontext.set('timeCurrentProduction', timeCurrentProduction);\ncontext.set('timeLastProduction', timeLastProduction);\n\nif (dateStartProduction !== null && dateLastProduction == null) currentStatus = \"TRABALHANDO\";\n\nelse if (dateLastProduction !== null) {\n    //Mapeamento dos status\n    const machineWorking = (dateStartProduction !== null) || (timeLastProduction <= 299);\n    const machineIdle = (dateStartProduction == null && timeLastProduction >= 300 && timeLastProduction <= 1799);\n    const machineOff = (dateStartProduction == null && timeLastProduction >= 1800);\n\n    const newStatus = machineWorking ? \"TRABALHANDO\" : machineIdle ? \"PARADO\" : machineOff ? \"DESLIGADO\" : null;\n    if (newStatus) currentStatus = newStatus;\n}\nelse if (dateStartProduction == null && dateLastProduction == null) currentStatus = \"DESLIGADO\";\n\ncontext.set('currentStatus', currentStatus);\n\nmsg.status = {\n    timeCurrentProduction: timeCurrentProduction,\n    timeLastProduction: timeLastProduction,\n    machine: machine,\n    currentStatus: currentStatus\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1870,
        "y": 2260,
        "wires": [
            [
                "adcecfcf0782d69b",
                "e8b6a5e1fe057c52"
            ]
        ],
        "icon": "node-red/status.svg"
    },
    {
        "id": "adcecfcf0782d69b",
        "type": "function",
        "z": "dea5fa223d05d26c",
        "name": "FormatedMessage",
        "func": "let machine = msg.status.machine;\nlet timestamp = new Date().getTime();\nlet currentStatus = context.get('currentStatus') || null; \nlet oldStatus = msg.status.currentStatus;\n\nif(!currentStatus || currentStatus !== oldStatus) {\n    currentStatus = oldStatus;\n    context.set('currentStatus', currentStatus);\n\n    msg.payload = {\n            timestamp: timestamp,\n            deviceSerialNumber: machine,\n            status: currentStatus\n    }\n    return msg;\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1890,
        "y": 2300,
        "wires": [
            []
        ],
        "icon": "font-awesome/fa-envelope"
    },
    {
        "id": "1d12e2f4c359450a",
        "type": "inject",
        "z": "dea5fa223d05d26c",
        "name": "TIMESTAMP (STATUS)",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "switches",
                "v": "{}",
                "vt": "json"
            },
            {
                "p": "conditions",
                "v": "{}",
                "vt": "json"
            },
            {
                "p": "data",
                "v": "{}",
                "vt": "json"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1300,
        "y": 2240,
        "wires": [
            [
                "9711c5532ebeded8"
            ]
        ],
        "icon": "font-awesome/fa-hourglass-1"
    },
    {
        "id": "85ad239d3946a623",
        "type": "inject",
        "z": "dea5fa223d05d26c",
        "name": "SWITCH2 ON",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "ABC123",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch2\": {\"Action\": \"ON\"} }",
        "payloadType": "json",
        "x": 190,
        "y": 2840,
        "wires": [
            [
                "d9500869ccf23dc8"
            ]
        ]
    },
    {
        "id": "43f593a3627b0461",
        "type": "inject",
        "z": "dea5fa223d05d26c",
        "name": "SWITCH2 OFF",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "ABC123",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch2\": {\"Action\": \"OFF\"} }",
        "payloadType": "json",
        "x": 200,
        "y": 2880,
        "wires": [
            [
                "d9500869ccf23dc8"
            ]
        ]
    },
    {
        "id": "7b1928c9e78f70fa",
        "type": "inject",
        "z": "dea5fa223d05d26c",
        "name": "SWITCH1 ON",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "ABC123",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch1\": {\"Action\": \"ON\"} }",
        "payloadType": "json",
        "x": 190,
        "y": 2640,
        "wires": [
            [
                "d9500869ccf23dc8"
            ]
        ]
    },
    {
        "id": "fd270d1fbaa278b6",
        "type": "inject",
        "z": "dea5fa223d05d26c",
        "name": "SWITCH1 OFF",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "ABC123",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch1\": {\"Action\": \"OFF\"} }",
        "payloadType": "json",
        "x": 200,
        "y": 2680,
        "wires": [
            [
                "d9500869ccf23dc8"
            ]
        ]
    },
    {
        "id": "d9500869ccf23dc8",
        "type": "switch",
        "z": "dea5fa223d05d26c",
        "name": "Machines",
        "property": "payload.serialNumber",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "ABC123",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 420,
        "y": 2700,
        "wires": [
            [
                "ec81e84341151304"
            ]
        ],
        "icon": "font-awesome/fa-desktop"
    },
    {
        "id": "ec81e84341151304",
        "type": "switch",
        "z": "dea5fa223d05d26c",
        "name": "OPTION SW",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "hask",
                "v": "Switch1",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "Switch2",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 590,
        "y": 2700,
        "wires": [
            [
                "b2103fe41fb5a2e9"
            ],
            [
                "b2103fe41fb5a2e9"
            ]
        ]
    },
    {
        "id": "b9a282c4b0fb14dd",
        "type": "debug",
        "z": "dea5fa223d05d26c",
        "name": "debug 261",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1950,
        "y": 2680,
        "wires": []
    },
    {
        "id": "8dd0f71bf919a481",
        "type": "debug",
        "z": "dea5fa223d05d26c",
        "name": "debug 262",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 350,
        "y": 2540,
        "wires": []
    },
    {
        "id": "b2103fe41fb5a2e9",
        "type": "function",
        "z": "dea5fa223d05d26c",
        "name": "Switch State",
        "func": "function handleSwitch(payload, context, switchName, statusSNSName, startName, finishName, verifyName) {\n    let switchKey = Object.keys(payload).find(key => key.startsWith(switchName)) // extrai o switch que chegou no payload\n    let switchState = context.get(switchName) || null;\n    let actionValue = payload[switchKey] ? payload[switchKey].Action : null; // extrai o estado do switch que chegou\n    let statusSNS = payload[statusSNSName] && payload[statusSNSName][switchName];\n    let startState = context.get(startName) || false;\n    let finishState = context.get(finishName) || false;\n    let verifyState = context.get(verifyName) || false;\n\n    switchState = actionValue || statusSNS || switchState; // adquiri o estado do switch que chegou\n\n    if (switchState == \"ON\") { // Condi√ß√£o que caracteriza o in√≠cio da produ√ß√£o\n        startState = true;\n    }\n    else if (switchState == \"OFF\" && startState == true) { // condi√ß√£o que caracteriza o final da produ√ß√£o \n        finishState = true;\n    }\n    if (startState && finishState) {\n        verifyState = true;\n        startState = false;\n        finishState = false;\n    }\n    context.set(switchName, switchState);\n    context.set(startName, startState);\n    context.set(finishName, finishState);\n    context.set(verifyName, verifyState);\n\n    return {\n        switchState: switchState,\n        startState: startState,\n        finishState: finishState,\n        verifyState: verifyState\n    };\n}\nlet payload = msg.payload;\nlet tableA = handleSwitch(payload, context, 'Switch1', 'StatusSNS', 'startCycleA', 'finishedCycleA', 'verifyCycleA');\nlet tableB = handleSwitch(payload, context, 'Switch2', 'StatusSNS', 'startCycleB', 'finishedCycleB', 'verifyCycleB');\n\nmsg.switches = {\n    switch1: tableA.switchState,\n    switch2: tableB.switchState,\n    startCycleA: tableA.startState,\n    verifyCycleA: tableA.verifyState,\n    startCycleB: tableB.startState,\n    verifyCycleB: tableB.verifyState,\n}\n\nif (tableA.verifyState || tableB.verifyState) {\n    tableA.verifyState = false;\n    tableB.verifyState = false;\n}\ncontext.set('verifyCycleA', tableA.verifyState);\ncontext.set('verifyCycleB', tableB.verifyState);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 2700,
        "wires": [
            [
                "77df497381bca203"
            ]
        ],
        "icon": "node-red/swap.svg"
    },
    {
        "id": "77df497381bca203",
        "type": "function",
        "z": "dea5fa223d05d26c",
        "name": "Conditions Machine",
        "func": "let { switch1, switch2 } = msg.switches;\nlet switchKey = Object.keys(msg.payload).find(key => key.startsWith('Switch'));\nlet actionValue = msg.payload[switchKey] ? msg.payload[switchKey].Action : null;\nlet currentTimestamp = new Date();\nlet switch1TimeON = context.get('switch1TimeON') || null;\nlet switch2TimeON = context.get('switch2TimeON') || null;\nlet startCycleA = context.get('startCycleA') || false;\nlet startCycleB = context.get('startCycleB') || false;\nlet startWorking = context.get('startWorking') || false;\nlet finishedCycle = context.get('finishedCycle') || false;\n\nif (switch1 && switch1 === \"ON\") {\n    switch1TimeON = currentTimestamp;\n}\nif (switch2 && switch2 === \"ON\") {\n    switch2TimeON = currentTimestamp;\n}\n\nif (switch1TimeON && (!startCycleA && !startCycleB)) {\n    let activeTime = (currentTimestamp.getTime() - switch1TimeON.getTime()) / 1000;\n\n    if (activeTime >= 5) {\n        startCycleA = true;\n        startWorking = true;\n    }\n}\nelse if (switch2TimeON && (!startCycleA && !startCycleB)) {\n    let activeTime = (currentTimestamp.getTime() - switch2TimeON.getTime()) / 1000;\n\n    if (activeTime >= 5) {\n        startCycleB = true;\n        startWorking = true;\n    }\n}\nif (switchKey === \"Switch1\" && actionValue === \"OFF\" && startCycleA) {\n    startCycleA = false;\n    switch1TimeON = null;\n    finishedCycle = true;\n\n} else if (switchKey === \"Switch2\" && actionValue === \"OFF\" && startCycleB) {\n    startCycleB = false;\n    switch2TimeON = null;\n    finishedCycle = true;\n}\ncontext.set('switch1TimeON', switch1TimeON);\ncontext.set('switch2TimeON', switch2TimeON);\ncontext.set('startCycleA', startCycleA);\ncontext.set('startCycleB', startCycleB);\ncontext.set('startWorking', startWorking);\n\nmsg.conditions = {\n    switch1TimeON: switch1TimeON,\n    switch2TimeON: switch2TimeON,\n    startCycleA: startCycleA,\n    startCycleB: startCycleB,\n    startWorking: startWorking,\n    finishedCycle: finishedCycle,\n    serialNumber: msg.payload.serialNumber\n}\nstartWorking = false;\nfinishedCycle = false;\ncontext.set('startWorking', startWorking);\ncontext.set('finishedCycle', finishedCycle);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1010,
        "y": 2700,
        "wires": [
            [
                "3d99132df2f41788"
            ]
        ],
        "icon": "font-awesome/fa-bars"
    },
    {
        "id": "3d99132df2f41788",
        "type": "function",
        "z": "dea5fa223d05d26c",
        "name": "Production Machine",
        "func": "let { startWorking, startCycleA, startCycleB ,finishedCycle, serialNumber } = msg.conditions;\nlet [dateStartProduction, dateLastTimestamp, machine ] = ['dateStartProduction', 'dateLastTimestamp', 'machine'].map(key => context.get(key) || null);\nlet currentTimestamp = new Date();\nlet cycleCount = context.get('cycleCount') || 0;\nlet resetShift = context.get('resetShift') || false;\n\nconst actions = {\n    resetShift: () => { cycleCount = 0; resetShift = false },\n    payloadReset: () => { resetShift = true},\n    startProduction: () => { dateStartProduction = currentTimestamp},\n    noProduction: () => { dateStartProduction = null},\n    verifyCycle: () => { cycleCount++; dateLastTimestamp = currentTimestamp },\n    machine: () => { machine = serialNumber}\n};\n\nconst conditions = {\n    resetShift: resetShift === true,\n    payloadReset: msg.payload === 'reset',\n    startProduction: startWorking === true,\n    noProduction: msg.conditions && typeof msg.conditions === 'object' && Object.keys(msg.conditions).length > 0 && (!startCycleA && !startCycleB),\n    verifyCycle: finishedCycle === true,\n    machine: (serialNumber && machine == null) || (serialNumber && machine !== serialNumber && machine !== null)\n};\n\nObject.entries(conditions).forEach(([condition, isTrue]) => {\n    if (isTrue && actions[condition]) actions[condition]();\n});\ncontext.set('resetShift', resetShift);\ncontext.set('dateStartProduction', dateStartProduction);\ncontext.set('dateLastTimestamp', dateLastTimestamp);\ncontext.set('cycleCount', cycleCount);\ncontext.set('machine', machine);\n\nmsg.data = {\n    finishedCycle: finishedCycle,\n    dateStartProduction: dateStartProduction,\n    dateLastProduction: dateLastTimestamp,\n    cycles: cycleCount,\n    reset: resetShift,\n    machine: machine,\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1260,
        "y": 2700,
        "wires": [
            [
                "41a75fce4c3a7070",
                "053e787cb62144d0"
            ]
        ],
        "icon": "font-awesome/fa-book"
    },
    {
        "id": "41a75fce4c3a7070",
        "type": "function",
        "z": "dea5fa223d05d26c",
        "name": "ROB√î 01",
        "func": "let { cycles, machine, finishedCycle } = msg.data;\n\nmsg.payload = {\n    finishedCycle: finishedCycle,\n    ciclos: cycles,\n    deviceSerialNumber: machine\n}\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1480,
        "y": 2680,
        "wires": [
            []
        ],
        "icon": "font-awesome/fa-cogs"
    },
    {
        "id": "053e787cb62144d0",
        "type": "function",
        "z": "dea5fa223d05d26c",
        "name": "verifyStatus",
        "func": "let { dateStartProduction, dateLastProduction, machine } = msg.data;\nlet currentTimestamp = new Date();\nlet currentStatus = context.get('currentStatus') || null;\nlet timeCurrentProduction = dateStartProduction !== null ? (currentTimestamp.getTime() - dateStartProduction.getTime()) / 1000 : null;\nlet timeLastProduction = dateLastProduction !== null ? (currentTimestamp.getTime() - dateLastProduction.getTime()) / 1000 : null;\n\ncontext.set('timeCurrentProduction', timeCurrentProduction);\ncontext.set('timeLastProduction', timeLastProduction);\n\nif (dateStartProduction !== null && dateLastProduction === null && timeCurrentProduction <= 2400) currentStatus = \"TRABALHANDO\";\n\nelse if (dateLastProduction !== null) {\n    //Mapeamento dos status\n    const machineWorking = (dateStartProduction !== null && timeCurrentProduction <= 2399);\n    const machineIdle = (dateStartProduction == null && timeLastProduction >= 300 && timeLastProduction <= 1799) ||\n    (dateStartProduction !== null && timeCurrentProduction >= 2400 && timeCurrentProduction <= 3599);\n    const machineOff = (dateStartProduction === null && timeLastProduction >= 1800) ||\n    (dateStartProduction !== null && timeCurrentProduction >= 3600);\n\n    const newStatus = machineWorking ? \"TRABALHANDO\" : machineIdle ? \"PARADO\" : machineOff ? \"DESLIGADO\" : null;\n    if (newStatus) currentStatus = newStatus;\n}\nelse if (dateStartProduction == null && dateLastProduction == null) currentStatus = \"DESLIGADO\";\n\ncontext.set('currentStatus', currentStatus);\n\nmsg.status = {\n    timeCurrentProduction: timeCurrentProduction,\n    timeLastProduction: timeLastProduction,\n    machine: machine,\n    currentStatus: currentStatus\n}\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1490,
        "y": 2720,
        "wires": [
            [
                "50cc53f1dabfc55b",
                "8f23f11fcf0397a7"
            ]
        ],
        "icon": "node-red/status.svg"
    },
    {
        "id": "50cc53f1dabfc55b",
        "type": "function",
        "z": "dea5fa223d05d26c",
        "name": "FormatedMessage",
        "func": "let machine = msg.status.machine;\nlet timestamp = new Date().getTime();\nlet currentStatus = context.get('currentStatus') || null; \nlet oldStatus = msg.status.currentStatus;\n\nif(!currentStatus || currentStatus !== oldStatus) {\n    currentStatus = oldStatus;\n    context.set('currentStatus', currentStatus);\n\n    msg.payload = {\n            timestamp: timestamp,\n            deviceSerialNumber: machine,\n            status: currentStatus\n    }\n    return msg;\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1510,
        "y": 2760,
        "wires": [
            []
        ],
        "icon": "font-awesome/fa-envelope"
    },
    {
        "id": "41e349c6194f9a77",
        "type": "inject",
        "z": "dea5fa223d05d26c",
        "name": "TIMESTAMP RESET",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "switches",
                "v": "{}",
                "vt": "json"
            },
            {
                "p": "conditions",
                "v": "{}",
                "vt": "json"
            },
            {
                "p": "data",
                "v": "{}",
                "vt": "json"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "reset",
        "payloadType": "str",
        "x": 980,
        "y": 2560,
        "wires": [
            [
                "3d99132df2f41788"
            ]
        ],
        "icon": "font-awesome/fa-hourglass-1"
    },
    {
        "id": "2171f84e5de6fece",
        "type": "switch",
        "z": "dea5fa223d05d26c",
        "name": "OPTION SW",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "hask",
                "v": "Switch1",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "Switch2",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "StatusSNS",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 410,
        "y": 3060,
        "wires": [
            [
                "45750b29b9e3aa7e"
            ],
            [
                "45750b29b9e3aa7e"
            ],
            [
                "45750b29b9e3aa7e"
            ]
        ]
    },
    {
        "id": "338f1738ef60100b",
        "type": "switch",
        "z": "dea5fa223d05d26c",
        "name": "Machines",
        "property": "payload.serialNumber",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "DF2A5F",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "DF1277",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "DF53A6",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 860,
        "y": 3060,
        "wires": [
            [
                "ad31797cccd3ee64"
            ],
            [
                "246c9af4021f4ae0"
            ],
            [
                "9474c62cac8fdcf6"
            ]
        ],
        "icon": "font-awesome/fa-desktop"
    },
    {
        "id": "45750b29b9e3aa7e",
        "type": "change",
        "z": "dea5fa223d05d26c",
        "name": "delete time",
        "rules": [
            {
                "t": "delete",
                "p": "payload.timestamp",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.StatusSNS.Time",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.StatusSNS.Switch3",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.StatusSNS.Switch4",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 590,
        "y": 3060,
        "wires": [
            [
                "df1fa19d5caa49e3",
                "2a02a6f469c134dc"
            ]
        ],
        "icon": "font-awesome/fa-times-circle"
    },
    {
        "id": "df1fa19d5caa49e3",
        "type": "rbe",
        "z": "dea5fa223d05d26c",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 730,
        "y": 3060,
        "wires": [
            [
                "338f1738ef60100b"
            ]
        ]
    },
    {
        "id": "ad31797cccd3ee64",
        "type": "function",
        "z": "dea5fa223d05d26c",
        "name": "Switch State",
        "func": "function handleSwitch(payload, context, switchName, statusSNSName, startName, finishName, verifyName) {\n    let switchKey = Object.keys(payload).find(key => key.startsWith(switchName)) // extrai o switch que chegou no payload\n    let switchState = context.get(switchName) || null;\n    let actionValue = payload[switchKey] ? payload[switchKey].Action : null; // extrai o estado do switch que chegou\n    let statusSNS = payload[statusSNSName] && payload[statusSNSName][switchName];\n    let startState = context.get(startName) || false;\n    let finishState = context.get(finishName) || false;\n    let verifyState = context.get(verifyName) || false;\n\n    switchState = actionValue || statusSNS || switchState; // adquiri o estado do switch que chegou\n\n    if (switchState == \"ON\") { // Condi√ß√£o que caracteriza o in√≠cio da produ√ß√£o\n        startState = true;\n    }\n    else if (switchState == \"OFF\" && startState == true) { // condi√ß√£o que caracteriza o final da produ√ß√£o \n        finishState = true;\n    }\n    if (startState && finishState) {\n        verifyState = true;\n        startState = false;\n        finishState = false;\n    }\n    context.set(switchName, switchState);\n    context.set(startName, startState);\n    context.set(finishName, finishState);\n    context.set(verifyName, verifyState);\n\n    return {\n        switchState: switchState,\n        startState: startState,\n        finishState: finishState,\n        verifyState: verifyState\n    };\n}\nlet payload = msg.payload;\nlet tableA = handleSwitch(payload, context, 'Switch1', 'StatusSNS', 'startCycleA', 'finishedCycleB','verifyCycleA');\nlet tableB = handleSwitch(payload, context, 'Switch2', 'StatusSNS', 'startCycleB', 'finishedCycleB','verifyCycleB');\n\nmsg.switches = {\n    switch1: tableA.switchState,\n    switch2: tableB.switchState,\n    startCycleA: tableA.startState,\n    verifyCycleA: tableA.verifyState,\n    startCycleB: tableB.startState,\n    verifyCycleB: tableB.verifyState,\n}\n\nif (tableA.verifyState || tableB.verifyState) {\n    tableA.verifyState = false;\n    tableB.verifyState = false;\n}\ncontext.set('verifyCycleA', tableA.verifyState);\ncontext.set('verifyCycleB', tableB.verifyState);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 3020,
        "wires": [
            [
                "aa9e014774f9e493"
            ]
        ],
        "icon": "node-red/swap.svg"
    },
    {
        "id": "246c9af4021f4ae0",
        "type": "function",
        "z": "dea5fa223d05d26c",
        "name": "Switch State",
        "func": "function handleSwitch(payload, context, switchName, statusSNSName, startName, finishName, verifyName) {\n    let switchKey = Object.keys(payload).find(key => key.startsWith(switchName)) // extrai o switch que chegou no payload\n    let switchState = context.get(switchName) || null;\n    let actionValue = payload[switchKey] ? payload[switchKey].Action : null; // extrai o estado do switch que chegou\n    let statusSNS = payload[statusSNSName] && payload[statusSNSName][switchName];\n    let startState = context.get(startName) || false;\n    let finishState = context.get(finishName) || false;\n    let verifyState = context.get(verifyName) || false;\n\n    switchState = actionValue || statusSNS || switchState; // adquiri o estado do switch que chegou\n\n    if (switchState == \"ON\") { // Condi√ß√£o que caracteriza o in√≠cio da produ√ß√£o\n        startState = true;\n    }\n    else if (switchState == \"OFF\" && startState == true) { // condi√ß√£o que caracteriza o final da produ√ß√£o \n        finishState = true;\n    }\n    if (startState && finishState) {\n        verifyState = true;\n        startState = false;\n        finishState = false;\n    }\n    context.set(switchName, switchState);\n    context.set(startName, startState);\n    context.set(finishName, finishState);\n    context.set(verifyName, verifyState);\n\n    return {\n        switchState: switchState,\n        startState: startState,\n        finishState: finishState,\n        verifyState: verifyState\n    };\n}\nlet payload = msg.payload;\nlet tableA = handleSwitch(payload, context, 'Switch1', 'StatusSNS', 'startCycleA', 'finishedCycleB','verifyCycleA');\nlet tableB = handleSwitch(payload, context, 'Switch2', 'StatusSNS', 'startCycleB', 'finishedCycleB','verifyCycleB');\n\nmsg.switches = {\n    switch1: tableA.switchState,\n    switch2: tableB.switchState,\n    startCycleA: tableA.startState,\n    verifyCycleA: tableA.verifyState,\n    startCycleB: tableB.startState,\n    verifyCycleB: tableB.verifyState,\n}\n\nif (tableA.verifyState || tableB.verifyState) {\n    tableA.verifyState = false;\n    tableB.verifyState = false;\n}\ncontext.set('verifyCycleA', tableA.verifyState);\ncontext.set('verifyCycleB', tableB.verifyState);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 3060,
        "wires": [
            [
                "3e7c85cfbd3d346f"
            ]
        ],
        "icon": "node-red/swap.svg"
    },
    {
        "id": "403d4b0a024b1c2c",
        "type": "inject",
        "z": "dea5fa223d05d26c",
        "name": "SWITCH2 ON",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF1277",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch2\": {\"Action\": \"ON\"} }",
        "payloadType": "json",
        "x": 170,
        "y": 3140,
        "wires": [
            [
                "2171f84e5de6fece"
            ]
        ]
    },
    {
        "id": "bce575e06c0bffb5",
        "type": "inject",
        "z": "dea5fa223d05d26c",
        "name": "SWITCH2 OFF",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF1277",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch1\": {\"Action\": \"OFF\"} }",
        "payloadType": "json",
        "x": 180,
        "y": 3180,
        "wires": [
            [
                "2171f84e5de6fece"
            ]
        ]
    },
    {
        "id": "aa9e014774f9e493",
        "type": "function",
        "z": "dea5fa223d05d26c",
        "name": "Conditions Machine",
        "func": "let { startCycleA, verifyCycleA, startCycleB, verifyCycleB } = msg.switches;\nlet startWorking = startCycleA || startCycleB ? true : false;\nlet finishedCycle = verifyCycleA || verifyCycleB ? true : false;\n\ncontext.set('startWorking', startWorking);\ncontext.set('finishedCycle', finishedCycle);\n\nmsg.conditions = {\n    startWorking: startWorking,\n    finishedCycle: finishedCycle,\n    serialNumber: msg.payload.serialNumber\n}\n\nfinishedCycle = false;\ncontext.set('finishedCycle', finishedCycle);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1210,
        "y": 3020,
        "wires": [
            [
                "f9779e2655f69481"
            ]
        ],
        "icon": "font-awesome/fa-bars"
    },
    {
        "id": "f9779e2655f69481",
        "type": "function",
        "z": "dea5fa223d05d26c",
        "name": "Production Machine",
        "func": "let { startWorking, finishedCycle, serialNumber } = msg.conditions;\nlet [dateStartProduction, dateLastTimestamp, machine ] = ['dateStartProduction', 'dateLastTimestamp', 'machine'].map(key => context.get(key) || null);\nlet currentTimestamp = new Date();\nlet cycleCount = context.get('cycleCount') || 0;\nlet resetShift = context.get('resetShift') || false;\n\nconst actions = {\n    resetShift: () => { cycleCount = 0; resetShift = false },\n    payloadReset: () => { resetShift = true},\n    startProduction: () => { dateStartProduction = currentTimestamp},\n    noProduction: () => { dateStartProduction = null},\n    verifyCycle: () => { cycleCount++; dateLastTimestamp = currentTimestamp },\n    machine: () => { machine = serialNumber}\n};\n\nconst conditions = {\n    resetShift: resetShift === true,\n    payloadReset: msg.payload === 'reset',\n    startProduction: startWorking == true,\n    noProduction: msg.conditions && typeof msg.conditions === 'object' && Object.keys(msg.conditions).length > 0 && !startWorking,\n    verifyCycle: finishedCycle === true,\n    machine: (serialNumber && machine == null) || (serialNumber && machine !== serialNumber && machine !== null)\n};\n\nObject.entries(conditions).forEach(([condition, isTrue]) => {\n    if (isTrue && actions[condition]) actions[condition]();\n});\ncontext.set('resetShift', resetShift);\ncontext.set('dateStartProduction', dateStartProduction);\ncontext.set('dateLastTimestamp', dateLastTimestamp);\ncontext.set('cycleCount', cycleCount);\ncontext.set('machine', machine);\n\nmsg.data = {\n    dateStartProduction: dateStartProduction,\n    dateLastProduction: dateLastTimestamp,\n    cycles: cycleCount,\n    reset: resetShift,\n    machine: machine,\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1440,
        "y": 3020,
        "wires": [
            [
                "d39e7a50ddd9089c",
                "93ef97d370087667"
            ]
        ],
        "icon": "font-awesome/fa-book"
    },
    {
        "id": "3e7c85cfbd3d346f",
        "type": "function",
        "z": "dea5fa223d05d26c",
        "name": "Conditions Machine",
        "func": "let { startCycleA, verifyCycleA, startCycleB, verifyCycleB } = msg.switches;\nlet startWorking = startCycleA || startCycleB ? true : false;\nlet finishedCycle = verifyCycleA || verifyCycleB ? true : false;\n\ncontext.set('startWorking', startWorking);\ncontext.set('finishedCycle', finishedCycle);\n\nmsg.conditions = {\n    startWorking: startWorking,\n    finishedCycle: finishedCycle,\n    serialNumber: msg.payload.serialNumber\n}\n\nfinishedCycle = false;\ncontext.set('finishedCycle', finishedCycle);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1210,
        "y": 3060,
        "wires": [
            [
                "7b55551d96b48ffa"
            ]
        ],
        "icon": "font-awesome/fa-bars"
    },
    {
        "id": "7b55551d96b48ffa",
        "type": "function",
        "z": "dea5fa223d05d26c",
        "name": "Production Machine",
        "func": "let { startWorking, finishedCycle, serialNumber } = msg.conditions;\nlet [dateStartProduction, dateLastTimestamp, machine ] = ['dateStartProduction', 'dateLastTimestamp', 'machine'].map(key => context.get(key) || null);\nlet currentTimestamp = new Date();\nlet cycleCount = context.get('cycleCount') || 0;\nlet resetShift = context.get('resetShift') || false;\n\nconst actions = {\n    resetShift: () => { cycleCount = 0; resetShift = false },\n    payloadReset: () => { resetShift = true},\n    startProduction: () => { dateStartProduction = currentTimestamp},\n    noProduction: () => { dateStartProduction = null},\n    verifyCycle: () => { cycleCount++; dateLastTimestamp = currentTimestamp },\n    machine: () => { machine = serialNumber}\n};\n\nconst conditions = {\n    resetShift: resetShift === true,\n    payloadReset: msg.payload === 'reset',\n    startProduction: startWorking == true,\n    noProduction: msg.conditions && typeof msg.conditions === 'object' && Object.keys(msg.conditions).length > 0 && !startWorking,\n    verifyCycle: finishedCycle === true,\n    machine: (serialNumber && machine == null) || (serialNumber && machine !== serialNumber && machine !== null)\n};\n\nObject.entries(conditions).forEach(([condition, isTrue]) => {\n    if (isTrue && actions[condition]) actions[condition]();\n});\ncontext.set('resetShift', resetShift);\ncontext.set('dateStartProduction', dateStartProduction);\ncontext.set('dateLastTimestamp', dateLastTimestamp);\ncontext.set('cycleCount', cycleCount);\ncontext.set('machine', machine);\n\nmsg.data = {\n    dateStartProduction: dateStartProduction,\n    dateLastProduction: dateLastTimestamp,\n    cycles: cycleCount,\n    reset: resetShift,\n    machine: machine,\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1440,
        "y": 3060,
        "wires": [
            [
                "95464879b3c3ca04",
                "7add83ca47e94cd9"
            ]
        ],
        "icon": "font-awesome/fa-book"
    },
    {
        "id": "9474c62cac8fdcf6",
        "type": "function",
        "z": "dea5fa223d05d26c",
        "name": "Switch State",
        "func": "function handleSwitch(payload, context, switchName, statusSNSName, startName, finishName, verifyName) {\n    let switchKey = Object.keys(payload).find(key => key.startsWith(switchName)) // extrai o switch que chegou no payload\n    let switchState = context.get(switchName) || null;\n    let actionValue = payload[switchKey] ? payload[switchKey].Action : null; // extrai o estado do switch que chegou\n    let statusSNS = payload[statusSNSName] && payload[statusSNSName][switchName];\n    let startState = context.get(startName) || false;\n    let finishState = context.get(finishName) || false;\n    let verifyState = context.get(verifyName) || false;\n\n    switchState = actionValue || statusSNS || switchState; // adquiri o estado do switch que chegou\n\n    if (switchState == \"ON\") { // Condi√ß√£o que caracteriza o in√≠cio da produ√ß√£o\n        startState = true;\n    }\n    else if (switchState == \"OFF\" && startState == true) { // condi√ß√£o que caracteriza o final da produ√ß√£o \n        finishState = true;\n    }\n    if (startState && finishState) {\n        verifyState = true;\n        startState = false;\n        finishState = false;\n    }\n    context.set(switchName, switchState);\n    context.set(startName, startState);\n    context.set(finishName, finishState);\n    context.set(verifyName, verifyState);\n\n    return {\n        switchState: switchState,\n        startState: startState,\n        finishState: finishState,\n        verifyState: verifyState\n    };\n}\nlet payload = msg.payload;\nlet tableA = handleSwitch(payload, context, 'Switch1', 'StatusSNS', 'startCycleA', 'finishedCycleB','verifyCycleA');\nlet tableB = handleSwitch(payload, context, 'Switch2', 'StatusSNS', 'startCycleB', 'finishedCycleB','verifyCycleB');\n\nmsg.switches = {\n    switch1: tableA.switchState,\n    switch2: tableB.switchState,\n    startCycleA: tableA.startState,\n    verifyCycleA: tableA.verifyState,\n    startCycleB: tableB.startState,\n    verifyCycleB: tableB.verifyState,\n}\n\nif (tableA.verifyState || tableB.verifyState) {\n    tableA.verifyState = false;\n    tableB.verifyState = false;\n}\ncontext.set('verifyCycleA', tableA.verifyState);\ncontext.set('verifyCycleB', tableB.verifyState);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 3100,
        "wires": [
            [
                "470785c62f810a63"
            ]
        ],
        "icon": "node-red/swap.svg"
    },
    {
        "id": "470785c62f810a63",
        "type": "function",
        "z": "dea5fa223d05d26c",
        "name": "Conditions Machine",
        "func": "let { startCycleA, verifyCycleA, startCycleB, verifyCycleB } = msg.switches;\nlet startWorking = startCycleA || startCycleB ? true : false;\nlet finishedCycle = verifyCycleA || verifyCycleB ? true : false;\n\ncontext.set('startWorking', startWorking);\ncontext.set('finishedCycle', finishedCycle);\n\nmsg.conditions = {\n    startWorking: startWorking,\n    finishedCycle: finishedCycle,\n    serialNumber: msg.payload.serialNumber\n}\n\nfinishedCycle = false;\ncontext.set('finishedCycle', finishedCycle);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1210,
        "y": 3100,
        "wires": [
            [
                "ec4894dc56398201"
            ]
        ],
        "icon": "font-awesome/fa-bars"
    },
    {
        "id": "ec4894dc56398201",
        "type": "function",
        "z": "dea5fa223d05d26c",
        "name": "Production Machine",
        "func": "let { startWorking, finishedCycle, serialNumber } = msg.conditions;\nlet [dateStartProduction, dateLastTimestamp, machine ] = ['dateStartProduction', 'dateLastTimestamp', 'machine'].map(key => context.get(key) || null);\nlet currentTimestamp = new Date();\nlet cycleCount = context.get('cycleCount') || 0;\nlet resetShift = context.get('resetShift') || false;\n\nconst actions = {\n    resetShift: () => { cycleCount = 0; resetShift = false },\n    payloadReset: () => { resetShift = true},\n    startProduction: () => { dateStartProduction = currentTimestamp},\n    noProduction: () => { dateStartProduction = null},\n    verifyCycle: () => { cycleCount++; dateLastTimestamp = currentTimestamp },\n    machine: () => { machine = serialNumber}\n};\n\nconst conditions = {\n    resetShift: resetShift === true,\n    payloadReset: msg.payload === 'reset',\n    startProduction: startWorking == true,\n    noProduction: msg.conditions && typeof msg.conditions === 'object' && Object.keys(msg.conditions).length > 0 && !startWorking,\n    verifyCycle: finishedCycle === true,\n    machine: (serialNumber && machine == null) || (serialNumber && machine !== serialNumber && machine !== null)\n};\n\nObject.entries(conditions).forEach(([condition, isTrue]) => {\n    if (isTrue && actions[condition]) actions[condition]();\n});\ncontext.set('resetShift', resetShift);\ncontext.set('dateStartProduction', dateStartProduction);\ncontext.set('dateLastTimestamp', dateLastTimestamp);\ncontext.set('cycleCount', cycleCount);\ncontext.set('machine', machine);\n\nmsg.data = {\n    dateStartProduction: dateStartProduction,\n    dateLastProduction: dateLastTimestamp,\n    cycles: cycleCount,\n    reset: resetShift,\n    machine: machine,\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1440,
        "y": 3100,
        "wires": [
            [
                "b768dffead69b993",
                "4e7487b2c07fa681"
            ]
        ],
        "icon": "font-awesome/fa-book"
    },
    {
        "id": "93ef97d370087667",
        "type": "function",
        "z": "dea5fa223d05d26c",
        "name": "ROB√î 01",
        "func": "let { cycles, machine } = msg.data;\n\nmsg.payload = {\n    ciclos: cycles,\n    deviceSerialNumber: machine\n}\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1700,
        "y": 2900,
        "wires": [
            []
        ],
        "icon": "font-awesome/fa-cogs"
    },
    {
        "id": "d39e7a50ddd9089c",
        "type": "function",
        "z": "dea5fa223d05d26c",
        "name": "verifyStatus",
        "func": "let { dateStartProduction, dateLastProduction, machine } = msg.data;\nlet currentTimestamp = new Date();\nlet currentStatus = context.get('currentStatus') || null;\nlet timeCurrentProduction = dateStartProduction !== null ? (currentTimestamp.getTime() - dateStartProduction.getTime()) / 1000 : null;\nlet timeLastProduction = dateLastProduction !== null ? (currentTimestamp.getTime() - dateLastProduction.getTime()) / 1000 : null;\n\ncontext.set('timeCurrentProduction', timeCurrentProduction);\ncontext.set('timeLastProduction', timeLastProduction);\n\nif (dateStartProduction !== null && dateLastProduction == null) currentStatus = \"TRABALHANDO\";\n\nelse if (dateLastProduction !== null) {\n    //Mapeamento dos status\n    const machineWorking = (dateStartProduction !== null) || (timeLastProduction <= 299);\n    const machineIdle = (dateStartProduction == null && timeLastProduction >= 300 && timeLastProduction <= 1799);\n    const machineOff = (dateStartProduction == null && timeLastProduction >= 1800);\n\n    const newStatus = machineWorking ? \"TRABALHANDO\" : machineIdle ? \"PARADO\" : machineOff ? \"DESLIGADO\" : null;\n    if (newStatus) currentStatus = newStatus;\n}\nelse if (dateStartProduction == null && dateLastProduction == null) currentStatus = \"DESLIGADO\";\n\ncontext.set('currentStatus', currentStatus);\n\nmsg.status = {\n    timeCurrentProduction: timeCurrentProduction,\n    timeLastProduction: timeLastProduction,\n    machine: machine,\n    currentStatus: currentStatus\n}\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1710,
        "y": 2940,
        "wires": [
            [
                "0b6a6808cd99f94f"
            ]
        ],
        "icon": "node-red/status.svg"
    },
    {
        "id": "0b6a6808cd99f94f",
        "type": "function",
        "z": "dea5fa223d05d26c",
        "name": "FormatedMessage",
        "func": "let machine = msg.status.machine;\nlet timestamp = new Date().getTime();\nlet currentStatus = context.get('currentStatus') || null; \nlet oldStatus = msg.status.currentStatus;\n\nif(!currentStatus || currentStatus !== oldStatus) {\n    currentStatus = oldStatus;\n    context.set('currentStatus', currentStatus);\n\n    msg.payload = {\n            timestamp: timestamp,\n            deviceSerialNumber: machine,\n            status: currentStatus\n    }\n    return msg;\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1730,
        "y": 2980,
        "wires": [
            []
        ],
        "icon": "font-awesome/fa-envelope"
    },
    {
        "id": "95464879b3c3ca04",
        "type": "function",
        "z": "dea5fa223d05d26c",
        "name": "ROB√î 02",
        "func": "let { cycles, machine } = msg.data;\n\nmsg.payload = {\n    ciclos: cycles,\n    deviceSerialNumber: machine\n}\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1700,
        "y": 3040,
        "wires": [
            []
        ],
        "icon": "font-awesome/fa-cogs"
    },
    {
        "id": "7add83ca47e94cd9",
        "type": "function",
        "z": "dea5fa223d05d26c",
        "name": "verifyStatus",
        "func": "let { dateStartProduction, dateLastProduction, machine } = msg.data;\nlet currentTimestamp = new Date();\nlet currentStatus = context.get('currentStatus') || null;\nlet timeCurrentProduction = dateStartProduction !== null ? (currentTimestamp.getTime() - dateStartProduction.getTime()) / 1000 : null;\nlet timeLastProduction = dateLastProduction !== null ? (currentTimestamp.getTime() - dateLastProduction.getTime()) / 1000 : null;\n\ncontext.set('timeCurrentProduction', timeCurrentProduction);\ncontext.set('timeLastProduction', timeLastProduction);\n\nif (dateStartProduction !== null && dateLastProduction == null) currentStatus = \"TRABALHANDO\";\n\nelse if (dateLastProduction !== null) {\n    //Mapeamento dos status\n    const machineWorking = (dateStartProduction !== null) || (timeLastProduction <= 299);\n    const machineIdle = (dateStartProduction == null && timeLastProduction >= 300 && timeLastProduction <= 1799);\n    const machineOff = (dateStartProduction == null && timeLastProduction >= 1800);\n\n    const newStatus = machineWorking ? \"TRABALHANDO\" : machineIdle ? \"PARADO\" : machineOff ? \"DESLIGADO\" : null;\n    if (newStatus) currentStatus = newStatus;\n}\nelse if (dateStartProduction == null && dateLastProduction == null) currentStatus = \"DESLIGADO\";\n\ncontext.set('currentStatus', currentStatus);\n\nmsg.status = {\n    timeCurrentProduction: timeCurrentProduction,\n    timeLastProduction: timeLastProduction,\n    machine: machine,\n    currentStatus: currentStatus\n}\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1710,
        "y": 3080,
        "wires": [
            [
                "4c8838b56d82679c"
            ]
        ],
        "icon": "node-red/status.svg"
    },
    {
        "id": "4c8838b56d82679c",
        "type": "function",
        "z": "dea5fa223d05d26c",
        "name": "FormatedMessage",
        "func": "let machine = msg.status.machine;\nlet timestamp = new Date().getTime();\nlet currentStatus = context.get('currentStatus') || null; \nlet oldStatus = msg.status.currentStatus;\n\nif(!currentStatus || currentStatus !== oldStatus) {\n    currentStatus = oldStatus;\n    context.set('currentStatus', currentStatus);\n\n    msg.payload = {\n            timestamp: timestamp,\n            deviceSerialNumber: machine,\n            status: currentStatus\n    }\n    return msg;\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1730,
        "y": 3120,
        "wires": [
            []
        ],
        "icon": "font-awesome/fa-envelope"
    },
    {
        "id": "b768dffead69b993",
        "type": "function",
        "z": "dea5fa223d05d26c",
        "name": "ROB√î 03",
        "func": "let { cycles, machine } = msg.data;\n\nmsg.payload = {\n    ciclos: cycles,\n    deviceSerialNumber: machine\n}\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1700,
        "y": 3180,
        "wires": [
            []
        ],
        "icon": "font-awesome/fa-cogs"
    },
    {
        "id": "4e7487b2c07fa681",
        "type": "function",
        "z": "dea5fa223d05d26c",
        "name": "verifyStatus",
        "func": "let { dateStartProduction, dateLastProduction, machine } = msg.data;\nlet currentTimestamp = new Date();\nlet currentStatus = context.get('currentStatus') || null;\nlet timeCurrentProduction = dateStartProduction !== null ? (currentTimestamp.getTime() - dateStartProduction.getTime()) / 1000 : null;\nlet timeLastProduction = dateLastProduction !== null ? (currentTimestamp.getTime() - dateLastProduction.getTime()) / 1000 : null;\n\ncontext.set('timeCurrentProduction', timeCurrentProduction);\ncontext.set('timeLastProduction', timeLastProduction);\n\nif (dateStartProduction !== null && dateLastProduction == null) currentStatus = \"TRABALHANDO\";\n\nelse if (dateLastProduction !== null) {\n    //Mapeamento dos status\n    const machineWorking = (dateStartProduction !== null) || (timeLastProduction <= 299);\n    const machineIdle = (dateStartProduction == null && timeLastProduction >= 300 && timeLastProduction <= 1799);\n    const machineOff = (dateStartProduction == null && timeLastProduction >= 1800);\n\n    const newStatus = machineWorking ? \"TRABALHANDO\" : machineIdle ? \"PARADO\" : machineOff ? \"DESLIGADO\" : null;\n    if (newStatus) currentStatus = newStatus;\n}\nelse if (dateStartProduction == null && dateLastProduction == null) currentStatus = \"DESLIGADO\";\n\ncontext.set('currentStatus', currentStatus);\n\nmsg.status = {\n    timeCurrentProduction: timeCurrentProduction,\n    timeLastProduction: timeLastProduction,\n    machine: machine,\n    currentStatus: currentStatus\n}\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1710,
        "y": 3220,
        "wires": [
            [
                "ac4b96dee3c4cef1"
            ]
        ],
        "icon": "node-red/status.svg"
    },
    {
        "id": "ac4b96dee3c4cef1",
        "type": "function",
        "z": "dea5fa223d05d26c",
        "name": "FormatedMessage",
        "func": "let machine = msg.status.machine;\nlet timestamp = new Date().getTime();\nlet currentStatus = context.get('currentStatus') || null; \nlet oldStatus = msg.status.currentStatus;\n\nif(!currentStatus || currentStatus !== oldStatus) {\n    currentStatus = oldStatus;\n    context.set('currentStatus', currentStatus);\n\n    msg.payload = {\n            timestamp: timestamp,\n            deviceSerialNumber: machine,\n            status: currentStatus\n    }\n    return msg;\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1730,
        "y": 3260,
        "wires": [
            []
        ],
        "icon": "font-awesome/fa-envelope"
    },
    {
        "id": "2a02a6f469c134dc",
        "type": "debug",
        "z": "dea5fa223d05d26c",
        "name": "debug 265",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 950,
        "y": 3200,
        "wires": []
    },
    {
        "id": "eb5185a78132d862",
        "type": "inject",
        "z": "dea5fa223d05d26c",
        "name": "SWITCH1 ON",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF2A5F",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch1\": {\"Action\": \"ON\"} }",
        "payloadType": "json",
        "x": 170,
        "y": 3000,
        "wires": [
            [
                "2171f84e5de6fece"
            ]
        ]
    },
    {
        "id": "f01a5cf8841294ea",
        "type": "inject",
        "z": "dea5fa223d05d26c",
        "name": "SWITCH1 OFF",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF2A5F",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch1\": {\"Action\": \"OFF\"} }",
        "payloadType": "json",
        "x": 180,
        "y": 3040,
        "wires": [
            [
                "2171f84e5de6fece"
            ]
        ]
    },
    {
        "id": "98df47a6b4df52fa",
        "type": "inject",
        "z": "dea5fa223d05d26c",
        "name": "SWITCH1 ON",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "ABC123",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch1\": {\"Action\": \"ON\"} }",
        "payloadType": "json",
        "x": 170,
        "y": 3600,
        "wires": [
            [
                "d0c5dd4a979aab46"
            ]
        ]
    },
    {
        "id": "be3ef667424a52d7",
        "type": "inject",
        "z": "dea5fa223d05d26c",
        "name": "SWITCH1 OFF",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "ABC123",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch1\": {\"Action\": \"OFF\"} }",
        "payloadType": "json",
        "x": 180,
        "y": 3640,
        "wires": [
            [
                "d0c5dd4a979aab46"
            ]
        ]
    },
    {
        "id": "576b415e671370c6",
        "type": "switch",
        "z": "dea5fa223d05d26c",
        "name": "Machines",
        "property": "payload.serialNumber",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "ABC124",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 400,
        "y": 3560,
        "wires": [
            [
                "31741fc9f913799b"
            ]
        ],
        "icon": "font-awesome/fa-desktop"
    },
    {
        "id": "3799a46e654b2c0f",
        "type": "change",
        "z": "dea5fa223d05d26c",
        "name": "delete time",
        "rules": [
            {
                "t": "delete",
                "p": "payload.timestamp",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.StatusSNS.Time",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.StatusSNS.Switch2",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.StatusSNS.Switch3",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.StatusSNS.Switch4",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 730,
        "y": 3560,
        "wires": [
            [
                "f8621e8dd36825ff"
            ]
        ],
        "icon": "font-awesome/fa-times-circle"
    },
    {
        "id": "31741fc9f913799b",
        "type": "switch",
        "z": "dea5fa223d05d26c",
        "name": "OPTION SW",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "hask",
                "v": "Switch1",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "StatusSNS",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 550,
        "y": 3560,
        "wires": [
            [
                "3799a46e654b2c0f"
            ],
            [
                "3799a46e654b2c0f"
            ]
        ]
    },
    {
        "id": "52735c90c5bfe52d",
        "type": "inject",
        "z": "dea5fa223d05d26c",
        "name": "STATUS8",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "ABC123",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"StatusSNS\":{\"Switch1\":\"ON\"}}",
        "payloadType": "json",
        "x": 160,
        "y": 3680,
        "wires": [
            [
                "d0c5dd4a979aab46"
            ]
        ]
    },
    {
        "id": "119b93f3b1e91cb5",
        "type": "inject",
        "z": "dea5fa223d05d26c",
        "name": "STATUS8",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "ABC123",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"StatusSNS\": {  \"Switch1\": \"OFF\" } }",
        "payloadType": "json",
        "x": 160,
        "y": 3720,
        "wires": [
            [
                "d0c5dd4a979aab46"
            ]
        ]
    },
    {
        "id": "f8621e8dd36825ff",
        "type": "function",
        "z": "dea5fa223d05d26c",
        "name": "Prensas object main",
        "func": "let prensaProperties = flow.get('prensaProperties') || {};\nlet serialNumber = msg.payload.serialNumber;\nlet getResult = msg.payload.Switch1 && Object.keys(msg.payload).find(key => key.startsWith('Switch'));\nlet getStatusSNS = msg.payload.StatusSNS && Object.keys(msg.payload.StatusSNS).find(key => key.startsWith('Switch'));\n\nif (getResult === \"Switch1\" || getStatusSNS === \"Switch1\") {\n    if (!prensaProperties[serialNumber]) {\n        prensaProperties[serialNumber] = {\n            \"switch1\": null,\n            \"startPress\": false,\n            \"finishedPress\": false,\n            \"press\": 0,\n            \"timestampLastAction\": null,\n            \"timestampLastProduction\": null,\n            \"unit\": null,\n            \"status\": null,\n        };\n    }\n}\nflow.set('prensaProperties', prensaProperties);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1080,
        "y": 3560,
        "wires": [
            [
                "c42649df33a2b768"
            ]
        ],
        "icon": "font-awesome/fa-floppy-o"
    },
    {
        "id": "c42649df33a2b768",
        "type": "function",
        "z": "dea5fa223d05d26c",
        "name": "Counters press",
        "func": "let serialNumber = msg.payload.serialNumber;\nlet prensaProperties = flow.get('prensaProperties');\nlet currentTimestamp = new Date();\nlet getResult = msg.payload.Switch1 ? msg.payload.Switch1[\"Action\"] : null;\nlet getStatusSNS = msg.payload.StatusSNS ? msg.payload.StatusSNS[\"Switch1\"] : null;\n\nif ((getResult === \"ON\" || getStatusSNS === \"ON\") && !prensaProperties[serialNumber].startPress) {\n        prensaProperties[serialNumber].switch1 = \"ON\";\n        prensaProperties[serialNumber].startPress = true;\n        prensaProperties[serialNumber].timestampLastAction = currentTimestamp;\n}\nelse if ((getResult === \"OFF\" || getStatusSNS === \"OFF\") && prensaProperties[serialNumber].startPress \n&& !prensaProperties[serialNumber].finishedFold) {\n\n        prensaProperties[serialNumber].switch1 = \"OFF\";\n        prensaProperties[serialNumber].finishedPress = true;\n        \n        if(prensaProperties[serialNumber].startPress && prensaProperties[serialNumber].finishedPress) {\n                prensaProperties[serialNumber].startPress = false;\n                prensaProperties[serialNumber].finishedPress = false;\n                prensaProperties[serialNumber].press += 1;\n                prensaProperties[serialNumber].timestampLastProduction = currentTimestamp;\n                prensaProperties[serialNumber].unit = \"Golpes\";\n        }  \n}\nflow.set('prensaProperties', prensaProperties);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1300,
        "y": 3560,
        "wires": [
            [
                "9adfc785edd39ed1",
                "f2b5d51b245859f3"
            ]
        ],
        "icon": "node-red/file.svg"
    },
    {
        "id": "8941b85d68efb2c5",
        "type": "function",
        "z": "dea5fa223d05d26c",
        "name": "Get Count (Press)",
        "func": "let serialNumber = msg.payload.serialNumber;\nlet prensaProperties = flow.get('prensaProperties');\n\nif (prensaProperties[serialNumber] && prensaProperties[serialNumber].unit !== null) {\n    let unit = prensaProperties[serialNumber].unit;\n\n    msg.payload = {\n        timestamp: new Date().getTime(),\n        deviceSerialNumber: serialNumber,\n        unit: unit,\n        count: 1\n    }\n    prensaProperties[serialNumber].unit = null;\n    flow.set('prensaProperties', prensaProperties);\n\n    return msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1810,
        "y": 3500,
        "wires": [
            []
        ],
        "icon": "node-red-dashboard/ui_numeric.png"
    },
    {
        "id": "f2b5d51b245859f3",
        "type": "function",
        "z": "dea5fa223d05d26c",
        "name": "Update Status Machine",
        "func": "let prensaProperties = flow.get('prensaProperties');\nlet currentTimestamp = new Date();\nlet messages = [];\n\nif(prensaProperties !== \"empty\") {\n    Object.keys(prensaProperties).forEach(key => {\n        if(prensaProperties[key].hasOwnProperty('timestampLastAction') && prensaProperties[key].hasOwnProperty('timestampLastProduction')) {\n            let timestampLastAction = prensaProperties[key]['timestampLastAction'];\n            let timestampLastProduction = prensaProperties[key]['timestampLastProduction'];\n\n            let differenceLastTimeAction = timestampLastAction ? (currentTimestamp.getTime() - timestampLastAction.getTime()) / 1000 : null;\n            let differenceLastProductionTime = timestampLastProduction ? (currentTimestamp.getTime() - timestampLastProduction.getTime()) / 1000 : null;\n            let oldState = prensaProperties[key]['status'];\n\n            const isWorking = (differenceLastTimeAction <= 299 && differenceLastTimeAction !== null) || (differenceLastProductionTime <= 299 && differenceLastProductionTime !== null);\n\n            const isStopped =  (differenceLastTimeAction >= 300 && differenceLastProductionTime >= 300 && differenceLastProductionTime <= 1799) ||\n                                (differenceLastTimeAction >= 300 && differenceLastTimeAction <= 1799 && differenceLastProductionTime === null);\n\n            const isTurnedOff = differenceLastTimeAction >= 1800 || differenceLastProductionTime >= 1800 || differenceLastTimeAction === null;\n\n            const newState = isWorking ? 'TRABALHANDO' : isStopped ? 'PARADO' : isTurnedOff ? 'DESLIGADO' : null;\n\n            if (newState !== null && oldState !== newState) {\n                prensaProperties[key]['status'] = newState;\n\n                messages.push({\n                    serialNumber: key,\n                    currentStatus: newState\n                });\n            }\n        }\n    });\n    flow.set('prensaProperties', prensaProperties);\n\n    messages.forEach(msg => {\n        node.send({ payload: msg});\n\n        return msg;\n    });\n}\nnode.warn(prensaProperties);\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1570,
        "y": 3560,
        "wires": [
            [
                "67b8d93b6460e828"
            ]
        ],
        "icon": "font-awesome/fa-exchange"
    },
    {
        "id": "67b8d93b6460e828",
        "type": "function",
        "z": "dea5fa223d05d26c",
        "name": "Get changed Status (Press)",
        "func": "let { serialNumber, currentStatus} = msg.payload;\nlet timestamp = new Date().getTime();\n\nif (serialNumber && currentStatus !== null) {\n    msg.payload = {\n        timestamp: timestamp,\n        deviceSerialNumber: serialNumber,\n        status: currentStatus\n    }\n    return msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1840,
        "y": 3560,
        "wires": [
            []
        ],
        "icon": "node-red/status.svg"
    },
    {
        "id": "d0c5dd4a979aab46",
        "type": "switch",
        "z": "dea5fa223d05d26c",
        "name": "Machines",
        "property": "payload.serialNumber",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "ABC123",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 400,
        "y": 3660,
        "wires": [
            [
                "2f8be35f30f191e7"
            ]
        ],
        "icon": "font-awesome/fa-desktop"
    },
    {
        "id": "65f3a6785649f8fc",
        "type": "change",
        "z": "dea5fa223d05d26c",
        "name": "delete time",
        "rules": [
            {
                "t": "delete",
                "p": "payload.timestamp",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.StatusSNS.Time",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.StatusSNS.Switch2",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.StatusSNS.Switch3",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.StatusSNS.Switch4",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 730,
        "y": 3660,
        "wires": [
            [
                "b924663187cbabdc"
            ]
        ],
        "icon": "font-awesome/fa-times-circle"
    },
    {
        "id": "2f8be35f30f191e7",
        "type": "switch",
        "z": "dea5fa223d05d26c",
        "name": "OPTION SW",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "hask",
                "v": "Switch1",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "StatusSNS",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 550,
        "y": 3660,
        "wires": [
            [
                "65f3a6785649f8fc"
            ],
            [
                "65f3a6785649f8fc"
            ]
        ]
    },
    {
        "id": "b924663187cbabdc",
        "type": "rbe",
        "z": "dea5fa223d05d26c",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 890,
        "y": 3660,
        "wires": [
            [
                "c874e9a1423f12f4"
            ]
        ]
    },
    {
        "id": "c874e9a1423f12f4",
        "type": "function",
        "z": "dea5fa223d05d26c",
        "name": "Viradeira object main",
        "func": "let viradeiraProperties = flow.get('viradeiraProperties') || {};\nlet serialNumber = msg.payload.serialNumber;\n\nif  ((msg.payload.Switch1 && (msg.payload.Switch1.Action === \"ON\" || msg.payload.Switch1.Action === \"OFF\"))\n    ||  (msg.payload.StatusSNS && (msg.payload.StatusSNS.Switch1 === \"ON\" || msg.payload.StatusSNS.Switch1 === \"OFF\"))) {\n\n       if(!viradeiraProperties[serialNumber]) {\n        viradeiraProperties[serialNumber] = {\n            \"switch1\": null,\n            \"fold\": 0,\n            \"startFold\": false,\n            \"finishedFold\": false,\n            \"timestampLastAction\": null,\n            \"timestampLastProduction\": null,\n            \"unit\": null,\n            \"status\": null,\n        }\n    }\n} \nflow.set('viradeiraProperties', viradeiraProperties);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1080,
        "y": 3660,
        "wires": [
            [
                "afbf1416daebd95e"
            ]
        ],
        "icon": "font-awesome/fa-floppy-o"
    },
    {
        "id": "afbf1416daebd95e",
        "type": "function",
        "z": "dea5fa223d05d26c",
        "name": "Counters fold",
        "func": "let serialNumber = msg.payload.serialNumber;\nlet viradeiraProperties = flow.get('viradeiraProperties');\nlet currentTimestamp = new Date();\n\nif  ((msg.payload.Switch1 && msg.payload.Switch1.Action === \"ON\") || (msg.payload.StatusSNS && msg.payload.StatusSNS.Switch1 === \"ON\")) {\n        viradeiraProperties[serialNumber].switch1 = \"ON\";\n        viradeiraProperties[serialNumber].startFold = true;\n        viradeiraProperties[serialNumber].timestampLastAction = currentTimestamp;\n}\nelse if ((msg.payload.Switch1 && msg.payload.Switch1.Action === \"OFF\") ||\n        (msg.payload.StatusSNS && msg.payload.StatusSNS.Switch1 === \"OFF\") && viradeiraProperties[serialNumber].startFold === true) {\n\n            viradeiraProperties[serialNumber].switch1 = \"OFF\";\n            viradeiraProperties[serialNumber].finishedFold = true;\n\n            if(viradeiraProperties[serialNumber].startFold && viradeiraProperties[serialNumber].finishedFold) {\n                viradeiraProperties[serialNumber].startFold = false;\n                viradeiraProperties[serialNumber].finishedFold = false;\n                viradeiraProperties[serialNumber].fold += 1;\n                viradeiraProperties[serialNumber].timestampLastProduction = currentTimestamp;\n                viradeiraProperties[serialNumber].unit = \"Dobras\";\n            }\n}\nflow.set('viradeiraProperties', viradeiraProperties);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1310,
        "y": 3660,
        "wires": [
            [
                "0b56f20079364535",
                "2f71ec5dc3fbe2ed"
            ]
        ],
        "icon": "node-red/file.svg"
    },
    {
        "id": "0b56f20079364535",
        "type": "function",
        "z": "dea5fa223d05d26c",
        "name": "Update Status Machine",
        "func": "let viradeiraProperties = flow.get('viradeiraProperties');\nlet currentTimestamp = new Date();\nlet messages = [];\nif(viradeiraProperties !== \"empty\") {\n    Object.keys(viradeiraProperties).forEach(key => {\n        if(viradeiraProperties[key].hasOwnProperty('timestampLastAction') && viradeiraProperties[key].hasOwnProperty('timestampLastProduction')) {\n            let timestampLastAction = viradeiraProperties[key]['timestampLastAction'];\n            let timestampLastProduction = viradeiraProperties[key]['timestampLastProduction'];\n\n            let differenceLastTimeAction = timestampLastAction ? (currentTimestamp.getTime() - timestampLastAction.getTime()) / 1000 : null;\n            let differenceLastProductionTime = timestampLastProduction ? (currentTimestamp.getTime() - timestampLastProduction.getTime()) / 1000 : null;\n            let oldState = viradeiraProperties[key]['status'];\n\n            const isWorking = (differenceLastTimeAction <= 299 && differenceLastTimeAction !== null) \n            || (differenceLastProductionTime <= 299 && differenceLastProductionTime !== null);\n\n            const isStopped =   (differenceLastTimeAction >= 300 && differenceLastProductionTime >= 300 && differenceLastProductionTime <= 1799) ||\n                                (differenceLastTimeAction >= 300 && differenceLastProductionTime <= 1799 && differenceLastProductionTime === null);\n            \n            const isTurnedOff = differenceLastTimeAction >= 1800 || differenceLastProductionTime >= 1800 || differenceLastTimeAction === null;\n\n            const newState = isWorking ? 'TRABALHANDO' : isStopped ? 'PARADO' : isTurnedOff ? 'DESLIGADO' : null;\n\n            if(newState !== null && oldState !== newState) {\n                viradeiraProperties[key]['status'] = newState;\n\n                messages.push({\n                    serialNumber: key,\n                    currentStatus: newState\n                });\n            }\n        }\n    });\n    flow.set('viradeiraProperties', viradeiraProperties);\n    node.warn(viradeiraProperties);\n\n    messages.forEach(msg => {\n        node.send({ payload: msg });\n\n        return msg;\n    });\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1550,
        "y": 3660,
        "wires": [
            [
                "6c938b45b6f4e3a1"
            ]
        ],
        "icon": "font-awesome/fa-exchange"
    },
    {
        "id": "6c938b45b6f4e3a1",
        "type": "function",
        "z": "dea5fa223d05d26c",
        "name": "Get changed Status (Viradeiras)",
        "func": "let { serialNumber, currentStatus } = msg.payload;\nlet timestamp = new Date().getTime();\n\nif (serialNumber && currentStatus !== null) {\n    msg.payload = {\n        timestamp: timestamp,\n        deviceSerialNumber: serialNumber,\n        status: currentStatus\n    }\n    return msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1850,
        "y": 3660,
        "wires": [
            []
        ],
        "icon": "node-red/status.svg"
    },
    {
        "id": "cfb4c65d06da8f2d",
        "type": "function",
        "z": "dea5fa223d05d26c",
        "name": "Get Count (Fold)",
        "func": "let serialNumber = msg.payload.serialNumber;\nlet viradeiraProperties = flow.get('viradeiraProperties');\n\nif (viradeiraProperties[serialNumber] && viradeiraProperties[serialNumber].unit !== null) {\n    let unit = viradeiraProperties[serialNumber].unit;\n\n    msg.payload = {\n        timestamp: new Date().getTime(),\n        deviceSerialNumber: serialNumber,\n        unit: unit,\n        count: 1\n    }\n    viradeiraProperties[serialNumber].unit = null;\n    flow.set('viradeiraProperties', viradeiraProperties);\n\n    return msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1810,
        "y": 3620,
        "wires": [
            []
        ],
        "icon": "node-red-dashboard/ui_numeric.png"
    },
    {
        "id": "96a47c93380127c9",
        "type": "function",
        "z": "dea5fa223d05d26c",
        "name": "Guilhotina object main",
        "func": "let guilhotineProperties = flow.get('guilhotineProperties') || {};\nlet serialNumber = msg.payload.serialNumber;\n\nif  ((msg.payload.Switch1 && (msg.payload.Switch1.Action === \"ON\" || msg.payload.Switch1.Action === \"OFF\")) \n||  msg.payload.StatusSNS && (msg.payload.StatusSNS.Switch1 === \"ON\" || msg.payload.StatusSNS.Switch1 === \"OFF\")) {\n\n    if(!guilhotineProperties[serialNumber]) {\n        guilhotineProperties[serialNumber] = {\n            \"switch1\": null,\n            \"cut\": 0,\n            \"startCut\": false,\n            \"finishedCut\": false,\n            \"timestampLastAction\": null,\n            \"timestampLastProduction\": null,\n            \"unit\": null,\n            \"status\": null,\n        }\n    }\n}\nflow.set('guilhotineProperties', guilhotineProperties);\n// node.warn(guilhotineProperties);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 3880,
        "wires": [
            [
                "b0bc61dcc681aafe"
            ]
        ],
        "icon": "font-awesome/fa-floppy-o"
    },
    {
        "id": "3dc27c10c5864d60",
        "type": "inject",
        "z": "dea5fa223d05d26c",
        "name": "SWITCH1 ON",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DEF123",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch1\": {\"Action\": \"ON\"} }",
        "payloadType": "json",
        "x": 170,
        "y": 3800,
        "wires": [
            [
                "96a47c93380127c9"
            ]
        ]
    },
    {
        "id": "1478a46e554171f7",
        "type": "inject",
        "z": "dea5fa223d05d26c",
        "name": "SWITCH1 OFF",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DEF123",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch1\": {\"Action\": \"OFF\"} }",
        "payloadType": "json",
        "x": 180,
        "y": 3840,
        "wires": [
            [
                "96a47c93380127c9"
            ]
        ]
    },
    {
        "id": "354d8c5992d7a9d7",
        "type": "inject",
        "z": "dea5fa223d05d26c",
        "name": "STATUS8",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DEF123",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"StatusSNS\":{\"Switch1\":\"ON\"}}",
        "payloadType": "json",
        "x": 160,
        "y": 3880,
        "wires": [
            [
                "96a47c93380127c9"
            ]
        ]
    },
    {
        "id": "3d127bffe506586a",
        "type": "inject",
        "z": "dea5fa223d05d26c",
        "name": "STATUS8",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DEF123",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"StatusSNS\": {  \"Switch1\": \"OFF\" } }",
        "payloadType": "json",
        "x": 160,
        "y": 3920,
        "wires": [
            [
                "96a47c93380127c9"
            ]
        ]
    },
    {
        "id": "b0bc61dcc681aafe",
        "type": "function",
        "z": "dea5fa223d05d26c",
        "name": "Counters cut",
        "func": "let serialNumber = msg.payload.serialNumber;\nlet guilhotineProperties = flow.get('guilhotineProperties');\nlet currentTimestamp = new Date();\n\nif  ((msg.payload.Switch1 && msg.payload.Switch1.Action === \"ON\") || msg.payload.StatusSNS && msg.payload.StatusSNS.Switch1 === \"ON\") {\n        guilhotineProperties[serialNumber].switch1 = \"ON\";\n        guilhotineProperties[serialNumber].startCut = true;\n        guilhotineProperties[serialNumber].timestampLastAction = currentTimestamp;\n}\nelse if (((msg.payload.Switch1 && msg.payload.Switch1.Action === \"OFF\") ||\n    (msg.payload.StatusSNS && msg.payload.StatusSNS.Switch1 === \"OFF\"))\n    && guilhotineProperties[serialNumber].startCut === true && guilhotineProperties[serialNumber].finishedCut === false) {\n\n            guilhotineProperties[serialNumber].switch1 = \"OFF\";\n            guilhotineProperties[serialNumber].finishedCut = true;\n\n            if (guilhotineProperties[serialNumber].startCut && guilhotineProperties[serialNumber].finishedCut) {\n                    guilhotineProperties[serialNumber].startCut= false;\n                    guilhotineProperties[serialNumber].finishedCut = false;\n                    guilhotineProperties[serialNumber].timestampLastProduction = currentTimestamp;\n                    guilhotineProperties[serialNumber].unit = \"Cortes\";\n                    guilhotineProperties[serialNumber].cut += 1;\n            }\n}\nflow.set('guilhotineProperties', guilhotineProperties);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 3880,
        "wires": [
            [
                "29267b53fd42d4e6",
                "f2ec544c1ccfa9d6"
            ]
        ],
        "icon": "node-red/file.svg"
    },
    {
        "id": "29267b53fd42d4e6",
        "type": "function",
        "z": "dea5fa223d05d26c",
        "name": "Update Status Machine",
        "func": "let guilhotineProperties = flow.get('guilhotineProperties');\nlet currentTimestamp = new Date();\nlet messages = [];\nif (guilhotineProperties !== \"empty\") {\n    Object.keys(guilhotineProperties).forEach(key => {\n        if (guilhotineProperties[key].hasOwnProperty('timestampLastAction') && guilhotineProperties[key].hasOwnProperty('timestampLastProduction')) {\n            let timestampLastAction = guilhotineProperties[key]['timestampLastAction'];\n            let timestampLastProduction = guilhotineProperties[key]['timestampLastProduction'];\n\n            let differenceLastTimeAction = timestampLastAction ? (currentTimestamp.getTime() - timestampLastAction.getTime()) / 1000 : null;\n            let differenceLastProductionTime = timestampLastProduction ? (currentTimestamp.getTime() - timestampLastProduction.getTime()) / 1000 : null;\n            let oldState = guilhotineProperties[key]['status'];\n\n            const isWorking = (differenceLastTimeAction <= 299 && differenceLastTimeAction !== null)\n                || (differenceLastProductionTime <= 299 && differenceLastProductionTime !== null);\n\n            const isStopped = (differenceLastTimeAction >= 300 && differenceLastProductionTime >= 300 && differenceLastProductionTime <= 1799) ||\n                (differenceLastTimeAction >= 300 && differenceLastProductionTime <= 1799 && differenceLastProductionTime === null);\n\n            const isTurnedOff = differenceLastTimeAction >= 1800 || differenceLastProductionTime >= 1800 || differenceLastTimeAction === null;\n\n            const newState = isWorking ? 'TRABALHANDO' : isStopped ? 'PARADO' : isTurnedOff ? 'DESLIGADO' : null;\n\n            if (newState !== null && oldState !== newState) {\n                guilhotineProperties[key]['status'] = newState;\n\n                messages.push({\n                    serialNumber: key,\n                    currentStatus: newState\n                });\n            }\n        }\n    });\n    flow.set('guilhotineProperties', guilhotineProperties);\n    node.warn(guilhotineProperties);\n\n    messages.forEach(msg => {\n        node.send({ payload: msg });\n\n        return msg;\n    });\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 3880,
        "wires": [
            [
                "7c2d5cc2403018fa"
            ]
        ],
        "icon": "font-awesome/fa-exchange"
    },
    {
        "id": "abfaab5567f89349",
        "type": "function",
        "z": "dea5fa223d05d26c",
        "name": "Get Count (cut)",
        "func": "let serialNumber = msg.payload.serialNumber;\nlet guilhotineProperties = flow.get('guilhotineProperties');\n\nif (guilhotineProperties[serialNumber] && guilhotineProperties[serialNumber].unit !== null) {\n    let unit = guilhotineProperties[serialNumber].unit;\n\n    msg.payload = {\n        timestamp: new Date().getTime(),\n        deviceSerialNumber: serialNumber,\n        unit: unit,\n        count: 1\n    }\n    guilhotineProperties[serialNumber].unit = null;\n    flow.set('guilhotineProperties', guilhotineProperties);\n\n    return msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1140,
        "y": 3840,
        "wires": [
            []
        ],
        "icon": "node-red-dashboard/ui_numeric.png"
    },
    {
        "id": "7c2d5cc2403018fa",
        "type": "function",
        "z": "dea5fa223d05d26c",
        "name": "Get changed Status (Guilhotine)",
        "func": "let { serialNumber, currentStatus } = msg.payload;\nlet timestamp = new Date().getTime();\n\nif (serialNumber && currentStatus !== null) {\n    msg.payload = {\n        timestamp: timestamp,\n        deviceSerialNumber: serialNumber,\n        status: currentStatus\n    }\n    return msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1190,
        "y": 3880,
        "wires": [
            []
        ],
        "icon": "node-red/status.svg"
    },
    {
        "id": "25f503103efac47a",
        "type": "function",
        "z": "dea5fa223d05d26c",
        "name": "Increment Dobras",
        "func": "let{ verifyProduction, deviceSerialNumber } = msg.payload;\nlet unit = context.get('unit') || null;\nlet count = context.get('count') || 0;\nlet currentTimestamp = new Date();\n\nif (verifyProduction === true) {\n    unit = \"Dobras\";\n    count = 1;\n    context.set('unit', unit);\n    context.set('count', count);\n\n    msg.payload = {\n        timestamp:currentTimestamp.getTime(),\n        deviceSerialNumber: deviceSerialNumber,\n        unit: unit, \n        count: count\n    }\n    return msg;\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1950,
        "y": 4180,
        "wires": [
            [
                "3ea15bc1c426c73c"
            ]
        ],
        "icon": "node-red/arrow-in.svg"
    },
    {
        "id": "fae86b0a91cae9e4",
        "type": "function",
        "z": "dea5fa223d05d26c",
        "name": "Switch State",
        "func": "function handleSwitch(payload, context, switchName, statusSNSName, startName, finishName, verifyName) {\n    let switchKey = Object.keys(payload).find(key => key.startsWith(switchName)) // extrai o switch que chegou no payload\n    let switchState = context.get(switchName) || null;\n    let actionValue = payload[switchKey] ? payload[switchKey].Action : null; // extrai o estado do switch que chegou\n    let statusSNS = payload[statusSNSName] && payload[statusSNSName][switchName];\n    let startState = context.get(startName) || false;\n    let finishState = context.get(finishName) || false;\n    let verifyState = context.get(verifyName) || false;\n\n    switchState = actionValue || statusSNS || switchState; // adquiri o estado do switch que chegou\n\n    if (switchState == \"ON\" && finishState == false) { // Condi√ß√£o que caracteriza o in√≠cio da produ√ß√£o da pe√ßa\n        startState = true;\n    }\n    else if (switchState == \"OFF\" && startState == true) { // condi√ß√£o que caracteriza o final da produ√ß√£o da pe√ßa\n        finishState = true;\n    }\n    verifyState = startState == true && finishState == true ? true : false;\n\n    if (verifyState == true) { // reseta o in√≠cio o fim da produ√ß√£o quando a pe√ßa √© produzida\n        startState = false;\n        finishState = false;\n\n    }\n    context.set(switchName, switchState);\n    context.set(startName, startState);\n    context.set(finishName, finishState);\n    context.set(verifyName, verifyState);\n\n    return {\n        switchState: switchState,\n        startState: startState,\n        finishState: finishState,\n        verifyState: verifyState\n    };\n}\nlet payload = msg.payload;\nlet switch1 = handleSwitch(payload, context, 'Switch1', 'StatusSNS', 'startFold', 'finishedFold', 'verifyFold');\n\nmsg.switches = {\n    switch1: switch1.switchState,\n    startFold: switch1.startState,\n    finishedFold: switch1.finishState,\n    verifyFold: switch1.verifyState,\n}\nswitch1.verifyState = false; // reseta a condi√ß√£o de pe√ßa produzindo para false quando a pe√ßa √© finalizada\ncontext.set('verifyFold', switch1.verifyState);\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 4200,
        "wires": [
            [
                "b331d542919f7dd5"
            ]
        ],
        "icon": "node-red/swap.svg"
    },
    {
        "id": "b331d542919f7dd5",
        "type": "function",
        "z": "dea5fa223d05d26c",
        "name": "Conditions Machine",
        "func": "const { startFold, verifyFold } = msg.switches;\n\nmsg.conditions = {\n        startProduction: startFold,\n        verifyProduction: verifyFold,\n        serialNumber: msg.payload.serialNumber\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1230,
        "y": 4200,
        "wires": [
            [
                "01926475ebc4196f"
            ]
        ],
        "icon": "font-awesome/fa-bars"
    },
    {
        "id": "01926475ebc4196f",
        "type": "function",
        "z": "dea5fa223d05d26c",
        "name": "Production Machine",
        "func": "const { startProduction, verifyProduction, serialNumber } = msg.conditions;\nlet [machine, startWorking, lastTimestamp] = ['machine', 'startWorking', 'lastTimestamp'].map(key => context.get(key) || null);\nlet currentTimestamp = new Date();\nlet foldCount = context.get('foldCount') || 0;\nlet resetShift = context.get('resetShift') || false;\n\nconst actions = { \n    resetShift: () => { foldCount = 0; resetShift = false; },\n    payloadReset: () => { resetShift = true; },\n    startWorking: () => {startWorking = currentTimestamp; },\n    finishedProduction: () => { foldCount++; lastTimestamp = currentTimestamp; },\n    machineNull: () => { machine = serialNumber; }\n}\nconst conditions = {\n    resetShift: resetShift === true,\n    payloadReset: msg.payload === 'reset',\n    startWorking: startProduction === true,\n    finishedProduction: verifyProduction === true,\n    machineNull: serialNumber && machine === null,\n};\n\nObject.entries(conditions).forEach(([condition, isTrue]) => {\n    if (isTrue && actions[condition]) actions[condition]();\n});\ncontext.set('foldCount', foldCount);\ncontext.set('resetShift', resetShift);\ncontext.set('startWorking', startWorking);\ncontext.set('lastTimestamp', lastTimestamp);\ncontext.set('machine', machine);\n\nmsg.data = {\n    verifyProduction: verifyProduction,\n    fold: foldCount,\n    dateStartProduction: startWorking,\n    dateLastProduction: lastTimestamp,\n    machine: machine,\n}\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1460,
        "y": 4200,
        "wires": [
            [
                "0240755bf72c6e99",
                "bc70edfb18bbf2d0"
            ]
        ],
        "icon": "font-awesome/fa-book"
    },
    {
        "id": "0240755bf72c6e99",
        "type": "function",
        "z": "dea5fa223d05d26c",
        "name": "VIRADEIRA 200T",
        "func": "let {verifyProduction,fold, machine} = msg.data;\n\nmsg.payload = {\n    verifyProduction: verifyProduction,\n    dobras: fold,\n    deviceSerialNumber: machine\n}\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1730,
        "y": 4180,
        "wires": [
            [
                "25f503103efac47a"
            ]
        ],
        "icon": "font-awesome/fa-cogs"
    },
    {
        "id": "bc70edfb18bbf2d0",
        "type": "function",
        "z": "dea5fa223d05d26c",
        "name": "verifyStatus",
        "func": "let { dateStartProduction, dateLastProduction, machine } = msg.data;\nlet [differenceTimedateStartProduction, differenceTimelastProduction] = ['differenceTimedateStartProduction', 'differenceTimelasProduction'].map(key => context.get(key) || 0);\nlet currentTimestamp = new Date();\nlet currentStatus = context.get('currentStatus') || null;\n\ndifferenceTimedateStartProduction = dateStartProduction !== null ? (currentTimestamp.getTime() - dateStartProduction.getTime()) / 1000 : null;\ndifferenceTimelastProduction = dateLastProduction !== null ? (currentTimestamp.getTime() - dateLastProduction.getTime()) / 1000 : null;\n\ncontext.set('differenceTimedateStartProduction', differenceTimedateStartProduction);\ncontext.set('differenceTimelastProduction', differenceTimelastProduction);\n\nif (dateStartProduction !== null) {\n\n    //Mapear status\n    const machineWorking = differenceTimedateStartProduction <= 299 || (differenceTimelastProduction !== null && differenceTimelastProduction <= 299);\n\n    const machineIdle = (differenceTimedateStartProduction >= 300 && differenceTimelastProduction >= 300 && differenceTimelastProduction <= 1799) ||\n        (differenceTimedateStartProduction >= 300 && differenceTimedateStartProduction <= 1799 && dateLastProduction === null);\n\n    const machineOff = ((differenceTimedateStartProduction >= 300 && differenceTimelastProduction >= 1800) || (differenceTimedateStartProduction >= 1800 && dateLastProduction === null));\n\n    const newStatus = machineWorking ? 'TRABALHANDO' : machineIdle ? 'PARADO' : machineOff ? 'DESLIGADO' : null;\n    if (newStatus) currentStatus = newStatus;\n}\n\nif (dateStartProduction == null) currentStatus = \"DESLIGADO\";\n\ncontext.set('currentStatus', currentStatus);\n\nmsg.status = {\n    timeCurrentProduction: differenceTimedateStartProduction,\n    timeLastProduction: differenceTimelastProduction,\n    machine: machine,\n    currentStatus: currentStatus\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1710,
        "y": 4220,
        "wires": [
            [
                "3b445b6161563465"
            ]
        ],
        "icon": "node-red/status.svg"
    },
    {
        "id": "3b445b6161563465",
        "type": "function",
        "z": "dea5fa223d05d26c",
        "name": "FormatedMessage",
        "func": "let machine = msg.status.machine;\nlet timestamp = new Date().getTime();\nlet currentStatus = context.get('currentStatus') || null; \nlet oldStatus = msg.status.currentStatus;\n\nif(!currentStatus || currentStatus !== oldStatus) {\n    currentStatus = oldStatus;\n    context.set('currentStatus', currentStatus);\n\n    msg.payload = {\n            timestamp: timestamp,\n            deviceSerialNumber: machine,\n            status: currentStatus\n    }\n    return msg;\n}\nreturn null;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1950,
        "y": 4220,
        "wires": [
            [
                "76b1d6572a1b1498"
            ]
        ],
        "icon": "font-awesome/fa-envelope"
    },
    {
        "id": "d9a63bbca6b6e929",
        "type": "switch",
        "z": "dea5fa223d05d26c",
        "name": "Machine",
        "property": "payload.serialNumber",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "DF128E",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 820,
        "y": 4200,
        "wires": [
            [
                "fae86b0a91cae9e4"
            ]
        ],
        "icon": "font-awesome/fa-desktop"
    },
    {
        "id": "238696b02dfde868",
        "type": "switch",
        "z": "dea5fa223d05d26c",
        "name": "OPTION SW",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "hask",
                "v": "Switch1",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "StatusSNS",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 350,
        "y": 4200,
        "wires": [
            [
                "29d4edde90b97371"
            ],
            [
                "29d4edde90b97371"
            ]
        ]
    },
    {
        "id": "29d4edde90b97371",
        "type": "change",
        "z": "dea5fa223d05d26c",
        "name": "delete time",
        "rules": [
            {
                "t": "delete",
                "p": "payload.timestamp",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.StatusSNS.Time",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.StatusSNS.Switch2",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.StatusSNS.Switch3",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.StatusSNS.Switch4",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 530,
        "y": 4200,
        "wires": [
            [
                "64543d792cc25f41"
            ]
        ],
        "icon": "font-awesome/fa-times-circle"
    },
    {
        "id": "64543d792cc25f41",
        "type": "rbe",
        "z": "dea5fa223d05d26c",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 670,
        "y": 4200,
        "wires": [
            [
                "d9a63bbca6b6e929"
            ]
        ]
    },
    {
        "id": "f30a9a576050826e",
        "type": "inject",
        "z": "dea5fa223d05d26c",
        "name": "SWITCH1 ON",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF128E",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch1\": {\"Action\": \"ON\"} }",
        "payloadType": "json",
        "x": 130,
        "y": 4120,
        "wires": [
            [
                "238696b02dfde868"
            ]
        ]
    },
    {
        "id": "0477d5a44767110b",
        "type": "inject",
        "z": "dea5fa223d05d26c",
        "name": "SWITCH1 OFF",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF128E",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch1\": {\"Action\": \"OFF\"} }",
        "payloadType": "json",
        "x": 140,
        "y": 4160,
        "wires": [
            [
                "238696b02dfde868"
            ]
        ]
    },
    {
        "id": "f61ee6990890f419",
        "type": "inject",
        "z": "dea5fa223d05d26c",
        "name": "STATUS8",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF128E",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"StatusSNS\":{\"Switch1\":\"ON\"}}",
        "payloadType": "json",
        "x": 120,
        "y": 4200,
        "wires": [
            [
                "238696b02dfde868"
            ]
        ]
    },
    {
        "id": "55f0790a6366a57d",
        "type": "inject",
        "z": "dea5fa223d05d26c",
        "name": "STATUS8",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF128E",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"StatusSNS\": {  \"Switch1\": \"OFF\" } }",
        "payloadType": "json",
        "x": 120,
        "y": 4240,
        "wires": [
            [
                "238696b02dfde868"
            ]
        ]
    },
    {
        "id": "3ea15bc1c426c73c",
        "type": "debug",
        "z": "dea5fa223d05d26c",
        "name": "debug 278",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2170,
        "y": 4180,
        "wires": []
    },
    {
        "id": "76b1d6572a1b1498",
        "type": "debug",
        "z": "dea5fa223d05d26c",
        "name": "debug 279",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2170,
        "y": 4220,
        "wires": []
    },
    {
        "id": "9a5fb8c81e9ea8c1",
        "type": "inject",
        "z": "dea5fa223d05d26c",
        "name": "SWITCH1 ON",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "ABC123",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch1\": {\"Action\": \"ON\"} }",
        "payloadType": "json",
        "x": 2410,
        "y": 80,
        "wires": [
            [
                "1684cb865b5269a1"
            ]
        ]
    },
    {
        "id": "b6f2e79ef2b75938",
        "type": "inject",
        "z": "dea5fa223d05d26c",
        "name": "SWITCH1 OFF",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "ABC123",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch1\": {\"Action\": \"OFF\"} }",
        "payloadType": "json",
        "x": 2420,
        "y": 120,
        "wires": [
            [
                "1684cb865b5269a1"
            ]
        ]
    },
    {
        "id": "3902ac306704a79c",
        "type": "inject",
        "z": "dea5fa223d05d26c",
        "name": "SWITCH2 ON",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "ABC123",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch2\": {\"Action\": \"ON\"} }",
        "payloadType": "json",
        "x": 2410,
        "y": 280,
        "wires": [
            [
                "1684cb865b5269a1"
            ]
        ]
    },
    {
        "id": "698dc1c0444d6fc9",
        "type": "inject",
        "z": "dea5fa223d05d26c",
        "name": "SWITCH2 OFF",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "ABC123",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch2\": {\"Action\": \"OFF\"} }",
        "payloadType": "json",
        "x": 2420,
        "y": 320,
        "wires": [
            [
                "1684cb865b5269a1"
            ]
        ]
    },
    {
        "id": "1b929a556492e39a",
        "type": "inject",
        "z": "dea5fa223d05d26c",
        "name": "STATUS8",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "ABC123",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"StatusSNS\": {  \"Switch1\": \"ON\" } }",
        "payloadType": "json",
        "x": 2400,
        "y": 160,
        "wires": [
            [
                "1684cb865b5269a1"
            ]
        ]
    },
    {
        "id": "bca634e02002c36a",
        "type": "inject",
        "z": "dea5fa223d05d26c",
        "name": "STATUS8",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "ABC123",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"StatusSNS\": {  \"Switch1\": \"OFF\" } }",
        "payloadType": "json",
        "x": 2400,
        "y": 200,
        "wires": [
            [
                "1684cb865b5269a1"
            ]
        ]
    },
    {
        "id": "e7295862600a0da5",
        "type": "function",
        "z": "dea5fa223d05d26c",
        "name": "EFLA object main",
        "func": "let eflaProperties = flow.get('eflaProperties') || {};\nlet serialNumber = msg.payload.serialNumber;\nlet getResult = Object.keys(msg.payload).find(key => key.startsWith('Switch'));\nlet getStatusSNS = msg.payload.StatusSNS && Object.keys(msg.payload.StatusSNS).find(key => key.startsWith('Switch'));\n\nif (getResult || getStatusSNS) {\n    if (!eflaProperties[serialNumber]) {\n        eflaProperties[serialNumber] = {\n            \"runningProgram\": false,\n            \"finishedProgram\": false,\n            \"openDoor\": false,\n            \"closeDoor\": false,\n            \"existsCutPlan\": false,\n            \"dateStartProduction\": null,\n            \"dateLastProduction\": null,\n            \"plateSteel\": 0,\n            \"unit\": null,\n            \"status\": null,\n            \"timeDurationLastPlanCut\": 0,\n        }\n    }\n}\nflow.set('eflaProperties', eflaProperties);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3070,
        "y": 360,
        "wires": [
            [
                "cd33cb839eea8274"
            ]
        ],
        "icon": "font-awesome/fa-save"
    },
    {
        "id": "1684cb865b5269a1",
        "type": "switch",
        "z": "dea5fa223d05d26c",
        "name": "Machines",
        "property": "payload.serialNumber",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "ABC123",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "EFG123",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 2660,
        "y": 360,
        "wires": [
            [
                "bf213645ae97d6e5"
            ],
            [
                "bf213645ae97d6e5"
            ]
        ]
    },
    {
        "id": "bf213645ae97d6e5",
        "type": "switch",
        "z": "dea5fa223d05d26c",
        "name": "Option SW",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "hask",
                "v": "Switch1",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "Switch2",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "StatusSNS",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 2850,
        "y": 360,
        "wires": [
            [
                "e7295862600a0da5"
            ],
            [
                "e7295862600a0da5"
            ],
            [
                "e7295862600a0da5"
            ]
        ]
    },
    {
        "id": "cd33cb839eea8274",
        "type": "function",
        "z": "dea5fa223d05d26c",
        "name": "Handle switches",
        "func": "let handleSwitch = function (payload, context, machineProperties, switchName, statusSNSName, startName, finishName) {\n    let switchKey = Object.keys(payload).find(key => key.startsWith(switchName));\n    let switchState = context.get(switchName) || null;\n    let actionValue = payload[switchKey] ? payload[switchKey].Action : null;\n    let statusSNS = payload[statusSNSName] && payload[statusSNSName][switchName];\n    let startState = machineProperties[startName] || false;\n    let finishState = machineProperties[finishName] || false;\n\n    switchState = actionValue || statusSNS || switchState; // adquiri o estado do switch que chegou\n\n    if (switchState === \"ON\") {\n        startState = true;\n        finishState = false\n    }\n    else if (switchState === \"OFF\" && startState === true) {\n        startState = false;\n        finishState = true;\n    }\n    machineProperties[startName] = startState;\n    machineProperties[finishName] = finishState;\n    return {\n        switchState: switchState,\n        startState: startState,\n        finishState: finishState,\n    };\n}\nlet payload = msg.payload;\nlet serialNumber = msg.payload.serialNumber;\nlet eflaProperties = flow.get('eflaProperties') || {};\nlet machineProperties = eflaProperties[serialNumber] || {};\n\nlet verifyProgram = handleSwitch(payload, context, machineProperties, 'Switch1', 'StatusSNS', 'runningProgram', 'finishedProgram');\nlet tableDoor = handleSwitch(payload, context, machineProperties,'Switch2', 'StatusSNS', 'openDoor', 'closeDoor');\n\nflow.set('eflaProperties', eflaProperties);\n\nnode.warn(`Running: ${verifyProgram.startState}`);\nnode.warn(`Finished: ${verifyProgram.finishState}`);\nnode.warn(`OpenDoor: ${tableDoor.startState}`);\nnode.warn(`CloseDoor: ${tableDoor.finishState}`);\nnode.warn(eflaProperties[serialNumber]);\n\neflaProperties[serialNumber].runningProgram = verifyProgram.startState;\neflaProperties[serialNumber].finishedProgram = verifyProgram.finishState;\neflaProperties[serialNumber].openDoor = tableDoor.startState;\neflaProperties[serialNumber].closeDoor = tableDoor.finishState;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3280,
        "y": 360,
        "wires": [
            [
                "c1d2398624b27d2f"
            ]
        ],
        "icon": "node-red/switch.svg"
    },
    {
        "id": "c1d2398624b27d2f",
        "type": "function",
        "z": "dea5fa223d05d26c",
        "name": "Machine conditions",
        "func": "let eflaProperties = flow.get('eflaProperties') || {};\nlet serialNumber = msg.payload.serialNumber;\nlet currentTimestamp = new Date();\n\nif (eflaProperties && eflaProperties[serialNumber]) {\n    if (eflaProperties[serialNumber].runningProgram && !eflaProperties[serialNumber].existsCutPlan && !eflaProperties[serialNumber].openDoor) {\n        eflaProperties[serialNumber].existsCutPlan = true;\n        eflaProperties[serialNumber].dateStartProduction = currentTimestamp;\n    }\n    else if (eflaProperties[serialNumber].finishedProgram && eflaProperties[serialNumber].openDoor \n    && eflaProperties[serialNumber].existsCutPlan) {\n        eflaProperties[serialNumber].existsCutPlan = false;\n        eflaProperties[serialNumber].dateLastProduction = currentTimestamp;\n        eflaProperties[serialNumber].timeDurationLastPlanCut = (currentTimestamp.getTime() - \n        eflaProperties[serialNumber].dateStartProduction.getTime()) /1000\n        eflaProperties[serialNumber].dateStartProduction = null;\n        eflaProperties[serialNumber].plateSteel += 1;\n        eflaProperties[serialNumber].unit = \"Chapas\";\n    }\n}\nflow.set('eflaProperties', eflaProperties);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3510,
        "y": 360,
        "wires": [
            [
                "2b6d3f4b78e331bb",
                "6554f1d8ac3e0c71"
            ]
        ],
        "icon": "font-awesome/fa-bars"
    },
    {
        "id": "2b6d3f4b78e331bb",
        "type": "function",
        "z": "dea5fa223d05d26c",
        "name": "Update status machine",
        "func": "let eflaProperties = flow.get('eflaProperties') || {};\nlet currentTimestamp = new Date();\nlet messages = [];\n\nif (eflaProperties) {\n    Object.keys(eflaProperties).forEach(key => {\n        if (eflaProperties[key].hasOwnProperty('dateStartProduction') && eflaProperties[key].hasOwnProperty('dateLastProduction')) {\n            let dateStartProduction = eflaProperties[key]['dateStartProduction'];\n            let dateLastProduction = eflaProperties[key]['dateLastProduction'];\n            let oldState = eflaProperties[key]['status'];\n\n            let differenceStartProduction = dateStartProduction ? (currentTimestamp.getTime() - dateStartProduction.getTime()) / 1000 : null;\n            let differenceLastProduction = dateLastProduction ? (currentTimestamp.getTime() - dateLastProduction.getTime()) / 1000 : null;\n        \n            const isWorking = (dateStartProduction !== null && differenceStartProduction <= 10799) ||\n            (dateStartProduction === null && differenceLastProduction <= 299 && differenceLastProduction !== null);\n        \n            const isStopped = (dateStartProduction === null && differenceLastProduction >= 300 && differenceLastProduction <= 1799);\n\n            const isTurnedOff = ((dateStartProduction === null && dateLastProduction === null) ||\n            (dateStartProduction === null && differenceLastProduction >= 1800) || (differenceStartProduction >= 10800));\n\n            const newState = isWorking ? \"TRABALHANDO\" : isStopped ? \"PARADO\" : isTurnedOff ? \"DESLIGADO\" : null;\n\n            if (newState !== null && oldState !== newState) {\n                eflaProperties[key]['status'] = newState;\n\n                messages.push(({\n                    serialNumber: key,\n                    currentStatus: newState\n                }));\n            }\n        }\n    });\n    flow.set('eflaProperties', eflaProperties);\n\n    messages.forEach(msg => {\n        node.send(({ payload: msg}));\n\n        return msg;\n    });\n}\nnode.warn(eflaProperties);",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3740,
        "y": 380,
        "wires": [
            [
                "c69ee490dbe1d901"
            ]
        ],
        "icon": "font-awesome/fa-exchange"
    },
    {
        "id": "4c5cda586cc89166",
        "type": "function",
        "z": "dea5fa223d05d26c",
        "name": "Get Count (Chapas)",
        "func": "let serialNumber = msg.payload.serialNumber;\nlet roboProperties = flow.get('roboProperties');\n\nif (roboProperties) {\n    if (roboProperties[serialNumber] && roboProperties[serialNumber].unit !== null) {\n        let unit = roboProperties[serialNumber].unit;\n\n        msg.payload = {\n            timestamp: new Date().getTime(),\n            deviceSerialNumber: serialNumber,\n            unit: unit,\n            count: 1\n        }\n        roboProperties[serialNumber].unit = null;\n        flow.set('roboProperties', roboProperties);\n        return msg;\n    }\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4000,
        "y": 340,
        "wires": [
            []
        ],
        "icon": "font-awesome/fa-plus"
    },
    {
        "id": "c69ee490dbe1d901",
        "type": "function",
        "z": "dea5fa223d05d26c",
        "name": "Get changed status (EFLA)",
        "func": "let { serialNumber, currentStatus } = msg.payload;\nlet timestamp = new Date().getTime();\n\nif (serialNumber && currentStatus !== null) {\n    msg.payload = {\n        timestamp: timestamp,\n        deviceSerialNumber: serialNumber,\n        status: currentStatus,\n    }\n    return msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4020,
        "y": 380,
        "wires": [
            [
                "a1bbe3d0bef82af3"
            ]
        ],
        "icon": "node-red/status.svg"
    },
    {
        "id": "a1bbe3d0bef82af3",
        "type": "debug",
        "z": "dea5fa223d05d26c",
        "name": "debug 302",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 4190,
        "y": 100,
        "wires": []
    },
    {
        "id": "93d5b82646ea962e",
        "type": "switch",
        "z": "dea5fa223d05d26c",
        "name": "Option SW",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "hask",
                "v": "Switch1",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "Switch2",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 2810,
        "y": 880,
        "wires": [
            [
                "870cdedfcc9d6eea"
            ],
            [
                "870cdedfcc9d6eea"
            ]
        ]
    },
    {
        "id": "7947901220265b0e",
        "type": "switch",
        "z": "dea5fa223d05d26c",
        "name": "Machines",
        "property": "payload.serialNumber",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "ABC123",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "DEF123",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 2660,
        "y": 880,
        "wires": [
            [
                "93d5b82646ea962e"
            ],
            [
                "93d5b82646ea962e"
            ]
        ]
    },
    {
        "id": "551202388a48f977",
        "type": "inject",
        "z": "dea5fa223d05d26c",
        "name": "SWITCH1 ON",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DEF123",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch1\": {\"Action\": \"ON\"} }",
        "payloadType": "json",
        "x": 2390,
        "y": 780,
        "wires": [
            [
                "7947901220265b0e"
            ]
        ]
    },
    {
        "id": "f77f5ca35e89eb22",
        "type": "inject",
        "z": "dea5fa223d05d26c",
        "name": "SWITCH1 OFF",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DEF123",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch1\": {\"Action\": \"OFF\"} }",
        "payloadType": "json",
        "x": 2400,
        "y": 820,
        "wires": [
            [
                "7947901220265b0e"
            ]
        ]
    },
    {
        "id": "0d1c8b3a8cbc1aa7",
        "type": "inject",
        "z": "dea5fa223d05d26c",
        "name": "SWITCH2 ON",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DEF123",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch2\": {\"Action\": \"ON\"} }",
        "payloadType": "json",
        "x": 2390,
        "y": 900,
        "wires": [
            [
                "7947901220265b0e"
            ]
        ]
    },
    {
        "id": "e8930a5140f99866",
        "type": "inject",
        "z": "dea5fa223d05d26c",
        "name": "SWITCH2 OFF",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DEF123",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch2\": {\"Action\": \"OFF\"} }",
        "payloadType": "json",
        "x": 2400,
        "y": 940,
        "wires": [
            [
                "7947901220265b0e"
            ]
        ]
    },
    {
        "id": "870cdedfcc9d6eea",
        "type": "function",
        "z": "dea5fa223d05d26c",
        "name": "R√¥bo object main",
        "func": "let roboProperties = flow.get('roboProperties') || {};\nlet serialNumber = msg.payload.serialNumber;\nlet getSwitch = Object.keys(msg.payload).find(key => key.startsWith('Switch'))\n\nif (getSwitch && (getSwitch === \"Switch1\" || getSwitch === \"Switch2\")) {\n    if (!roboProperties[serialNumber]) {\n        roboProperties[serialNumber] = {\n            \"switch1TimeON\": null,\n            \"switch2TimeON\": null,\n            \"startCycleA\": false,\n            \"startCycleB\": false,\n            \"dateStartProduction\": null,\n            \"dateLastProduction\": null,\n            \"ciclos\": 0,\n            \"unit\": null,\n            \"status\": null\n        }\n    }\n}\nflow.set('roboProperties', roboProperties);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3010,
        "y": 880,
        "wires": [
            [
                "432721d1ec21e6e6"
            ]
        ],
        "icon": "font-awesome/fa-save"
    },
    {
        "id": "08138296525c96b2",
        "type": "function",
        "z": "dea5fa223d05d26c",
        "name": "verify startCycle",
        "func": "let roboProperties = flow.get('roboProperties');\nlet currentTimestamp = new Date();\n\nObject.keys(roboProperties).forEach(key => {\n    if ((roboProperties[key].switch1TimeON) && (!roboProperties[key].startCycleA && !roboProperties[key].startCycleB)) {\n        let activeTime = (currentTimestamp.getTime() - roboProperties[key].switch1TimeON.getTime()) / 1000;\n        if (activeTime >= 5) {\n            roboProperties[key].startCycleA = true;\n            roboProperties[key].dateStartProduction = currentTimestamp;\n        }\n    }\n    else if ((roboProperties[key].switch2TimeON) && (!roboProperties[key].startCycleA && !roboProperties[key].startCycleB)) {\n        let activeTime = (currentTimestamp.getTime() - roboProperties[key].switch2TimeON.getTime()) / 1000;\n        if (activeTime >= 5) {\n            roboProperties[key].startCycleB = true;\n            roboProperties[key].dateStartProduction = currentTimestamp;\n        }\n    }\n});\nflow.set('roboProperties', roboProperties);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3440,
        "y": 880,
        "wires": [
            [
                "838c67fed3f61cc8"
            ]
        ],
        "icon": "font-awesome/fa-circle-o-notch"
    },
    {
        "id": "2717e7a736766b1f",
        "type": "function",
        "z": "dea5fa223d05d26c",
        "name": "Update status  machine",
        "func": "let roboProperties = flow.get('roboProperties');\nlet currentTimestamp = new Date();\nlet messages = [];\n\nif (roboProperties) {\n    Object.keys(roboProperties).forEach(key => {\n        if (roboProperties[key].hasOwnProperty('dateStartProduction') && roboProperties[key].hasOwnProperty('dateLastProduction')) {\n\n        let dateStartProduction = roboProperties[key]['dateStartProduction'];\n        let dateLastProduction = roboProperties[key]['dateLastProduction'];\n        let oldState = roboProperties[key]['status'];\n\n        let differenceCurrentProduction = dateStartProduction ? (currentTimestamp.getTime() - dateStartProduction.getTime()) / 1000 : null;\n        let differenceLastProduction = dateLastProduction ? (currentTimestamp.getTime() - dateLastProduction.getTime()) / 1000 : null;\n\n        const isWorking = (dateStartProduction !== null && differenceCurrentProduction <= 2399) ||\n        (dateStartProduction === null && differenceLastProduction <= 299 && differenceLastProduction !== null);\n\n        const isStopped = (dateStartProduction === null && differenceLastProduction >= 300 && differenceLastProduction <= 1799) ||\n        (dateStartProduction !== null && differenceCurrentProduction >= 2400 && differenceCurrentProduction <= 3599);\n\n        const isTurnedOff = ((dateStartProduction === null && dateLastProduction === null) ||\n        (dateStartProduction === null && differenceLastProduction >= 1800) || (differenceCurrentProduction >= 3600));\n\n        const newState = isWorking ? \"TRABALHANDO\" : isStopped ? \"PARADO\" : isTurnedOff ? \"DESLIGADO\" : null;\n\n        if (newState !== null && oldState !== newState) {\n            roboProperties[key]['status'] = newState;\n\n            messages.push(({\n                serialNumber: key,\n                currentStatus: newState\n            }));\n        }\n\n        }\n    });\n    flow.set('roboProperties', roboProperties);\n\n    messages.forEach(msg => {\n        node.send(({ payload: msg}));\n    \n        return msg;\n    })\n}\nnode.warn(roboProperties);",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3840,
        "y": 880,
        "wires": [
            [
                "767ea731ba4fb8ca"
            ]
        ],
        "icon": "font-awesome/fa-exchange"
    },
    {
        "id": "ad38790dd8b128c2",
        "type": "function",
        "z": "dea5fa223d05d26c",
        "name": "Get count (Ciclos)",
        "func": "let serialNumber = msg.payload.serialNumber;\nlet roboProperties = flow.get('roboProperties');\n\nif (roboProperties) {\n    if (roboProperties[serialNumber] && roboProperties[serialNumber].unit !== null) {\n        let unit = roboProperties[serialNumber].unit;\n\n        msg.payload = {\n            timestamp: new Date().getTime(),\n            deviceSerialNumber: serialNumber,\n            unit: unit,\n            count: 1\n        }\n        roboProperties[serialNumber].unit = null;\n        flow.set('roboProperties', roboProperties);\n        return msg;\n    }\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4070,
        "y": 840,
        "wires": [
            []
        ],
        "icon": "font-awesome/fa-plus"
    },
    {
        "id": "767ea731ba4fb8ca",
        "type": "function",
        "z": "dea5fa223d05d26c",
        "name": "Get changed status (R√îBO)",
        "func": "let { serialNumber, currentStatus } = msg.payload;\nlet timestamp = new Date().getTime();\n\nif (serialNumber && currentStatus !== null) {\n    msg.payload = {\n        timestamp: timestamp,\n        deviceSerialNumber: serialNumber,\n        status: currentStatus,\n    }\n    return msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4100,
        "y": 880,
        "wires": [
            []
        ],
        "icon": "node-red/status.svg"
    },
    {
        "id": "f906debde74b4d69",
        "type": "inject",
        "z": "dea5fa223d05d26c",
        "name": "SWITCH1 ON",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "ABC124",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch1\": {\"Action\": \"ON\"} }",
        "payloadType": "json",
        "x": 130,
        "y": 3360,
        "wires": [
            [
                "576b415e671370c6"
            ]
        ]
    },
    {
        "id": "7e6a2f7e91d84b28",
        "type": "inject",
        "z": "dea5fa223d05d26c",
        "name": "SWITCH1 OFF",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "ABC124",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch1\": {\"Action\": \"OFF\"} }",
        "payloadType": "json",
        "x": 140,
        "y": 3400,
        "wires": [
            [
                "576b415e671370c6"
            ]
        ]
    },
    {
        "id": "4eade3de7addf49d",
        "type": "inject",
        "z": "dea5fa223d05d26c",
        "name": "STATUS8",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "ABC124",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"StatusSNS\":{\"Switch1\":\"ON\"}}",
        "payloadType": "json",
        "x": 120,
        "y": 3440,
        "wires": [
            [
                "576b415e671370c6",
                "e2b717b5ffe56abc"
            ]
        ]
    },
    {
        "id": "c03c1841dc9f81e1",
        "type": "inject",
        "z": "dea5fa223d05d26c",
        "name": "STATUS8",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "ABC124",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"StatusSNS\": {  \"Switch1\": \"OFF\" } }",
        "payloadType": "json",
        "x": 120,
        "y": 3480,
        "wires": [
            [
                "576b415e671370c6"
            ]
        ]
    },
    {
        "id": "e2b717b5ffe56abc",
        "type": "debug",
        "z": "dea5fa223d05d26c",
        "name": "debug 309",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 470,
        "y": 3420,
        "wires": []
    },
    {
        "id": "430f7420efb26463",
        "type": "inject",
        "z": "dea5fa223d05d26c",
        "name": "SWITCH1 ON",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "EFG123",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch1\": {\"Action\": \"ON\"} }",
        "payloadType": "json",
        "x": 2410,
        "y": 400,
        "wires": [
            [
                "1684cb865b5269a1"
            ]
        ]
    },
    {
        "id": "879f6f7749f65291",
        "type": "inject",
        "z": "dea5fa223d05d26c",
        "name": "SWITCH1 OFF",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "EFG123",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch1\": {\"Action\": \"OFF\"} }",
        "payloadType": "json",
        "x": 2420,
        "y": 440,
        "wires": [
            [
                "1684cb865b5269a1"
            ]
        ]
    },
    {
        "id": "36a34f59abd4129b",
        "type": "inject",
        "z": "dea5fa223d05d26c",
        "name": "SWITCH2 ON",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "EFG123",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch2\": {\"Action\": \"ON\"} }",
        "payloadType": "json",
        "x": 2410,
        "y": 600,
        "wires": [
            [
                "1684cb865b5269a1"
            ]
        ]
    },
    {
        "id": "aa6e802004387790",
        "type": "inject",
        "z": "dea5fa223d05d26c",
        "name": "SWITCH2 OFF",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "EFG123",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch2\": {\"Action\": \"OFF\"} }",
        "payloadType": "json",
        "x": 2420,
        "y": 640,
        "wires": [
            [
                "1684cb865b5269a1"
            ]
        ]
    },
    {
        "id": "8558cafa2c8e9695",
        "type": "inject",
        "z": "dea5fa223d05d26c",
        "name": "STATUS8",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "EFG123",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"StatusSNS\": {  \"Switch1\": \"ON\" } }",
        "payloadType": "json",
        "x": 2400,
        "y": 480,
        "wires": [
            [
                "1684cb865b5269a1"
            ]
        ]
    },
    {
        "id": "5d68f87932c4ba8b",
        "type": "inject",
        "z": "dea5fa223d05d26c",
        "name": "STATUS8",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "EFG123",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"StatusSNS\": {  \"Switch1\": \"OFF\" } }",
        "payloadType": "json",
        "x": 2400,
        "y": 520,
        "wires": [
            [
                "1684cb865b5269a1"
            ]
        ]
    },
    {
        "id": "432721d1ec21e6e6",
        "type": "function",
        "z": "dea5fa223d05d26c",
        "name": "Time SWITCH \"ON\"",
        "func": "let roboProperties = flow.get('roboProperties');\nlet serialNumber = msg.payload.serialNumber;\nlet currentTimestamp = new Date();\nlet getSwitch = Object.keys(msg.payload).find(key => key.startsWith('Switch'));\nlet actionValue = msg.payload[getSwitch]?.Action;\n\n// Atualiza as propriedades do rob√¥ com base no switch e a√ß√£o\nif (getSwitch === \"Switch1\") {\n    roboProperties[serialNumber].switch1TimeON = (actionValue === \"ON\") ? currentTimestamp : null;\n} else if (getSwitch === \"Switch2\") {\n    roboProperties[serialNumber].switch2TimeON = (actionValue === \"ON\") ? currentTimestamp : null;\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3220,
        "y": 880,
        "wires": [
            [
                "08138296525c96b2"
            ]
        ],
        "icon": "node-red/timer.svg"
    },
    {
        "id": "f1d95ce8ebfa5d16",
        "type": "inject",
        "z": "dea5fa223d05d26c",
        "name": "Verify SW",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 3260,
        "y": 840,
        "wires": [
            [
                "08138296525c96b2"
            ]
        ]
    },
    {
        "id": "838c67fed3f61cc8",
        "type": "function",
        "z": "dea5fa223d05d26c",
        "name": "Finished cycle",
        "func": "let roboProperties = flow.get('roboProperties')\nlet serialNumber = msg.payload.serialNumber;\nlet currentTimestamp = new Date();\nlet switchKey = Object.keys(msg.payload).find(key => key.startsWith('Switch'));\nlet actionValue = msg.payload[switchKey] ? msg.payload[switchKey].Action : null;\n\nif (switchKey === \"Switch1\" && actionValue === \"OFF\" && roboProperties[serialNumber].startCycleA) {\n    roboProperties[serialNumber].startCycleA = false;\n    roboProperties[serialNumber].dateLastProduction = currentTimestamp;\n    roboProperties[serialNumber].ciclos += 1;\n    roboProperties[serialNumber].unit = \"Ciclos\";\n}\nelse if (switchKey === \"Switch2\" && actionValue === \"OFF\" && roboProperties[serialNumber].startCycleB) {\n    roboProperties[serialNumber].startCycleB = false;\n    roboProperties[serialNumber].dateLastProduction = currentTimestamp;\n    roboProperties[serialNumber].ciclos += 1;\n    roboProperties[serialNumber].unit = \"Ciclos\";\n}\nnode.warn(roboProperties);\nflow.set('roboProperties', roboProperties);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3620,
        "y": 880,
        "wires": [
            [
                "2717e7a736766b1f",
                "113c2e821c4a54fc"
            ]
        ],
        "icon": "font-awesome/fa-bars"
    },
    {
        "id": "61dbada2af1654d1",
        "type": "inject",
        "z": "dea5fa223d05d26c",
        "name": "SWITCH1 ON",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "ABC123",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch1\": {\"Action\": \"ON\"} }",
        "payloadType": "json",
        "x": 2370,
        "y": 1080,
        "wires": [
            [
                "86726cbc5ca15d08"
            ]
        ]
    },
    {
        "id": "e83263a0faaa2dda",
        "type": "inject",
        "z": "dea5fa223d05d26c",
        "name": "SWITCH1 OFF",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "ABC123",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch1\": {\"Action\": \"OFF\"} }",
        "payloadType": "json",
        "x": 2380,
        "y": 1120,
        "wires": [
            [
                "86726cbc5ca15d08"
            ]
        ]
    },
    {
        "id": "a4989e478ecf60e4",
        "type": "inject",
        "z": "dea5fa223d05d26c",
        "name": "SWITCH2 ON",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "ABC123",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch2\": {\"Action\": \"ON\"} }",
        "payloadType": "json",
        "x": 2370,
        "y": 1200,
        "wires": [
            [
                "86726cbc5ca15d08"
            ]
        ]
    },
    {
        "id": "e18b95fd0e090235",
        "type": "inject",
        "z": "dea5fa223d05d26c",
        "name": "SWITCH2 OFF",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "ABC123",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch2\": {\"Action\": \"OFF\"} }",
        "payloadType": "json",
        "x": 2380,
        "y": 1240,
        "wires": [
            [
                "86726cbc5ca15d08"
            ]
        ]
    },
    {
        "id": "cf61d9bba3753ba0",
        "type": "inject",
        "z": "dea5fa223d05d26c",
        "name": "SWITCH3 ON",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "ABC123",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch3\": {\"Action\": \"ON\"} }",
        "payloadType": "json",
        "x": 2370,
        "y": 1320,
        "wires": [
            [
                "86726cbc5ca15d08"
            ]
        ]
    },
    {
        "id": "142246969433ddb2",
        "type": "inject",
        "z": "dea5fa223d05d26c",
        "name": "SWITCH3 OFF",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "ABC123",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch3\": {\"Action\": \"OFF\"} }",
        "payloadType": "json",
        "x": 2380,
        "y": 1360,
        "wires": [
            [
                "86726cbc5ca15d08"
            ]
        ]
    },
    {
        "id": "86726cbc5ca15d08",
        "type": "switch",
        "z": "dea5fa223d05d26c",
        "name": "Machines",
        "property": "payload.serialNumber",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "DF1877",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 2600,
        "y": 1220,
        "wires": [
            [
                "0784f8866cce33aa"
            ]
        ]
    },
    {
        "id": "0784f8866cce33aa",
        "type": "switch",
        "z": "dea5fa223d05d26c",
        "name": "Option SW",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "hask",
                "v": "Switch1",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "Switch2",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "Switch3",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 2750,
        "y": 1220,
        "wires": [
            [
                "ff0e15c10ded940c"
            ],
            [
                "ff0e15c10ded940c"
            ],
            [
                "ff0e15c10ded940c"
            ]
        ]
    },
    {
        "id": "ff0e15c10ded940c",
        "type": "function",
        "z": "dea5fa223d05d26c",
        "name": "Fiber 3 Object main",
        "func": "let fiberProperties = flow.get('fiberProperties') || {};\nlet serialNumber = msg.payload.serialNumber;\nlet getSwitch = Object.keys(msg.payload).find(key => key.startsWith('Switch')) || null;\n\nif (getSwitch !== null) {\n    if (!fiberProperties[serialNumber]) {\n        fiberProperties[serialNumber] = {\n            \"startLaser\": false,\n            \"finishedLaser\": false,\n            \"breakStart\": false,\n            \"breakFinished\": false,\n            \"startCollision\": false,\n            \"finishedCollision\": false,\n            \"existsCutPlan\": false,\n            \"dateStartProduction\": null,\n            \"dateLastProduction\": null,\n            \"plateSteel\": 0,\n            \"collisionCount\": 0,\n            \"unit\": null,\n            \"status\": null,\n            \"timeDurationLastPlanCut\": 0,\n        }\n    }\n}\nflow.set('fiberProperties', fiberProperties);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2950,
        "y": 1220,
        "wires": [
            [
                "7318ef034aa78846"
            ]
        ],
        "icon": "font-awesome/fa-save"
    },
    {
        "id": "7318ef034aa78846",
        "type": "function",
        "z": "dea5fa223d05d26c",
        "name": "Handle switches",
        "func": "let handleSwitch = function(payload, context, machineProperties, switchName, startName, finishName) {\n    let switchKey = Object.keys(payload).find(key => key.startsWith(switchName));\n    let switchState = context.get(switchName) || null;\n    let actionValue = payload[switchKey] ? payload[switchKey].Action : null;\n    let startState = machineProperties[startName] || false;\n    let finishState = machineProperties[finishName] || false;\n\n    switchState = actionValue || switchState; // adquire o estado do switch que chegou\n\n    if (switchState === \"ON\") {\n        startState = true;\n        finishState = false;\n    \n    }else if (switchState === \"OFF\" && startState) {\n        finishState = true;\n        startState = false;\n    }\n    machineProperties[startName] = startState;\n    machineProperties[finishName] = finishState;\n    return {\n        switchState: switchState,\n        startState: startState,\n        finishState: finishState,\n    };\n}\nlet payload = msg.payload;\nlet serialNumber = msg.payload.serialNumber;\nlet fiberProperties = flow.get('fiberProperties') || {};\nlet machineProperties = fiberProperties[serialNumber] || {};\n\nlet laser = handleSwitch(payload, context, machineProperties, 'Switch1', 'startLaser', 'finishedLaser');\nlet breakEngine = handleSwitch(payload, context, machineProperties, 'Switch2', 'breakStart', 'breakFinished');\nlet collisionPart = handleSwitch(payload, context, machineProperties, 'Switch3', 'startCollision', 'finishedCollision');\n\nflow.set('fiberProperties', fiberProperties);\nfiberProperties[serialNumber].startLaser = laser.startState;\nfiberProperties[serialNumber].finishedLaser = laser.finishState;\nfiberProperties[serialNumber].breakStart = breakEngine.startState;\nfiberProperties[serialNumber].breakFinished = breakEngine.finishState;\nfiberProperties[serialNumber].startCollision = collisionPart.startState;\nfiberProperties[serialNumber].finishedCollision = collisionPart.finishState;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3160,
        "y": 1220,
        "wires": [
            [
                "3c228b727d8f88ab"
            ]
        ],
        "icon": "font-awesome/fa-clone"
    },
    {
        "id": "3c228b727d8f88ab",
        "type": "function",
        "z": "dea5fa223d05d26c",
        "name": "Machine conditions",
        "func": "let fiberProperties = flow.get('fiberProperties') || {};\nlet serialNumber = msg.payload.serialNumber;\nlet currentTimestamp = new Date();\n\nif (fiberProperties && fiberProperties[serialNumber]) {\n    if (fiberProperties[serialNumber].startLaser && !fiberProperties[serialNumber].existsCutPlan) {\n        \n        fiberProperties[serialNumber].existsCutPlan = true;\n        fiberProperties[serialNumber].dateStartProduction = currentTimestamp;\n    \n    } else if (fiberProperties[serialNumber].finishedLaser && fiberProperties[serialNumber].breakStart && \n    fiberProperties[serialNumber].existsCutPlan) {\n        fiberProperties[serialNumber].existsCutPlan = false;\n        fiberProperties[serialNumber].plateSteel += 1;\n        fiberProperties[serialNumber].unit = \"Chapas\";\n        fiberProperties[serialNumber].timeDurationLastPlanCut = (currentTimestamp.getTime() - \n        fiberProperties[serialNumber].dateStartProduction.getTime()) / 1000;\n        fiberProperties[serialNumber].dateStartProduction = null;\n        fiberProperties[serialNumber].dateLastProduction = currentTimestamp;\n    }\n\n    if (fiberProperties[serialNumber].startCollision) {\n        fiberProperties[serialNumber].collisionCount += 1;\n    }\n}\nflow.set('fiberProperties', fiberProperties);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3370,
        "y": 1220,
        "wires": [
            [
                "efd5881f78b9233c",
                "0c6de030f2145a78"
            ]
        ],
        "icon": "font-awesome/fa-bars"
    },
    {
        "id": "efd5881f78b9233c",
        "type": "function",
        "z": "dea5fa223d05d26c",
        "name": "Update status Machine",
        "func": "let fiberProperties = flow.get('fiberProperties') || {};\nlet currentTimestamp = new Date();\nlet messages = [];\n\nif (fiberProperties) {\n    Object.keys(fiberProperties).forEach(key => {\n        if (fiberProperties[key].hasOwnProperty('dateStartProduction') && fiberProperties[key].hasOwnProperty('dateLastProduction')) {\n            let dateStartProduction = fiberProperties[key]['dateStartProduction'];\n            let dateLastProduction = fiberProperties[key]['dateLastProduction'];\n            let oldState = fiberProperties[key]['status'];\n\n            let differenceStartProduction = dateStartProduction ? (currentTimestamp.getTime() - dateStartProduction.getTime()) / 1000 : null;\n            let differenceLastProduction = dateLastProduction ? (currentTimestamp.getTime() - dateLastProduction.getTime()) / 1000 : null;\n\n            const isWorking = (dateStartProduction !== null && differenceStartProduction <= 10799) ||\n            (dateStartProduction === null && differenceLastProduction <= 299 && differenceLastProduction !== null);\n\n            const isStopped = (dateStartProduction === null && differenceLastProduction >= 300 && differenceLastProduction <= 1799);\n\n            const isTurnedOff = ((dateStartProduction === null && dateLastProduction === null) ||\n            (dateStartProduction === null && differenceLastProduction >= 1800) || (differenceStartProduction >= 10800));\n\n            const newState = isWorking ? \"TRABALHANDO\" : isStopped ? \"PARADO\" : isTurnedOff ? \"DESLIGADO\" : null;\n\n            if (newState !== null && oldState !== newState) {\n                fiberProperties[key]['status'] = newState;\n\n                messages.push(({\n                    serialNumber: key,\n                    currentStatus: newState\n                }));\n            }\n        }\n    });\nflow.set('fiberProperties', fiberProperties);\n\nmessages.forEach(msg => {\n    node.send(({ payload: msg}));\n\n    return msg;\n});\n}\nnode.warn(fiberProperties);",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3680,
        "y": 1260,
        "wires": [
            [
                "a48951fc405ba177"
            ]
        ],
        "icon": "font-awesome/fa-exchange"
    },
    {
        "id": "96f0ec3af8fbf1d6",
        "type": "function",
        "z": "dea5fa223d05d26c",
        "name": "Get count (Chapas)",
        "func": "let serialNumber = msg.payload.serialNumber;\nlet fiberProperties = flow.get('fiberProperties') || {};\n\nif (fiberProperties) {\n    if (fiberProperties[serialNumber] && fiberProperties[serialNumber].unit !== null) {\n        let unit = fiberProperties[serialNumber].unit;\n\n        msg.payload = {\n            timestamp: new Date().getTime(),\n            deviceSerialNumber: serialNumber,\n            unit: unit,\n            count: 1\n        }\n        fiberProperties[serialNumber].unit = null;\n        flow.set('fiberProperties', fiberProperties);\n        return msg;\n    }\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3970,
        "y": 1200,
        "wires": [
            []
        ],
        "icon": "font-awesome/fa-plus"
    },
    {
        "id": "a48951fc405ba177",
        "type": "function",
        "z": "dea5fa223d05d26c",
        "name": "Get changed status (CHAPAS)",
        "func": "let {serialNumber, currentStatus } = msg.payload;\nlet timestamp = new Date().getTime();\n\nif (serialNumber && currentStatus !== null) {\n    msg.payload = {\n        timestamp: timestamp,\n        deviceSerialNumber: serialNumber,\n        status: currentStatus,\n    }\n    return msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4010,
        "y": 1260,
        "wires": [
            []
        ],
        "icon": "node-red/status.svg"
    },
    {
        "id": "8f23f11fcf0397a7",
        "type": "debug",
        "z": "dea5fa223d05d26c",
        "name": "debug 322",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1490,
        "y": 2860,
        "wires": []
    },
    {
        "id": "627b8d658b1c21bc",
        "type": "inject",
        "z": "dea5fa223d05d26c",
        "name": "TIMESTAMP (STATUS)",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "switches",
                "v": "{}",
                "vt": "json"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 780,
        "y": 2660,
        "wires": [
            [
                "77df497381bca203"
            ]
        ],
        "icon": "font-awesome/fa-hourglass-1"
    },
    {
        "id": "581f6b75e52183b8",
        "type": "inject",
        "z": "e5f4d5044aacbfd5",
        "name": "SWITCH1 ON",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF5058",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch1\": {\"Action\": \"ON\"} }",
        "payloadType": "json",
        "x": 210,
        "y": 80,
        "wires": [
            [
                "5551c8c9243cce53"
            ]
        ]
    },
    {
        "id": "a50aa3cb8dc3748c",
        "type": "inject",
        "z": "e5f4d5044aacbfd5",
        "name": "SWITCH1 OFF",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF5058",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch1\": {\"Action\": \"OFF\"} }",
        "payloadType": "json",
        "x": 220,
        "y": 120,
        "wires": [
            [
                "5551c8c9243cce53"
            ]
        ]
    },
    {
        "id": "5ccf644bb654215a",
        "type": "inject",
        "z": "e5f4d5044aacbfd5",
        "name": "SWITCH2 ON",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF5058",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch2\": {\"Action\": \"ON\"} }",
        "payloadType": "json",
        "x": 270,
        "y": 380,
        "wires": [
            [
                "5551c8c9243cce53"
            ]
        ]
    },
    {
        "id": "666b75d2e4016f46",
        "type": "inject",
        "z": "e5f4d5044aacbfd5",
        "name": "SWITCH2 OFF",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF5058",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch2\": {\"Action\": \"OFF\"} }",
        "payloadType": "json",
        "x": 280,
        "y": 420,
        "wires": [
            [
                "5551c8c9243cce53"
            ]
        ]
    },
    {
        "id": "5551c8c9243cce53",
        "type": "switch",
        "z": "e5f4d5044aacbfd5",
        "name": "MACHINES",
        "property": "payload.serialNumber",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "DF5058",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 450,
        "y": 140,
        "wires": [
            [
                "01a457860115ce57"
            ]
        ],
        "icon": "font-awesome/fa-desktop"
    },
    {
        "id": "01a457860115ce57",
        "type": "function",
        "z": "e5f4d5044aacbfd5",
        "name": "Switch State",
        "func": "function handleSwitch(payload, context, switchName, statusSNSName, startName, finishName, verifyName) {\n    let switchKey = Object.keys(payload).find(key => key.startsWith(switchName)) // extrai o switch que chegou no payload\n    let switchState = context.get(switchName) || null;\n    let actionValue = payload[switchKey] ? payload[switchKey].Action : null; // extrai o estado do switch que chegou\n    let statusSNS = payload[statusSNSName] && payload[statusSNSName][switchName];\n    let startState = context.get(startName) || false;\n    let finishState = context.get(finishName) || false;\n    let verifyState = context.get(verifyName) || false;\n\n    switchState = actionValue || statusSNS || switchState; // adquiri o estado do switch que chegou\n\n    if (switchState == \"ON\" ) { // Condi√ß√£o que caracteriza o in√≠cio da produ√ß√£o da pe√ßa\n        startState = true;\n    }\n    else if (switchState == \"OFF\" && startState === true) { // condi√ß√£o que caracteriza o final da produ√ß√£o da pe√ßa\n        finishState = true;\n    }\n\n    if (startState && finishState) { // reseta o in√≠cio o fim da produ√ß√£o quando a pe√ßa √© produzida\n        startState = false;\n        finishState = false;\n        verifyState = true;\n\n    }\n    context.set(switchName, switchState);\n    context.set(startName, startState);\n    context.set(finishName, finishState);\n    context.set(verifyName, verifyState);\n\n    return {\n        switchState: switchState,\n        startState: startState,\n        finishState: finishState,\n        verifyState: verifyState\n    };\n}\nlet payload = msg.payload;\nlet funnilState = handleSwitch(payload, context, 'Switch1','StatusSNS', 'closeFunnil', 'openFunnil', 'funnelVerify');\nlet funnelValvule = handleSwitch(payload, context, 'Switch2','StatusSNS','startPart', 'finishPart', 'verifyPart');\n\nmsg.switches = {\n    switch1: funnilState.switchState,\n    swich2: funnelValvule.switchState,\n    closeFunnil: funnilState.startState,\n    openFunnil: funnilState.verifyState,\n    startPart: funnelValvule.startState,\n    finishPart: funnelValvule.verifyState\n}\n\nif  (funnilState.verifyState === true && funnelValvule.verifyState === true) {\n\n    funnilState.verifyState = false;\n    context.set('funnelVerify', funnilState.verifyState);\n}\n\nfunnelValvule.verifyState = false;\ncontext.set('verifyPart', funnelValvule.verifyState);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 140,
        "wires": [
            [
                "76b3749bf84a965f"
            ]
        ],
        "icon": "node-red/swap.svg"
    },
    {
        "id": "76b3749bf84a965f",
        "type": "function",
        "z": "e5f4d5044aacbfd5",
        "name": "Conditions Machine",
        "func": "let {closeFunnil, openFunnil, startPart, finishPart } = msg.switches;\nlet startProduction = context.get('startProduction') || false;\nlet finishProduction = context.get('finishProduction') || false;\n\nif (openFunnil && startPart) {\n    startProduction = true;\n}\nelse if (openFunnil && startProduction && finishPart) {\n    finishProduction = true;\n}\ncontext.set('startProduction', startProduction);\ncontext.set('finishProduction', finishProduction);\n\nmsg.conditions = {\n    startPart: startProduction,\n    finishPart: finishProduction,\n    serialNumber: msg.payload.serialNumber\n}\n\nif (finishProduction) {\n    startProduction = false;\n    finishProduction = false;\n    context.set('startProduction', startProduction);\n    context.set('finishProduction', finishProduction);\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 140,
        "wires": [
            [
                "a6396174f1abda5b"
            ]
        ],
        "icon": "font-awesome/fa-bars"
    },
    {
        "id": "a6396174f1abda5b",
        "type": "function",
        "z": "e5f4d5044aacbfd5",
        "name": "Production Machine",
        "func": "let {startPart, finishPart, serialNumber } = msg.conditions;\nlet [machine, startProduction, lastProduction] = ['machine', 'startProduction', 'lastProduction'].map(key => context.get(key) || null);\nlet bagsCount = context.get('bagsCount') || 0;\nlet resetShift = context.get('resetShift') || false;\nlet currentTimestamp = new Date();\n\nconst actions = {\n    resetShift: () => {bagsCount = 0; resetShift = false; },\n    payloadReset: () => {resetShift = true; },\n    startProduction: () => {startProduction = currentTimestamp; },\n    finishedProduction: () => {lastProduction = currentTimestamp, bagsCount++; },\n    machineNull: () => { machine = serialNumber; }\n};\n\nconst conditions = {\n    resetShift: resetShift,\n    payloadReset: msg.payload === 'reset',\n    startProduction: startPart === true,\n    finishedProduction: finishPart === true,\n    machineNull: (serialNumber && machine === null) || (serialNumber && machine !== null && machine !== serialNumber)\n}\n\nObject.entries(conditions).forEach(([condition, isTrue]) => {\n    if (isTrue && actions[condition]) actions[condition]();\n});\ncontext.set('bagsCount', bagsCount);\ncontext.set('resetShift', resetShift);\ncontext.set('startProduction', startProduction);\ncontext.set('lastProduction', lastProduction);\ncontext.set('machine', machine);\n\nmsg.data = {\n    verifyBag: finishPart,\n    bags: bagsCount,\n    dateStartProduction: startProduction,\n    dateLastProduction: lastProduction,\n    reset: resetShift,\n    machine: machine,\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1080,
        "y": 140,
        "wires": [
            [
                "a26470efd91edad7",
                "4a12254d287e92ab"
            ]
        ],
        "icon": "font-awesome/fa-book"
    },
    {
        "id": "a26470efd91edad7",
        "type": "function",
        "z": "e5f4d5044aacbfd5",
        "name": "MAQ 01",
        "func": "let {verifyBag, bags, machine } = msg.data;\n\nmsg.payload = {\n    verifyBag: verifyBag,\n    bags: bags,\n    deviceSerialNumber: machine\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1320,
        "y": 100,
        "wires": [
            [
                "ba2f836ee962c656"
            ]
        ],
        "icon": "font-awesome/fa-cogs"
    },
    {
        "id": "4a12254d287e92ab",
        "type": "function",
        "z": "e5f4d5044aacbfd5",
        "name": "verifyStatus",
        "func": "let { dateStartProduction, dateLastProduction, machine } = msg.data;\nlet [differenceTimeStartProduction, differenceTimeLastProducion] = ['dateStartProduction', 'differenceTimeLastProducion'].map(key =>\n    context.get(key) || 0);\nlet currentTimestamp = new Date();\nlet currentStatus = context.get('currentStatus');\n\ndifferenceTimeStartProduction = dateStartProduction !== null ? (currentTimestamp.getTime() - dateStartProduction.getTime()) / 1000 : null;\ndifferenceTimeLastProducion = dateLastProduction !== null ? (currentTimestamp.getTime() - dateLastProduction.getTime()) / 1000 : null;\n\ncontext.set('differenceTimeLastProducion', differenceTimeStartProduction);\ncontext.set('differenceTimeLastProducion', differenceTimeLastProducion);\n\nif (dateStartProduction !== null) {\n\n    //Mapear status\n    const machineWorking = (differenceTimeStartProduction <= 1199 && dateStartProduction !== null)\n        || (differenceTimeLastProducion !== null && differenceTimeLastProducion <= 1199);\n\n    const machineIdle = (differenceTimeStartProduction >= 1200 && differenceTimeLastProducion >= 1200 && differenceTimeLastProducion <= 2399) ||\n        (differenceTimeStartProduction >= 1200 && differenceTimeStartProduction <= 2399 && dateLastProduction === null);\n\n    const machineOff = ((differenceTimeStartProduction >= 1200 && differenceTimeLastProducion >= 2400)\n        || differenceTimeStartProduction >= 2400 && dateLastProduction === null);\n\n    const newStatus = machineWorking ? 'TRABALHANDO' : machineIdle ? 'PARADO' : machineOff ? 'DESLIGADO' : null;\n    if (newStatus) currentStatus = newStatus;\n}\n\nif (dateStartProduction === null) currentStatus = \"DESLIGADO\";\n\ncontext.set('currentStatus', currentStatus);\n\nmsg.status = {\n    timeCurrentProduction: differenceTimeStartProduction,\n    timeLastProduction: differenceTimeLastProducion,\n    machine: machine,\n    currentStatus: currentStatus\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1330,
        "y": 140,
        "wires": [
            [
                "f2a0c8830a6e11e2"
            ]
        ],
        "icon": "node-red/status.svg"
    },
    {
        "id": "f2a0c8830a6e11e2",
        "type": "function",
        "z": "e5f4d5044aacbfd5",
        "name": "FormatedMessage",
        "func": "let machine = msg.status.machine;\nlet timestamp = new Date().getTime();\nlet currentStatus = context.get('currentStatus') || null; \nlet oldStatus = msg.status.currentStatus;\n\nif(!currentStatus || currentStatus !== oldStatus) {\n    currentStatus = oldStatus;\n    context.set('currentStatus', currentStatus);\n\n    msg.payload = {\n            timestamp: timestamp,\n            deviceSerialNumber: machine,\n            status: currentStatus\n    }\n    return msg;\n}\nreturn null;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1550,
        "y": 140,
        "wires": [
            []
        ],
        "icon": "font-awesome/fa-envelope"
    },
    {
        "id": "b00c1bb7d2aa5f22",
        "type": "debug",
        "z": "e5f4d5044aacbfd5",
        "name": "debug 298",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1330,
        "y": 300,
        "wires": []
    },
    {
        "id": "d2dd08475b051cfd",
        "type": "catch",
        "z": "e5f4d5044aacbfd5",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 640,
        "y": 520,
        "wires": [
            [
                "e9f10c0f76d45beb"
            ]
        ]
    },
    {
        "id": "e9f10c0f76d45beb",
        "type": "debug",
        "z": "e5f4d5044aacbfd5",
        "name": "debug 299",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 830,
        "y": 380,
        "wires": []
    },
    {
        "id": "96e8caf9ab1dd76e",
        "type": "inject",
        "z": "e5f4d5044aacbfd5",
        "name": "STATUS8",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF5058",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"StatusSNS\": {  \"Switch1\": \"ON\" } }",
        "payloadType": "json",
        "x": 200,
        "y": 160,
        "wires": [
            [
                "5551c8c9243cce53"
            ]
        ]
    },
    {
        "id": "a8c355aa86182ec3",
        "type": "inject",
        "z": "e5f4d5044aacbfd5",
        "name": "STATUS8",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF5058",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"StatusSNS\": {  \"Switch1\": \"OFF\" } }",
        "payloadType": "json",
        "x": 200,
        "y": 200,
        "wires": [
            [
                "5551c8c9243cce53"
            ]
        ]
    },
    {
        "id": "ba2f836ee962c656",
        "type": "function",
        "z": "e5f4d5044aacbfd5",
        "name": "Increment (SACOS 25KG)",
        "func": "let { verifyBag, deviceSerialNumber } = msg.payload;\nlet unit = context.get('unit') || null;\nlet count = context.get('count') || 0;\nlet currentTimestamp = new Date();\n\nif (verifyBag === true) {\n    unit = \"Sacos 25kg\";\n    count = 1;\n    context.set('unit', unit);\n    context.set('count', count);\n\n    msg.payload = {\n        timestamp: currentTimestamp.getTime(),\n        deviceSerialNumber: deviceSerialNumber,\n        unit: unit,\n        count: count,\n    }\n    return msg;\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1580,
        "y": 100,
        "wires": [
            [
                "b00c1bb7d2aa5f22"
            ]
        ],
        "icon": "node-red/arrow-in.svg"
    },
    {
        "id": "1a07eaf470d99ecd",
        "type": "inject",
        "z": "1aa85fb228e5b40e",
        "name": "SWITCH1 ON",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "ABC123",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch1\":{\"Action\":\"ON\"}}",
        "payloadType": "json",
        "x": 170,
        "y": 80,
        "wires": [
            [
                "0e9d59392bd2ed1d"
            ]
        ]
    },
    {
        "id": "6e3956c9b6658346",
        "type": "inject",
        "z": "1aa85fb228e5b40e",
        "name": "SWITCH1 OFF",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "ABC123",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch1\":{\"Action\":\"OFF\"}}",
        "payloadType": "json",
        "x": 180,
        "y": 120,
        "wires": [
            [
                "0e9d59392bd2ed1d"
            ]
        ]
    },
    {
        "id": "3df9f53c39d21ca1",
        "type": "inject",
        "z": "1aa85fb228e5b40e",
        "name": "STATUS8 SW1- ON",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "ABC123",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"StatusSNS\":{\"Switch1\":\"ON\"}}",
        "payloadType": "json",
        "x": 190,
        "y": 160,
        "wires": [
            [
                "0e9d59392bd2ed1d"
            ]
        ]
    },
    {
        "id": "d1d23f963436f8a7",
        "type": "inject",
        "z": "1aa85fb228e5b40e",
        "name": "STATUS8 SW1- OFF",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "ABC123",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"StatusSNS\":{\"Switch1\":\"OFF\"}}",
        "payloadType": "json",
        "x": 200,
        "y": 200,
        "wires": [
            [
                "0e9d59392bd2ed1d"
            ]
        ]
    },
    {
        "id": "177e8255d498ff55",
        "type": "inject",
        "z": "1aa85fb228e5b40e",
        "name": "SWITCH2 ON",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "ABC123",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch2\":{\"Action\":\"ON\"}}",
        "payloadType": "json",
        "x": 170,
        "y": 280,
        "wires": [
            [
                "0e9d59392bd2ed1d"
            ]
        ]
    },
    {
        "id": "3cc63aed2e064ae5",
        "type": "inject",
        "z": "1aa85fb228e5b40e",
        "name": "SWITCH2 OFF",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "ABC123",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch2\":{\"Action\":\"OFF\"}}",
        "payloadType": "json",
        "x": 180,
        "y": 320,
        "wires": [
            [
                "0e9d59392bd2ed1d"
            ]
        ]
    },
    {
        "id": "ed11795765e8a511",
        "type": "inject",
        "z": "1aa85fb228e5b40e",
        "name": "SWITCH3 ON",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "ABC123",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch3\":{\"Action\":\"ON\"}}",
        "payloadType": "json",
        "x": 170,
        "y": 380,
        "wires": [
            [
                "0e9d59392bd2ed1d"
            ]
        ]
    },
    {
        "id": "46b86aed1408cbeb",
        "type": "inject",
        "z": "1aa85fb228e5b40e",
        "name": "SWITCH3 OFF",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "ABC123",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch3\":{\"Action\":\"OFF\"}}",
        "payloadType": "json",
        "x": 180,
        "y": 420,
        "wires": [
            [
                "0e9d59392bd2ed1d"
            ]
        ]
    },
    {
        "id": "6c0e8eb1160c2de0",
        "type": "function",
        "z": "1aa85fb228e5b40e",
        "name": "Switches state",
        "func": "function handleSwitch(payload, context, switchName, statusSNSName, startName, finishName, verifyName) {\n    let switchKey = Object.keys(payload).find(key => key.startsWith(switchName)); // extrai o switch que chegou no payload\n    let switchState = context.get(switchName) || null;\n    let actionValue = payload[switchKey] ? payload[switchKey].Action : null; // extrai o \"ON-OFF\" do payload\n    let statusSNS = payload[statusSNSName] && payload[statusSNSName][switchName]; \n    let startState = context.get(startName) || false;\n    let finishState = context.get(finishName) || false;\n    let verifyState = context.get(verifyName) || false;\n\n    switchState = actionValue || statusSNS || switchState;\n\n    if (switchState === \"ON\") {\n        startState = true;\n    \n    } else if (switchState == \"OFF\" && startState === true) {\n        finishState = true;\n    }\n\n    if (startState === true && finishState === true) {\n        verifyState = true;\n        startState = false;\n        finishState = false;\n    }\n    context.set(switchName, switchState);\n    context.set(startName, startState);\n    context.set(finishName, finishState);\n    context.set(verifyName, verifyState);\n\n    return {\n        switchState: switchState,\n        startState: startState,\n        finishState: finishState,\n        verifyState: verifyState\n    };\n}\nlet payload = msg.payload;\nlet automaticMode = handleSwitch(payload, context, 'Switch1', 'StatusSNS', 'automaticMode', 'noAutomaticMode', 'verifyAutomaticMode');\nlet openMold = handleSwitch(payload, context, 'Switch2', 'StatusSNS', 'openMold', 'closedMold', 'verifyMold');\nlet injectionMaterial = handleSwitch(payload, context, 'Switch3', 'StatusSNS', 'startInjection', 'finishedInjection', 'verifyInjection');\n\nmsg.switches = {\n    switch1: automaticMode.switchState,\n    switch2: openMold.switchState,\n    switch3: injectionMaterial.switchState,\n    automaticMode: automaticMode.startState,\n    noAutomatic: automaticMode.verifyState,\n    openMold: openMold.startState,\n    closedMold: openMold.verifyState,\n    startInjection: injectionMaterial.startState,\n    finishedInjection: injectionMaterial.verifyState\n}\n\nautomaticMode.verifyState = false;\ncontext.set('verifyAutomaticMode', automaticMode.verifyState);\n\nif (openMold.verifyState && injectionMaterial.verifyState) {\n    openMold.verifyState = false;\n    context.set('verifyMold', openMold.verifyState);\n\n    injectionMaterial.verifyState = false;\n    context.set('verifyInjection', injectionMaterial.verifyState);\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 240,
        "wires": [
            [
                "0ffed440f23ffb31"
            ]
        ],
        "icon": "node-red/swap.svg"
    },
    {
        "id": "0e9d59392bd2ed1d",
        "type": "switch",
        "z": "1aa85fb228e5b40e",
        "name": "Machines",
        "property": "payload.serialNumber",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "ABC123",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 440,
        "y": 240,
        "wires": [
            [
                "a2012ed10cca7f32"
            ]
        ],
        "icon": "font-awesome/fa-desktop"
    },
    {
        "id": "a2012ed10cca7f32",
        "type": "switch",
        "z": "1aa85fb228e5b40e",
        "name": "SW Options",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "hask",
                "v": "Switch1",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "Switch2",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "Switch3",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "StatusSNS",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 4,
        "x": 630,
        "y": 240,
        "wires": [
            [
                "d0d378f6da11685f"
            ],
            [
                "d0d378f6da11685f"
            ],
            [
                "d0d378f6da11685f"
            ],
            [
                "d0d378f6da11685f"
            ]
        ]
    },
    {
        "id": "d0d378f6da11685f",
        "type": "change",
        "z": "1aa85fb228e5b40e",
        "name": "Delete time",
        "rules": [
            {
                "t": "delete",
                "p": "payload.timestamp",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.StatusSNS.Time",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.StatusSNS.Switch2",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.StatusSNS.Switch3",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 810,
        "y": 240,
        "wires": [
            [
                "6c0e8eb1160c2de0"
            ]
        ],
        "icon": "font-awesome/fa-minus-circle"
    },
    {
        "id": "0ffed440f23ffb31",
        "type": "function",
        "z": "1aa85fb228e5b40e",
        "name": "Machine conditions",
        "func": "let {automaticMode, noAutomatic, openMold, closedMold, startInjection, finishedInjection } = msg.switches;\nlet startPart = context.get('startPart') || false;\nlet partProduction = context.get('partProduction') || false;\nlet finishedProduction = context.get('finishedProduction') || false;\n\nif (automaticMode && startInjection) {\n    startPart = true;\n    partProduction = true;\n\n} else if (automaticMode && openMold && finishedInjection && partProduction) {\n    finishedProduction = true;\n    partProduction = false;\n}\ncontext.set('startPart', startPart);\ncontext.set('partProduction', partProduction);\ncontext.set('finishedProduction', finishedProduction);\n\nmsg.conditions = {\n    startPart: startPart,\n    partProduction: partProduction,\n    finishedProduction: finishedProduction,\n    serialNumber: msg.payload.serialNumber\n}\nstartPart = false;\ncontext.set('startPart', startPart);\n\nfinishedProduction = false;\ncontext.set('finishedProduction', finishedProduction);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1190,
        "y": 240,
        "wires": [
            [
                "ea7e40dc754b6730"
            ]
        ],
        "icon": "font-awesome/fa-bars"
    },
    {
        "id": "ea7e40dc754b6730",
        "type": "function",
        "z": "1aa85fb228e5b40e",
        "name": "Production machine",
        "func": "let { startPart, finishedProduction, serialNumber} = msg.conditions;\nlet [machine, dateStartProduction, dateLastProduction] =\n['machine', 'dateStartProduction', 'dateLastProduction'].map(key => context.get(key) || null);\nlet parts = context.get('parts') || 0;\nlet resetShift = context.get('resetShift') || false;\nlet currentTimestamp = new Date();\n\nconst actions = {\n    resetShift: () => {parts = 0; resetShift = false;},\n    payloadReset: () => {resetShift = true;},\n    startProduction: () => {dateStartProduction = currentTimestamp; },\n    finishedProduction: () => {dateLastProduction = currentTimestamp, parts += 1; },\n    machineNull: () => {machine = serialNumber; }\n};\nconst conditions = {\n    resetShift: resetShift,\n     payloadReset: msg.payload === 'reset',\n     startProduction: startPart === true,\n     finishedProduction: finishedProduction === true,\n     machineNull: (serialNumber && machine === null) || (serialNumber && machine !== null && machine !== serialNumber)\n}\n\nObject.entries(conditions).forEach(([condition, isTrue]) => {\n    if (isTrue && actions[condition]) actions[condition]();\n});\ncontext.set('parts', parts);\ncontext.set('resetShift', resetShift);\ncontext.set('dateStartProduction', dateStartProduction);\ncontext.set('dateLastProduction', dateLastProduction);\ncontext.set('machine', machine);\n\nmsg.data = {\n    finishedPart: finishedProduction,\n    parts: parts,\n    dateStartProduction: dateStartProduction,\n    dateLastProduction: dateLastProduction,\n    reset: resetShift,\n    machine: machine,\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1400,
        "y": 240,
        "wires": [
            [
                "33c854896159be0f",
                "eafdff13faa7246a"
            ]
        ],
        "icon": "font-awesome/fa-book"
    },
    {
        "id": "33c854896159be0f",
        "type": "function",
        "z": "1aa85fb228e5b40e",
        "name": "INJETORA 01",
        "func": "let {finishedPart, parts, machine } = msg.data; \n\nmsg.payload = {\n    finishedPart: finishedPart,\n    pecas: parts,\n    deviceSerialNumber: machine,\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1640,
        "y": 200,
        "wires": [
            [
                "f2d534b91fe274bc"
            ]
        ],
        "icon": "font-awesome/fa-cogs"
    },
    {
        "id": "eafdff13faa7246a",
        "type": "function",
        "z": "1aa85fb228e5b40e",
        "name": "Verify status",
        "func": "let {dateStartProduction, dateLastProduction, machine } = msg.data;\nlet [differenceTimeStartProduction, differenceTimeLastProduction] = \n['differenceTimeStartProduction', 'differenceTimeLastProduction'].map(key => context.get(key) || 0);\nlet currentTimestamp = new Date();\nlet currentStatus = context.get('currentStatus');\n\ndifferenceTimeStartProduction = dateStartProduction !== null ? (currentTimestamp.getTime() - dateStartProduction.getTime()) / 1000 : null;\ndifferenceTimeLastProduction = dateLastProduction !== null ? (currentTimestamp.getTime() - dateLastProduction.getTime()) / 1000 : null;\n\ncontext.set('differenceTimeStartProduction', differenceTimeStartProduction);\ncontext.set('differenceTimeLastProduction', differenceTimeLastProduction);\n\nif (dateStartProduction !== null) {\n\n    const machineWorking = (differenceTimeStartProduction <= 299 && dateStartProduction !== null) \n    || (differenceTimeLastProduction !== null && differenceTimeLastProduction <= 299);\n\n    const machineIdle = (differenceTimeStartProduction >= 300 && differenceTimeLastProduction >= 300 && differenceTimeLastProduction <= 1799) ||\n    (differenceTimeStartProduction >= 300 && differenceTimeStartProduction <= 1799 && dateLastProduction === null);\n\n    const machineOff = ((differenceTimeStartProduction >= 300 && differenceTimeLastProduction >= 1800)\n    || differenceTimeStartProduction >= 1800 && dateLastProduction === null);\n\n    const newStatus = machineWorking ? 'TRABALHANDO' : machineIdle ? 'PARADO' : machineOff ? 'DESLIGADO' : null;\n    if (newStatus) currentStatus = newStatus;\n}\n\nif (dateStartProduction === null) currentStatus = \"DESLIGADO\";\n\ncontext.set('currentStatus', currentStatus);\n\nmsg.status = {\n    timeCurrentProduction: differenceTimeStartProduction,\n    timeLastProduction: differenceTimeLastProduction,\n    machine: machine,\n    currentStatus: currentStatus\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1630,
        "y": 240,
        "wires": [
            [
                "7a767b01819d264f",
                "87739e60b373a243"
            ]
        ],
        "icon": "node-red/status.svg"
    },
    {
        "id": "f2d534b91fe274bc",
        "type": "function",
        "z": "1aa85fb228e5b40e",
        "name": "Increment (PE√áAS)",
        "func": "let {finishedPart, deviceSerialNumber } = msg.payload;\nlet unit = context.get('unit') || null;\nlet count = context.get('unit') || 0;\nlet currentTimestamp = new Date();\n\nif (finishedPart === true) {\n    unit = \"Pe√ßas\";\n    count = 1;\n    context.set('unit', unit);\n    context.set('count', count);\n\n    msg.payload = {\n        timestamp: currentTimestamp.getTime(),\n        deviceSerialNumber: deviceSerialNumber,\n        unit: unit,\n        count: count,\n    }\n    return msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1850,
        "y": 200,
        "wires": [
            []
        ],
        "icon": "font-awesome/fa-plus"
    },
    {
        "id": "7a767b01819d264f",
        "type": "function",
        "z": "1aa85fb228e5b40e",
        "name": "Status formated",
        "func": "let machine = msg.status.machine;\nlet timestamp = new Date().getTime();\nlet currentStatus = context.get('currentStatus') || null;\nlet oldStatus = msg.status.currentStatus;\n\nif (!currentStatus || currentStatus !== oldStatus) {\n    currentStatus = oldStatus;\n    context.set('currentStatus', currentStatus);\n\n    msg.payload = {\n        timestamp: timestamp,\n        deviceSerialNumber: machine,\n        status: currentStatus\n    }\n    return msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1840,
        "y": 240,
        "wires": [
            []
        ],
        "icon": "node-red/envelope.svg"
    },
    {
        "id": "69f181023b2ab4e0",
        "type": "inject",
        "z": "1aa85fb228e5b40e",
        "name": "SWITCH1 ON",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "ABC123",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch1\":{\"Action\":\"ON\"}}",
        "payloadType": "json",
        "x": 170,
        "y": 560,
        "wires": [
            [
                "e3b34a72e4945ad0"
            ]
        ]
    },
    {
        "id": "c2b30a0606906158",
        "type": "inject",
        "z": "1aa85fb228e5b40e",
        "name": "SWITCH1 OFF",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "ABC123",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch1\":{\"Action\":\"OFF\"}}",
        "payloadType": "json",
        "x": 180,
        "y": 600,
        "wires": [
            [
                "e3b34a72e4945ad0"
            ]
        ]
    },
    {
        "id": "09d246397940e989",
        "type": "inject",
        "z": "1aa85fb228e5b40e",
        "name": "STATUS8 SW1- ON",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "ABC123",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"StatusSNS\":{\"Switch1\":\"ON\"}}",
        "payloadType": "json",
        "x": 190,
        "y": 640,
        "wires": [
            [
                "e3b34a72e4945ad0"
            ]
        ]
    },
    {
        "id": "384d32b38b9b3190",
        "type": "inject",
        "z": "1aa85fb228e5b40e",
        "name": "STATUS8 SW1- OFF",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "ABC123",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"StatusSNS\":{\"Switch1\":\"OFF\"}}",
        "payloadType": "json",
        "x": 200,
        "y": 680,
        "wires": [
            [
                "e3b34a72e4945ad0"
            ]
        ]
    },
    {
        "id": "6c495c3dae2bb954",
        "type": "inject",
        "z": "1aa85fb228e5b40e",
        "name": "SWITCH2 ON",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "ABC123",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch2\":{\"Action\":\"ON\"}}",
        "payloadType": "json",
        "x": 170,
        "y": 760,
        "wires": [
            [
                "e3b34a72e4945ad0"
            ]
        ]
    },
    {
        "id": "ae22cfe469f76c28",
        "type": "inject",
        "z": "1aa85fb228e5b40e",
        "name": "SWITCH2 OFF",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "ABC123",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch2\":{\"Action\":\"OFF\"}}",
        "payloadType": "json",
        "x": 180,
        "y": 800,
        "wires": [
            [
                "e3b34a72e4945ad0"
            ]
        ]
    },
    {
        "id": "8b40706370e0789b",
        "type": "inject",
        "z": "1aa85fb228e5b40e",
        "name": "SWITCH3 ON",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "ABC123",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch3\":{\"Action\":\"ON\"}}",
        "payloadType": "json",
        "x": 170,
        "y": 860,
        "wires": [
            [
                "e3b34a72e4945ad0"
            ]
        ]
    },
    {
        "id": "b16c53c81b328792",
        "type": "inject",
        "z": "1aa85fb228e5b40e",
        "name": "SWITCH3 OFF",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "ABC123",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch3\":{\"Action\":\"OFF\"}}",
        "payloadType": "json",
        "x": 180,
        "y": 900,
        "wires": [
            [
                "e3b34a72e4945ad0"
            ]
        ]
    },
    {
        "id": "e3b34a72e4945ad0",
        "type": "switch",
        "z": "1aa85fb228e5b40e",
        "name": "Machines",
        "property": "payload.serialNumber",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "ABC123",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 440,
        "y": 720,
        "wires": [
            [
                "69592ca1085f0cc7"
            ]
        ],
        "icon": "font-awesome/fa-desktop"
    },
    {
        "id": "69592ca1085f0cc7",
        "type": "switch",
        "z": "1aa85fb228e5b40e",
        "name": "SW Options",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "hask",
                "v": "Switch1",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "Switch2",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "Switch3",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "StatusSNS",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 4,
        "x": 630,
        "y": 720,
        "wires": [
            [
                "4110e606f059eade"
            ],
            [
                "4110e606f059eade"
            ],
            [
                "4110e606f059eade"
            ],
            [
                "4110e606f059eade"
            ]
        ]
    },
    {
        "id": "4110e606f059eade",
        "type": "change",
        "z": "1aa85fb228e5b40e",
        "name": "Delete time",
        "rules": [
            {
                "t": "delete",
                "p": "payload.timestamp",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.StatusSNS.Time",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.StatusSNS.Switch2",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.StatusSNS.Switch3",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 810,
        "y": 720,
        "wires": [
            [
                "a51c1fa7f3e26eaf"
            ]
        ],
        "icon": "font-awesome/fa-minus-circle"
    },
    {
        "id": "a51c1fa7f3e26eaf",
        "type": "function",
        "z": "1aa85fb228e5b40e",
        "name": "Injetora object main",
        "func": "let injectorProperties = flow.get('injectorProperties') || {};\nlet serialNumber = msg.payload.serialNumber;\nlet getSwitch = Object.keys(msg.payload).find(key => key.startsWith('Switch'));\nlet getStatusSNS = msg.payload.StatusSNS ? Object.keys(msg.payload.StatusSNS).find(key => key.startsWith('Switch')) : null;\n\n// delete injectorProperties[serialNumber];\nif ((getStatusSNS && (getStatusSNS === \"Switch1\")) || getSwitch !== null) {\n    if (!injectorProperties[serialNumber]) {\n        injectorProperties[serialNumber] = {\n            \"automaticMode\": false,\n            \"noAutomaticMode\": false,\n            \"openMold\": false,\n            \"noOpenMold\": false,\n            \"startInjection\": false,\n            \"finishedInjection\": false,\n            \"startPart\": false,\n            \"dateStartProduction\": null,\n            \"dateLastProduction\": null,\n            \"pecas\": 0,\n            \"unit\": null,\n            \"status\": null\n        }\n    }\n}\nflow.set('injectorProperties', injectorProperties);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1010,
        "y": 720,
        "wires": [
            [
                "f03fd44f2475bebd"
            ]
        ],
        "icon": "font-awesome/fa-save"
    },
    {
        "id": "f03fd44f2475bebd",
        "type": "function",
        "z": "1aa85fb228e5b40e",
        "name": "Handle switches",
        "func": "let handleSwitch = function (payload, context, machineProperties, switchName, statusSNSName, startName, finishName) {\n    let switchKey = Object.keys(payload).find(key => key.startsWith(switchName));\n    let switchState = context.get(switchName) || null;\n    let actionValue = payload[switchKey] ? payload[switchKey].Action : null;\n    let statusSNS = payload[statusSNSName] && payload[statusSNSName][switchName];\n    let startState = machineProperties[startName] || false;\n    let finishState = machineProperties[finishName] || false;\n\n    switchState = actionValue || statusSNS || switchState;\n\n    if (switchState === \"ON\") {\n        startState = true;\n        finishState = false;\n    }\n    else if (switchState === \"OFF\") {\n        finishState = true;\n        startState = false;\n    }\n    machineProperties[startName] = startState;\n    machineProperties[finishName] = finishState;\n    return {\n        switchState: switchState,\n        startState: startState,\n        finishState: finishState,\n    };\n}\nlet payload = msg.payload;\nlet serialNumber = msg.payload.serialNumber;\nlet injectorProperties = flow.get('injectorProperties') || {};\nlet machineProperties = injectorProperties[serialNumber] || {};\n\nlet verifyMode = handleSwitch(payload, context, machineProperties, 'Switch1', 'StatusSNS', 'automaticMode', 'noAutomaticMode');\nlet verifyMold = handleSwitch(payload, context, machineProperties, 'Switch2', 'StatusSNS', 'openMold', 'noOpenMold');\nlet verifyInjector = handleSwitch(payload, context, machineProperties, 'Switch3', 'StatusSNS', 'startInjection', 'finishedInjection');\n\nflow.set('injectorProperties', injectorProperties)\n\ninjectorProperties[serialNumber].automaticMode = machineProperties.automaticMode;\ninjectorProperties[serialNumber].noAutomaticMode = machineProperties.noAutomaticMode;\ninjectorProperties[serialNumber].openMold = machineProperties.openMold;\ninjectorProperties[serialNumber].noOpenMold = machineProperties.noOpenMold;\ninjectorProperties[serialNumber].startInjection = machineProperties.startInjection;\ninjectorProperties[serialNumber].finishedInjection = machineProperties.finishedInjection;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1220,
        "y": 720,
        "wires": [
            [
                "1438a6b8968bfec0"
            ]
        ],
        "icon": "node-red/swap.svg"
    },
    {
        "id": "1438a6b8968bfec0",
        "type": "function",
        "z": "1aa85fb228e5b40e",
        "name": "Machine conditions",
        "func": "let injectorProperties = flow.get('injectorProperties');\nlet serialNumber = msg.payload.serialNumber;\nlet currentTimestamp = new Date();\n\nif (injectorProperties[serialNumber].automaticMode && !injectorProperties[serialNumber].openMold &&\ninjectorProperties[serialNumber].startInjection && !injectorProperties[serialNumber].startPart) {\n\n        injectorProperties[serialNumber].startPart = true;\n        injectorProperties[serialNumber].dateStartProduction = currentTimestamp\n}\nelse if (injectorProperties[serialNumber].automaticMode &&\n        injectorProperties[serialNumber].finishedInjection && injectorProperties[serialNumber].openMold && \n        injectorProperties[serialNumber].startPart) {\n            \n    injectorProperties[serialNumber].startPart = false;\n    injectorProperties[serialNumber].dateLastProduction = currentTimestamp;\n    injectorProperties[serialNumber].pecas += 1;\n    injectorProperties[serialNumber].unit = \"Pe√ßas\";\n}\nflow.set('injectorProperties', injectorProperties);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1450,
        "y": 720,
        "wires": [
            [
                "d488df94c176b09a",
                "f7ab9b566748139c"
            ]
        ],
        "icon": "font-awesome/fa-bars"
    },
    {
        "id": "d488df94c176b09a",
        "type": "function",
        "z": "1aa85fb228e5b40e",
        "name": "Update status machine",
        "func": "let injectorProperties = flow.get('injectorProperties');\nlet currentTimestamp = new Date();\nlet messages = [];\n\nif (injectorProperties) {\n    Object.keys(injectorProperties).forEach(key => {\n        if (injectorProperties[key].hasOwnProperty('dateStartProduction') \n        && injectorProperties[key].hasOwnProperty('dateLastProduction')) {\n            let timestampLastAction = injectorProperties[key]['dateStartProduction'];\n            let timestampLastProduction = injectorProperties[key]['dateLastProduction'];\n\n            let differenceLastTimeAction = timestampLastAction ? (currentTimestamp.getTime() - timestampLastAction.getTime()) / 1000 : null;\n            let differenceLastProductionTime = timestampLastProduction ? (currentTimestamp.getTime() - timestampLastProduction.getTime()) / 1000 : null; \n            let oldState = injectorProperties[key]['status'];\n\n            const isWorking = (differenceLastTimeAction !== null && differenceLastTimeAction <= 299) || (differenceLastProductionTime <= 299 && differenceLastProductionTime !== null);\n\n            const isStopped = (differenceLastTimeAction >= 300 && differenceLastProductionTime >= 300 && differenceLastProductionTime <= 1799) ||\n            (differenceLastTimeAction >= 300 && differenceLastTimeAction <= 1799 && differenceLastProductionTime === null);\n\n            const isTurnedOff = (differenceLastTimeAction >= 1800 && differenceLastProductionTime === null) || \n            (differenceLastTimeAction >= 1800 || differenceLastProductionTime >= 1800) || (differenceLastTimeAction === null);\n\n            const newState = isWorking ? \"TRABALHANDO\" : isStopped ? \"PARADO\" : isTurnedOff ? \"DESLIGADO\" : null;\n\n            if (newState !== null && oldState !== newState) {\n                injectorProperties[key]['status'] = newState;\n\n                messages.push(({\n                    seriaNumber: key,\n                    currentStatus: newState\n                }));\n            }\n        \n        }\n    });\n    flow.set('injectorProperties', injectorProperties);\n\n    messages.forEach(msg => {\n        node.send({ payload: msg });\n\n        return msg;\n    })\n}\nnode.warn(injectorProperties);",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1700,
        "y": 740,
        "wires": [
            [
                "7013f6a3beafef54"
            ]
        ],
        "icon": "font-awesome/fa-exchange"
    },
    {
        "id": "e4fdbafb4e901240",
        "type": "function",
        "z": "1aa85fb228e5b40e",
        "name": "Get count (PE√áAS)",
        "func": "let injectorProperties = flow.get('injectorProperties');\nlet serialNumber = msg.payload.serialNumber;\n\nif (injectorProperties) {\n    if (injectorProperties[serialNumber] && injectorProperties[serialNumber].unit !== null) {\n        let unit = injectorProperties[serialNumber].unit;\n        \n        msg.payload = {\n            timestamp: new Date().getTime(),\n            deviceSerialNumber: serialNumber,\n            unit: unit,\n            count: 1\n        }\n        injectorProperties[serialNumber].unit = null;\n        flow.set('injectorProperties', injectorProperties);\n        return msg;\n    }\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1930,
        "y": 700,
        "wires": [
            []
        ],
        "icon": "font-awesome/fa-plus"
    },
    {
        "id": "7013f6a3beafef54",
        "type": "function",
        "z": "1aa85fb228e5b40e",
        "name": "Get changed status (INJETORAS)",
        "func": "let { serialNumber, currentStatus } = msg.payload;\nlet timestamp = new Date().getTime();\n\nif (serialNumber && currentStatus !== null) {\n    msg.payload = {\n        timestamp: timestamp,\n        deviceSerialNumber: serialNumber,\n        status: currentStatus\n    }\n    return msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1980,
        "y": 740,
        "wires": [
            []
        ],
        "icon": "node-red/status.svg"
    },
    {
        "id": "87739e60b373a243",
        "type": "debug",
        "z": "1aa85fb228e5b40e",
        "name": "debug 318",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1790,
        "y": 320,
        "wires": []
    },
    {
        "id": "92b9de8742d81ac1",
        "type": "inject",
        "z": "1aa85fb228e5b40e",
        "name": "SWITCH1 ON",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "ABC123",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch1\":{\"Action\":\"ON\"}}",
        "payloadType": "json",
        "x": 170,
        "y": 1020,
        "wires": [
            [
                "7e3ad73d71677308"
            ]
        ]
    },
    {
        "id": "955d86f7fab7fc4c",
        "type": "inject",
        "z": "1aa85fb228e5b40e",
        "name": "SWITCH1 OFF",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "ABC123",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch1\":{\"Action\":\"OFF\"}}",
        "payloadType": "json",
        "x": 180,
        "y": 1060,
        "wires": [
            [
                "7e3ad73d71677308"
            ]
        ]
    },
    {
        "id": "2c7a9a73e868c922",
        "type": "inject",
        "z": "1aa85fb228e5b40e",
        "name": "STATUS8 SW1- ON",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "ABC123",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"StatusSNS\":{\"Switch1\":\"ON\"}}",
        "payloadType": "json",
        "x": 190,
        "y": 1100,
        "wires": [
            [
                "7e3ad73d71677308"
            ]
        ]
    },
    {
        "id": "542edbd6bd9938b8",
        "type": "inject",
        "z": "1aa85fb228e5b40e",
        "name": "STATUS8 SW1- OFF",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "ABC123",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"StatusSNS\":{\"Switch1\":\"OFF\"}}",
        "payloadType": "json",
        "x": 200,
        "y": 1140,
        "wires": [
            [
                "7e3ad73d71677308"
            ]
        ]
    },
    {
        "id": "22e527cba75fd73f",
        "type": "inject",
        "z": "1aa85fb228e5b40e",
        "name": "SWITCH2 ON",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "ABC123",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch2\":{\"Action\":\"ON\"}}",
        "payloadType": "json",
        "x": 170,
        "y": 1220,
        "wires": [
            [
                "7e3ad73d71677308"
            ]
        ]
    },
    {
        "id": "5c058dec721bd31a",
        "type": "inject",
        "z": "1aa85fb228e5b40e",
        "name": "SWITCH2 OFF",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "ABC123",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch2\":{\"Action\":\"OFF\"}}",
        "payloadType": "json",
        "x": 180,
        "y": 1260,
        "wires": [
            [
                "7e3ad73d71677308"
            ]
        ]
    },
    {
        "id": "92acb923fb39b44c",
        "type": "inject",
        "z": "1aa85fb228e5b40e",
        "name": "SWITCH3 ON",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "ABC123",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch3\":{\"Action\":\"ON\"}}",
        "payloadType": "json",
        "x": 170,
        "y": 1320,
        "wires": [
            [
                "7e3ad73d71677308"
            ]
        ]
    },
    {
        "id": "95d2304cb151c2ba",
        "type": "inject",
        "z": "1aa85fb228e5b40e",
        "name": "SWITCH3 OFF",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "ABC123",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch3\":{\"Action\":\"OFF\"}}",
        "payloadType": "json",
        "x": 180,
        "y": 1360,
        "wires": [
            [
                "7e3ad73d71677308"
            ]
        ]
    },
    {
        "id": "7e3ad73d71677308",
        "type": "switch",
        "z": "1aa85fb228e5b40e",
        "name": "Machines",
        "property": "payload.serialNumber",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "ABC123",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 460,
        "y": 1200,
        "wires": [
            [
                "be089f17f87482c3"
            ]
        ],
        "icon": "font-awesome/fa-desktop"
    },
    {
        "id": "be089f17f87482c3",
        "type": "switch",
        "z": "1aa85fb228e5b40e",
        "name": "SW Options",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "hask",
                "v": "Switch1",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "Switch2",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "Switch3",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "StatusSNS",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 4,
        "x": 630,
        "y": 1200,
        "wires": [
            [
                "e0634f8c3aa0aa6a"
            ],
            [
                "e0634f8c3aa0aa6a"
            ],
            [
                "e0634f8c3aa0aa6a"
            ],
            [
                "e0634f8c3aa0aa6a"
            ]
        ]
    },
    {
        "id": "e0634f8c3aa0aa6a",
        "type": "change",
        "z": "1aa85fb228e5b40e",
        "name": "Delete time",
        "rules": [
            {
                "t": "delete",
                "p": "payload.timestamp",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.StatusSNS.Time",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.StatusSNS.Switch2",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.StatusSNS.Switch3",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 810,
        "y": 1200,
        "wires": [
            [
                "ae271d48fb0c769c"
            ]
        ],
        "icon": "font-awesome/fa-minus-circle"
    },
    {
        "id": "ae271d48fb0c769c",
        "type": "function",
        "z": "1aa85fb228e5b40e",
        "name": "TEST Injector",
        "func": "let testInjector = flow.get('testInjector') || {};\nlet serialNumber = msg.payload.serialNumber;\nlet getSwitch = Object.keys(msg.payload).find(key => key.startsWith('Switch')) || null;\nlet getStatusSNS = msg.payload.StatusSNS ? Object.keys(msg.payload.StatusSNS).find(key => key.startsWith('Switch')) : null;\n\n// delete testInjector[serialNumber];\nif ((getStatusSNS && (getStatusSNS === \"Switch1\")) || getSwitch !== null) {\n    if (!testInjector[serialNumber]) {\n        testInjector[serialNumber] = {\n            \"automaticMode\": false,\n            \"openMold\": false,\n            \"noOpenMold\": false,\n            \"startInjection\": false,\n            \"finishedInjection\": false,\n            \"startPart\": false,\n            \"pecas\": 0,\n            \"dateStartProduction\": null,\n            \"dateLastProduction\": null,\n            \"unit\": null,\n            \"status\": null\n        }\n    }\n}\nflow.set('testInjector', testInjector);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 1200,
        "wires": [
            [
                "c26c82b7cf0322bf"
            ]
        ],
        "icon": "font-awesome/fa-save"
    },
    {
        "id": "c26c82b7cf0322bf",
        "type": "function",
        "z": "1aa85fb228e5b40e",
        "name": "Handle switches",
        "func": "let payload = msg.payload;\nlet serialNumber = msg.payload.serialNumber;\nlet testInjector = flow.get('testInjector');\nlet getSwitch  = Object.keys(msg.payload).find(key => key.startsWith('Switch'));\nlet getStatusSNS = msg.payload.StatusSNS ? msg.payload.StatusSNS : null;\nlet actionStatusSNS = msg.payload.StatusSNS ? msg.payload.StatusSNS[\"Switch1\"] : null; \nlet actionValue = msg.payload[getSwitch] ? msg.payload[getSwitch][\"Action\"] : null;\nlet selectedStatusSNS = msg.payload.StatusSNS ? Object.keys(msg.payload.StatusSNS).find(key => key.startsWith('Switch')) : null;\n\n\nif (getSwitch === \"Switch1\" || selectedStatusSNS === \"Switch1\") {\n    if (actionValue === \"ON\" || actionStatusSNS === \"ON\") {\n        testInjector[serialNumber].automaticMode = true;\n    }\n    else if (actionStatusSNS === \"OFF\" || actionValue ===\"OFF\") {\n        testInjector[serialNumber].automaticMode = false;\n    }\n}\nelse if (getSwitch === \"Switch2\") {\n    if (actionValue === \"ON\") {\n        testInjector[serialNumber].openMold = true;\n        testInjector[serialNumber].noOpenMold = false;\n    \n    } else if (actionValue === \"OFF\") {\n        testInjector[serialNumber].openMold = false;\n        testInjector[serialNumber].noOpenMold = true;\n    }\n}\n\nelse if (getSwitch === \"Switch3\") {\n    if (actionValue === \"ON\") {\n        testInjector[serialNumber].startInjection = true;\n        testInjector[serialNumber].finishedInjection = false;\n    \n    } else if (actionValue === \"OFF\") {\n        testInjector[serialNumber].startInjection = false;\n        testInjector[serialNumber].finishedInjection = true;\n    }\n}\n\nflow.set('testInjector', testInjector);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 1240,
        "wires": [
            [
                "40f330a08fa06742"
            ]
        ],
        "icon": "node-red/swap.svg"
    },
    {
        "id": "d8188a47847461e6",
        "type": "catch",
        "z": "1aa85fb228e5b40e",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 380,
        "y": 1480,
        "wires": [
            [
                "301e3ff2d2b42729"
            ]
        ]
    },
    {
        "id": "301e3ff2d2b42729",
        "type": "debug",
        "z": "1aa85fb228e5b40e",
        "name": "debug 319",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 550,
        "y": 1480,
        "wires": []
    },
    {
        "id": "40f330a08fa06742",
        "type": "function",
        "z": "1aa85fb228e5b40e",
        "name": "Machine conditions",
        "func": "let testInjector = flow.get('testInjector');\nlet serialNumber = msg.payload.serialNumber;\nlet currentTimestamp = new Date();\n\nif (testInjector[serialNumber].automaticMode && !testInjector[serialNumber].openMold &&\ntestInjector[serialNumber].startInjection && !testInjector[serialNumber].startPart) {\n\ntestInjector[serialNumber].startPart = true;\ntestInjector[serialNumber].dateStartProduction = currentTimestamp\n}\nelse if (testInjector[serialNumber].automaticMode &&\ntestInjector[serialNumber].finishedInjection && testInjector[serialNumber].openMold && \ntestInjector[serialNumber].startPart) {\n            \n    testInjector[serialNumber].startPart = false;\n    testInjector[serialNumber].dateLastProduction = currentTimestamp;\n    testInjector[serialNumber].pecas += 1;\n    testInjector[serialNumber].unit = \"Pe√ßas\";\n}\nflow.set('testInjector', testInjector);\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1010,
        "y": 1280,
        "wires": [
            [
                "4042b501e562c3a3",
                "2c08a26a72fd23c9"
            ]
        ],
        "icon": "font-awesome/fa-bars"
    },
    {
        "id": "4042b501e562c3a3",
        "type": "function",
        "z": "1aa85fb228e5b40e",
        "name": "Update status machine",
        "func": "let testInjector = flow.get('testInjector');\nlet currentTimestamp = new Date();\nlet messages = [];\n\nif (testInjector) {\n    Object.keys(testInjector).forEach(key => {\n        if (testInjector[key].hasOwnProperty('dateStartProduction') \n        && testInjector[key].hasOwnProperty('dateLastProduction')) {\n            let timestampLastAction = testInjector[key]['dateStartProduction'];\n            let timestampLastProduction = testInjector[key]['dateLastProduction'];\n\n            let differenceLastTimeAction = timestampLastAction ? (currentTimestamp.getTime() - timestampLastAction.getTime()) / 1000 : null;\n            let differenceLastProductionTime = timestampLastProduction ? (currentTimestamp.getTime() - timestampLastProduction.getTime()) / 1000 : null; \n            let oldState = testInjector[key]['status'];\n\n            const isWorking = (differenceLastTimeAction !== null && differenceLastTimeAction <= 299) || (differenceLastProductionTime <= 299 && differenceLastProductionTime !== null);\n\n            const isStopped = (differenceLastTimeAction >= 300 && differenceLastProductionTime >= 300 && differenceLastProductionTime <= 1799) ||\n            (differenceLastTimeAction >= 300 && differenceLastTimeAction <= 1799 && differenceLastProductionTime === null);\n\n            const isTurnedOff = (differenceLastTimeAction >= 1800 && differenceLastProductionTime === null) || \n            (differenceLastTimeAction >= 1800 || differenceLastProductionTime >= 1800) || (differenceLastTimeAction === null);\n\n            const newState = isWorking ? \"TRABALHANDO\" : isStopped ? \"PARADO\" : isTurnedOff ? \"DESLIGADO\" : null;\n\n            if (newState !== null && oldState !== newState) {\n                testInjector[key]['status'] = newState;\n\n                messages.push(({\n                    seriaNumber: key,\n                    currentStatus: newState\n                }));\n            }\n        \n        }\n    });\n    flow.set('testInjector', testInjector);\n\n    messages.forEach(msg => {\n        node.send({ payload: msg });\n\n        return msg;\n    })\n}\nnode.warn(testInjector);",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1020,
        "y": 1320,
        "wires": [
            [
                "d10a9d903f15617b"
            ]
        ],
        "icon": "font-awesome/fa-exchange"
    },
    {
        "id": "2c08a26a72fd23c9",
        "type": "function",
        "z": "1aa85fb228e5b40e",
        "name": "Get count (PE√áAS)",
        "func": "let testInjector = flow.get('testInjector');\nlet serialNumber = msg.payload.serialNumber;\n\nif (testInjector) {\n    if (testInjector[serialNumber] && testInjector[serialNumber].unit !== null) {\n        let unit = testInjector[serialNumber].unit;\n        \n        msg.payload = {\n            timestamp: new Date().getTime(),\n            deviceSerialNumber: serialNumber,\n            unit: unit,\n            count: 1\n        }\n        testInjector[serialNumber].unit = null;\n        flow.set('testInjector', testInjector);\n        return msg;\n    }\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1370,
        "y": 1280,
        "wires": [
            []
        ],
        "icon": "font-awesome/fa-plus"
    },
    {
        "id": "d10a9d903f15617b",
        "type": "function",
        "z": "1aa85fb228e5b40e",
        "name": "Get changed status (INJETORAS)",
        "func": "let { serialNumber, currentStatus } = msg.payload;\nlet timestamp = new Date().getTime();\n\nif (serialNumber && currentStatus !== null) {\n    msg.payload = {\n        timestamp: timestamp,\n        deviceSerialNumber: serialNumber,\n        status: currentStatus\n    }\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1420,
        "y": 1320,
        "wires": [
            []
        ],
        "icon": "node-red/status.svg"
    },
    {
        "id": "2a0dbcec1d74cddc",
        "type": "inject",
        "z": "1aa85fb228e5b40e",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 370,
        "y": 1800,
        "wires": [
            [
                "d275db687a522a79"
            ]
        ]
    },
    {
        "id": "d275db687a522a79",
        "type": "http request",
        "z": "1aa85fb228e5b40e",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://dragonball-api.com/api/characters",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 530,
        "y": 1800,
        "wires": [
            [
                "cc96fe7b8b3b7a8e"
            ]
        ]
    },
    {
        "id": "8af9ac2fc5e6cb19",
        "type": "debug",
        "z": "1aa85fb228e5b40e",
        "name": "debug 320",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 870,
        "y": 1620,
        "wires": []
    },
    {
        "id": "cc96fe7b8b3b7a8e",
        "type": "function",
        "z": "1aa85fb228e5b40e",
        "name": "function 5",
        "func": "let payload = msg.payload;\nlet list = JSON.parse(payload);\nlet getCharacter = list.items;\nlet insertList = flow.get('insertList') || [];\n\n// Nome do personagem que queremos deletar (por exemplo, \"Goku\")\nlet characterToDelete = \"Goku\";\n\n// Encontra o √≠ndice do personagem a ser deletado\nlet index = insertList.findIndex(character => character.nome === characterToDelete);\n\n// Se o personagem for encontrado, use delete para remov√™-lo\nif (index !== -1) {\n    delete insertList[index];\n}\n\n// Remove \"buracos\" resultantes de delete\ninsertList = insertList.filter(item => item !== undefined);\n\n// Adiciona novos personagens √† lista, se n√£o j√° existirem\nfor (let i = 0; i < getCharacter.length; i++) {\n    if (!insertList.some(character => character.nome === getCharacter[i].name)) {\n        insertList.push({\n            \"nome\": getCharacter[i].name,\n            \"raca\": getCharacter[i].race,\n            \"genero\": getCharacter[i].gender || \"Desconhecido\"\n        });\n    }\n}\n\n// Atualiza a lista no fluxo novamente ap√≥s adi√ß√µes\nflow.set('insertList', insertList);\n\n// Log da lista atualizada\nnode.warn(insertList);\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 1800,
        "wires": [
            []
        ]
    },
    {
        "id": "12af7c642e955c41",
        "type": "inject",
        "z": "17483b32655ddc5d",
        "name": "RESET Shift2",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "switches",
                "v": "{}",
                "vt": "json"
            },
            {
                "p": "conditions",
                "v": "{}",
                "vt": "json"
            },
            {
                "p": "data",
                "v": "{}",
                "vt": "json"
            }
        ],
        "repeat": "",
        "crontab": "00 17 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "reset",
        "payloadType": "str",
        "x": 180,
        "y": 100,
        "wires": [
            []
        ],
        "icon": "font-awesome/fa-rotate-right"
    },
    {
        "id": "e1fdb060e1d7d73d",
        "type": "inject",
        "z": "17483b32655ddc5d",
        "name": "RESET Shift3",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "switches",
                "v": "{}",
                "vt": "json"
            },
            {
                "p": "conditions",
                "v": "{}",
                "vt": "json"
            },
            {
                "p": "data",
                "v": "{}",
                "vt": "json"
            }
        ],
        "repeat": "",
        "crontab": "00 22 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "reset",
        "payloadType": "str",
        "x": 180,
        "y": 140,
        "wires": [
            []
        ],
        "icon": "font-awesome/fa-rotate-right"
    },
    {
        "id": "bb8460e89fcef36c",
        "type": "inject",
        "z": "17483b32655ddc5d",
        "name": "RESET Shift1",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "switches",
                "v": "{}",
                "vt": "json"
            },
            {
                "p": "conditions",
                "v": "{}",
                "vt": "json"
            },
            {
                "p": "data",
                "v": "{}",
                "vt": "json"
            }
        ],
        "repeat": "",
        "crontab": "00 07 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "reset",
        "payloadType": "str",
        "x": 180,
        "y": 60,
        "wires": [
            []
        ],
        "icon": "font-awesome/fa-rotate-right"
    },
    {
        "id": "59774df2b50265e7",
        "type": "inject",
        "z": "17483b32655ddc5d",
        "name": "RESET Shift1",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "conditions",
                "v": " {}",
                "vt": "json"
            },
            {
                "p": "data",
                "v": "{}",
                "vt": "json"
            },
            {
                "p": "switches",
                "v": "{}",
                "vt": "json"
            }
        ],
        "repeat": "",
        "crontab": "20 17 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "reset",
        "payloadType": "str",
        "x": 180,
        "y": 240,
        "wires": [
            []
        ],
        "icon": "font-awesome/fa-rotate-right"
    },
    {
        "id": "c90dd4f2b901e34a",
        "type": "inject",
        "z": "17483b32655ddc5d",
        "name": "RESET Shift2",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "switches",
                "v": "{}",
                "vt": "json"
            },
            {
                "p": "conditions",
                "v": "{}",
                "vt": "json"
            },
            {
                "p": "data",
                "v": "{}",
                "vt": "json"
            }
        ],
        "repeat": "",
        "crontab": "20 22 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "reset",
        "payloadType": "str",
        "x": 180,
        "y": 360,
        "wires": [
            []
        ],
        "icon": "font-awesome/fa-rotate-right"
    },
    {
        "id": "0b6842ce8b0a6240",
        "type": "inject",
        "z": "17483b32655ddc5d",
        "name": "RESET Shift3",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "switches",
                "v": "{}",
                "vt": "json"
            },
            {
                "p": "conditions",
                "v": "{}",
                "vt": "json"
            },
            {
                "p": "data",
                "v": "{}",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "50 05 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "reset",
        "payloadType": "str",
        "x": 180,
        "y": 400,
        "wires": [
            []
        ],
        "icon": "font-awesome/fa-rotate-right"
    },
    {
        "id": "6296291905276499",
        "type": "inject",
        "z": "17483b32655ddc5d",
        "name": "RESET Shift1",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "switches",
                "v": "{}",
                "vt": "json"
            },
            {
                "p": "conditions",
                "v": " {}",
                "vt": "json"
            },
            {
                "p": "data",
                "v": "{}",
                "vt": "json"
            }
        ],
        "repeat": "",
        "crontab": "10 14 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "reset",
        "payloadType": "str",
        "x": 180,
        "y": 320,
        "wires": [
            []
        ],
        "icon": "font-awesome/fa-rotate-right"
    },
    {
        "id": "291cbf6befecc5e9",
        "type": "inject",
        "z": "17483b32655ddc5d",
        "name": "RESET Shift1",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "switches",
                "v": "{}",
                "vt": "json"
            },
            {
                "p": "conditions",
                "v": "{}",
                "vt": "json"
            },
            {
                "p": "data",
                "v": "{}",
                "vt": "json"
            }
        ],
        "repeat": "",
        "crontab": "20 17 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "reset",
        "payloadType": "str",
        "x": 180,
        "y": 480,
        "wires": [
            []
        ]
    },
    {
        "id": "4ed5279aacf202c0",
        "type": "inject",
        "z": "17483b32655ddc5d",
        "name": "RESET Shift1",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "switches",
                "v": "{}",
                "vt": "json"
            },
            {
                "p": "conditions",
                "v": "{}",
                "vt": "json"
            },
            {
                "p": "data",
                "v": "{}",
                "vt": "json"
            }
        ],
        "repeat": "",
        "crontab": "10 02 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "reset",
        "payloadType": "str",
        "x": 180,
        "y": 600,
        "wires": [
            []
        ]
    },
    {
        "id": "7f875e7c359e5196",
        "type": "inject",
        "z": "17483b32655ddc5d",
        "name": "RESET Shift2",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "switches",
                "v": "{}",
                "vt": "json"
            },
            {
                "p": "conditions",
                "v": "{}",
                "vt": "json"
            },
            {
                "p": "data",
                "v": "{}",
                "vt": "json"
            }
        ],
        "repeat": "",
        "crontab": "00 07 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "reset",
        "payloadType": "str",
        "x": 180,
        "y": 640,
        "wires": [
            []
        ]
    },
    {
        "id": "6253ffc7d044d9c2",
        "type": "inject",
        "z": "17483b32655ddc5d",
        "name": "RESET Shift3",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "switches",
                "v": "{}",
                "vt": "json"
            },
            {
                "p": "conditions",
                "v": "{}",
                "vt": "json"
            },
            {
                "p": "data",
                "v": "{}",
                "vt": "json"
            }
        ],
        "repeat": "",
        "crontab": "00 17 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "reset",
        "payloadType": "str",
        "x": 180,
        "y": 680,
        "wires": [
            []
        ]
    },
    {
        "id": "70095a66aac5b514",
        "type": "inject",
        "z": "17483b32655ddc5d",
        "name": "RESET Shift1",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "conditions",
                "v": "{}",
                "vt": "json"
            },
            {
                "p": "data",
                "v": "{}",
                "vt": "json"
            },
            {
                "p": "machine",
                "v": "{}",
                "vt": "json"
            }
        ],
        "repeat": "",
        "crontab": "00 07 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "reset",
        "payloadType": "str",
        "x": 180,
        "y": 760,
        "wires": [
            []
        ]
    },
    {
        "id": "8b0f6623c6c4eaf2",
        "type": "inject",
        "z": "17483b32655ddc5d",
        "name": "RESET Shift2",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "conditions",
                "v": "{}",
                "vt": "json"
            },
            {
                "p": "data",
                "v": "{}",
                "vt": "json"
            },
            {
                "p": "machine",
                "v": "{}",
                "vt": "json"
            }
        ],
        "repeat": "",
        "crontab": "35 15 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "reset",
        "payloadType": "str",
        "x": 180,
        "y": 800,
        "wires": [
            []
        ]
    },
    {
        "id": "d003f311c45eb38a",
        "type": "inject",
        "z": "17483b32655ddc5d",
        "name": "RESET Shift3",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "conditions",
                "v": "{}",
                "vt": "json"
            },
            {
                "p": "data",
                "v": "{}",
                "vt": "json"
            },
            {
                "p": "machine",
                "v": "{}",
                "vt": "json"
            }
        ],
        "repeat": "",
        "crontab": "55 23 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "reset",
        "payloadType": "str",
        "x": 180,
        "y": 840,
        "wires": [
            []
        ]
    },
    {
        "id": "035c69354d3ad2be",
        "type": "inject",
        "z": "17483b32655ddc5d",
        "name": "RESET Shift1",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "switches",
                "v": "{}",
                "vt": "json"
            },
            {
                "p": "conditions",
                "v": "{}",
                "vt": "json"
            },
            {
                "p": "data",
                "v": "{}",
                "vt": "json"
            }
        ],
        "repeat": "",
        "crontab": "00 07 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "reset",
        "payloadType": "str",
        "x": 180,
        "y": 920,
        "wires": [
            []
        ]
    },
    {
        "id": "53208d5f99f07c86",
        "type": "inject",
        "z": "17483b32655ddc5d",
        "name": "RESET Shift2",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "switches",
                "v": "{}",
                "vt": "json"
            },
            {
                "p": "conditions",
                "v": "{}",
                "vt": "json"
            },
            {
                "p": "data",
                "v": "{}",
                "vt": "json"
            }
        ],
        "repeat": "",
        "crontab": "44 15 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "reset",
        "payloadType": "str",
        "x": 180,
        "y": 960,
        "wires": [
            []
        ]
    },
    {
        "id": "be5867d2fdfaa60c",
        "type": "inject",
        "z": "17483b32655ddc5d",
        "name": "RESET Shift3",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "switches",
                "v": "{}",
                "vt": "json"
            },
            {
                "p": "conditions",
                "v": "{}",
                "vt": "json"
            },
            {
                "p": "data",
                "v": "{}",
                "vt": "json"
            }
        ],
        "repeat": "",
        "crontab": "00 20 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "reset",
        "payloadType": "str",
        "x": 180,
        "y": 1000,
        "wires": [
            []
        ]
    },
    {
        "id": "810dcc06d2350d66",
        "type": "inject",
        "z": "17483b32655ddc5d",
        "name": "TIMESTAMP (STATUS)",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "switches",
                "v": "{}",
                "vt": "json"
            },
            {
                "p": "conditions",
                "v": "{}",
                "vt": "json"
            },
            {
                "p": "data",
                "v": "{}",
                "vt": "json"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 210,
        "y": 1140,
        "wires": [
            []
        ],
        "icon": "font-awesome/fa-hourglass-1"
    },
    {
        "id": "5425e2fc9ac80fe2",
        "type": "http in",
        "z": "f6f2187d.f17ca8",
        "g": "d3941e127837eabd",
        "name": "POST /devices/{deviceId}/increment-count",
        "url": "/webhook/v1/devices/:deviceId/increment-count",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 240,
        "y": 520,
        "wires": [
            []
        ]
    },
    {
        "id": "bcc7e641a87a1184",
        "type": "http response",
        "z": "f6f2187d.f17ca8",
        "g": "c2ec46e94fc72b30",
        "name": "JSON 200 OK",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 3660,
        "y": 620,
        "wires": []
    },
    {
        "id": "f69d58fc0135846a",
        "type": "http response",
        "z": "f6f2187d.f17ca8",
        "g": "c2ec46e94fc72b30",
        "name": "JSON 400 Bad Request",
        "statusCode": "400",
        "headers": {
            "content-type": "application/json"
        },
        "x": 3690,
        "y": 980,
        "wires": []
    },
    {
        "id": "4d9de2aab81b5202",
        "type": "change",
        "z": "f6f2187d.f17ca8",
        "g": "07d88271bd018e00",
        "name": "Invalid request",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "error.message",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 3420,
        "y": 980,
        "wires": [
            [
                "f69d58fc0135846a"
            ]
        ],
        "icon": "node-red/parser-json.svg"
    },
    {
        "id": "4f590ef245febf9c",
        "type": "http response",
        "z": "f6f2187d.f17ca8",
        "g": "c2ec46e94fc72b30",
        "name": "JSON 500 Internal Server Error",
        "statusCode": "500",
        "headers": {
            "content-type": "application/json"
        },
        "x": 3710,
        "y": 1100,
        "wires": []
    },
    {
        "id": "b153c4d4c0d00386",
        "type": "catch",
        "z": "f6f2187d.f17ca8",
        "g": "438b31b8da5a94c1",
        "name": "Failed JWT authentication",
        "scope": "group",
        "uncaught": false,
        "x": 630,
        "y": 620,
        "wires": [
            [
                "e2fa71664ad6266c"
            ]
        ]
    },
    {
        "id": "0e856f7803dcede8",
        "type": "http in",
        "z": "f6f2187d.f17ca8",
        "g": "d3941e127837eabd",
        "name": "POST /devices/{deviceId}/activity-status",
        "url": "/webhook/v1/devices/:deviceId/activity-status",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 230,
        "y": 560,
        "wires": [
            []
        ]
    },
    {
        "id": "a5b12826a02d3424",
        "type": "change",
        "z": "f6f2187d.f17ca8",
        "g": "07d88271bd018e00",
        "name": "Unauthorized",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "error.message",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 3430,
        "y": 1020,
        "wires": [
            [
                "90e505fbf0725ca0"
            ]
        ],
        "icon": "node-red/parser-json.svg"
    },
    {
        "id": "90e505fbf0725ca0",
        "type": "http response",
        "z": "f6f2187d.f17ca8",
        "g": "c2ec46e94fc72b30",
        "name": "JSON 401 Unauthorized",
        "statusCode": "401",
        "headers": {
            "content-type": "application/json"
        },
        "x": 3690,
        "y": 1020,
        "wires": []
    },
    {
        "id": "1a6259e91b4b9f7d",
        "type": "http response",
        "z": "f6f2187d.f17ca8",
        "g": "c2ec46e94fc72b30",
        "name": "JSON 404 Not Found",
        "statusCode": "404",
        "headers": {
            "content-type": "application/json"
        },
        "x": 3680,
        "y": 1060,
        "wires": []
    },
    {
        "id": "fdc517c4b65f7063",
        "type": "change",
        "z": "f6f2187d.f17ca8",
        "g": "07d88271bd018e00",
        "name": "Not found",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "error.message",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 3440,
        "y": 1060,
        "wires": [
            [
                "1a6259e91b4b9f7d"
            ]
        ],
        "icon": "node-red/parser-json.svg"
    },
    {
        "id": "d6632f51a61d956f",
        "type": "http in",
        "z": "f6f2187d.f17ca8",
        "g": "d3941e127837eabd",
        "name": "POST /devices/{deviceId}/power-status",
        "url": "/webhook/v1/devices/:deviceId/power-status",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 230,
        "y": 600,
        "wires": [
            []
        ]
    },
    {
        "id": "df8dda1b1af98ed4",
        "type": "http in",
        "z": "f6f2187d.f17ca8",
        "g": "d3941e127837eabd",
        "name": "POST /devices/{deviceId}/connectivity-status",
        "url": "/webhook/v1/devices/:deviceId/connectivity-status",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 250,
        "y": 640,
        "wires": [
            []
        ]
    },
    {
        "id": "afd459afd745ff04",
        "type": "subflow:73bb6fdef0db8780",
        "z": "f6f2187d.f17ca8",
        "g": "438b31b8da5a94c1",
        "name": "",
        "env": [
            {
                "name": "NODE_RED_NODE_JWT_SECRET",
                "type": "cred"
            }
        ],
        "x": 610,
        "y": 580,
        "wires": []
    },
    {
        "id": "dd727701459b9650",
        "type": "change",
        "z": "f6f2187d.f17ca8",
        "g": "07d88271bd018e00",
        "name": "Empty object",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 3430,
        "y": 940,
        "wires": [
            []
        ],
        "icon": "node-red/parser-json.svg"
    },
    {
        "id": "35e1756a1fb158ff",
        "type": "switch",
        "z": "f6f2187d.f17ca8",
        "g": "cb338ab959082eb2",
        "name": "Route request to action",
        "property": "action",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "increment-count",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "activity-status",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "power-status",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "connectivity-status",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 5,
        "x": 1810,
        "y": 660,
        "wires": [
            [
                "3be5194972a48850"
            ],
            [
                "2dc80c3fa796cfee"
            ],
            [
                "089f5d7c6adefbc6"
            ],
            [
                "30a73b0eb45dbc73"
            ],
            [
                "5dbed2ecc24cf6cc"
            ]
        ]
    },
    {
        "id": "3be5194972a48850",
        "type": "function",
        "z": "f6f2187d.f17ca8",
        "g": "24928d29a2a86f3e",
        "name": "Validation: value is finite number",
        "func": "const InvalidRequestBodyError = new Error(\"invalid request body\");\nconst VALUE = msg.req.body.value;\n\n/* \nAction: INCREMENT-COUNT\nKey \"value\":\n    description: quantity to add (positive) or subtract (negative) from count in database\n    TYPE: number\n    CONSTRAINTS: must be finite\n*/\n//--- Begin of validation algorithm --- //\n\nif (not(isNumber(VALUE))) throw InvalidRequestBodyError; // Type checking\nif (not(Number.isFinite(VALUE))) throw InvalidRequestBodyError; // Constraints checking\n\n//--- End of validation algorithm --- //\n\nreturn msg;\n\n//--- Validation helper functions ---//\n\nfunction isNumber(value) {\n    return typeof value === \"number\" || value instanceof Number;\n}\n\nfunction not(value) { return !value; }",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2250,
        "y": 460,
        "wires": [
            [
                "5c53615e3fe49dcb"
            ]
        ],
        "icon": "font-awesome/fa-check-circle-o"
    },
    {
        "id": "d852751c5ca4cd3e",
        "type": "catch",
        "z": "f6f2187d.f17ca8",
        "g": "cb338ab959082eb2",
        "name": "Validation error",
        "scope": [
            "3be5194972a48850",
            "2dc80c3fa796cfee",
            "089f5d7c6adefbc6",
            "30a73b0eb45dbc73"
        ],
        "uncaught": false,
        "x": 2200,
        "y": 880,
        "wires": [
            [
                "1c21e327a94e498b"
            ]
        ]
    },
    {
        "id": "ad404357b34483e0",
        "type": "function",
        "z": "f6f2187d.f17ca8",
        "g": "5306d4147b56399e",
        "name": "Parse request body as object",
        "func": "if (typeof msg.req.body === \"string\") {\n    msg.req.body = JSON.parse(msg.req.body);\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1320,
        "y": 580,
        "wires": [
            [
                "2d317fe1d5f769d5"
            ]
        ],
        "icon": "node-red/parser-json.svg"
    },
    {
        "id": "faaf7701c69097e8",
        "type": "function",
        "z": "f6f2187d.f17ca8",
        "g": "5306d4147b56399e",
        "name": "Complete request body",
        "func": "msg.req.body.device = msg.device;\nmsg.req.body.customer = msg.token.customer;\nmsg.req.body.action = msg.action;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1390,
        "y": 740,
        "wires": [
            [
                "35e1756a1fb158ff"
            ]
        ],
        "icon": "node-red/parser-json.svg"
    },
    {
        "id": "2d317fe1d5f769d5",
        "type": "function",
        "z": "f6f2187d.f17ca8",
        "g": "5306d4147b56399e",
        "name": "Request body must be an object",
        "func": "const InvalidRequestBodyError = new Error(\"invalid request body\");\n\nif (not(isObject(msg.req.body))) { throw InvalidRequestBodyError; }\n\nreturn msg;\n\n// Validation helper functions \n\nfunction isObject(value) {\n    return (\n        typeof value === \"object\" &&\n        value !== null &&\n        !Array.isArray(value)\n    );\n}\n\nfunction not(value) { return !value; }",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1350,
        "y": 620,
        "wires": [
            [
                "40369c33cfa39f7e"
            ]
        ],
        "icon": "font-awesome/fa-check-square-o"
    },
    {
        "id": "54fb3c028a42d5c8",
        "type": "catch",
        "z": "f6f2187d.f17ca8",
        "g": "5306d4147b56399e",
        "name": "Invalid request body",
        "scope": "group",
        "uncaught": false,
        "x": 1310,
        "y": 780,
        "wires": [
            [
                "c72bad5bdb8fb13b"
            ]
        ]
    },
    {
        "id": "40369c33cfa39f7e",
        "type": "function",
        "z": "f6f2187d.f17ca8",
        "g": "5306d4147b56399e",
        "name": "Request body must have a \"value\" property",
        "func": "const InvalidRequestBodyError = new Error(\"invalid request body\");\n\nif (not(\"value\" in msg.req.body)) throw InvalidRequestBodyError;\n\nreturn msg;\n\n// Validation helper functions \n\nfunction not(value) { return !value; }",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1410,
        "y": 660,
        "wires": [
            [
                "10c4d8da13b52538"
            ]
        ],
        "icon": "font-awesome/fa-check-square-o"
    },
    {
        "id": "10c4d8da13b52538",
        "type": "function",
        "z": "f6f2187d.f17ca8",
        "g": "5306d4147b56399e",
        "name": "Retrieve action name",
        "func": "// Retrieves webhook action name from URL\n// Example: \"/webhook/v3/devices/ABC123/increment-count\" --> \"increment-count\"\nmsg.action = msg.req.url\n    .split(msg.req.params[\"deviceId\"])[1]\n    .substring(1);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1360,
        "y": 700,
        "wires": [
            [
                "faaf7701c69097e8"
            ]
        ],
        "outputLabels": [
            "action is valid"
        ],
        "icon": "font-awesome/fa-map-signs",
        "info": "Save action to msg.action."
    },
    {
        "id": "2dc80c3fa796cfee",
        "type": "function",
        "z": "f6f2187d.f17ca8",
        "g": "7034fc0e0bc8f8aa",
        "name": "Validation: \"active\" or \"idle\"",
        "func": "const InvalidRequestBodyError = new Error(\"invalid request body\");\nconst VALUE = msg.req.body.value;\n\n/*\nAction: ACTIVITY-STATUS\nKey \"value\":\n    description: updated status of activity\n    TYPE: string\n    CONSTRAINTS: must be one of the following options:\n        \"active\", \"idle\"\n*/\n//--- Begin of validation algorithm --- //\n\nif (not(isString(VALUE))) throw InvalidRequestBodyError; // Type checking\n\nconst options = [\"active\", \"idle\"];\nif (not(isOneOf(VALUE, options))) throw InvalidRequestBodyError; // Constraints checking\n\n//--- End of validation algorithm --- //\n\nreturn msg;\n\n// --- Validation helper functions --- //\n\nfunction not(value) { return !value; }\n\nfunction isString(value) {\n    return typeof value === \"string\" || value instanceof String;\n}\n\nfunction isOneOf(value, options) {\n    if (not(Array.isArray(options))) {\n        options = [options];\n    }\n    return options.includes(value);\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2240,
        "y": 580,
        "wires": [
            [
                "2d5c43ea3b0e6447"
            ]
        ],
        "icon": "font-awesome/fa-check-circle-o"
    },
    {
        "id": "089f5d7c6adefbc6",
        "type": "function",
        "z": "f6f2187d.f17ca8",
        "g": "707f7d38ec941403",
        "name": "Validation: \"on\" or \"off\"",
        "func": "const InvalidRequestBodyError = new Error(\"invalid request body\");\nconst VALUE = msg.req.body.value;\n\n/*\nAction: POWER-STATUS\nKey \"value\":\n    description: updated status of power (electricity supply)\n    TYPE: string\n    CONSTRAINTS: must be one of the following options:\n        \"on\", \"off\"\n*/\n//--- Begin of validation algorithm --- //\n\nif (not(isString(VALUE))) throw InvalidRequestBodyError; // Type checking\n\nconst options = [\"on\", \"off\"];\nif (not(isOneOf(VALUE, options))) throw InvalidRequestBodyError; // Constraints checking\n\n//--- End of validation algorithm --- //\n\nreturn msg;\n\n// --- Validation helper functions --- //\n\nfunction not(value) { return !value; }\n\nfunction isString(value) {\n    return typeof value === \"string\" || value instanceof String;\n}\n\nfunction isOneOf(value, options) {\n    if (not(Array.isArray(options))) {\n        options = [options];\n    }\n    return options.includes(value);\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2220,
        "y": 680,
        "wires": [
            [
                "1c45e7fcb7af3836"
            ]
        ],
        "icon": "font-awesome/fa-check-circle-o"
    },
    {
        "id": "30a73b0eb45dbc73",
        "type": "function",
        "z": "f6f2187d.f17ca8",
        "g": "61cf3d43ba12830a",
        "name": "Validation: \"online\" or \"offline\"",
        "func": "const InvalidRequestBodyError = new Error(\"invalid request body\");\nconst VALUE = msg.req.body.value;\n\n/*\nAction: CONNECTIVITY-STATUS\nKey \"value\":\n    description: updated status of connectivity\n    TYPE: string\n    CONSTRAINTS: must be one of the following options:\n        \"online\", \"offline\"\n*/\n//--- Begin of validation algorithm --- //\n\nif (not(isString(VALUE))) throw InvalidRequestBodyError; // Type checking\n\nconst options = [\"online\", \"offline\"];\nif (not(isOneOf(VALUE, options))) throw InvalidRequestBodyError; // Constraints checking\n\n//--- End of validation algorithm --- //\n\nreturn msg;\n\n// --- Validation helper functions --- //\n\nfunction not(value) { return !value; }\n\nfunction isString(value) {\n    return typeof value === \"string\" || value instanceof String;\n}\n\nfunction isOneOf(value, options) {\n    if (not(Array.isArray(options))) {\n        options = [options];\n    }\n    return options.includes(value);\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2240,
        "y": 780,
        "wires": [
            [
                "e3ed0fb3bd9a6f7b"
            ]
        ],
        "icon": "font-awesome/fa-check-circle-o"
    },
    {
        "id": "1a143078b4d30a9f",
        "type": "function",
        "z": "f6f2187d.f17ca8",
        "g": "97aa4b76ed175951",
        "name": "Validate device ID format in URL",
        "func": "const DEVICE_ID = msg.req.params.deviceId;\nconst InvalidDeviceError = new Error(\"Not found\");\n\n/* \nValue: DEVICE-ID\nDescription: device serial number\nTYPE: hex string (no need to type check because every URL parameter is a string)\nCONSTRAINTS: must have 6 hexadecimal characters (converting to integer -> max 16777215)\n*/\n//////////////// Begin of validation algorithm ////////////////\n\nconst constraints = {\n    MIN: 0,\n    MAX: parseInt(\"FFFFFF\", 16), // 16777215\n};\n\nif (not(isHexString(DEVICE_ID))) throw InvalidDeviceError; // Constraint 1 checking\n\nconst INT_DEVICE_ID = parseInt(DEVICE_ID, 16);\n\nif (not(isValueInRange(INT_DEVICE_ID,\n    constraints.MIN,\n    constraints.MAX\n))) throw InvalidDeviceError; // Constraint 2 checking\n\n//////////////// End of validation algorithm ////////////////\n\nreturn msg;\n\n//////////////// Validation helper functions ////////////////\n\nfunction isHexString(value) {\n    if (value === \"0\".repeat(value.length)) return true;\n    const trimmed = value.replace(/^(0+)(.*)/, \"$2\");\n    const integer = parseInt(value, 16);\n    return integer.toString(16) === trimmed.toLowerCase();\n}\n\nfunction isValueInRange(value, lowerBound, upperBound) {\n    return value >= lowerBound && value <= upperBound;\n}\n\nfunction not(value) { return !value; }",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 970,
        "y": 580,
        "wires": [
            [
                "bd3747c8283806b1"
            ]
        ],
        "outputLabels": [
            "device ID is valid"
        ],
        "icon": "font-awesome/fa-id-badge"
    },
    {
        "id": "bd3747c8283806b1",
        "type": "function",
        "z": "f6f2187d.f17ca8",
        "g": "97aa4b76ed175951",
        "name": "Append device ID to msg object",
        "func": "msg.device = msg.req.params.deviceId;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 620,
        "wires": [
            [
                "3224a9f1cfaae7ac"
            ]
        ]
    },
    {
        "id": "3224a9f1cfaae7ac",
        "type": "function",
        "z": "f6f2187d.f17ca8",
        "g": "97aa4b76ed175951",
        "name": "Device ID in URL == in Token",
        "func": "if (msg.device !== msg.token.device) {\n    throw new Error(\"invalid device id\");\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 660,
        "wires": [
            [
                "ad404357b34483e0"
            ]
        ],
        "outputLabels": [
            "device ID is valid"
        ],
        "icon": "font-awesome/fa-id-badge"
    },
    {
        "id": "7dd809f95f0822f3",
        "type": "catch",
        "z": "f6f2187d.f17ca8",
        "g": "97aa4b76ed175951",
        "name": "Failed device ID validation",
        "scope": "group",
        "uncaught": false,
        "x": 950,
        "y": 700,
        "wires": [
            [
                "fe13ce69c64e7dc5"
            ]
        ]
    },
    {
        "id": "5c53615e3fe49dcb",
        "type": "change",
        "z": "f6f2187d.f17ca8",
        "g": "24928d29a2a86f3e",
        "name": "Set request URL",
        "rules": [
            {
                "t": "set",
                "p": "url",
                "pt": "msg",
                "to": "${WHK_PERSIST_BASEURL}/call",
                "tot": "env"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2510,
        "y": 460,
        "wires": [
            [
                "afe6ae57ae3f6352"
            ]
        ],
        "icon": "node-red/arrow-in.svg"
    },
    {
        "id": "afe6ae57ae3f6352",
        "type": "subflow:ae46eb5e838c057e",
        "z": "f6f2187d.f17ca8",
        "g": "24928d29a2a86f3e",
        "name": "",
        "x": 2740,
        "y": 460,
        "wires": [
            [
                "edc270ab510e978b"
            ],
            [
                "6416b66687d8f195"
            ]
        ],
        "icon": "font-awesome/fa-external-link"
    },
    {
        "id": "45c3cfcde8a48b8f",
        "type": "subflow:ae46eb5e838c057e",
        "z": "f6f2187d.f17ca8",
        "g": "7034fc0e0bc8f8aa",
        "name": "",
        "x": 2740,
        "y": 580,
        "wires": [
            [
                "edc270ab510e978b"
            ],
            [
                "6416b66687d8f195"
            ]
        ],
        "icon": "font-awesome/fa-external-link"
    },
    {
        "id": "2d5c43ea3b0e6447",
        "type": "change",
        "z": "f6f2187d.f17ca8",
        "g": "7034fc0e0bc8f8aa",
        "name": "Set request URL",
        "rules": [
            {
                "t": "set",
                "p": "url",
                "pt": "msg",
                "to": "${WHK_PERSIST_BASEURL}/call",
                "tot": "env"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2510,
        "y": 580,
        "wires": [
            [
                "45c3cfcde8a48b8f"
            ]
        ],
        "icon": "node-red/arrow-in.svg"
    },
    {
        "id": "1c45e7fcb7af3836",
        "type": "change",
        "z": "f6f2187d.f17ca8",
        "g": "707f7d38ec941403",
        "name": "Set request URL",
        "rules": [
            {
                "t": "set",
                "p": "url",
                "pt": "msg",
                "to": "${WHK_PERSIST_BASEURL}/call",
                "tot": "env"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2510,
        "y": 680,
        "wires": [
            [
                "1db62fb941fa921c"
            ]
        ],
        "icon": "node-red/arrow-in.svg"
    },
    {
        "id": "1db62fb941fa921c",
        "type": "subflow:ae46eb5e838c057e",
        "z": "f6f2187d.f17ca8",
        "g": "707f7d38ec941403",
        "name": "",
        "x": 2740,
        "y": 680,
        "wires": [
            [
                "edc270ab510e978b"
            ],
            [
                "6416b66687d8f195"
            ]
        ],
        "icon": "font-awesome/fa-external-link"
    },
    {
        "id": "e3ed0fb3bd9a6f7b",
        "type": "change",
        "z": "f6f2187d.f17ca8",
        "g": "61cf3d43ba12830a",
        "name": "Set request URL",
        "rules": [
            {
                "t": "set",
                "p": "url",
                "pt": "msg",
                "to": "${WHK_PERSIST_BASEURL}/call",
                "tot": "env"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2510,
        "y": 780,
        "wires": [
            [
                "cc192a7324a5abe8"
            ]
        ],
        "icon": "node-red/arrow-in.svg"
    },
    {
        "id": "cc192a7324a5abe8",
        "type": "subflow:ae46eb5e838c057e",
        "z": "f6f2187d.f17ca8",
        "g": "61cf3d43ba12830a",
        "name": "",
        "x": 2740,
        "y": 780,
        "wires": [
            [
                "edc270ab510e978b"
            ],
            [
                "6416b66687d8f195"
            ]
        ],
        "icon": "font-awesome/fa-external-link"
    },
    {
        "id": "d1ee6ae2907281d1",
        "type": "comment",
        "z": "f6f2187d.f17ca8",
        "g": "88067639c6ab6312",
        "name": "NODE_RED_NODE_JWT_SECRET",
        "info": "",
        "x": 200,
        "y": 360,
        "wires": []
    },
    {
        "id": "fd7051215660be3f",
        "type": "comment",
        "z": "f6f2187d.f17ca8",
        "g": "88067639c6ab6312",
        "name": "WHK_PERSIST_BASEURL",
        "info": "",
        "x": 180,
        "y": 400,
        "wires": []
    },
    {
        "id": "3c274490801a905a",
        "type": "http in",
        "z": "f6f2187d.f17ca8",
        "name": "POST /call",
        "url": "/call",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 2480,
        "y": 360,
        "wires": [
            [
                "8bd8880740668db5"
            ]
        ]
    },
    {
        "id": "8bd8880740668db5",
        "type": "http response",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "statusCode": "500",
        "headers": {
            "content-type": "application/json"
        },
        "x": 2660,
        "y": 360,
        "wires": []
    },
    {
        "id": "b4b4aee9e4db9b20",
        "type": "function",
        "z": "f6f2187d.f17ca8",
        "g": "07d88271bd018e00",
        "name": "Build payload: Server error",
        "func": "msg.payload = {\n    success: false,\n    error: msg.error.message,\n    data: { ...msg.payload },\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3380,
        "y": 1100,
        "wires": [
            [
                "4f590ef245febf9c"
            ]
        ],
        "icon": "node-red/parser-json.svg"
    },
    {
        "id": "ae6c2a2db7cdf441",
        "type": "catch",
        "z": "f6f2187d.f17ca8",
        "g": "cb338ab959082eb2",
        "name": "Request error",
        "scope": [
            "afe6ae57ae3f6352",
            "45c3cfcde8a48b8f",
            "1db62fb941fa921c",
            "cc192a7324a5abe8"
        ],
        "uncaught": false,
        "x": 2710,
        "y": 880,
        "wires": [
            [
                "6416b66687d8f195"
            ]
        ]
    },
    {
        "id": "abf1e8de73c04d14",
        "type": "http in",
        "z": "771cf37830c66e56",
        "g": "86b4d748eeb9b927",
        "name": "POST /devices/{deviceId}/increment-count",
        "url": "/webhook/v1/devices/:deviceId/increment-count",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 240,
        "y": 520,
        "wires": [
            []
        ]
    },
    {
        "id": "100551c3597bd8fd",
        "type": "http response",
        "z": "771cf37830c66e56",
        "g": "46788ed54d2a1669",
        "name": "JSON 200 OK",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 3660,
        "y": 620,
        "wires": []
    },
    {
        "id": "1bb6f83de904cdad",
        "type": "http response",
        "z": "771cf37830c66e56",
        "g": "46788ed54d2a1669",
        "name": "JSON 400 Bad Request",
        "statusCode": "400",
        "headers": {
            "content-type": "application/json"
        },
        "x": 3690,
        "y": 980,
        "wires": []
    },
    {
        "id": "0fdfe0a60b9489fc",
        "type": "change",
        "z": "771cf37830c66e56",
        "g": "dff91a4c02dc3763",
        "name": "Invalid request",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "error.message",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 3420,
        "y": 980,
        "wires": [
            [
                "1bb6f83de904cdad"
            ]
        ],
        "icon": "node-red/parser-json.svg"
    },
    {
        "id": "4e111dee0c2f5db5",
        "type": "http response",
        "z": "771cf37830c66e56",
        "g": "46788ed54d2a1669",
        "name": "JSON 500 Internal Server Error",
        "statusCode": "500",
        "headers": {
            "content-type": "application/json"
        },
        "x": 3710,
        "y": 1100,
        "wires": []
    },
    {
        "id": "7567d9a62dfd5b45",
        "type": "catch",
        "z": "771cf37830c66e56",
        "g": "f19920b58a1906a1",
        "name": "Failed JWT authentication",
        "scope": "group",
        "uncaught": false,
        "x": 630,
        "y": 620,
        "wires": [
            [
                "ceaf8d1b96e18297"
            ]
        ]
    },
    {
        "id": "68d19865b0bf2fb9",
        "type": "http in",
        "z": "771cf37830c66e56",
        "g": "86b4d748eeb9b927",
        "name": "POST /devices/{deviceId}/activity-status",
        "url": "/webhook/v1/devices/:deviceId/activity-status",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 230,
        "y": 560,
        "wires": [
            []
        ]
    },
    {
        "id": "f26110473f629fb7",
        "type": "change",
        "z": "771cf37830c66e56",
        "g": "dff91a4c02dc3763",
        "name": "Unauthorized",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "error.message",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 3430,
        "y": 1020,
        "wires": [
            [
                "d5320dc7763d8037"
            ]
        ],
        "icon": "node-red/parser-json.svg"
    },
    {
        "id": "d5320dc7763d8037",
        "type": "http response",
        "z": "771cf37830c66e56",
        "g": "46788ed54d2a1669",
        "name": "JSON 401 Unauthorized",
        "statusCode": "401",
        "headers": {
            "content-type": "application/json"
        },
        "x": 3690,
        "y": 1020,
        "wires": []
    },
    {
        "id": "a12990ed076b7f97",
        "type": "http response",
        "z": "771cf37830c66e56",
        "g": "46788ed54d2a1669",
        "name": "JSON 404 Not Found",
        "statusCode": "404",
        "headers": {
            "content-type": "application/json"
        },
        "x": 3680,
        "y": 1060,
        "wires": []
    },
    {
        "id": "b73f773e04a035b8",
        "type": "change",
        "z": "771cf37830c66e56",
        "g": "dff91a4c02dc3763",
        "name": "Not found",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "error.message",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 3440,
        "y": 1060,
        "wires": [
            [
                "a12990ed076b7f97"
            ]
        ],
        "icon": "node-red/parser-json.svg"
    },
    {
        "id": "5d46a635b1cabd88",
        "type": "http in",
        "z": "771cf37830c66e56",
        "g": "86b4d748eeb9b927",
        "name": "POST /devices/{deviceId}/power-status",
        "url": "/webhook/v1/devices/:deviceId/power-status",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 230,
        "y": 600,
        "wires": [
            []
        ]
    },
    {
        "id": "039f145c8966af9b",
        "type": "http in",
        "z": "771cf37830c66e56",
        "g": "86b4d748eeb9b927",
        "name": "POST /devices/{deviceId}/connectivity-status",
        "url": "/webhook/v1/devices/:deviceId/connectivity-status",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 250,
        "y": 640,
        "wires": [
            []
        ]
    },
    {
        "id": "2ab671b44026891e",
        "type": "change",
        "z": "771cf37830c66e56",
        "g": "dff91a4c02dc3763",
        "name": "Empty object",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 3430,
        "y": 940,
        "wires": [
            []
        ],
        "icon": "node-red/parser-json.svg"
    },
    {
        "id": "2e91c481be4b2987",
        "type": "switch",
        "z": "771cf37830c66e56",
        "g": "9fb2174aa5c036be",
        "name": "Route request to action",
        "property": "action",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "increment-count",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "activity-status",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "power-status",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "connectivity-status",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 5,
        "x": 1810,
        "y": 660,
        "wires": [
            [
                "7767e9608943a5e3"
            ],
            [
                "438d8ce56d1f0946"
            ],
            [
                "b403434a03e60f1a"
            ],
            [
                "a651a27cc866c709"
            ],
            [
                "4b0737f4bf193311"
            ]
        ]
    },
    {
        "id": "7767e9608943a5e3",
        "type": "function",
        "z": "771cf37830c66e56",
        "g": "6fe02ea50ce402cc",
        "name": "Validation: value is finite number",
        "func": "const InvalidRequestBodyError = new Error(\"invalid request body\");\nconst VALUE = msg.req.body.value;\n\n/* \nAction: INCREMENT-COUNT\nKey \"value\":\n    description: quantity to add (positive) or subtract (negative) from count in database\n    TYPE: number\n    CONSTRAINTS: must be finite\n*/\n//--- Begin of validation algorithm --- //\n\nif (not(isNumber(VALUE))) throw InvalidRequestBodyError; // Type checking\nif (not(Number.isFinite(VALUE))) throw InvalidRequestBodyError; // Constraints checking\n\n//--- End of validation algorithm --- //\n\nreturn msg;\n\n//--- Validation helper functions ---//\n\nfunction isNumber(value) {\n    return typeof value === \"number\" || value instanceof Number;\n}\n\nfunction not(value) { return !value; }",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2250,
        "y": 460,
        "wires": [
            [
                "267b80f15a370763"
            ]
        ],
        "icon": "font-awesome/fa-check-circle-o"
    },
    {
        "id": "94ffb2d3c186e3d5",
        "type": "catch",
        "z": "771cf37830c66e56",
        "g": "9fb2174aa5c036be",
        "name": "Validation error",
        "scope": [
            "7767e9608943a5e3",
            "438d8ce56d1f0946",
            "b403434a03e60f1a",
            "a651a27cc866c709"
        ],
        "uncaught": false,
        "x": 2200,
        "y": 880,
        "wires": [
            [
                "9701d3fbebdcfbcf"
            ]
        ]
    },
    {
        "id": "a8e9d66bd1b94d3e",
        "type": "function",
        "z": "771cf37830c66e56",
        "g": "634fe665dcefe5b5",
        "name": "Parse request body as object",
        "func": "if (typeof msg.req.body === \"string\") {\n    msg.req.body = JSON.parse(msg.req.body);\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1320,
        "y": 580,
        "wires": [
            [
                "ed2e551edce22a89"
            ]
        ],
        "icon": "node-red/parser-json.svg"
    },
    {
        "id": "651b42792cca81f6",
        "type": "function",
        "z": "771cf37830c66e56",
        "g": "634fe665dcefe5b5",
        "name": "Complete request body",
        "func": "msg.req.body.device = msg.device;\nmsg.req.body.customer = msg.token.customer;\nmsg.req.body.action = msg.action;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1390,
        "y": 740,
        "wires": [
            [
                "2e91c481be4b2987"
            ]
        ],
        "icon": "node-red/parser-json.svg"
    },
    {
        "id": "ed2e551edce22a89",
        "type": "function",
        "z": "771cf37830c66e56",
        "g": "634fe665dcefe5b5",
        "name": "Request body must be an object",
        "func": "const InvalidRequestBodyError = new Error(\"invalid request body\");\n\nif (not(isObject(msg.req.body))) { throw InvalidRequestBodyError; }\n\nreturn msg;\n\n// Validation helper functions \n\nfunction isObject(value) {\n    return (\n        typeof value === \"object\" &&\n        value !== null &&\n        !Array.isArray(value)\n    );\n}\n\nfunction not(value) { return !value; }",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1350,
        "y": 620,
        "wires": [
            [
                "deb864a72a3c47f0"
            ]
        ],
        "icon": "font-awesome/fa-check-square-o"
    },
    {
        "id": "5b9c5ba91f07a5e0",
        "type": "catch",
        "z": "771cf37830c66e56",
        "g": "634fe665dcefe5b5",
        "name": "Invalid request body",
        "scope": "group",
        "uncaught": false,
        "x": 1310,
        "y": 780,
        "wires": [
            [
                "99de7fa9e0b4b6e6"
            ]
        ]
    },
    {
        "id": "deb864a72a3c47f0",
        "type": "function",
        "z": "771cf37830c66e56",
        "g": "634fe665dcefe5b5",
        "name": "Request body must have a \"value\" property",
        "func": "const InvalidRequestBodyError = new Error(\"invalid request body\");\n\nif (not(\"value\" in msg.req.body)) throw InvalidRequestBodyError;\n\nreturn msg;\n\n// Validation helper functions \n\nfunction not(value) { return !value; }",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1410,
        "y": 660,
        "wires": [
            [
                "5fb6748436a70778"
            ]
        ],
        "icon": "font-awesome/fa-check-square-o"
    },
    {
        "id": "5fb6748436a70778",
        "type": "function",
        "z": "771cf37830c66e56",
        "g": "634fe665dcefe5b5",
        "name": "Retrieve action name",
        "func": "// Retrieves webhook action name from URL\n// Example: \"/webhook/v3/devices/ABC123/increment-count\" --> \"increment-count\"\nmsg.action = msg.req.url\n    .split(msg.req.params[\"deviceId\"])[1]\n    .substring(1);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1360,
        "y": 700,
        "wires": [
            [
                "651b42792cca81f6"
            ]
        ],
        "outputLabels": [
            "action is valid"
        ],
        "icon": "font-awesome/fa-map-signs",
        "info": "Save action to msg.action."
    },
    {
        "id": "438d8ce56d1f0946",
        "type": "function",
        "z": "771cf37830c66e56",
        "g": "a25102050b9ce0fc",
        "name": "Validation: \"active\" or \"idle\"",
        "func": "const InvalidRequestBodyError = new Error(\"invalid request body\");\nconst VALUE = msg.req.body.value;\n\n/*\nAction: ACTIVITY-STATUS\nKey \"value\":\n    description: updated status of activity\n    TYPE: string\n    CONSTRAINTS: must be one of the following options:\n        \"active\", \"idle\"\n*/\n//--- Begin of validation algorithm --- //\n\nif (not(isString(VALUE))) throw InvalidRequestBodyError; // Type checking\n\nconst options = [\"active\", \"idle\"];\nif (not(isOneOf(VALUE, options))) throw InvalidRequestBodyError; // Constraints checking\n\n//--- End of validation algorithm --- //\n\nreturn msg;\n\n// --- Validation helper functions --- //\n\nfunction not(value) { return !value; }\n\nfunction isString(value) {\n    return typeof value === \"string\" || value instanceof String;\n}\n\nfunction isOneOf(value, options) {\n    if (not(Array.isArray(options))) {\n        options = [options];\n    }\n    return options.includes(value);\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2240,
        "y": 580,
        "wires": [
            [
                "726e05c6ecd9c717"
            ]
        ],
        "icon": "font-awesome/fa-check-circle-o"
    },
    {
        "id": "b403434a03e60f1a",
        "type": "function",
        "z": "771cf37830c66e56",
        "g": "cd6329195dd77f66",
        "name": "Validation: \"on\" or \"off\"",
        "func": "const InvalidRequestBodyError = new Error(\"invalid request body\");\nconst VALUE = msg.req.body.value;\n\n/*\nAction: POWER-STATUS\nKey \"value\":\n    description: updated status of power (electricity supply)\n    TYPE: string\n    CONSTRAINTS: must be one of the following options:\n        \"on\", \"off\"\n*/\n//--- Begin of validation algorithm --- //\n\nif (not(isString(VALUE))) throw InvalidRequestBodyError; // Type checking\n\nconst options = [\"on\", \"off\"];\nif (not(isOneOf(VALUE, options))) throw InvalidRequestBodyError; // Constraints checking\n\n//--- End of validation algorithm --- //\n\nreturn msg;\n\n// --- Validation helper functions --- //\n\nfunction not(value) { return !value; }\n\nfunction isString(value) {\n    return typeof value === \"string\" || value instanceof String;\n}\n\nfunction isOneOf(value, options) {\n    if (not(Array.isArray(options))) {\n        options = [options];\n    }\n    return options.includes(value);\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2220,
        "y": 680,
        "wires": [
            [
                "3c2d3825b2420f5f"
            ]
        ],
        "icon": "font-awesome/fa-check-circle-o"
    },
    {
        "id": "a651a27cc866c709",
        "type": "function",
        "z": "771cf37830c66e56",
        "g": "077ae6d33434b42f",
        "name": "Validation: \"online\" or \"offline\"",
        "func": "const InvalidRequestBodyError = new Error(\"invalid request body\");\nconst VALUE = msg.req.body.value;\n\n/*\nAction: CONNECTIVITY-STATUS\nKey \"value\":\n    description: updated status of connectivity\n    TYPE: string\n    CONSTRAINTS: must be one of the following options:\n        \"online\", \"offline\"\n*/\n//--- Begin of validation algorithm --- //\n\nif (not(isString(VALUE))) throw InvalidRequestBodyError; // Type checking\n\nconst options = [\"online\", \"offline\"];\nif (not(isOneOf(VALUE, options))) throw InvalidRequestBodyError; // Constraints checking\n\n//--- End of validation algorithm --- //\n\nreturn msg;\n\n// --- Validation helper functions --- //\n\nfunction not(value) { return !value; }\n\nfunction isString(value) {\n    return typeof value === \"string\" || value instanceof String;\n}\n\nfunction isOneOf(value, options) {\n    if (not(Array.isArray(options))) {\n        options = [options];\n    }\n    return options.includes(value);\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2240,
        "y": 780,
        "wires": [
            [
                "e1c754f31719f1f1"
            ]
        ],
        "icon": "font-awesome/fa-check-circle-o"
    },
    {
        "id": "1374916417af0ee0",
        "type": "function",
        "z": "771cf37830c66e56",
        "g": "2d52830535b42bd9",
        "name": "Validate device ID format in URL",
        "func": "const DEVICE_ID = msg.req.params.deviceId;\nconst InvalidDeviceError = new Error(\"Not found\");\n\n/* \nValue: DEVICE-ID\nDescription: device serial number\nTYPE: hex string (no need to type check because every URL parameter is a string)\nCONSTRAINTS: must have 6 hexadecimal characters (converting to integer -> max 16777215)\n*/\n//////////////// Begin of validation algorithm ////////////////\n\nconst constraints = {\n    MIN: 0,\n    MAX: parseInt(\"FFFFFF\", 16), // 16777215\n};\n\nif (not(isHexString(DEVICE_ID))) throw InvalidDeviceError; // Constraint 1 checking\n\nconst INT_DEVICE_ID = parseInt(DEVICE_ID, 16);\n\nif (not(isValueInRange(INT_DEVICE_ID,\n    constraints.MIN,\n    constraints.MAX\n))) throw InvalidDeviceError; // Constraint 2 checking\n\n//////////////// End of validation algorithm ////////////////\n\nreturn msg;\n\n//////////////// Validation helper functions ////////////////\n\nfunction isHexString(value) {\n    if (value === \"0\".repeat(value.length)) return true;\n    const trimmed = value.replace(/^(0+)(.*)/, \"$2\");\n    const integer = parseInt(value, 16);\n    return integer.toString(16) === trimmed.toLowerCase();\n}\n\nfunction isValueInRange(value, lowerBound, upperBound) {\n    return value >= lowerBound && value <= upperBound;\n}\n\nfunction not(value) { return !value; }",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 970,
        "y": 580,
        "wires": [
            [
                "642038d6772a3a28"
            ]
        ],
        "outputLabels": [
            "device ID is valid"
        ],
        "icon": "font-awesome/fa-id-badge"
    },
    {
        "id": "642038d6772a3a28",
        "type": "function",
        "z": "771cf37830c66e56",
        "g": "2d52830535b42bd9",
        "name": "Append device ID to msg object",
        "func": "msg.device = msg.req.params.deviceId;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 620,
        "wires": [
            [
                "f7f543a318803dca"
            ]
        ]
    },
    {
        "id": "f7f543a318803dca",
        "type": "function",
        "z": "771cf37830c66e56",
        "g": "2d52830535b42bd9",
        "name": "Device ID in URL == in Token",
        "func": "if (msg.device !== msg.token.device) {\n    throw new Error(\"invalid device id\");\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 660,
        "wires": [
            [
                "a8e9d66bd1b94d3e"
            ]
        ],
        "outputLabels": [
            "device ID is valid"
        ],
        "icon": "font-awesome/fa-id-badge"
    },
    {
        "id": "47f3cab5c1c72dfe",
        "type": "catch",
        "z": "771cf37830c66e56",
        "g": "2d52830535b42bd9",
        "name": "Failed device ID validation",
        "scope": "group",
        "uncaught": false,
        "x": 950,
        "y": 700,
        "wires": [
            [
                "8dcfe6e0fed15678"
            ]
        ]
    },
    {
        "id": "267b80f15a370763",
        "type": "change",
        "z": "771cf37830c66e56",
        "g": "6fe02ea50ce402cc",
        "name": "Set request URL",
        "rules": [
            {
                "t": "set",
                "p": "url",
                "pt": "msg",
                "to": "${WHK_PERSIST_BASEURL}/call",
                "tot": "env"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2510,
        "y": 460,
        "wires": [
            []
        ],
        "icon": "node-red/arrow-in.svg"
    },
    {
        "id": "726e05c6ecd9c717",
        "type": "change",
        "z": "771cf37830c66e56",
        "g": "a25102050b9ce0fc",
        "name": "Set request URL",
        "rules": [
            {
                "t": "set",
                "p": "url",
                "pt": "msg",
                "to": "${WHK_PERSIST_BASEURL}/call",
                "tot": "env"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2510,
        "y": 580,
        "wires": [
            []
        ],
        "icon": "node-red/arrow-in.svg"
    },
    {
        "id": "3c2d3825b2420f5f",
        "type": "change",
        "z": "771cf37830c66e56",
        "g": "cd6329195dd77f66",
        "name": "Set request URL",
        "rules": [
            {
                "t": "set",
                "p": "url",
                "pt": "msg",
                "to": "${WHK_PERSIST_BASEURL}/call",
                "tot": "env"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2510,
        "y": 680,
        "wires": [
            []
        ],
        "icon": "node-red/arrow-in.svg"
    },
    {
        "id": "e1c754f31719f1f1",
        "type": "change",
        "z": "771cf37830c66e56",
        "g": "077ae6d33434b42f",
        "name": "Set request URL",
        "rules": [
            {
                "t": "set",
                "p": "url",
                "pt": "msg",
                "to": "${WHK_PERSIST_BASEURL}/call",
                "tot": "env"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2510,
        "y": 780,
        "wires": [
            []
        ],
        "icon": "node-red/arrow-in.svg"
    },
    {
        "id": "cb6e1a425ba98144",
        "type": "comment",
        "z": "771cf37830c66e56",
        "g": "1c3ce4717ad9b10b",
        "name": "NODE_RED_NODE_JWT_SECRET",
        "info": "",
        "x": 200,
        "y": 360,
        "wires": []
    },
    {
        "id": "3b08bc45b5f541dd",
        "type": "comment",
        "z": "771cf37830c66e56",
        "g": "1c3ce4717ad9b10b",
        "name": "WHK_PERSIST_BASEURL",
        "info": "",
        "x": 180,
        "y": 400,
        "wires": []
    },
    {
        "id": "485a7bc04959b3b3",
        "type": "http in",
        "z": "771cf37830c66e56",
        "name": "POST /call",
        "url": "/call",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 2480,
        "y": 360,
        "wires": [
            [
                "bc44d7662d01f832"
            ]
        ]
    },
    {
        "id": "bc44d7662d01f832",
        "type": "http response",
        "z": "771cf37830c66e56",
        "name": "",
        "statusCode": "500",
        "headers": {
            "content-type": "application/json"
        },
        "x": 2660,
        "y": 360,
        "wires": []
    },
    {
        "id": "6042e1270e34f016",
        "type": "function",
        "z": "771cf37830c66e56",
        "g": "dff91a4c02dc3763",
        "name": "Build payload: Server error",
        "func": "msg.payload = {\n    success: false,\n    error: msg.error.message,\n    data: { ...msg.payload },\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3380,
        "y": 1100,
        "wires": [
            [
                "4e111dee0c2f5db5"
            ]
        ],
        "icon": "node-red/parser-json.svg"
    },
    {
        "id": "1e528dde1c4b1c21",
        "type": "catch",
        "z": "771cf37830c66e56",
        "g": "9fb2174aa5c036be",
        "name": "Request error",
        "scope": [
            "e8085817a6b8b5f5",
            "e694d8a5fb8e4166",
            "e9c7078e9964fbb5",
            "8cb9948e1b94bbf4"
        ],
        "uncaught": false,
        "x": 2710,
        "y": 880,
        "wires": [
            [
                "6f0623e24c0936de"
            ]
        ]
    },
    {
        "id": "bfd7a32993934b22",
        "type": "mqtt in",
        "z": "a5842f27a7cf81f9",
        "name": "PHD",
        "topic": "PHD",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "a7e2d5870aa3d2d2",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 130,
        "y": 120,
        "wires": [
            [
                "73f1e11c9d95a70f"
            ]
        ]
    },
    {
        "id": "ce5064ca08b66b5d",
        "type": "debug",
        "z": "a5842f27a7cf81f9",
        "name": "debug 163",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 830,
        "y": 120,
        "wires": []
    },
    {
        "id": "470414a517165075",
        "type": "inject",
        "z": "a5842f27a7cf81f9",
        "name": "SWITCH1 ON",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "DF4B95",
        "payload": "{\"Switch1\": {\"Action\": \"ON\"} }",
        "payloadType": "json",
        "x": 150,
        "y": 220,
        "wires": [
            [
                "0257c73f20c7a220"
            ]
        ]
    },
    {
        "id": "c690a5926e4926a2",
        "type": "inject",
        "z": "a5842f27a7cf81f9",
        "name": "SWITCH1 OFF",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "DF4B95",
        "payload": "{\"Switch1\": {\"Action\": \"OFF\"} }",
        "payloadType": "json",
        "x": 160,
        "y": 260,
        "wires": [
            [
                "0257c73f20c7a220"
            ]
        ]
    },
    {
        "id": "41d70985d172ad9b",
        "type": "inject",
        "z": "a5842f27a7cf81f9",
        "name": "SWITCH2 ON",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "DF4B95",
        "payload": "{\"Switch2\": {\"Action\": \"ON\"} }",
        "payloadType": "json",
        "x": 150,
        "y": 320,
        "wires": [
            [
                "0257c73f20c7a220"
            ]
        ]
    },
    {
        "id": "d6f53bb1753d37e1",
        "type": "inject",
        "z": "a5842f27a7cf81f9",
        "name": "SWITCH2 OFF",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "DF4B95",
        "payload": "{\"Switch2\": {\"Action\": \"OFF\"} }",
        "payloadType": "json",
        "x": 160,
        "y": 360,
        "wires": [
            [
                "0257c73f20c7a220"
            ]
        ]
    },
    {
        "id": "ae21973dccc72469",
        "type": "inject",
        "z": "a5842f27a7cf81f9",
        "name": "SWITCH3 ON",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "DF55B2",
        "payload": "{\"Switch3\": {\"Action\": \"ON\"} }",
        "payloadType": "json",
        "x": 150,
        "y": 420,
        "wires": [
            [
                "0257c73f20c7a220"
            ]
        ]
    },
    {
        "id": "fb77f1ca56e7a81b",
        "type": "inject",
        "z": "a5842f27a7cf81f9",
        "name": "SWITCH3 OFF",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "DF55B2",
        "payload": "{\"Switch3\": {\"Action\": \"OFF\"} }",
        "payloadType": "json",
        "x": 160,
        "y": 460,
        "wires": [
            [
                "0257c73f20c7a220"
            ]
        ]
    },
    {
        "id": "8848b39e832cff4a",
        "type": "inject",
        "z": "a5842f27a7cf81f9",
        "name": "SWITCH4 ON",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "DF55B2",
        "payload": "{\"Switch4\": {\"Action\": \"ON\"} }",
        "payloadType": "json",
        "x": 150,
        "y": 520,
        "wires": [
            [
                "0257c73f20c7a220"
            ]
        ]
    },
    {
        "id": "1bf56dbd8cf99ca8",
        "type": "inject",
        "z": "a5842f27a7cf81f9",
        "name": "SWITCH4 OFF",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "DF55B2",
        "payload": "{\"Switch4\": {\"Action\": \"OFF\"} }",
        "payloadType": "json",
        "x": 160,
        "y": 560,
        "wires": [
            [
                "0257c73f20c7a220"
            ]
        ]
    },
    {
        "id": "02136217a2fc5cc2",
        "type": "inject",
        "z": "a5842f27a7cf81f9",
        "name": "STATUS8",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "DF55B2",
        "payload": "{\"StatusSNS\": {  \"Switch4\": \"ON\" } }",
        "payloadType": "json",
        "x": 140,
        "y": 600,
        "wires": [
            [
                "0257c73f20c7a220"
            ]
        ]
    },
    {
        "id": "698a1dc10c696948",
        "type": "inject",
        "z": "a5842f27a7cf81f9",
        "name": "STATUS8",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "DF55B2",
        "payload": "{\"StatusSNS\": {  \"Switch4\": \"OFF\" } }",
        "payloadType": "json",
        "x": 140,
        "y": 640,
        "wires": [
            [
                "0257c73f20c7a220"
            ]
        ]
    },
    {
        "id": "0257c73f20c7a220",
        "type": "switch",
        "z": "a5842f27a7cf81f9",
        "name": "MACHINES",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "DF55B2",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "DF4B95",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 450,
        "y": 420,
        "wires": [
            [
                "a07aa4087b9d6ddf"
            ],
            [
                "aa8ba60dbefb1625"
            ]
        ],
        "icon": "font-awesome/fa-desktop"
    },
    {
        "id": "a07aa4087b9d6ddf",
        "type": "switch",
        "z": "a5842f27a7cf81f9",
        "name": "STATUS8",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "hask",
                "v": "Switch1",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "Switch2",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "Switch3",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "Switch4",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "StatusSNS",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 5,
        "x": 660,
        "y": 300,
        "wires": [
            [
                "54cba02c942a80e7"
            ],
            [
                "54cba02c942a80e7"
            ],
            [
                "54cba02c942a80e7"
            ],
            [
                "54cba02c942a80e7"
            ],
            [
                "54cba02c942a80e7"
            ]
        ],
        "icon": "node-red/bridge.svg"
    },
    {
        "id": "54cba02c942a80e7",
        "type": "rbe",
        "z": "a5842f27a7cf81f9",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 830,
        "y": 300,
        "wires": [
            [
                "6beb267029470abe"
            ]
        ]
    },
    {
        "id": "6beb267029470abe",
        "type": "function",
        "z": "a5842f27a7cf81f9",
        "name": "SwitchesStates",
        "func": "var verifySwitch = msg.payload;\nlet switchSelected;\nlet action;\n\n//Mapeamento de todos os switches\nvar switchMap = {\n  'Switch1': verifySwitch && verifySwitch.Switch1?.Action,\n  'Switch2': verifySwitch && verifySwitch.Switch2?.Action,\n  'Switch3': verifySwitch && verifySwitch.Switch3?.Action,\n  'Switch4': verifySwitch && (verifySwitch.Switch4?.Action || verifySwitch.StatusSNS?.Switch4) \n};\n\nfor (let key in switchMap) {\n  if(switchMap[key]) {\n    switchSelected = key;\n    action = switchMap[key];\n    break;\n  }\n}\nif (!switchSelected || !action) {\n  switchSelected = \"Valor inv√°lido\";\n  action = \"Valor inv√°lido\";\n}\ncontext.set('switchSelected', switchSelected);\ncontext.set('action', action);\n\nmsg.switchState = {\n  Switch: switchSelected,\n  action: action\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1060,
        "y": 240,
        "wires": [
            [
                "30d6b28222dd9dbc"
            ]
        ],
        "icon": "node-red/swap.svg"
    },
    {
        "id": "30d6b28222dd9dbc",
        "type": "function",
        "z": "a5842f27a7cf81f9",
        "name": "ConditionsMachine",
        "func": "let switchExisting = msg.switchState;\n\nlet switchMap = {\n    \"Switch1\": 'machiningStart',\n    \"Switch2\": 'machiningEnd',\n    \"Switch3\": 'alarm',\n    \"Switch4\": 'machiningRunning'\n}\n\nif (switchExisting.Switch && switchMap.hasOwnProperty(switchExisting.Switch)) {\n    let switchVariable = switchMap[switchExisting.Switch];\n    if (switchExisting.action == \"ON\") {\n        context.set(switchVariable, true);\n    } else if (switchExisting.action == \"OFF\") {\n        context.set(switchVariable, false);\n    }\n}\n\nmsg.conditions = {\n    machiningStart: context.get('machiningStart') || false,\n    machiningEnd: context.get('machiningEnd') || false,\n    alarm: context.get('alarm') || false,\n    machiningRunning: context.get('machiningRunning') || false\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 280,
        "wires": [
            [
                "7c15eabd4e33238a"
            ]
        ],
        "icon": "font-awesome/fa-list"
    },
    {
        "id": "7c15eabd4e33238a",
        "type": "function",
        "z": "a5842f27a7cf81f9",
        "name": "checkingPart",
        "func": "let machiningStart = msg.conditions.machiningStart;\nlet machiningEnd = msg.conditions.machiningEnd;\nlet alarm = msg.conditions.alarm;\nlet machiningRunning = msg.conditions.machiningRunning;\nlet sumWorkingTime = context.get('sumWorkingTime') || 0;\nlet sumIdleTime = context.get('sumIdleTime') || 0;\nlet startWorking = context.get('startWorking') || null;\nlet lastTimestamp = context.get('lastTimestamp') || null;\nlet currentTimestamp = new Date();\nlet partFinished = context.get('partFinished') || false;\nlet verifyPart = context.get('verifyPart') || false;\nlet verifyAlarm = context.get('verifyAlarm') || false;\n\nif(machiningStart || machiningRunning) { /* verifica√ß√£o para o in√≠cio da usinagem */\n    context.set('startWorking', currentTimestamp.getTime());\n    \n}\nelse if (!machiningStart && !machiningRunning && machiningEnd) { /* verifica√ß√£o para o final da usinagem  */\n    partFinished = true;\n    context.set('partFinished', partFinished);\n\n}\n\nif (alarm) {\n    verifyAlarm = true;\n    context.set('verifyAlarm', verifyAlarm);\n\n}\nmsg.data = {\n    partFinished: partFinished,\n    verifyAlarm: verifyAlarm,\n    startWorking: startWorking\n}\n\nif(partFinished) {\n    partFinished = false;\n    context.set('partFinished', partFinished);\n}\n\nif (verifyAlarm) {\n    verifyAlarm = false;\n    context.set('verifyAlarm', verifyAlarm);\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1050,
        "y": 320,
        "wires": [
            [
                "7dbb75dfc1c0d0b3"
            ]
        ],
        "icon": "font-awesome/fa-folder-open"
    },
    {
        "id": "7dbb75dfc1c0d0b3",
        "type": "function",
        "z": "a5842f27a7cf81f9",
        "name": "Construct Payload",
        "func": "let payload = msg.payload;\nlet data = msg.data || {};\nlet partFinished = data.partFinished || {};\nlet verifyAlarm = data.verifyAlarm || {};\nlet conditions = msg.conditions || {};\nlet startWorking = data.startWorking || null;\nlet machiningStart = conditions.machiningStart || {};\nlet contextData = {\n    partCount: context.get('partCount') || 0,\n    alarmCount: context.get('alarmCount') || 0,\n    lastTimestamp: context.get('lastTimestamp') || null,\n    sumWorkingTime: context.get('sumWorkingTime') || 0,\n    sumIdleTime: context.get('sumIdleTime') || 0,\n    resetShift: context.get('resetShift') || false\n}\nlet currentTimestamp = new Date();\nlet workingTimeMinutes = context.get('workingTimeMinutes') || 0;\nlet idleTimeMinutes = context.get('idleTimeMinutes') || 0;\n\nif(contextData.resetShift) { /* Reseta as vari√°veis ao final do turno */\n    contextData = {\n        partCount: 0,\n        alarmCount: 0,\n        sumWorkingTime: 0,\n        sumIdleTime: 0,\n        lastTimestamp: null,\n        resetShift: false\n    }\n}\nif(partFinished == true) {\n    contextData.partCount++;\n    contextData.lastTimestamp = currentTimestamp;\n\n    if(startWorking !== null) {\n        let timeWorking = (currentTimestamp.getTime() - startWorking) / 1000;\n        contextData.sumWorkingTime += timeWorking;\n\n        workingTimeMinutes = contextData.sumWorkingTime / 60;\n        context.set('workingTimeMinutes', workingTimeMinutes);\n    }\n}\nif(machiningStart && contextData.lastTimestamp) {\n    let timeIdle = (currentTimestamp.getTime() - contextData.lastTimestamp.getTime()) / 1000;\n\n    if(timeIdle >= 300) {\n        contextData.sumIdleTime += timeIdle;\n\n        workingTimeMinutes = contextData.sumWorkingTime / 60;\n        context.set('idleTimeMinutes', idleTimeMinutes);\n    }\n    else {\n        contextData.sumWorkingTime += timeIdle;\n\n        workingTimeMinutes = contextData.sumWorkingTime / 60;\n        context.set('workingTimeMinutes', workingTimeMinutes);\n    }\n}\n\nif (verifyAlarm == true) {\n    contextData.alarmCount++\n}\n\nfor (let key in contextData) {\n    context.set(key, contextData[key]);\n}\nmsg.payload = {\n    pecas: contextData.partCount,\n    alarmes: contextData.alarmCount,\n    workingTime: contextData.sumWorkingTime,\n    workingTimeMinutes: workingTimeMinutes,\n    idleTime: contextData.sumIdleTime,\n    idleTimeMinutes: idleTimeMinutes\n}\nif (payload == \"reset\") {\n    contextData.resetShift = true;\n    context.set('resetShift', contextData.resetShift);\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 360,
        "wires": [
            [
                "f88c8d9c5956992b"
            ]
        ],
        "icon": "node-red/envelope.svg"
    },
    {
        "id": "f88c8d9c5956992b",
        "type": "function",
        "z": "a5842f27a7cf81f9",
        "name": "OKUMA 09",
        "func": "let payload = msg.payload;\nlet machine = msg.payload.serialNumber;\nlet workingTimeMinutes = context.get('workingTimeMinutes') || 0;\nlet idleTimeMinutes = context.get('idleTimeMinutes') || 0;\n\nfunction minutesToHours(totalMinutes) {\n    var hours = String(Math.floor(totalMinutes / 60)).padStart(2, \"0\");\n    var minutes = String(totalMinutes % 60).padStart(2, \"0\");\n\n    return `${hours}:${minutes}`;\n}\n\nif (payload.workingTime && payload.workingTime > 0) {\n    workingTimeMinutes = payload.workingTime / 60;\n    context.set('workingTimeMinutes', workingTimeMinutes);\n}\nif (payload.idleTime && payload.idleTime > 0) {\n    idleTimeMinutes = payload.idleTime / 60;\n    context.set('workingTimeMinutes', workingTimeMinutes);\n}\nmsg.payload = {\n    pecas: payload.pecas,\n    alarmes: payload.alarmes,\n    workingTimeMinutes: minutesToHours(workingTimeMinutes.toFixed(0)),\n    idleTimeMinutes: minutesToHours(idleTimeMinutes.toFixed(0)),\n    deviceSerialNumber: machine\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1050,
        "y": 400,
        "wires": [
            [
                "a15f2ae8871c0693"
            ]
        ],
        "icon": "node-red/envelope.svg"
    },
    {
        "id": "a15f2ae8871c0693",
        "type": "debug",
        "z": "a5842f27a7cf81f9",
        "name": "debug 167",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1270,
        "y": 460,
        "wires": []
    },
    {
        "id": "aa8ba60dbefb1625",
        "type": "switch",
        "z": "a5842f27a7cf81f9",
        "name": "STATUS8",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "hask",
                "v": "Switch1",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "Switch2",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "Switch3",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "StatusSNS",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 4,
        "x": 660,
        "y": 480,
        "wires": [
            [
                "9fbe1e943da996ef"
            ],
            [
                "9fbe1e943da996ef"
            ],
            [
                "9fbe1e943da996ef"
            ],
            [
                "9fbe1e943da996ef",
                "75340b9e3de29864"
            ]
        ],
        "icon": "node-red/bridge.svg"
    },
    {
        "id": "9fbe1e943da996ef",
        "type": "rbe",
        "z": "a5842f27a7cf81f9",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 830,
        "y": 480,
        "wires": [
            [
                "8bf1b954997fa9f8"
            ]
        ]
    },
    {
        "id": "8bf1b954997fa9f8",
        "type": "function",
        "z": "a5842f27a7cf81f9",
        "name": "SwitchesStates",
        "func": "var verifySwitch = msg.payload;\nlet switchSelected;\nlet action;\n\n//Mapeamento de todos os switches\nvar switchMap = {\n  'Switch1': verifySwitch && (verifySwitch.Switch1?.Action || verifySwitch.StatusSNS?.Switch1),\n  'Switch2': verifySwitch && verifySwitch.Switch2?.Action,\n  'Switch3': verifySwitch && verifySwitch.Switch3?.Action,\n};\n\nfor (let key in switchMap) {\n  if(switchMap[key]) {\n    switchSelected = key;\n    action = switchMap[key];\n    break;\n  }\n}\nif (!switchSelected || !action) {\n  switchSelected = \"Valor inv√°lido\";\n  action = \"Valor inv√°lido\";\n}\ncontext.set('switchSelected', switchSelected);\ncontext.set('action', action);\n\nmsg.switchState = {\n  Switch: switchSelected,\n  action: action\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1060,
        "y": 480,
        "wires": [
            [
                "eba003ed9337a334"
            ]
        ],
        "icon": "node-red/swap.svg"
    },
    {
        "id": "eba003ed9337a334",
        "type": "function",
        "z": "a5842f27a7cf81f9",
        "name": "ConditionsMachine",
        "func": "let switchExisting = msg.switchState;\n\nlet switchMap = {\n    \"Switch1\": 'machiningRunning',\n    \"Switch2\": 'machiningEnd',\n    \"Switch3\": 'alarm',\n}\n\nif (switchExisting.Switch && switchMap.hasOwnProperty(switchExisting.Switch)) {\n    let switchVariable = switchMap[switchExisting.Switch];\n    if (switchExisting.action == \"ON\") {\n        context.set(switchVariable, true);\n    } else if (switchExisting.action == \"OFF\") {\n        context.set(switchVariable, false);\n    }\n}\nmsg.conditions = {\n    machiningRunning: context.get('machiningRunning') || false,\n    machiningEnd: context.get('machiningEnd') || false,\n    alarm: context.get('alarm') || false\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 520,
        "wires": [
            [
                "7b9a6f8c372ed0f6"
            ]
        ],
        "icon": "font-awesome/fa-list"
    },
    {
        "id": "7b9a6f8c372ed0f6",
        "type": "function",
        "z": "a5842f27a7cf81f9",
        "name": "checkingPart",
        "func": "let machiningEnd = msg.conditions.machiningEnd;\nlet alarm = msg.conditions.alarm;\nlet machiningRunning = msg.conditions.machiningRunning;\nlet sumWorkingTime = context.get('sumWorkingTime') || 0;\nlet sumIdleTime = context.get('sumIdleTime') || 0;\nlet startWorking = context.get('startWorking') || null;\nlet lastTimestamp = context.get('lastTimestamp') || null;\nlet currentTimestamp = new Date();\nlet partFinished = context.get('partFinished') || false;\nlet verifyPart = context.get('verifyPart') || false;\nlet verifyAlarm = context.get('verifyAlarm') || false;\n\nif(machiningRunning) { /* verifica√ß√£o para o in√≠cio da usinagem */\n    context.set('startWorking', currentTimestamp.getTime());\n    \n}\nelse if (!machiningRunning && machiningEnd) { /* verifica√ß√£o para o final da usinagem  */\n    partFinished = true;\n    context.set('partFinished', partFinished);\n}\n\nif(alarm) {\n    verifyAlarm = true;\n    context.set('verifyAlarm', verifyAlarm);\n\n}\nmsg.data = {\n    partFinished: partFinished,\n    verifyAlarm: verifyAlarm,\n    startWorking: startWorking\n}\n\nif(partFinished) {\n    partFinished = false;\n    context.set('partFinished', partFinished);\n}\nif (verifyAlarm) {\n    verifyAlarm = false;\n    context.set('verifyAlarm', verifyAlarm);\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1050,
        "y": 560,
        "wires": [
            [
                "300f2f5efabf20c6"
            ]
        ],
        "icon": "font-awesome/fa-folder-open"
    },
    {
        "id": "300f2f5efabf20c6",
        "type": "function",
        "z": "a5842f27a7cf81f9",
        "name": "Construct Payload",
        "func": "let payload = msg.payload;\nlet data = msg.data || {};\nlet partFinished = data.partFinished || {};\nlet verifyAlarm = data.verifyAlarm || {};\nlet conditions = msg.conditions || {};\nlet startWorking = data.startWorking || null;\nlet machiningRunning = conditions.machiningRunning || {};\nlet contextData = {\n    partCount: context.get('partCount') || 0,\n    alarmCount: context.get('alarmCount') || 0,\n    lastTimestamp: context.get('lastTimestamp') || null,\n    sumWorkingTime: context.get('sumWorkingTime') || 0,\n    sumIdleTime: context.get('sumIdleTime') || 0,\n    resetShift: context.get('resetShift') || false\n}\nlet currentTimestamp = new Date();\nlet workingTimeMinutes = context.get('workingTimeMinutes') || 0;\nlet idleTimeMinutes = context.get('idleTimeMinutes') || 0;\n\nif(contextData.resetShift && !partFinished) { /* Reseta as vari√°veis ao final do turno */\n    contextData = {\n        partCount: 0,\n        alarmCount: 0,\n        sumWorkingTime: 0,\n        sumIdleTime: 0,\n        lastTimestamp: null,\n        resetShift: false\n    }\n}\nif(partFinished == true) {\n    contextData.partCount++;\n    contextData.lastTimestamp = currentTimestamp;\n\n    if(startWorking !== null) {\n        let timeWorking = (currentTimestamp.getTime() - startWorking) / 1000;\n        contextData.sumWorkingTime += timeWorking;\n\n        workingTimeMinutes = contextData.sumWorkingTime / 60;\n        context.set('workingTimeMinutes', workingTimeMinutes);\n    }\n}\nif(verifyAlarm == true) {\n    contextData.alarmCount++;\n}\nif(machiningRunning && contextData.lastTimestamp) {\n    let timeIdle = (currentTimestamp.getTime() - contextData.lastTimestamp.getTime()) / 1000;\n\n    if(timeIdle >= 300) {\n        contextData.sumIdleTime += timeIdle;\n\n        workingTimeMinutes = contextData.sumWorkingTime / 60;\n        context.set('idleTimeMinutes', idleTimeMinutes);\n    }\n    else {\n        contextData.sumWorkingTime += timeIdle;\n\n        workingTimeMinutes = contextData.sumWorkingTime / 60;\n        context.set('workingTimeMinutes', workingTimeMinutes);\n    }\n}\nfor (let key in contextData) {\n    context.set(key, contextData[key]);\n}\nmsg.payload = {\n    pecas: contextData.partCount,\n    alarmes: contextData.alarmCount,\n    workingTime: contextData.sumWorkingTime,\n    workingTimeMinutes: workingTimeMinutes,\n    idleTime: contextData.sumIdleTime,\n    idleTimeMinutes: idleTimeMinutes\n}\nif (payload == \"reset\") {\n    contextData.resetShift = true;\n    context.set('resetShift', contextData.resetShift);\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 600,
        "wires": [
            [
                "5014ec82df30e39b"
            ]
        ],
        "icon": "node-red/envelope.svg"
    },
    {
        "id": "5014ec82df30e39b",
        "type": "function",
        "z": "a5842f27a7cf81f9",
        "name": "OKUMA 06",
        "func": "let payload = msg.payload;\n//let machine = msg.payload.serialNumber;\nlet workingTimeMinutes = context.get('workingTimeMinutes') || 0;\nlet idleTimeMinutes = context.get('idleTimeMinutes') || 0;\n\nfunction minutesToHours(totalMinutes) {\n    var hours = String(Math.floor(totalMinutes / 60)).padStart(2, \"0\");\n    var minutes = String(totalMinutes % 60).padStart(2, \"0\");\n\n    return `${hours}:${minutes}`;\n}\n\nif (payload.workingTime && payload.workingTime > 0) {\n    workingTimeMinutes = payload.workingTime / 60;\n    context.set('workingTimeMinutes', workingTimeMinutes);\n}\nif (payload.idleTime && payload.idleTime > 0) {\n    idleTimeMinutes = payload.idleTime / 60;\n    context.set('workingTimeMinutes', workingTimeMinutes);\n}\nmsg.payload = {\n    pecas: payload.pecas,\n    alarmes: payload.alarmes,\n    workingTimeMinutes: minutesToHours(workingTimeMinutes.toFixed(0)),\n    idleTimeMinutes: minutesToHours(idleTimeMinutes.toFixed(0)),\n    //deviceSerialNumber: machine\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1050,
        "y": 640,
        "wires": [
            [
                "a66598b86b0c2a04"
            ]
        ],
        "icon": "node-red/envelope.svg"
    },
    {
        "id": "a66598b86b0c2a04",
        "type": "debug",
        "z": "a5842f27a7cf81f9",
        "name": "debug 168",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1270,
        "y": 640,
        "wires": []
    },
    {
        "id": "8b3a583df1123a13",
        "type": "inject",
        "z": "a5842f27a7cf81f9",
        "name": "RESET Shift1",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "conditions",
                "v": "{}",
                "vt": "json"
            },
            {
                "p": "data",
                "v": "{}",
                "vt": "json"
            },
            {
                "p": "machine",
                "v": "{}",
                "vt": "json"
            }
        ],
        "repeat": "",
        "crontab": "00 07 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "reset",
        "payloadType": "str",
        "x": 780,
        "y": 380,
        "wires": [
            [
                "7dbb75dfc1c0d0b3"
            ]
        ]
    },
    {
        "id": "75340b9e3de29864",
        "type": "debug",
        "z": "a5842f27a7cf81f9",
        "name": "debug 221",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 770,
        "y": 700,
        "wires": []
    },
    {
        "id": "73f1e11c9d95a70f",
        "type": "switch",
        "z": "a5842f27a7cf81f9",
        "name": "MACHINES",
        "property": "payload.serialNumber",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "DF55B2",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 350,
        "y": 120,
        "wires": [
            [
                "024d5e144d50241c"
            ]
        ],
        "icon": "font-awesome/fa-desktop"
    },
    {
        "id": "024d5e144d50241c",
        "type": "switch",
        "z": "a5842f27a7cf81f9",
        "name": "STATUS8",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "hask",
                "v": "Switch1",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "Switch2",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "Switch3",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "Switch4",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "StatusSNS",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 5,
        "x": 540,
        "y": 120,
        "wires": [
            [
                "ce5064ca08b66b5d"
            ],
            [
                "ce5064ca08b66b5d"
            ],
            [
                "ce5064ca08b66b5d"
            ],
            [
                "ce5064ca08b66b5d"
            ],
            [
                "ce5064ca08b66b5d"
            ]
        ],
        "icon": "node-red/bridge.svg"
    },
    {
        "id": "985ec3579ed31b1e",
        "type": "inject",
        "z": "9e63d76909e751c0",
        "name": "SWITCH1 ON",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF1F9A",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch1\": {\"Action\": \"ON\"} }",
        "payloadType": "json",
        "x": 130,
        "y": 680,
        "wires": [
            [
                "a863ef49c1cbdd6b"
            ]
        ]
    },
    {
        "id": "83bad457907c2423",
        "type": "inject",
        "z": "9e63d76909e751c0",
        "name": "SWITCH1 OFF",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF1F9A",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch1\": {\"Action\": \"OFF\"} }",
        "payloadType": "json",
        "x": 140,
        "y": 720,
        "wires": [
            [
                "a863ef49c1cbdd6b"
            ]
        ]
    },
    {
        "id": "2bfe0ba5dc02f701",
        "type": "inject",
        "z": "9e63d76909e751c0",
        "name": "SWITCH1 ON",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF3027",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch1\": {\"Action\": \"ON\"} }",
        "payloadType": "json",
        "x": 130,
        "y": 800,
        "wires": [
            [
                "a863ef49c1cbdd6b"
            ]
        ]
    },
    {
        "id": "053ca16f2a66297c",
        "type": "inject",
        "z": "9e63d76909e751c0",
        "name": "SWITCH1 OFF",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.serialNumber",
                "v": "DF3027",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Switch1\": {\"Action\": \"OFF\"} }",
        "payloadType": "json",
        "x": 140,
        "y": 840,
        "wires": [
            [
                "a863ef49c1cbdd6b"
            ]
        ]
    },
    {
        "id": "f3c6645ca308fa60",
        "type": "comment",
        "z": "9e63d76909e751c0",
        "name": "FLOW BASE ANDON",
        "info": "",
        "x": 160,
        "y": 240,
        "wires": []
    },
    {
        "id": "2490a7e72ca2e96b",
        "type": "change",
        "z": "9e63d76909e751c0",
        "name": "Unauthorized",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "error.message",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1610,
        "y": 520,
        "wires": [
            [
                "1b10477f92541d68"
            ]
        ],
        "icon": "node-red/parser-json.svg"
    },
    {
        "id": "03e4db51ea4da6da",
        "type": "change",
        "z": "9e63d76909e751c0",
        "name": "Invalid body",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "error.message",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1610,
        "y": 480,
        "wires": [
            [
                "6d82899aa9e2cee1"
            ]
        ],
        "icon": "node-red/parser-json.svg"
    },
    {
        "id": "0f3d3dc93813e122",
        "type": "debug",
        "z": "9e63d76909e751c0",
        "name": "debug 54",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1600,
        "y": 220,
        "wires": []
    },
    {
        "id": "258978504776ebe2",
        "type": "debug",
        "z": "9e63d76909e751c0",
        "name": "debug 55",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1260,
        "y": 140,
        "wires": []
    },
    {
        "id": "e32d0b078f4bd931",
        "type": "debug",
        "z": "9e63d76909e751c0",
        "name": "debug 58",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 440,
        "y": 520,
        "wires": []
    },
    {
        "id": "9ea292f888feeaa7",
        "type": "switch",
        "z": "9e63d76909e751c0",
        "name": "OPTION SW",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "hask",
                "v": "Switch1",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 590,
        "y": 780,
        "wires": [
            [
                "f94c51a59acf04b8",
                "c2c7154627222166"
            ]
        ]
    },
    {
        "id": "640463bd6bfe4b64",
        "type": "function",
        "z": "9e63d76909e751c0",
        "name": "Device has no tickets",
        "func": "const deviceState = global.get(\"andon_state.\" + msg.payload.serialNumber);\n\nif (deviceState !== undefined && deviceState !== 0) {\n    throw new Error(\"there is already an open ticket for this device\");\n}\n\nmsg.payload = {\n    connect_sn: typeof deviceState\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1040,
        "y": 780,
        "wires": [
            [
                "99cf80fc7549be25",
                "3623a667254756ea"
            ]
        ],
        "icon": "font-awesome/fa-check"
    },
    {
        "id": "99cf80fc7549be25",
        "type": "http request",
        "z": "9e63d76909e751c0",
        "d": true,
        "name": "POST",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://andon.axontechnology.com.br/v1/apps/direct/warn",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "Content-Type",
                "keyValue": "",
                "valueType": "application/json",
                "valueValue": ""
            },
            {
                "keyType": "other",
                "keyValue": "origin_check",
                "valueType": "other",
                "valueValue": "abbde14a-2181-4a28-bd92-281de6be3552"
            }
        ],
        "x": 1510,
        "y": 780,
        "wires": [
            []
        ]
    },
    {
        "id": "f94c51a59acf04b8",
        "type": "function",
        "z": "9e63d76909e751c0",
        "name": "Switch1 Action is \"ON\"",
        "func": "if (\n    msg.payload.Switch1.Action\n    && msg.payload.Switch1.Action === \"ON\"\n) {\n    return msg;\n} else {\n    throw new Error(\"ignored action\");\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 780,
        "wires": [
            [
                "640463bd6bfe4b64"
            ]
        ],
        "icon": "node-red/parser-json.svg"
    },
    {
        "id": "a863ef49c1cbdd6b",
        "type": "switch",
        "z": "9e63d76909e751c0",
        "name": "MACHINES",
        "property": "payload.serialNumber",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "DF1F9A",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "DF3027",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "DF2472",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "DF2A13",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "DF5434",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 5,
        "x": 390,
        "y": 780,
        "wires": [
            [
                "9ea292f888feeaa7"
            ],
            [
                "9ea292f888feeaa7"
            ],
            [
                "9ea292f888feeaa7"
            ],
            [
                "9ea292f888feeaa7"
            ],
            [
                "9ea292f888feeaa7"
            ]
        ],
        "icon": "font-awesome/fa-desktop"
    },
    {
        "id": "3cb2838f163d6b13",
        "type": "http in",
        "z": "9e63d76909e751c0",
        "g": "20661b39c28121f8",
        "name": "",
        "url": "/andon/v0/",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 160,
        "y": 320,
        "wires": [
            [
                "07d7f489dc5e9189",
                "e32d0b078f4bd931"
            ]
        ]
    },
    {
        "id": "07d7f489dc5e9189",
        "type": "function",
        "z": "9e63d76909e751c0",
        "g": "60d5e3d6c074894c",
        "name": "Extract Token",
        "func": "const token = msg.req.headers['authorization'];\n\nif (token && token.startsWith(\"Bearer \")) {\n    msg.security = {\n        token: token.substring(7),\n    };\n\n    return msg;\n} else {\n    throw new Error(\"No token found.\");\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 320,
        "wires": [
            [
                "3de82b364a2a8a19"
            ]
        ],
        "icon": "font-awesome/fa-key"
    },
    {
        "id": "3de82b364a2a8a19",
        "type": "function",
        "z": "9e63d76909e751c0",
        "g": "60d5e3d6c074894c",
        "name": "Validate Token",
        "func": "const secret = \"WhZfC3iZoHsokcI8831LxdjiwfnX6Eyma17UXWsRe8YPP5ogJad9tRHK35BILQWZYRMOuGuIWBHsKdpNpaYCXIYsckd1i5E1H77K\";\nconst tokenCandidate = msg.security.token;\n\nfunction validateToken(msg) {\n    if (tokenCandidate === secret) {\n        return msg;\n    } else {\n        throw new Error(\"Invalid Token\");\n    }\n}\n\nreturn validateToken(msg);",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 360,
        "wires": [
            [
                "0a24e8b45e3f25bf"
            ]
        ],
        "icon": "font-awesome/fa-id-badge"
    },
    {
        "id": "5ad890a517dedadc",
        "type": "catch",
        "z": "9e63d76909e751c0",
        "g": "60d5e3d6c074894c",
        "name": "Failed authentication",
        "scope": [
            "07d7f489dc5e9189",
            "3de82b364a2a8a19"
        ],
        "uncaught": false,
        "x": 490,
        "y": 420,
        "wires": [
            [
                "37117ff33adb025c"
            ]
        ]
    },
    {
        "id": "0a24e8b45e3f25bf",
        "type": "function",
        "z": "9e63d76909e751c0",
        "g": "1981219878135463",
        "name": "Body validation",
        "func": "const { serialNumber, status } = msg.payload;\nconst hexRegex = /^[0-9A-Fa-f]{6}$/i;\n\nif (\n    hexRegex.test(serialNumber)\n    && typeof status === \"number\"\n    && status >= 0 && status <= 6\n) {\n    return msg;\n} else {\n    throw new Error(\"Invalid body\");\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 360,
        "wires": [
            [
                "9df8454d931fd727"
            ]
        ],
        "icon": "font-awesome/fa-check-square-o"
    },
    {
        "id": "0caed1eb562ec9a7",
        "type": "catch",
        "z": "9e63d76909e751c0",
        "g": "1981219878135463",
        "name": "Invalid body",
        "scope": [
            "0a24e8b45e3f25bf"
        ],
        "uncaught": false,
        "x": 770,
        "y": 420,
        "wires": [
            [
                "e1168ae39a7cdec0"
            ]
        ]
    },
    {
        "id": "1b10477f92541d68",
        "type": "http response",
        "z": "9e63d76909e751c0",
        "g": "b335e9bce9cc6575",
        "name": "JSON Unauthorized",
        "statusCode": "401",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1840,
        "y": 520,
        "wires": []
    },
    {
        "id": "5af965f78b7908ad",
        "type": "http response",
        "z": "9e63d76909e751c0",
        "g": "b335e9bce9cc6575",
        "name": "202 ACCEPTED",
        "statusCode": "202",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1820,
        "y": 440,
        "wires": []
    },
    {
        "id": "6d82899aa9e2cee1",
        "type": "http response",
        "z": "9e63d76909e751c0",
        "g": "b335e9bce9cc6575",
        "name": "JSON Bad Request",
        "statusCode": "400",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1830,
        "y": 480,
        "wires": []
    },
    {
        "id": "665fce6412a20ef8",
        "type": "function",
        "z": "9e63d76909e751c0",
        "g": "3afa9948f24cc0e7",
        "name": "Status Validation",
        "func": "const andonCommands = global.get(\"global_variables\")[\"andonCommands\"][\"setColor\"];\nconst { serialNumber, status } = msg.payload;\n\nmsg.payload = andonCommands[status];\nmsg.topic = \"cmnd/connectv1_\" + serialNumber + \"/Script\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1310,
        "y": 360,
        "wires": [
            [
                "0f3d3dc93813e122",
                "b5f9b78f0b82a530",
                "15d29deb09278cfd"
            ]
        ],
        "icon": "node-red/envelope.svg"
    },
    {
        "id": "2a96187087c093cd",
        "type": "function",
        "z": "9e63d76909e751c0",
        "g": "efb385fc4bb2033f",
        "name": "Set global variables",
        "func": "const globalVariables = {\n\n    andonCommands: {\n        // - => Apagado; O => Aceso; X => Piscando/alternando\n        setColor: {    // VERDE AMARELO VERMELHO    DESCRI√á√ÉO\n            0: \">c=0\", // O     -       -           Normal\n            1: \">c=1\", // -     -       O           Sem conex√£o\n            2: \">c=2\", // O     O       -           Chamado aberto (n√≠vel 1)\n            3: \">c=3\", // -     O       O           Chamado escalonado (n√≠vel 2)\n            4: \">c=4\", // O     X       -           Chamado em atendimento (n√≠vel 1)\n            5: \">c=5\", // -     X       O           Chamado em atendimento (n√≠vel 2)\n            6: \">c=6\", // X     -       X           \n        },\n        getColor: \"?c\",\n    },\n\n};\n\nconst globalFunctions = {\n\n    extractSerialNumber: (topic) => {\n        return \"\";\n    },\n\n};\n\nglobal.set(\"global_variables\", globalVariables);\nglobal.set(\"global_functions\", globalFunctions);\n\nnode.warn(\"Global variables and functions are set.\");",
        "outputs": 0,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 60,
        "wires": [],
        "icon": "font-awesome/fa-globe"
    },
    {
        "id": "5508f513728513ef",
        "type": "inject",
        "z": "9e63d76909e751c0",
        "g": "efb385fc4bb2033f",
        "name": "Trigger once when started",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0",
        "topic": "",
        "x": 220,
        "y": 60,
        "wires": [
            [
                "2a96187087c093cd"
            ]
        ]
    },
    {
        "id": "8985da47525bb613",
        "type": "inject",
        "z": "9e63d76909e751c0",
        "g": "b8027651ad23ffb5",
        "name": "Once each 15 sec",
        "props": [],
        "repeat": "15",
        "crontab": "",
        "once": false,
        "onceDelay": "0",
        "topic": "",
        "x": 750,
        "y": 60,
        "wires": [
            [
                "d4ac334c64be2f2b"
            ]
        ]
    },
    {
        "id": "d4ac334c64be2f2b",
        "type": "function",
        "z": "9e63d76909e751c0",
        "g": "b8027651ad23ffb5",
        "name": "Get global ANDON state",
        "func": "const devicesAndonState = global.get(\"andon_state\");\nconst setColor = global.get(\"global_variables\")[\"andonCommands\"][\"setColor\"];\n\nfor (const deviceSerialNumber in devicesAndonState) {\n    const state = devicesAndonState[deviceSerialNumber];\n    node.send({\n        payload: setColor[state],\n        topic: \"cmnd/connectv1_\" + deviceSerialNumber + \"/Script\"\n    });\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 60,
        "wires": [
            [
                "258978504776ebe2",
                "f19f96805686e24a"
            ]
        ],
        "icon": "node-red/status.svg"
    },
    {
        "id": "f19f96805686e24a",
        "type": "mqtt out",
        "z": "9e63d76909e751c0",
        "d": true,
        "g": "b8027651ad23ffb5",
        "name": "Send signal to ANDON light",
        "topic": "",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "3a6af4e4f1669aa9",
        "x": 1320,
        "y": 60,
        "wires": []
    },
    {
        "id": "9df8454d931fd727",
        "type": "function",
        "z": "9e63d76909e751c0",
        "g": "cd40f52dcce06be2",
        "name": "Update global Andon state",
        "func": "const { serialNumber, status } = msg.payload;\n\nglobal.set(\"andon_state.\" + serialNumber, status);\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1020,
        "y": 360,
        "wires": [
            [
                "665fce6412a20ef8"
            ]
        ]
    },
    {
        "id": "15d29deb09278cfd",
        "type": "mqtt out",
        "z": "9e63d76909e751c0",
        "d": true,
        "g": "a6b74c7345723192",
        "name": "Send signal to ANDON light",
        "topic": "",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "3a6af4e4f1669aa9",
        "x": 1640,
        "y": 360,
        "wires": []
    },
    {
        "id": "0132871ee9d603b6",
        "type": "function",
        "z": "9e63d76909e751c0",
        "name": "check if it is called",
        "func": "const { serialNumber, Switch1 } = msg.payload;\n\nlet currentActionSW = context.get('currentActionSW') || null;\nlet currentSerialNumber = context.get('currentSerialNumber') || null;\nlet verifyCalled = context.get('verifyCalled') || false;\n \nif (serialNumber && Switch1.Action == \"ON\") {\n    verifyCalled = true;\n}\n\ncontext.set('verifyCalled', verifyCalled);\n\nmsg.conditions = {\n    serialNumber: serialNumber,\n    verifyCalled: verifyCalled\n};\nverifyCalled = false;\ncontext.set('verifyCalled', verifyCalled);\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 720,
        "wires": [
            [
                "5019ac2c19bda248"
            ]
        ],
        "icon": "font-awesome/fa-check"
    },
    {
        "id": "5019ac2c19bda248",
        "type": "function",
        "z": "9e63d76909e751c0",
        "name": "Open Call",
        "func": "let { serialNumber, verifyCalled } = msg.conditions;\n\nif (serialNumber && verifyCalled) {\n\n    msg.payload = {\n        connect_sn: serialNumber,\n    }\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1240,
        "y": 720,
        "wires": [
            [
                "1714b0964b0b2643"
            ]
        ],
        "icon": "node-red/feed.svg"
    },
    {
        "id": "c2c7154627222166",
        "type": "function",
        "z": "9e63d76909e751c0",
        "name": "Validate Switch1 Action",
        "func": "const validSw1Actions = [\"ON\", \"OFF\"];\n\nif (msg.payload.Switch1.Action\n    && validSw1Actions.includes(msg.payload.Switch1.Action)) {\n    return msg;\n} else {\n    throw new Error(\"Invalid body\");\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 720,
        "wires": [
            [
                "0132871ee9d603b6"
            ]
        ],
        "icon": "node-red/parser-json.svg"
    },
    {
        "id": "3623a667254756ea",
        "type": "debug",
        "z": "9e63d76909e751c0",
        "name": "debug 266",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1330,
        "y": 840,
        "wires": []
    },
    {
        "id": "1714b0964b0b2643",
        "type": "debug",
        "z": "9e63d76909e751c0",
        "name": "debug 267",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1430,
        "y": 700,
        "wires": []
    },
    {
        "id": "6c29d9c51d27c904",
        "type": "http in",
        "z": "4762ff7b32c2f9fc",
        "g": "d4136210be7f26e7",
        "name": "POST /devices/{deviceId}/increment-count",
        "url": "/webhook/v1/devices/:deviceId/increment-count",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 240,
        "y": 520,
        "wires": [
            [
                "2564fc1665ce6e41"
            ]
        ]
    },
    {
        "id": "1513fdaa3e3df5c2",
        "type": "http response",
        "z": "4762ff7b32c2f9fc",
        "g": "f6dccf1123184f31",
        "name": "JSON 200 OK",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 3660,
        "y": 620,
        "wires": []
    },
    {
        "id": "f8e31e8f0a26a710",
        "type": "http response",
        "z": "4762ff7b32c2f9fc",
        "g": "f6dccf1123184f31",
        "name": "JSON 400 Bad Request",
        "statusCode": "400",
        "headers": {
            "content-type": "application/json"
        },
        "x": 3690,
        "y": 980,
        "wires": []
    },
    {
        "id": "f5a2b1298379ac57",
        "type": "change",
        "z": "4762ff7b32c2f9fc",
        "g": "6ef5ef6339223e26",
        "name": "Invalid request",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "error.message",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 3420,
        "y": 980,
        "wires": [
            [
                "f8e31e8f0a26a710"
            ]
        ],
        "icon": "node-red/parser-json.svg"
    },
    {
        "id": "15290bc95a34fb96",
        "type": "http response",
        "z": "4762ff7b32c2f9fc",
        "g": "f6dccf1123184f31",
        "name": "JSON 500 Internal Server Error",
        "statusCode": "500",
        "headers": {
            "content-type": "application/json"
        },
        "x": 3710,
        "y": 1100,
        "wires": []
    },
    {
        "id": "4a1bbabeeff4b222",
        "type": "catch",
        "z": "4762ff7b32c2f9fc",
        "g": "f9f2551875ea2f87",
        "name": "Failed JWT authentication",
        "scope": "group",
        "uncaught": false,
        "x": 630,
        "y": 620,
        "wires": [
            [
                "711eb5d353be7a6c"
            ]
        ]
    },
    {
        "id": "b8ab4ef9dd5c8807",
        "type": "http in",
        "z": "4762ff7b32c2f9fc",
        "g": "d4136210be7f26e7",
        "name": "POST /devices/{deviceId}/activity-status",
        "url": "/webhook/v1/devices/:deviceId/activity-status",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 230,
        "y": 560,
        "wires": [
            [
                "2564fc1665ce6e41"
            ]
        ]
    },
    {
        "id": "2e0558429cc01a8c",
        "type": "change",
        "z": "4762ff7b32c2f9fc",
        "g": "6ef5ef6339223e26",
        "name": "Unauthorized",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "error.message",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 3430,
        "y": 1020,
        "wires": [
            [
                "0b590b00638415b2"
            ]
        ],
        "icon": "node-red/parser-json.svg"
    },
    {
        "id": "0b590b00638415b2",
        "type": "http response",
        "z": "4762ff7b32c2f9fc",
        "g": "f6dccf1123184f31",
        "name": "JSON 401 Unauthorized",
        "statusCode": "401",
        "headers": {
            "content-type": "application/json"
        },
        "x": 3690,
        "y": 1020,
        "wires": []
    },
    {
        "id": "3fa77088706b548d",
        "type": "http response",
        "z": "4762ff7b32c2f9fc",
        "g": "f6dccf1123184f31",
        "name": "JSON 404 Not Found",
        "statusCode": "404",
        "headers": {
            "content-type": "application/json"
        },
        "x": 3680,
        "y": 1060,
        "wires": []
    },
    {
        "id": "268217b6ef11ef56",
        "type": "change",
        "z": "4762ff7b32c2f9fc",
        "g": "6ef5ef6339223e26",
        "name": "Not found",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "error.message",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 3440,
        "y": 1060,
        "wires": [
            [
                "3fa77088706b548d"
            ]
        ],
        "icon": "node-red/parser-json.svg"
    },
    {
        "id": "5595b363c1f7060b",
        "type": "http in",
        "z": "4762ff7b32c2f9fc",
        "g": "d4136210be7f26e7",
        "name": "POST /devices/{deviceId}/power-status",
        "url": "/webhook/v1/devices/:deviceId/power-status",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 230,
        "y": 600,
        "wires": [
            [
                "2564fc1665ce6e41"
            ]
        ]
    },
    {
        "id": "3f09733528733122",
        "type": "http in",
        "z": "4762ff7b32c2f9fc",
        "g": "d4136210be7f26e7",
        "name": "POST /devices/{deviceId}/connectivity-status",
        "url": "/webhook/v1/devices/:deviceId/connectivity-status",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 250,
        "y": 640,
        "wires": [
            [
                "2564fc1665ce6e41"
            ]
        ]
    },
    {
        "id": "2564fc1665ce6e41",
        "type": "subflow:b12925e3996954d8",
        "z": "4762ff7b32c2f9fc",
        "g": "f9f2551875ea2f87",
        "name": "",
        "env": [
            {
                "name": "NODE_RED_NODE_JWT_SECRET",
                "type": "cred"
            }
        ],
        "x": 610,
        "y": 580,
        "wires": [
            [
                "cc3dde2a0cf6bd47"
            ]
        ]
    },
    {
        "id": "81ce6cb85cad8ea9",
        "type": "change",
        "z": "4762ff7b32c2f9fc",
        "g": "6ef5ef6339223e26",
        "name": "Empty object",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 3430,
        "y": 940,
        "wires": [
            []
        ],
        "icon": "node-red/parser-json.svg"
    },
    {
        "id": "1e38f16104306020",
        "type": "switch",
        "z": "4762ff7b32c2f9fc",
        "g": "a7e9fe99c2162763",
        "name": "Route request to action",
        "property": "action",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "increment-count",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "activity-status",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "power-status",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "connectivity-status",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 5,
        "x": 1810,
        "y": 660,
        "wires": [
            [
                "fad31237f8a5c312"
            ],
            [
                "63c248922b2c091b"
            ],
            [
                "388cd89f4067e0f5"
            ],
            [
                "e0de9252f5f80175"
            ],
            [
                "c459f306b1da4ed0"
            ]
        ]
    },
    {
        "id": "fad31237f8a5c312",
        "type": "function",
        "z": "4762ff7b32c2f9fc",
        "g": "77828d33eb2b4cdb",
        "name": "Validation: value is finite number",
        "func": "const InvalidRequestBodyError = new Error(\"invalid request body\");\nconst VALUE = msg.req.body.value;\n\n/* \nAction: INCREMENT-COUNT\nKey \"value\":\n    description: quantity to add (positive) or subtract (negative) from count in database\n    TYPE: number\n    CONSTRAINTS: must be finite\n*/\n//--- Begin of validation algorithm --- //\n\nif (not(isNumber(VALUE))) throw InvalidRequestBodyError; // Type checking\nif (not(Number.isFinite(VALUE))) throw InvalidRequestBodyError; // Constraints checking\n\n//--- End of validation algorithm --- //\n\nreturn msg;\n\n//--- Validation helper functions ---//\n\nfunction isNumber(value) {\n    return typeof value === \"number\" || value instanceof Number;\n}\n\nfunction not(value) { return !value; }",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2250,
        "y": 460,
        "wires": [
            [
                "de404bfbcd692c8b"
            ]
        ],
        "icon": "font-awesome/fa-check-circle-o"
    },
    {
        "id": "03b1f19ad8fd8c95",
        "type": "catch",
        "z": "4762ff7b32c2f9fc",
        "g": "a7e9fe99c2162763",
        "name": "Validation error",
        "scope": [
            "fad31237f8a5c312",
            "63c248922b2c091b",
            "388cd89f4067e0f5",
            "e0de9252f5f80175"
        ],
        "uncaught": false,
        "x": 2200,
        "y": 880,
        "wires": [
            [
                "afc8b525b6a8f395"
            ]
        ]
    },
    {
        "id": "68acd4644d422b0c",
        "type": "function",
        "z": "4762ff7b32c2f9fc",
        "g": "289153cb79826932",
        "name": "Parse request body as object",
        "func": "if (typeof msg.req.body === \"string\") {\n    msg.req.body = JSON.parse(msg.req.body);\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1320,
        "y": 580,
        "wires": [
            [
                "80620faaac847eaf"
            ]
        ],
        "icon": "node-red/parser-json.svg"
    },
    {
        "id": "1556ef70818b9863",
        "type": "function",
        "z": "4762ff7b32c2f9fc",
        "g": "289153cb79826932",
        "name": "Complete request body",
        "func": "msg.req.body.device = msg.device;\nmsg.req.body.customer = msg.token.customer;\nmsg.req.body.action = msg.action;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1390,
        "y": 740,
        "wires": [
            [
                "1e38f16104306020"
            ]
        ],
        "icon": "node-red/parser-json.svg"
    },
    {
        "id": "80620faaac847eaf",
        "type": "function",
        "z": "4762ff7b32c2f9fc",
        "g": "289153cb79826932",
        "name": "Request body must be an object",
        "func": "const InvalidRequestBodyError = new Error(\"invalid request body\");\n\nif (not(isObject(msg.req.body))) { throw InvalidRequestBodyError; }\n\nreturn msg;\n\n// Validation helper functions \n\nfunction isObject(value) {\n    return (\n        typeof value === \"object\" &&\n        value !== null &&\n        !Array.isArray(value)\n    );\n}\n\nfunction not(value) { return !value; }",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1350,
        "y": 620,
        "wires": [
            [
                "b4d30256264beada"
            ]
        ],
        "icon": "font-awesome/fa-check-square-o"
    },
    {
        "id": "aaf154e6cbf12903",
        "type": "catch",
        "z": "4762ff7b32c2f9fc",
        "g": "289153cb79826932",
        "name": "Invalid request body",
        "scope": "group",
        "uncaught": false,
        "x": 1310,
        "y": 780,
        "wires": [
            [
                "11458e9c1256b4b1"
            ]
        ]
    },
    {
        "id": "b4d30256264beada",
        "type": "function",
        "z": "4762ff7b32c2f9fc",
        "g": "289153cb79826932",
        "name": "Request body must have a \"value\" property",
        "func": "const InvalidRequestBodyError = new Error(\"invalid request body\");\n\nif (not(\"value\" in msg.req.body)) throw InvalidRequestBodyError;\n\nreturn msg;\n\n// Validation helper functions \n\nfunction not(value) { return !value; }",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1410,
        "y": 660,
        "wires": [
            [
                "dbfdbf3abf005a53"
            ]
        ],
        "icon": "font-awesome/fa-check-square-o"
    },
    {
        "id": "dbfdbf3abf005a53",
        "type": "function",
        "z": "4762ff7b32c2f9fc",
        "g": "289153cb79826932",
        "name": "Retrieve action name",
        "func": "// Retrieves webhook action name from URL\n// Example: \"/webhook/v3/devices/ABC123/increment-count\" --> \"increment-count\"\nmsg.action = msg.req.url\n    .split(msg.req.params[\"deviceId\"])[1]\n    .substring(1);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1360,
        "y": 700,
        "wires": [
            [
                "1556ef70818b9863"
            ]
        ],
        "outputLabels": [
            "action is valid"
        ],
        "icon": "font-awesome/fa-map-signs",
        "info": "Save action to msg.action."
    },
    {
        "id": "63c248922b2c091b",
        "type": "function",
        "z": "4762ff7b32c2f9fc",
        "g": "ce354d8f251986a1",
        "name": "Validation: \"active\" or \"idle\"",
        "func": "const InvalidRequestBodyError = new Error(\"invalid request body\");\nconst VALUE = msg.req.body.value;\n\n/*\nAction: ACTIVITY-STATUS\nKey \"value\":\n    description: updated status of activity\n    TYPE: string\n    CONSTRAINTS: must be one of the following options:\n        \"active\", \"idle\"\n*/\n//--- Begin of validation algorithm --- //\n\nif (not(isString(VALUE))) throw InvalidRequestBodyError; // Type checking\n\nconst options = [\"active\", \"idle\"];\nif (not(isOneOf(VALUE, options))) throw InvalidRequestBodyError; // Constraints checking\n\n//--- End of validation algorithm --- //\n\nreturn msg;\n\n// --- Validation helper functions --- //\n\nfunction not(value) { return !value; }\n\nfunction isString(value) {\n    return typeof value === \"string\" || value instanceof String;\n}\n\nfunction isOneOf(value, options) {\n    if (not(Array.isArray(options))) {\n        options = [options];\n    }\n    return options.includes(value);\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2240,
        "y": 580,
        "wires": [
            [
                "60a2cd5655bf4f9e"
            ]
        ],
        "icon": "font-awesome/fa-check-circle-o"
    },
    {
        "id": "388cd89f4067e0f5",
        "type": "function",
        "z": "4762ff7b32c2f9fc",
        "g": "575fdccf35e31e69",
        "name": "Validation: \"on\" or \"off\"",
        "func": "const InvalidRequestBodyError = new Error(\"invalid request body\");\nconst VALUE = msg.req.body.value;\n\n/*\nAction: POWER-STATUS\nKey \"value\":\n    description: updated status of power (electricity supply)\n    TYPE: string\n    CONSTRAINTS: must be one of the following options:\n        \"on\", \"off\"\n*/\n//--- Begin of validation algorithm --- //\n\nif (not(isString(VALUE))) throw InvalidRequestBodyError; // Type checking\n\nconst options = [\"on\", \"off\"];\nif (not(isOneOf(VALUE, options))) throw InvalidRequestBodyError; // Constraints checking\n\n//--- End of validation algorithm --- //\n\nreturn msg;\n\n// --- Validation helper functions --- //\n\nfunction not(value) { return !value; }\n\nfunction isString(value) {\n    return typeof value === \"string\" || value instanceof String;\n}\n\nfunction isOneOf(value, options) {\n    if (not(Array.isArray(options))) {\n        options = [options];\n    }\n    return options.includes(value);\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2220,
        "y": 680,
        "wires": [
            [
                "75fb61e4eca59f33"
            ]
        ],
        "icon": "font-awesome/fa-check-circle-o"
    },
    {
        "id": "e0de9252f5f80175",
        "type": "function",
        "z": "4762ff7b32c2f9fc",
        "g": "77ee3bc662804598",
        "name": "Validation: \"online\" or \"offline\"",
        "func": "const InvalidRequestBodyError = new Error(\"invalid request body\");\nconst VALUE = msg.req.body.value;\n\n/*\nAction: CONNECTIVITY-STATUS\nKey \"value\":\n    description: updated status of connectivity\n    TYPE: string\n    CONSTRAINTS: must be one of the following options:\n        \"online\", \"offline\"\n*/\n//--- Begin of validation algorithm --- //\n\nif (not(isString(VALUE))) throw InvalidRequestBodyError; // Type checking\n\nconst options = [\"online\", \"offline\"];\nif (not(isOneOf(VALUE, options))) throw InvalidRequestBodyError; // Constraints checking\n\n//--- End of validation algorithm --- //\n\nreturn msg;\n\n// --- Validation helper functions --- //\n\nfunction not(value) { return !value; }\n\nfunction isString(value) {\n    return typeof value === \"string\" || value instanceof String;\n}\n\nfunction isOneOf(value, options) {\n    if (not(Array.isArray(options))) {\n        options = [options];\n    }\n    return options.includes(value);\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2240,
        "y": 780,
        "wires": [
            [
                "3b2dab8cee4f3213"
            ]
        ],
        "icon": "font-awesome/fa-check-circle-o"
    },
    {
        "id": "cc3dde2a0cf6bd47",
        "type": "function",
        "z": "4762ff7b32c2f9fc",
        "g": "c05a683deb1ad894",
        "name": "Validate device ID format in URL",
        "func": "const DEVICE_ID = msg.req.params.deviceId;\nconst InvalidDeviceError = new Error(\"Not found\");\n\n/* \nValue: DEVICE-ID\nDescription: device serial number\nTYPE: hex string (no need to type check because every URL parameter is a string)\nCONSTRAINTS: must have 6 hexadecimal characters (converting to integer -> max 16777215)\n*/\n//////////////// Begin of validation algorithm ////////////////\n\nconst constraints = {\n    MIN: 0,\n    MAX: parseInt(\"FFFFFF\", 16), // 16777215\n};\n\nif (not(isHexString(DEVICE_ID))) throw InvalidDeviceError; // Constraint 1 checking\n\nconst INT_DEVICE_ID = parseInt(DEVICE_ID, 16);\n\nif (not(isValueInRange(INT_DEVICE_ID,\n    constraints.MIN,\n    constraints.MAX\n))) throw InvalidDeviceError; // Constraint 2 checking\n\n//////////////// End of validation algorithm ////////////////\n\nreturn msg;\n\n//////////////// Validation helper functions ////////////////\n\nfunction isHexString(value) {\n    if (value === \"0\".repeat(value.length)) return true;\n    const trimmed = value.replace(/^(0+)(.*)/, \"$2\");\n    const integer = parseInt(value, 16);\n    return integer.toString(16) === trimmed.toLowerCase();\n}\n\nfunction isValueInRange(value, lowerBound, upperBound) {\n    return value >= lowerBound && value <= upperBound;\n}\n\nfunction not(value) { return !value; }",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 970,
        "y": 580,
        "wires": [
            [
                "2795c0ea2f223f90"
            ]
        ],
        "outputLabels": [
            "device ID is valid"
        ],
        "icon": "font-awesome/fa-id-badge"
    },
    {
        "id": "2795c0ea2f223f90",
        "type": "function",
        "z": "4762ff7b32c2f9fc",
        "g": "c05a683deb1ad894",
        "name": "Append device ID to msg object",
        "func": "msg.device = msg.req.params.deviceId;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 620,
        "wires": [
            [
                "319a96386914fc0a"
            ]
        ]
    },
    {
        "id": "319a96386914fc0a",
        "type": "function",
        "z": "4762ff7b32c2f9fc",
        "g": "c05a683deb1ad894",
        "name": "Device ID in URL == in Token",
        "func": "if (msg.device !== msg.token.device) {\n    throw new Error(\"invalid device id\");\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 660,
        "wires": [
            [
                "68acd4644d422b0c"
            ]
        ],
        "outputLabels": [
            "device ID is valid"
        ],
        "icon": "font-awesome/fa-id-badge"
    },
    {
        "id": "361f9f85be3f56b6",
        "type": "catch",
        "z": "4762ff7b32c2f9fc",
        "g": "c05a683deb1ad894",
        "name": "Failed device ID validation",
        "scope": "group",
        "uncaught": false,
        "x": 950,
        "y": 700,
        "wires": [
            [
                "7a249f17af41fa84"
            ]
        ]
    },
    {
        "id": "de404bfbcd692c8b",
        "type": "change",
        "z": "4762ff7b32c2f9fc",
        "g": "77828d33eb2b4cdb",
        "name": "Set request URL",
        "rules": [
            {
                "t": "set",
                "p": "url",
                "pt": "msg",
                "to": "${WHK_PERSIST_BASEURL}/call",
                "tot": "env"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2510,
        "y": 460,
        "wires": [
            [
                "e3d5739e6bd8f6fe"
            ]
        ],
        "icon": "node-red/arrow-in.svg"
    },
    {
        "id": "e3d5739e6bd8f6fe",
        "type": "subflow:c76f167c66e3dca1",
        "z": "4762ff7b32c2f9fc",
        "g": "77828d33eb2b4cdb",
        "name": "",
        "x": 2740,
        "y": 460,
        "wires": [
            [
                "1860e7333d15bc73"
            ],
            [
                "5ed7cc2f52949ddf"
            ]
        ],
        "icon": "font-awesome/fa-external-link"
    },
    {
        "id": "9848b30c6cc37c4e",
        "type": "subflow:c76f167c66e3dca1",
        "z": "4762ff7b32c2f9fc",
        "g": "ce354d8f251986a1",
        "name": "",
        "x": 2740,
        "y": 580,
        "wires": [
            [
                "1860e7333d15bc73"
            ],
            [
                "5ed7cc2f52949ddf"
            ]
        ],
        "icon": "font-awesome/fa-external-link"
    },
    {
        "id": "60a2cd5655bf4f9e",
        "type": "change",
        "z": "4762ff7b32c2f9fc",
        "g": "ce354d8f251986a1",
        "name": "Set request URL",
        "rules": [
            {
                "t": "set",
                "p": "url",
                "pt": "msg",
                "to": "${WHK_PERSIST_BASEURL}/call",
                "tot": "env"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2510,
        "y": 580,
        "wires": [
            [
                "9848b30c6cc37c4e"
            ]
        ],
        "icon": "node-red/arrow-in.svg"
    },
    {
        "id": "75fb61e4eca59f33",
        "type": "change",
        "z": "4762ff7b32c2f9fc",
        "g": "575fdccf35e31e69",
        "name": "Set request URL",
        "rules": [
            {
                "t": "set",
                "p": "url",
                "pt": "msg",
                "to": "${WHK_PERSIST_BASEURL}/call",
                "tot": "env"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2510,
        "y": 680,
        "wires": [
            [
                "fbd43f75d30b6f39"
            ]
        ],
        "icon": "node-red/arrow-in.svg"
    },
    {
        "id": "fbd43f75d30b6f39",
        "type": "subflow:c76f167c66e3dca1",
        "z": "4762ff7b32c2f9fc",
        "g": "575fdccf35e31e69",
        "name": "",
        "x": 2740,
        "y": 680,
        "wires": [
            [
                "1860e7333d15bc73"
            ],
            [
                "5ed7cc2f52949ddf"
            ]
        ],
        "icon": "font-awesome/fa-external-link"
    },
    {
        "id": "3b2dab8cee4f3213",
        "type": "change",
        "z": "4762ff7b32c2f9fc",
        "g": "77ee3bc662804598",
        "name": "Set request URL",
        "rules": [
            {
                "t": "set",
                "p": "url",
                "pt": "msg",
                "to": "${WHK_PERSIST_BASEURL}/call",
                "tot": "env"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2510,
        "y": 780,
        "wires": [
            [
                "c562eb97ef83943f"
            ]
        ],
        "icon": "node-red/arrow-in.svg"
    },
    {
        "id": "c562eb97ef83943f",
        "type": "subflow:c76f167c66e3dca1",
        "z": "4762ff7b32c2f9fc",
        "g": "77ee3bc662804598",
        "name": "",
        "x": 2740,
        "y": 780,
        "wires": [
            [
                "1860e7333d15bc73"
            ],
            [
                "5ed7cc2f52949ddf"
            ]
        ],
        "icon": "font-awesome/fa-external-link"
    },
    {
        "id": "d54a1c0bd0e61651",
        "type": "comment",
        "z": "4762ff7b32c2f9fc",
        "g": "d190b448fcffd4a2",
        "name": "NODE_RED_NODE_JWT_SECRET",
        "info": "",
        "x": 200,
        "y": 360,
        "wires": []
    },
    {
        "id": "a0eaaba646f8aca0",
        "type": "comment",
        "z": "4762ff7b32c2f9fc",
        "g": "d190b448fcffd4a2",
        "name": "WHK_PERSIST_BASEURL",
        "info": "",
        "x": 180,
        "y": 400,
        "wires": []
    },
    {
        "id": "fbb522bb11e65fc7",
        "type": "http in",
        "z": "4762ff7b32c2f9fc",
        "name": "POST /call",
        "url": "/call",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 2480,
        "y": 360,
        "wires": [
            [
                "859f30b0e8ded636"
            ]
        ]
    },
    {
        "id": "859f30b0e8ded636",
        "type": "http response",
        "z": "4762ff7b32c2f9fc",
        "name": "",
        "statusCode": "500",
        "headers": {
            "content-type": "application/json"
        },
        "x": 2660,
        "y": 360,
        "wires": []
    },
    {
        "id": "1026eb58da379e22",
        "type": "function",
        "z": "4762ff7b32c2f9fc",
        "g": "6ef5ef6339223e26",
        "name": "Build payload: Server error",
        "func": "msg.payload = {\n    success: false,\n    error: msg.error.message,\n    data: { ...msg.payload },\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3380,
        "y": 1100,
        "wires": [
            [
                "15290bc95a34fb96"
            ]
        ],
        "icon": "node-red/parser-json.svg"
    },
    {
        "id": "16d94731402c2d8d",
        "type": "catch",
        "z": "4762ff7b32c2f9fc",
        "g": "a7e9fe99c2162763",
        "name": "Request error",
        "scope": [
            "e3d5739e6bd8f6fe",
            "9848b30c6cc37c4e",
            "fbd43f75d30b6f39",
            "c562eb97ef83943f"
        ],
        "uncaught": false,
        "x": 2710,
        "y": 880,
        "wires": [
            [
                "5ed7cc2f52949ddf"
            ]
        ]
    },
    {
        "id": "bdd0c9bd7696af99",
        "type": "inject",
        "z": "cd837e6a23717c9a",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "cmnd/connectv1_DF1F9A/Script",
        "payload": ">c=1",
        "payloadType": "str",
        "x": 630,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "7c47f60d45d99154",
        "type": "mqtt out",
        "z": "cd837e6a23717c9a",
        "name": "",
        "topic": "",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "58ba0cb992798c1c",
        "x": 710,
        "y": 680,
        "wires": []
    },
    {
        "id": "b4ea78c884d73e3e",
        "type": "inject",
        "z": "cd837e6a23717c9a",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "cmnd/connectv1_DF1F9A/Script",
        "payload": ">c=0",
        "payloadType": "str",
        "x": 630,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "999b9f7d5920f8cc",
        "type": "inject",
        "z": "cd837e6a23717c9a",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "cmnd/connectv1_DF1F9A/Script",
        "payload": ">c=2",
        "payloadType": "str",
        "x": 630,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "1ed92c80ad192a45",
        "type": "inject",
        "z": "cd837e6a23717c9a",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "cmnd/connectv1_DF1F9A/Script",
        "payload": ">c=3",
        "payloadType": "str",
        "x": 630,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "b7b72f1c8c7c645d",
        "type": "inject",
        "z": "cd837e6a23717c9a",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "cmnd/connectv1_DF1F9A/Script",
        "payload": ">c=4",
        "payloadType": "str",
        "x": 630,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "3b317e973335797a",
        "type": "inject",
        "z": "cd837e6a23717c9a",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "cmnd/connectv1_DF1F9A/Script",
        "payload": ">c=5",
        "payloadType": "str",
        "x": 630,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "1e18adc05a249ed3",
        "type": "inject",
        "z": "cd837e6a23717c9a",
        "name": "AJUDA_MAQ-01",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "device",
                "v": "DF1F9A",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "1",
        "payloadType": "num",
        "x": 260,
        "y": 60,
        "wires": [
            [
                "42a05672154abfc9"
            ]
        ]
    },
    {
        "id": "2985796464f39c95",
        "type": "inject",
        "z": "cd837e6a23717c9a",
        "name": "LIDER CIENTE_MAQ-01",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "device",
                "v": "DF1F9A",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "2",
        "payloadType": "num",
        "x": 230,
        "y": 160,
        "wires": [
            [
                "42a05672154abfc9"
            ]
        ]
    },
    {
        "id": "109c14cfc8f62405",
        "type": "inject",
        "z": "cd837e6a23717c9a",
        "name": "RESOLVIDO_MAQ-01",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "device",
                "v": "DF1F9A",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "num",
        "x": 240,
        "y": 240,
        "wires": [
            [
                "42a05672154abfc9"
            ]
        ]
    },
    {
        "id": "7462608cb2c57775",
        "type": "inject",
        "z": "cd837e6a23717c9a",
        "name": "CANCELA AJUDA_MAQ-01",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "device",
                "v": "DF1F9A",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "num",
        "x": 220,
        "y": 100,
        "wires": [
            [
                "42a05672154abfc9"
            ]
        ]
    },
    {
        "id": "9a89299105ec8eb3",
        "type": "inject",
        "z": "cd837e6a23717c9a",
        "name": "AJUDA_MAQ-02",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "device",
                "v": "DF3027",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "1",
        "payloadType": "num",
        "x": 260,
        "y": 320,
        "wires": [
            [
                "42a05672154abfc9"
            ]
        ]
    },
    {
        "id": "ce79bcd6405af7df",
        "type": "inject",
        "z": "cd837e6a23717c9a",
        "name": "LIDER CIENTE_MAQ-02",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "device",
                "v": "DF3027",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "2",
        "payloadType": "num",
        "x": 230,
        "y": 420,
        "wires": [
            [
                "42a05672154abfc9"
            ]
        ]
    },
    {
        "id": "f96550a4ff5ee82a",
        "type": "inject",
        "z": "cd837e6a23717c9a",
        "name": "RESOLVIDO_MAQ-02",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "device",
                "v": "DF3027",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "num",
        "x": 240,
        "y": 500,
        "wires": [
            [
                "42a05672154abfc9"
            ]
        ]
    },
    {
        "id": "acb63fd816c94261",
        "type": "inject",
        "z": "cd837e6a23717c9a",
        "name": "CANCELA AJUDA_MAQ-02",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "device",
                "v": "DF3027",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "num",
        "x": 220,
        "y": 360,
        "wires": [
            [
                "42a05672154abfc9"
            ]
        ]
    },
    {
        "id": "2287f35e5e9fc08c",
        "type": "inject",
        "z": "cd837e6a23717c9a",
        "name": "AJUDA_MAQ-03",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "device",
                "v": "DF2472",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "1",
        "payloadType": "num",
        "x": 260,
        "y": 580,
        "wires": [
            [
                "42a05672154abfc9"
            ]
        ]
    },
    {
        "id": "bb8641f07cb28783",
        "type": "inject",
        "z": "cd837e6a23717c9a",
        "name": "LIDER CIENTE_MAQ-03",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "device",
                "v": "DF2472",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "2",
        "payloadType": "num",
        "x": 230,
        "y": 680,
        "wires": [
            [
                "42a05672154abfc9"
            ]
        ]
    },
    {
        "id": "7d3879f3607c785a",
        "type": "inject",
        "z": "cd837e6a23717c9a",
        "name": "RESOLVIDO_MAQ-03",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "device",
                "v": "DF2472",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "num",
        "x": 240,
        "y": 760,
        "wires": [
            [
                "42a05672154abfc9"
            ]
        ]
    },
    {
        "id": "e3812f8bd91fbd32",
        "type": "inject",
        "z": "cd837e6a23717c9a",
        "name": "CANCELA AJUDA_MAQ-03",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "device",
                "v": "DF2472",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "num",
        "x": 220,
        "y": 620,
        "wires": [
            [
                "42a05672154abfc9"
            ]
        ]
    },
    {
        "id": "4997bd38e7e6d49d",
        "type": "inject",
        "z": "cd837e6a23717c9a",
        "name": "AJUDA_MAQ-04",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "device",
                "v": "DF1207",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "1",
        "payloadType": "num",
        "x": 260,
        "y": 840,
        "wires": [
            [
                "42a05672154abfc9"
            ]
        ]
    },
    {
        "id": "7cc54474d33b42f8",
        "type": "inject",
        "z": "cd837e6a23717c9a",
        "name": "LIDER CIENTE_MAQ-04",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "device",
                "v": "DF1207",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "2",
        "payloadType": "num",
        "x": 230,
        "y": 940,
        "wires": [
            [
                "42a05672154abfc9"
            ]
        ]
    },
    {
        "id": "689f170a5f7eb2a1",
        "type": "inject",
        "z": "cd837e6a23717c9a",
        "name": "RESOLVIDO_MAQ-04",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "device",
                "v": "DF1207",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "num",
        "x": 240,
        "y": 1020,
        "wires": [
            [
                "42a05672154abfc9"
            ]
        ]
    },
    {
        "id": "d2af2a2c22af86c0",
        "type": "inject",
        "z": "cd837e6a23717c9a",
        "name": "CANCELA AJUDA_MAQ-04",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "device",
                "v": "DF1207",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "num",
        "x": 220,
        "y": 880,
        "wires": [
            [
                "42a05672154abfc9"
            ]
        ]
    },
    {
        "id": "470467bed54a0b77",
        "type": "inject",
        "z": "cd837e6a23717c9a",
        "name": "AJUDA_MAQ-05",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "device",
                "v": "DF5434",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "1",
        "payloadType": "num",
        "x": 260,
        "y": 1100,
        "wires": [
            [
                "42a05672154abfc9"
            ]
        ]
    },
    {
        "id": "4c5215a23e769d38",
        "type": "inject",
        "z": "cd837e6a23717c9a",
        "name": "LIDER CIENTE_MAQ-05",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "device",
                "v": "DF5434",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "2",
        "payloadType": "num",
        "x": 230,
        "y": 1200,
        "wires": [
            [
                "42a05672154abfc9"
            ]
        ]
    },
    {
        "id": "ea387a291c3ee494",
        "type": "inject",
        "z": "cd837e6a23717c9a",
        "name": "RESOLVIDO_MAQ-05",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "device",
                "v": "DF5434",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "num",
        "x": 240,
        "y": 1280,
        "wires": [
            [
                "42a05672154abfc9"
            ]
        ]
    },
    {
        "id": "d1721a7e224ddc6e",
        "type": "inject",
        "z": "cd837e6a23717c9a",
        "name": "CANCELA AJUDA_MAQ-05",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "device",
                "v": "DF5434",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "num",
        "x": 220,
        "y": 1140,
        "wires": [
            [
                "42a05672154abfc9"
            ]
        ]
    },
    {
        "id": "42a05672154abfc9",
        "type": "function",
        "z": "cd837e6a23717c9a",
        "name": "Andon Status",
        "func": "let andon\nlet device=msg.device;\n\nmsg.topic=\"cmnd/connectv1_\" + device + \"/Script\";\n\nif (msg.payload==0) {\n    andon=\">c=0\";\n}\n\nif (msg.payload == 1) {\n    andon = \">c=2\";\n}\n\nif (msg.payload == 2) {\n    andon = \">c=4\";\n}\n\nif (msg.payload == 3) {\n    andon = \">c=3\";\n}\n\nmsg.payload=andon;\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 680,
        "wires": [
            [
                "7c47f60d45d99154"
            ]
        ]
    },
    {
        "id": "cace5604410835ee",
        "type": "inject",
        "z": "cd837e6a23717c9a",
        "name": "ESCALONA_MAQ-01",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "device",
                "v": "DF1F9A",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "3",
        "payloadType": "num",
        "x": 240,
        "y": 200,
        "wires": [
            [
                "42a05672154abfc9"
            ]
        ]
    },
    {
        "id": "60f783b784726bfe",
        "type": "inject",
        "z": "cd837e6a23717c9a",
        "name": "ESCALONA_MAQ-02",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "device",
                "v": "DF3027",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "3",
        "payloadType": "num",
        "x": 240,
        "y": 460,
        "wires": [
            [
                "42a05672154abfc9"
            ]
        ]
    },
    {
        "id": "486675236efabed7",
        "type": "inject",
        "z": "cd837e6a23717c9a",
        "name": "ESCALONA_MAQ-03",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "device",
                "v": "DF2472",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "3",
        "payloadType": "num",
        "x": 240,
        "y": 720,
        "wires": [
            [
                "42a05672154abfc9"
            ]
        ]
    },
    {
        "id": "f8077c79f778a0ea",
        "type": "inject",
        "z": "cd837e6a23717c9a",
        "name": "ESCALONA_MAQ-04",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "device",
                "v": "DF1207",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "3",
        "payloadType": "num",
        "x": 240,
        "y": 980,
        "wires": [
            [
                "42a05672154abfc9"
            ]
        ]
    },
    {
        "id": "d50f6ecbc6ae513a",
        "type": "inject",
        "z": "cd837e6a23717c9a",
        "name": "ESCALONA_MAQ-05",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "device",
                "v": "DF5434",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "3",
        "payloadType": "num",
        "x": 240,
        "y": 1240,
        "wires": [
            [
                "42a05672154abfc9"
            ]
        ]
    },
    {
        "id": "993f101553488a70",
        "type": "mqtt in",
        "z": "cd837e6a23717c9a",
        "name": "",
        "topic": "",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "58ba0cb992798c1c",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 1,
        "x": 590,
        "y": 1420,
        "wires": [
            [
                "fc625c6c8fd354e6"
            ]
        ]
    },
    {
        "id": "e12587c5693792f5",
        "type": "inject",
        "z": "cd837e6a23717c9a",
        "name": "Machines",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "[\"DF1F9A\",\"DF3027\",\"DF2472\",\"DF1207\",\"DF5434\"]",
        "payloadType": "json",
        "x": 240,
        "y": 1420,
        "wires": [
            [
                "122f261f84582e77"
            ]
        ]
    },
    {
        "id": "122f261f84582e77",
        "type": "function",
        "z": "cd837e6a23717c9a",
        "name": "Array LWT",
        "func": "if (Array.isArray(msg.payload)) {\n    // Verifica se msg.payload √© um array\n\n    // Loop atrav√©s do array recebido\n    for (var i = 0; i < msg.payload.length; i++) {\n        // Constr√≥i o t√≥pico com base no elemento atual do array\n        var elemento = msg.payload[i];\n        var topic = \"tele/connectv1_\" + elemento + \"/LWT\";\n\n        // Cria uma nova mensagem de sa√≠da\n        var novaMensagem = {\n            payload: elemento,\n            topic: topic,\n            action: \"subscribe\"\n        };\n\n        // Envia a nova mensagem para o pr√≥ximo n√≥\n        node.send(novaMensagem);\n    }\n} else {\n    // Se msg.payload n√£o for um array, retorna uma mensagem de erro\n    node.error(\"O valor n√£o √© um array v√°lido.\");\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 1420,
        "wires": [
            [
                "993f101553488a70"
            ]
        ]
    },
    {
        "id": "fc625c6c8fd354e6",
        "type": "function",
        "z": "cd837e6a23717c9a",
        "name": "Parse Serial Number",
        "func": "parseSerialNumber(msg);\n\nfunction parseSerialNumber(msg) {\n    let originalserialNumber = msg.topic.split('/');\n    let partSerialNumber = originalserialNumber[1].split('_');\n    let serialNumber = partSerialNumber[1];\n\n    msg.name = {\n        serialNumber: serialNumber\n    }\n\n    return msg;\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 1420,
        "wires": [
            [
                "c2c0650f4fea164c"
            ]
        ]
    },
    {
        "id": "cd10c4d573698514",
        "type": "debug",
        "z": "cd837e6a23717c9a",
        "name": "debug 245",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 850,
        "y": 1320,
        "wires": []
    },
    {
        "id": "c2c0650f4fea164c",
        "type": "function",
        "z": "cd837e6a23717c9a",
        "name": "State",
        "func": "let serialNumber = msg.name.serialNumber;\nlet machines = context.get('machines') || []; // Inicializa machines como um array vazio se n√£o existir\nlet connection = msg.payload;\nlet currentConnection = context.get('currentConnection') || [];\n\nif (serialNumber && typeof serialNumber === \"string\") {\n    // Verifica se o serialNumber j√° existe no array\n    let existingMachineIndex = machines.findIndex(machine => machine.serialNumber === serialNumber);\n\n    if (existingMachineIndex !== -1) {\n        // Se o serialNumber j√° existe, atualiza o estado\n        machines[existingMachineIndex].state = connection;\n    } else {\n        // Se o serialNumber n√£o existe, adiciona um novo objeto ao array\n        let machineInfo = {\n            serialNumber: serialNumber,\n            state: connection\n        };\n        machines.push(machineInfo);\n    }\n\n    context.set('machines', machines);\n\n    msg.machines = {\n        currentMachines: machines\n    };\n\n    return msg;\n}\n\nreturn null;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 1420,
        "wires": [
            [
                "cd10c4d573698514"
            ]
        ]
    }
]